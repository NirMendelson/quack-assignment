{
  "filename": "test5.md",
  "totalChunks": 6359,
  "chunksByType": {
    "window": {
      "count": 238,
      "chunks": [
        {
          "id": "w_0",
          "content": "The `node:fs` module enables interacting with the file system in a\nway modeled on standard POSIX functions. To use the promise-based APIs: To use the callback and sync APIs: All file system operations have synchronous, callback, and promise-based\nforms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).",
          "position": 0,
          "windowSize": 48
        },
        {
          "id": "w_14",
          "content": "The callback form takes a completion callback function as its last\nargument and invokes the operation asynchronously. The arguments passed to\nthe completion callback depend on the method, but the first argument is always\nreserved for an exception. If the operation is completed successfully, then\nthe first argument is `null` or `undefined`. The callback-based versions of the `node:fs` module APIs are preferable over\nthe use of the promise APIs when maximal performance (both in terms of\nexecution time and memory allocation) is required.",
          "position": 0,
          "windowSize": 77
        },
        {
          "id": "w_26",
          "content": "The synchronous APIs block the Node.js event loop and further JavaScript\nexecution until the operation is complete. Exceptions are thrown immediately\nand can be handled using `tryâ€¦catch`, or can be allowed to bubble up.",
          "position": 0,
          "windowSize": 32
        },
        {
          "id": "w_38",
          "content": "The `fs/promises` API provides asynchronous file system methods that return\npromises. The promise APIs use the underlying Node.js threadpool to perform file\nsystem operations off the event loop thread. These operations are not\nsynchronized or threadsafe. Care must be taken when performing multiple\nconcurrent modifications on the same file or data corruption may occur.",
          "position": 0,
          "windowSize": 50
        },
        {
          "id": "w_53",
          "content": "A {FileHandle} object is an object wrapper for a numeric file descriptor. Instances of the {FileHandle} object are created by the `fsPromises.open()`\nmethod. All {FileHandle} objects are {EventEmitter}s. If a {FileHandle} is not closed using the `filehandle.close()` method, it will\ntry to automatically close the file descriptor and emit a process warning,\nhelping to prevent memory leaks. Please do not rely on this behavior because\nit can be unreliable and the file may not be closed. Instead, always explicitly\nclose {FileHandle}s. Node.js may change this behavior in the future.",
          "position": 0,
          "windowSize": 84
        },
        {
          "id": "w_82",
          "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile. **Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success. Alias of [`filehandle.writeFile()`][]. When operating on file handles, the mode cannot be changed from what it was set\nto with [`fsPromises.open()`][]. Therefore, this is equivalent to\n[`filehandle.writeFile()`][].",
          "position": 0,
          "windowSize": 49
        },
        {
          "id": "w_106",
          "content": "`mode` {integer} the file mode bit mask. Returns: {Promise} Fulfills with `undefined` upon success. Modifies the permissions on the file. See chmod(2).",
          "position": 0,
          "windowSize": 22
        },
        {
          "id": "w_118",
          "content": "`uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Returns: {Promise} Fulfills with `undefined` upon success. Changes the ownership of the file. A wrapper for chown(2).",
          "position": 0,
          "windowSize": 33
        },
        {
          "id": "w_133",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Closes the file handle after waiting for any pending operation on the handle to\ncomplete.",
          "position": 0,
          "windowSize": 21
        },
        {
          "id": "w_139",
          "content": "`options` {Object}\n* `encoding` {string} **Default:** `null`\n* `autoClose` {boolean} **Default:** `true`\n* `emitClose` {boolean} **Default:** `true`\n* `start` {integer}\n* `end` {integer} **Default:** `Infinity`\n* `highWaterMark` {integer} **Default:** `64 * 1024`\n* `signal` {AbortSignal|undefined} **Default:** `undefined` Returns: {fs.ReadStream} `options` can include `start` and `end` values to read a range of bytes from\nthe file instead of the entire file. Both `start` and `end` are inclusive and\nstart counting at 0, allowed values are in the\n\\[0, [`Number.MAX_SAFE_INTEGER`][]] range. If `start` is\nomitted or `undefined`, `filehandle.createReadStream()` reads sequentially from\nthe current file position. The `encoding` can be any one of those accepted by\n{Buffer}. If the `FileHandle` points to a character device that only supports blocking\nreads (such as keyboard or sound card), read operations do not finish until data\nis available. This can prevent the process from exiting and the stream from\nclosing naturally. By default, the stream will emit a `'close'` event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior. If `autoClose` is false, then the file descriptor won't be closed, even if\nthere's an error. It is the application's responsibility to close it and make\nsure there's no file descriptor leak. If `autoClose` is set to true (default\nbehavior), on `'error'` or `'end'` the file descriptor will be closed\nautomatically. An example to read the last 10 bytes of a file which is 100 bytes long:",
          "position": 0,
          "windowSize": 216
        },
        {
          "id": "w_140",
          "content": "file descriptor leak. If `autoClose` is set to true (default\nbehavior), on `'error'` or `'end'` the file descriptor will be closed\nautomatically. An example to read the last 10 bytes of a file which is 100 bytes long:",
          "position": 180,
          "windowSize": 36
        },
        {
          "id": "w_188",
          "content": "`options` {Object}\n* `encoding` {string} **Default:** `'utf8'`\n* `autoClose` {boolean} **Default:** `true`\n* `emitClose` {boolean} **Default:** `true`\n* `start` {integer}\n* `highWaterMark` {number} **Default:** `16384`\n* `flush` {boolean} If `true`, the underlying file descriptor is flushed\n  prior to closing it. **Default:** `false`. Returns: {fs.WriteStream} `options` may also include a `start` option to allow writing data at some\nposition past the beginning of the file, allowed values are in the\n\\[0, [`Number.MAX_SAFE_INTEGER`][]] range. Modifying a file rather than\nreplacing it may require the `flags` `open` option to be set to `r+` rather than\nthe default `r`. The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'`\nthe file descriptor will be closed automatically. If `autoClose` is false,\nthen the file descriptor won't be closed, even if there's an error.\nIt is the application's responsibility to close it and make sure there's no\nfile descriptor leak. By default, the stream will emit a `'close'` event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior.",
          "position": 0,
          "windowSize": 168
        },
        {
          "id": "w_227",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Forces all currently queued I/O operations associated with the file to the\noperating system's synchronized I/O completion state. Refer to the POSIX\nfdatasync(2) documentation for details. Unlike `filehandle.sync` this method does not flush modified metadata.",
          "position": 0,
          "windowSize": 40
        },
        {
          "id": "w_244",
          "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the\nfile data read. `offset` {integer} The location in the buffer at which to start filling.\n**Default:** `0` `length` {integer} The number of bytes to read. **Default:**\n`buffer.byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data\nfrom the file. If `null` or `-1`, data will be read from the current file\nposition, and the position will be updated. If `position` is a non-negative\ninteger, the current file position will remain unchanged.\n**Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties:\n* `bytesRead` {integer} The number of bytes read\n* `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer`\n  argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the\nnumber of bytes read is zero.",
          "position": 0,
          "windowSize": 137
        },
        {
          "id": "w_274",
          "content": "`options` {Object}\n* `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the\n  file data read. **Default:** `Buffer.alloc(16384)`\n* `offset` {integer} The location in the buffer at which to start filling.\n  **Default:** `0`\n* `length` {integer} The number of bytes to read. **Default:**\n  `buffer.byteLength - offset`\n* `position` {integer|bigint|null} The location where to begin reading data\n  from the file. If `null` or `-1`, data will be read from the current file\n  position, and the position will be updated. If `position` is a non-negative\n  integer, the current file position will remain unchanged.\n  **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties:\n* `bytesRead` {integer} The number of bytes read\n* `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer`\n  argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the\nnumber of bytes read is zero.",
          "position": 0,
          "windowSize": 155
        },
        {
          "id": "w_307",
          "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the\nfile data read. `options` {Object}\n* `offset` {integer} The location in the buffer at which to start filling.\n  **Default:** `0`\n* `length` {integer} The number of bytes to read. **Default:**\n  `buffer.byteLength - offset`\n* `position` {integer|bigint|null} The location where to begin reading data\n  from the file. If `null` or `-1`, data will be read from the current file\n  position, and the position will be updated. If `position` is a non-negative\n  integer, the current file position will remain unchanged.\n  **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties:\n* `bytesRead` {integer} The number of bytes read\n* `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer`\n  argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the\nnumber of bytes read is zero.",
          "position": 0,
          "windowSize": 151
        },
        {
          "id": "w_337",
          "content": "`options` {Object}\n* `autoClose` {boolean} When true, causes the {FileHandle} to be closed when the\n  stream is closed. **Default:** `false` Returns: {ReadableStream} Returns a byte-oriented `ReadableStream` that may be used to read the file's\ncontents. An error will be thrown if this method is called more than once or is called\nafter the `FileHandle` is closed or closing. While the `ReadableStream` will read the file to completion, it will not\nclose the `FileHandle` automatically. User code must still call the\n`fileHandle.close()` method unless the `autoClose` option is set to `true`.",
          "position": 0,
          "windowSize": 86
        },
        {
          "id": "w_358",
          "content": "`options` {Object|string}\n* `encoding` {string|null} **Default:** `null`\n* `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills upon a successful read with the contents of the\nfile. If no encoding is specified (using `options.encoding`), the data is\nreturned as a {Buffer} object. Otherwise, the data will be a string. Asynchronously reads the entire contents of a file. If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support reading. If one or more `filehandle.read()` calls are made on a file handle and then a\n`filehandle.readFile()` call is made, the data will be read from the current\nposition till the end of the file. It doesn't always read from the beginning\nof the file.",
          "position": 0,
          "windowSize": 111
        },
        {
          "id": "w_391",
          "content": "`options` {Object}\n* `encoding` {string} **Default:** `null`\n* `autoClose` {boolean} **Default:** `true`\n* `emitClose` {boolean} **Default:** `true`\n* `start` {integer}\n* `end` {integer} **Default:** `Infinity`\n* `highWaterMark` {integer} **Default:** `64 * 1024` Returns: {readline.InterfaceConstructor} Convenience method to create a `readline` interface and stream over the file.\nSee [`filehandle.createReadStream()`][] for the options.",
          "position": 0,
          "windowSize": 44
        },
        {
          "id": "w_406",
          "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where\nthe data should be read from. If `position` is not a `number`, the data will\nbe read from the current position. **Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties:\n* `bytesRead` {integer} the number of bytes read\n* `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing\n  a reference to the `buffers` input. Read from a file and write to an array of {ArrayBufferView}s",
          "position": 0,
          "windowSize": 73
        },
        {
          "id": "w_418",
          "content": "`options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with an {fs.Stats} for the file.",
          "position": 0,
          "windowSize": 28
        },
        {
          "id": "w_433",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Request that all data for the open file descriptor is flushed to the storage\ndevice. The specific implementation is operating system and device specific.\nRefer to the POSIX fsync(2) documentation for more detail.",
          "position": 0,
          "windowSize": 38
        },
        {
          "id": "w_445",
          "content": "`len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success. Truncates the file. If the file was larger than `len` bytes, only the first `len` bytes will be\nretained in the file. The following example retains only the first four bytes of the file: If the file previously was shorter than `len` bytes, it is extended, and the\nextended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
          "position": 0,
          "windowSize": 74
        },
        {
          "id": "w_463",
          "content": "`atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Change the file system timestamps of the object referenced by the {FileHandle}\nthen fulfills the promise with no arguments upon success.",
          "position": 0,
          "windowSize": 26
        },
        {
          "id": "w_469",
          "content": "`buffer` {Buffer|TypedArray|DataView} `offset` {integer} The start position from within `buffer` where the data\nto write begins. `length` {integer} The number of bytes from `buffer` to write. **Default:**\n`buffer.byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the\ndata from `buffer` should be written. If `position` is not a `number`,\nthe data will be written at the current position. See the POSIX pwrite(2)\ndocumentation for more detail. **Default:** `null` Returns: {Promise} Write `buffer` to the file. The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the\n`buffer` written. It is unsafe to use `filehandle.write()` multiple times on the same file\nwithout waiting for the promise to be fulfilled (or rejected). For this\nscenario, use [`filehandle.createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.",
          "position": 0,
          "windowSize": 154
        },
        {
          "id": "w_517",
          "content": "`buffer` {Buffer|TypedArray|DataView} `options` {Object}\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|null} **Default:** `null` Returns: {Promise} Write `buffer` to the file. Similar to the above `filehandle.write` function, this version takes an\noptional `options` object. If no `options` object is specified, it will\ndefault with the above values.",
          "position": 0,
          "windowSize": 49
        },
        {
          "id": "w_535",
          "content": "`string` {string} `position` {integer|null} The offset from the beginning of the file where the\ndata from `string` should be written. If `position` is not a `number` the\ndata will be written at the current position. See the POSIX pwrite(2)\ndocumentation for more detail. **Default:** `null` `encoding` {string} The expected string encoding. **Default:** `'utf8'` Returns: {Promise} Write `string` to the file. If `string` is not a string, the promise is\nrejected with an error. The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written. It is unsafe to use `filehandle.write()` multiple times on the same file\nwithout waiting for the promise to be fulfilled (or rejected). For this\nscenario, use [`filehandle.createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.",
          "position": 0,
          "windowSize": 149
        },
        {
          "id": "w_580",
          "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string}\n* `encoding` {string|null} The expected character encoding when `data` is a\n  string. **Default:** `'utf8'`\n* `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile. **Default:** `undefined` Returns: {Promise} Asynchronously writes data to a file, replacing the file if it already exists.\n`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.\nThe promise is fulfilled with no arguments upon success. If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support writing. It is unsafe to use `filehandle.writeFile()` multiple times on the same file\nwithout waiting for the promise to be fulfilled (or rejected). If one or more `filehandle.write()` calls are made on a file handle and then a\n`filehandle.writeFile()` call is made, the data will be written from the\ncurrent position till the end of the file. It doesn't always write from the\nbeginning of the file.",
          "position": 0,
          "windowSize": 140
        },
        {
          "id": "w_622",
          "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the\ndata from `buffers` should be written. If `position` is not a `number`,\nthe data will be written at the current position. **Default:** `null` Returns: {Promise} Write an array of {ArrayBufferView}s to the file. The promise is fulfilled with an object containing a two properties: `bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers`\ninput. It is unsafe to call `writev()` multiple times on the same file without waiting\nfor the promise to be fulfilled (or rejected). On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.",
          "position": 0,
          "windowSize": 120
        },
        {
          "id": "w_654",
          "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.constants.F_OK` Returns: {Promise} Fulfills with `undefined` upon success. Tests a user's permissions for the file or directory specified by `path`.\nThe `mode` argument is an optional integer that specifies the accessibility\nchecks to be performed. `mode` should be either the value `fs.constants.F_OK`\nor a mask consisting of the bitwise OR of any of `fs.constants.R_OK`,\n`fs.constants.W_OK`, and `fs.constants.X_OK` (e.g.\n`fs.constants.W_OK | fs.constants.R_OK`). Check [File access constants][] for\npossible values of `mode`. If the accessibility check is successful, the promise is fulfilled with no\nvalue. If any of the accessibility checks fail, the promise is rejected\nwith an {Error} object. The following example checks if the file\n`/etc/passwd` can be read and written by the current process. Using `fsPromises.access()` to check for the accessibility of a file before\ncalling `fsPromises.open()` is not recommended. Doing so introduces a race\ncondition, since other processes may change the file's state between the two\ncalls. Instead, user code should open/read/write the file directly and handle\nthe error raised if the file is not accessible.",
          "position": 0,
          "windowSize": 160
        },
        {
          "id": "w_705",
          "content": "`path` {string|Buffer|URL|FileHandle} filename or {FileHandle} `data` {string|Buffer} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`.\n* `flush` {boolean} If `true`, the underlying file descriptor is flushed\n  prior to closing it. **Default:** `false`. Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously append data to a file, creating the file if it does not yet\nexist. `data` can be a string or a {Buffer}. If `options` is a string, then it specifies the `encoding`. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. The `path` may be specified as a {FileHandle} that has been opened\nfor appending (using `fsPromises.open()`).",
          "position": 0,
          "windowSize": 111
        },
        {
          "id": "w_748",
          "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} Optional modifiers that specify the behavior of the copy\noperation. It is possible to create a mask consisting of the bitwise OR of\ntwo or more values (e.g.\n`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`)\n**Default:** `0`.\n* `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest`\n  already exists.\n* `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create\n  a copy-on-write reflink. If the platform does not support copy-on-write,\n  then a fallback copy mechanism is used.\n* `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\n  create a copy-on-write reflink. If the platform does not support\n  copy-on-write, then the operation will fail. Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it\nalready exists. No guarantees are made about the atomicity of the copy operation. If an\nerror occurs after the destination file has been opened for writing, an attempt\nwill be made to remove the destination.",
          "position": 0,
          "windowSize": 159
        },
        {
          "id": "w_790",
          "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object}\n* `dereference` {boolean} dereference symlinks. **Default:** `false`.\n* `errorOnExist` {boolean} when `force` is `false`, and the destination\n  exists, throw an error. **Default:** `false`.\n* `filter` {Function} Function to filter copied files/directories. Return\n  `true` to copy the item, `false` to ignore it. When ignoring a directory,\n  all of its contents will be skipped as well. Can also return a `Promise`\n  that resolves to `true` or `false` **Default:** `undefined`.\n  * `src` {string} source path to copy.\n  * `dest` {string} destination path to copy to.\n  * Returns: {boolean|Promise} A value that is coercible to `boolean` or\n    a `Promise` that fulfils with such value.\n* `force` {boolean} overwrite existing file or directory. The copy\n  operation will ignore errors if you set this to false and the destination\n  exists. Use the `errorOnExist` option to change this behavior.\n  **Default:** `true`.\n* `mode` {integer} modifiers for copy operation. **Default:** `0`.\n  See `mode` flag of [`fsPromises.copyFile()`][].\n* `preserveTimestamps` {boolean} When `true` timestamps from `src` will\n  be preserved. **Default:** `false`.\n* `recursive` {boolean} copy directories recursively **Default:** `false`\n* `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will\n  be skipped. **Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
          "position": 0,
          "windowSize": 244
        },
        {
          "id": "w_791",
          "content": " be preserved. **Default:** `false`.\n* `recursive` {boolean} copy directories recursively **Default:** `false`\n* `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will\n  be skipped. **Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
          "position": 180,
          "windowSize": 64
        },
        {
          "id": "w_872",
          "content": "`pattern` {string|string\\[]} `options` {Object}\n* `cwd` {string|URL} current working directory. **Default:** `process.cwd()`\n* `exclude` {Function|string\\[]} Function to filter out files/directories or a\n  list of glob patterns to be excluded. If a function is provided, return\n  `true` to exclude the item, `false` to include it. **Default:** `undefined`.\n  If a string array is provided, each string should be a glob pattern that\n  specifies paths to exclude. Note: Negation patterns (e.g., '!foo.js') are\n  not supported.\n* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents,\n  `false` otherwise. **Default:** `false`. Returns: {AsyncIterator} An AsyncIterator that yields the paths of files\nthat match the pattern.",
          "position": 0,
          "windowSize": 104
        },
        {
          "id": "w_905",
          "content": "`path` {string|Buffer|URL} `mode` {integer} Returns: {Promise} Fulfills with `undefined` upon success. Changes the permissions on a symbolic link. This method is only implemented on macOS.",
          "position": 0,
          "windowSize": 25
        },
        {
          "id": "w_914",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise}  Fulfills with `undefined` upon success. Changes the ownership on a symbolic link.",
          "position": 0,
          "windowSize": 21
        },
        {
          "id": "w_920",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise}  Fulfills with `undefined` upon success. Changes the access and modification times of a file in the same way as\n[`fsPromises.utimes()`][], with the difference that if the path refers to a\nsymbolic link, then the link is not dereferenced: instead, the timestamps of\nthe symbolic link itself are changed.",
          "position": 0,
          "windowSize": 54
        },
        {
          "id": "w_929",
          "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise}  Fulfills with `undefined` upon success. Creates a new link from the `existingPath` to the `newPath`. See the POSIX\nlink(2) documentation for more detail.",
          "position": 0,
          "windowSize": 29
        },
        {
          "id": "w_938",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise}  Fulfills with the {fs.Stats} object for the given\nsymbolic link `path`. Equivalent to [`fsPromises.stat()`][] unless `path` refers to a symbolic link,\nin which case the link itself is stat-ed, not the file that it refers to.\nRefer to the POSIX lstat(2) document for more detail.",
          "position": 0,
          "windowSize": 66
        },
        {
          "id": "w_962",
          "content": "`path` {string|Buffer|URL} `options` {Object|integer}\n* `recursive` {boolean} **Default:** `false`\n* `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. Returns: {Promise} Upon success, fulfills with `undefined` if `recursive`\nis `false`, or the first directory path created if `recursive` is `true`. Asynchronously creates a directory. The optional `options` argument can be an integer specifying `mode` (permission\nand sticky bits), or an object with a `mode` property and a `recursive`\nproperty indicating whether parent directories should be created. Calling\n`fsPromises.mkdir()` when `path` is a directory that exists results in a\nrejection only when `recursive` is false.",
          "position": 0,
          "windowSize": 86
        },
        {
          "id": "w_986",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {Promise}  Fulfills with a string containing the file system path\nof the newly created temporary directory. Creates a unique temporary directory. A unique directory name is generated by\nappending six random characters to the end of the provided `prefix`. Due to\nplatform inconsistencies, avoid trailing `X` characters in `prefix`. Some\nplatforms, notably the BSDs, can return more than six random characters, and\nreplace trailing `X` characters in `prefix` with random characters. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use. The `fsPromises.mkdtemp()` method will append the six randomly selected\ncharacters directly to the `prefix` string. For instance, given a directory\n`/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the\n`prefix` must end with a trailing platform-specific path separator\n(`require('node:path').sep`).",
          "position": 0,
          "windowSize": 138
        },
        {
          "id": "w_1013",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a Promise for an async-disposable Object:\n* `path` {string} The path of the created directory.\n* `remove` {AsyncFunction} A function which removes the created directory.\n* `[Symbol.asyncDispose]` {AsyncFunction} The same as `remove`. The resulting Promise holds an async-disposable object whose `path` property\nholds the created directory path. When the object is disposed, the directory\nand its contents will be removed asynchronously if it still exists. If the\ndirectory cannot be deleted, disposal will throw an error. The object has an\nasync `remove()` method which will perform the same task. Both this function and the disposal function on the resulting object are\nasync, so it should be used with `await` + `await using` as in\n`await using dir = await fsPromises.mkdtempDisposable('prefix')`. For detailed information, see the documentation of [`fsPromises.mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use.",
          "position": 0,
          "windowSize": 154
        },
        {
          "id": "w_1052",
          "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].\n**Default:** `'r'`. `mode` {string|integer} Sets the file mode (permission and sticky bits)\nif the file is created. **Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object. Opens a {FileHandle}. Refer to the POSIX open(2) documentation for more detail. Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented\nby [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n[this MSDN page][MSDN-Using-Streams].",
          "position": 0,
          "windowSize": 90
        },
        {
          "id": "w_1082",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `bufferSize` {number} Number of directory entries that are buffered\n  internally when reading from the directory. Higher values lead to better\n  performance but higher memory usage. **Default:** `32`\n* `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable}\n  containing all sub files and directories. **Default:** `false` Returns: {Promise}  Fulfills with an {fs.Dir}. Asynchronously open a directory for iterative scanning. See the POSIX\nopendir(3) documentation for more detail. Creates an {fs.Dir}, which contains all further functions for reading from\nand cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the\ndirectory and subsequent read operations. Example using async iteration: When using the async iterator, the {fs.Dir} object will be automatically\nclosed after the iterator exits.",
          "position": 0,
          "windowSize": 125
        },
        {
          "id": "w_1118",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'`\n* `withFileTypes` {boolean} **Default:** `false`\n* `recursive` {boolean} If `true`, reads the contents of a directory\n  recursively. In recursive mode, it will list all files, sub files, and\n  directories. **Default:** `false`. Returns: {Promise}  Fulfills with an array of the names of the files in\nthe directory excluding `'.'` and `'..'`. Reads the contents of a directory. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe filenames. If the `encoding` is set to `'buffer'`, the filenames returned\nwill be passed as {Buffer} objects. If `options.withFileTypes` is set to `true`, the returned array will contain\n{fs.Dirent} objects.",
          "position": 0,
          "windowSize": 116
        },
        {
          "id": "w_1151",
          "content": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` `options` {Object|string}\n* `encoding` {string|null} **Default:** `null`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`.\n* `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise}  Fulfills with the contents of the file. Asynchronously reads the entire contents of a file. If no encoding is specified (using `options.encoding`), the data is returned\nas a {Buffer} object. Otherwise, the data will be a string. If `options` is a string, then it specifies the encoding. When the `path` is a directory, the behavior of `fsPromises.readFile()` is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory's contents will be\nreturned. An example of reading a `package.json` file located in the same directory of the\nrunning code: It is possible to abort an ongoing `readFile` using an {AbortSignal}. If a\nrequest is aborted the promise returned is rejected with an `AbortError`: Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.readFile` performs. Any specified {FileHandle} has to support reading.",
          "position": 0,
          "windowSize": 172
        },
        {
          "id": "w_1208",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the `linkString` upon success. Reads the contents of the symbolic link referred to by `path`. See the POSIX\nreadlink(2) documentation for more detail. The promise is fulfilled with the\n`linkString` upon success. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe link path returned. If the `encoding` is set to `'buffer'`, the link path\nreturned will be passed as a {Buffer} object.",
          "position": 0,
          "windowSize": 86
        },
        {
          "id": "w_1226",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {Promise}  Fulfills with the resolved path upon success. Determines the actual location of `path` using the same semantics as the\n`fs.realpath.native()` function. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe path. If the `encoding` is set to `'buffer'`, the path returned will be\npassed as a {Buffer} object. On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on `/proc` in order for this function to work. Glibc does not have\nthis restriction.",
          "position": 0,
          "windowSize": 112
        },
        {
          "id": "w_1258",
          "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to\nbe options for `recursive`, `maxBusyTries`, and `emfileWait` but they were\ndeprecated and removed. The `options` argument is still accepted for\nbackwards compatibility but it is not used. Returns: {Promise} Fulfills with `undefined` upon success. Removes the directory identified by `path`. Using `fsPromises.rmdir()` on a file (not a directory) results in the\npromise being rejected with an `ENOENT` error on Windows and an `ENOTDIR`\nerror on POSIX. To get a behavior similar to the `rm -rf` Unix command, use\n[`fsPromises.rm()`][] with options `{ recursive: true, force: true }`.",
          "position": 0,
          "windowSize": 94
        },
        {
          "id": "w_1285",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `force` {boolean} When `true`, exceptions will be ignored if `path` does\n  not exist. **Default:** `false`.\n* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\n  `EPERM` error is encountered, Node.js will retry the operation with a linear\n  backoff wait of `retryDelay` milliseconds longer on each try. This option\n  represents the number of retries. This option is ignored if the `recursive`\n  option is not `true`. **Default:** `0`.\n* `recursive` {boolean} If `true`, perform a recursive directory removal. In\n  recursive mode operations are retried on failure. **Default:** `false`.\n* `retryDelay` {integer} The amount of time in milliseconds to wait between\n  retries. This option is ignored if the `recursive` option is not `true`.\n  **Default:** `100`. Returns: {Promise} Fulfills with `undefined` upon success. Removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 0,
          "windowSize": 139
        },
        {
          "id": "w_1330",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise}  Fulfills with the {fs.Stats} object for the\ngiven `path`.",
          "position": 0,
          "windowSize": 32
        },
        {
          "id": "w_1345",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.StatFs} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with the {fs.StatFs} object for the\ngiven `path`.",
          "position": 0,
          "windowSize": 31
        },
        {
          "id": "w_1360",
          "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: {Promise} Fulfills with `undefined` upon success. Creates a symbolic link. The `type` argument is only used on Windows platforms and can be one of `'dir'`,\n`'file'`, or `'junction'`. If the `type` argument is `null`, Node.js will\nautodetect `target` type and use `'file'` or `'dir'`. If the `target` does not\nexist, `'file'` will be used. Windows junction points require the destination\npath to be absolute. When using `'junction'`, the `target` argument will\nautomatically be normalized to absolute path. Junction points on NTFS volumes\ncan only point to directories.",
          "position": 0,
          "windowSize": 90
        },
        {
          "id": "w_1387",
          "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success. Truncates (shortens or extends the length) of the content at `path` to `len`\nbytes.",
          "position": 0,
          "windowSize": 26
        },
        {
          "id": "w_1393",
          "content": "`path` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success. If `path` refers to a symbolic link, then the link is removed without affecting\nthe file or directory to which that link refers. If the `path` refers to a file\npath that is not a symbolic link, the file is deleted. See the POSIX unlink(2)\ndocumentation for more detail.",
          "position": 0,
          "windowSize": 55
        },
        {
          "id": "w_1405",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success. Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time, `Date`s, or a\nnumeric string like `'123456789.0'`. If the value can not be converted to a number, or is `NaN`, `Infinity`, or\n`-Infinity`, an `Error` will be thrown.",
          "position": 0,
          "windowSize": 67
        },
        {
          "id": "w_1420",
          "content": "`filename` {string|Buffer|URL} `options` {string|Object}\n* `persistent` {boolean} Indicates whether the process should continue to run\n  as long as files are being watched. **Default:** `true`.\n* `recursive` {boolean} Indicates whether all subdirectories should be\n  watched, or only the current directory. This applies when a directory is\n  specified, and only on supported platforms (See [caveats][]). **Default:**\n  `false`.\n* `encoding` {string} Specifies the character encoding to be used for the\n  filename passed to the listener. **Default:** `'utf8'`.\n* `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher\n  should stop.\n* `maxQueue` {number} Specifies the number of events to queue between iterations\n  of the {AsyncIterator} returned. **Default:** `2048`.\n* `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be\n  queued than `maxQueue` allows. `'ignore'` means overflow events are dropped and a\n  warning is emitted, while `'throw'` means to throw an exception. **Default:** `'ignore'`. Returns: {AsyncIterator} of objects with the properties:\n* `eventType` {string} The type of change\n* `filename` {string|Buffer|null} The name of the file changed. Returns an async iterator that watches for changes on `filename`, where `filename`\nis either a file or a directory. On most platforms, `'rename'` is emitted whenever a filename appears or\ndisappears in the directory. All the [caveats][] for `fs.watch()` also apply to `fsPromises.watch()`.",
          "position": 0,
          "windowSize": 208
        },
        {
          "id": "w_1421",
          "content": "a file or a directory. On most platforms, `'rename'` is emitted whenever a filename appears or\ndisappears in the directory. All the [caveats][] for `fs.watch()` also apply to `fsPromises.watch()`.",
          "position": 180,
          "windowSize": 28
        },
        {
          "id": "w_1475",
          "content": "`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`.\n* `flush` {boolean} If all data is successfully written to the file, and\n  `flush` is `true`, `filehandle.sync()` is used to flush the data.\n  **Default:** `false`.\n* `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously writes data to a file, replacing the file if it already exists.\n`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object. The `encoding` option is ignored if `data` is a buffer. If `options` is a string, then it specifies the encoding. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. Any specified {FileHandle} has to support writing. It is unsafe to use `fsPromises.writeFile()` multiple times on the same file\nwithout waiting for the promise to be settled. Similarly to `fsPromises.readFile` - `fsPromises.writeFile` is a convenience\nmethod that performs multiple `write` calls internally to write the buffer\npassed to it. For performance sensitive code consider using\n[`fs.createWriteStream()`][] or [`filehandle.createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fsPromises.writeFile()`.\nCancelation is \"best effort\", and some amount of data is likely still\nto be written. Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.writeFile` performs.",
          "position": 0,
          "windowSize": 220
        },
        {
          "id": "w_1476",
          "content": "is possible to use an {AbortSignal} to cancel an `fsPromises.writeFile()`.\nCancelation is \"best effort\", and some amount of data is likely still\nto be written. Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.writeFile` performs.",
          "position": 180,
          "windowSize": 40
        },
        {
          "id": "w_1554",
          "content": "Type: {Object} Returns an object containing commonly used constants for file system\noperations. The object is the same as `fs.constants`. See [FS constants][]\nfor more details.",
          "position": 0,
          "windowSize": 24
        },
        {
          "id": "w_1569",
          "content": "The callback APIs perform all operations asynchronously, without blocking the\nevent loop, then invoke a callback function upon completion or error. The callback APIs use the underlying Node.js threadpool to perform file\nsystem operations off the event loop thread. These operations are not\nsynchronized or threadsafe. Care must be taken when performing multiple\nconcurrent modifications on the same file or data corruption may occur.",
          "position": 0,
          "windowSize": 60
        },
        {
          "id": "w_1584",
          "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.constants.F_OK` `callback` {Function}\n* `err` {Error} Tests a user's permissions for the file or directory specified by `path`.\nThe `mode` argument is an optional integer that specifies the accessibility\nchecks to be performed. `mode` should be either the value `fs.constants.F_OK`\nor a mask consisting of the bitwise OR of any of `fs.constants.R_OK`,\n`fs.constants.W_OK`, and `fs.constants.X_OK` (e.g.\n`fs.constants.W_OK | fs.constants.R_OK`). Check [File access constants][] for\npossible values of `mode`. The final argument, `callback`, is a callback function that is invoked with\na possible error argument. If any of the accessibility checks fail, the error\nargument will be an `Error` object. The following examples check if\n`package.json` exists, and if it is readable or writable. Do not use `fs.access()` to check for the accessibility of a file before calling\n`fs.open()`, `fs.readFile()`, or `fs.writeFile()`. Doing\nso introduces a race condition, since other processes may change the file's\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file is not accessible. **write (NOT RECOMMENDED)** **write (RECOMMENDED)** **read (NOT RECOMMENDED)** **read (RECOMMENDED)** The \"not recommended\" examples above check for accessibility and then use the\nfile; the \"recommended\" examples are better because they use the file directly\nand handle the error, if any. In general, check for the accessibility of a file only if the file will not be\nused directly, for example when its accessibility is a signal from another\nprocess. On Windows, access-control policies (ACLs) on a directory may limit access to\na file or directory. The `fs.access()` function, however, does not check the\nACL and therefore may report that a path is accessible even if the ACL restricts\nthe user from reading or writing to it.",
          "position": 0,
          "windowSize": 268
        },
        {
          "id": "w_1585",
          "content": "the\nfile; the \"recommended\" examples are better because they use the file directly\nand handle the error, if any. In general, check for the accessibility of a file only if the file will not be\nused directly, for example when its accessibility is a signal from another\nprocess. On Windows, access-control policies (ACLs) on a directory may limit access to\na file or directory. The `fs.access()` function, however, does not check the\nACL and therefore may report that a path is accessible even if the ACL restricts\nthe user from reading or writing to it.",
          "position": 180,
          "windowSize": 88
        },
        {
          "id": "w_1669",
          "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`.\n* `flush` {boolean} If `true`, the underlying file descriptor is flushed\n  prior to closing it. **Default:** `false`. `callback` {Function}\n* `err` {Error} Asynchronously append data to a file, creating the file if it does not yet\nexist. `data` can be a string or a {Buffer}. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened\nfor appending (using `fs.open()` or `fs.openSync()`). The file descriptor will\nnot be closed automatically.",
          "position": 0,
          "windowSize": 120
        },
        {
          "id": "w_1711",
          "content": "`path` {string|Buffer|URL} `mode` {string|integer} `callback` {Function}\n* `err` {Error} Asynchronously changes the permissions of a file. No arguments other than a\npossible exception are given to the completion callback. See the POSIX chmod(2) documentation for more detail.",
          "position": 0,
          "windowSize": 35
        },
        {
          "id": "w_1723",
          "content": "The `mode` argument used in both the `fs.chmod()` and `fs.chmodSync()`\nmethods is a numeric bitmask created using a logical OR of the following\nconstants: An easier method of constructing the `mode` is to use a sequence of three\noctal digits (e.g. `765`). The left-most digit (`7` in the example), specifies\nthe permissions for the file owner. The middle digit (`6` in the example),\nspecifies permissions for the group. The right-most digit (`5` in the example),\nspecifies the permissions for others. For example, the octal value `0o765` means: The owner may read, write, and execute the file. The group may read and write the file. Others may read and execute the file. When using raw numbers where file modes are expected, any value larger than\n`0o777` may result in platform-specific behaviors that are not supported to work\nconsistently. Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are\nnot exposed in `fs.constants`. Caveats: on Windows only the write permission can be changed, and the\ndistinction among the permissions of group, owner, or others is not\nimplemented.",
          "position": 0,
          "windowSize": 162
        },
        {
          "id": "w_1768",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function}\n* `err` {Error} Asynchronously changes owner and group of a file. No arguments other than a\npossible exception are given to the completion callback. See the POSIX chown(2) documentation for more detail.",
          "position": 0,
          "windowSize": 38
        },
        {
          "id": "w_1780",
          "content": "`fd` {integer} `callback` {Function}\n* `err` {Error} Closes the file descriptor. No arguments other than a possible exception are\ngiven to the completion callback. Calling `fs.close()` on any file descriptor (`fd`) that is currently in use\nthrough any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
          "position": 0,
          "windowSize": 51
        },
        {
          "id": "w_1798",
          "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation. **Default:** `0`. `callback` {Function}\n* `err` {Error} Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it\nalready exists. No arguments other than a possible exception are given to the\ncallback function. Node.js makes no guarantees about the atomicity of the copy\noperation. If an error occurs after the destination file has been opened for\nwriting, Node.js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`). `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest` already\nexists. `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used. `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support\ncopy-on-write, then the operation will fail.",
          "position": 0,
          "windowSize": 164
        },
        {
          "id": "w_1852",
          "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object}\n* `dereference` {boolean} dereference symlinks. **Default:** `false`.\n* `errorOnExist` {boolean} when `force` is `false`, and the destination\n  exists, throw an error. **Default:** `false`.\n* `filter` {Function} Function to filter copied files/directories. Return\n  `true` to copy the item, `false` to ignore it. When ignoring a directory,\n  all of its contents will be skipped as well. Can also return a `Promise`\n  that resolves to `true` or `false` **Default:** `undefined`.\n  * `src` {string} source path to copy.\n  * `dest` {string} destination path to copy to.\n  * Returns: {boolean|Promise} A value that is coercible to `boolean` or\n    a `Promise` that fulfils with such value.\n* `force` {boolean} overwrite existing file or directory. The copy\n  operation will ignore errors if you set this to false and the destination\n  exists. Use the `errorOnExist` option to change this behavior.\n  **Default:** `true`.\n* `mode` {integer} modifiers for copy operation. **Default:** `0`.\n  See `mode` flag of [`fs.copyFile()`][].\n* `preserveTimestamps` {boolean} When `true` timestamps from `src` will\n  be preserved. **Default:** `false`.\n* `recursive` {boolean} copy directories recursively **Default:** `false`\n* `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will\n  be skipped. **Default:** `false` `callback` {Function}\n* `err` {Error} Asynchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
          "position": 0,
          "windowSize": 241
        },
        {
          "id": "w_1853",
          "content": " be preserved. **Default:** `false`.\n* `recursive` {boolean} copy directories recursively **Default:** `false`\n* `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will\n  be skipped. **Default:** `false` `callback` {Function}\n* `err` {Error} Asynchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
          "position": 180,
          "windowSize": 61
        },
        {
          "id": "w_1934",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `flags` {string} See [support of file system `flags`][]. **Default:**\n  `'r'`.\n* `encoding` {string} **Default:** `null`\n* `fd` {integer|FileHandle} **Default:** `null`\n* `mode` {integer} **Default:** `0o666`\n* `autoClose` {boolean} **Default:** `true`\n* `emitClose` {boolean} **Default:** `true`\n* `start` {integer}\n* `end` {integer} **Default:** `Infinity`\n* `highWaterMark` {integer} **Default:** `64 * 1024`\n* `fs` {Object|null} **Default:** `null`\n* `signal` {AbortSignal|null} **Default:** `null` Returns: {fs.ReadStream} `options` can include `start` and `end` values to read a range of bytes from\nthe file instead of the entire file. Both `start` and `end` are inclusive and\nstart counting at 0, allowed values are in the\n\\[0, [`Number.MAX_SAFE_INTEGER`][]] range. If `fd` is specified and `start` is\nomitted or `undefined`, `fs.createReadStream()` reads sequentially from the\ncurrent file position. The `encoding` can be any one of those accepted by\n{Buffer}. If `fd` is specified, `ReadStream` will ignore the `path` argument and will use\nthe specified file descriptor. This means that no `'open'` event will be\nemitted. `fd` should be blocking; non-blocking `fd`s should be passed to\n{net.Socket}. If `fd` points to a character device that only supports blocking reads\n(such as keyboard or sound card), read operations do not finish until data is\navailable. This can prevent the process from exiting and the stream from\nclosing naturally. By default, the stream will emit a `'close'` event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option, it is possible to override the corresponding `fs`\nimplementations for `open`, `read`, and `close`. When providing the `fs` option,\nan override for `read` is required. If no `fd` is provided, an override for\n`open` is also required. If `autoClose` is `true`, an override for `close` is\nalso required. If `autoClose` is false, then the file descriptor won't be closed, even if\nthere's an error. It",
          "position": 0,
          "windowSize": 280
        },
        {
          "id": "w_1935",
          "content": "can prevent the process from exiting and the stream from\nclosing naturally. By default, the stream will emit a `'close'` event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option, it is possible to override the corresponding `fs`\nimplementations for `open`, `read`, and `close`. When providing the `fs` option,\nan override for `read` is required. If no `fd` is provided, an override for\n`open` is also required. If `autoClose` is `true`, an override for `close` is\nalso required. If `autoClose` is false, then the file descriptor won't be closed, even if\nthere's an error. It is the application's responsibility to close it and make\nsure there's no file descriptor leak. If `autoClose` is set to true (default\nbehavior), on `'error'` or `'end'` the file descriptor will be closed\nautomatically. `mode` sets the file mode (permission and sticky bits), but only if the\nfile was created. An example to read the last 10 bytes of a file which is 100 bytes long: If `options` is a string, then it specifies the encoding.",
          "position": 180,
          "windowSize": 172
        },
        {
          "id": "w_2016",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `flags` {string} See [support of file system `flags`][]. **Default:**\n  `'w'`.\n* `encoding` {string} **Default:** `'utf8'`\n* `fd` {integer|FileHandle} **Default:** `null`\n* `mode` {integer} **Default:** `0o666`\n* `autoClose` {boolean} **Default:** `true`\n* `emitClose` {boolean} **Default:** `true`\n* `start` {integer}\n* `fs` {Object|null} **Default:** `null`\n* `signal` {AbortSignal|null} **Default:** `null`\n* `highWaterMark` {number} **Default:** `16384`\n* `flush` {boolean} If `true`, the underlying file descriptor is flushed\n  prior to closing it. **Default:** `false`. Returns: {fs.WriteStream} `options` may also include a `start` option to allow writing data at some\nposition past the beginning of the file, allowed values are in the\n\\[0, [`Number.MAX_SAFE_INTEGER`][]] range. Modifying a file rather than\nreplacing it may require the `flags` option to be set to `r+` rather than the\ndefault `w`. The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'`\nthe file descriptor will be closed automatically. If `autoClose` is false,\nthen the file descriptor won't be closed, even if there's an error.\nIt is the application's responsibility to close it and make sure there's no\nfile descriptor leak. By default, the stream will emit a `'close'` event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option it is possible to override the corresponding `fs`\nimplementations for `open`, `write`, `writev`, and `close`. Overriding `write()`\nwithout `writev()` can reduce performance as some optimizations (`_writev()`)\nwill be disabled. When providing the `fs` option, overrides for at least one of\n`write` and `writev` are required. If no `fd` option is supplied, an override\nfor `open` is also required. If `autoClose` is `true`, an override for `close`\nis also required. Like {fs.ReadStream}, if `fd` is specified, {fs.WriteStream} will ignore the\n`path` argument and will use the specified",
          "position": 0,
          "windowSize": 280
        },
        {
          "id": "w_2017",
          "content": "event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option it is possible to override the corresponding `fs`\nimplementations for `open`, `write`, `writev`, and `close`. Overriding `write()`\nwithout `writev()` can reduce performance as some optimizations (`_writev()`)\nwill be disabled. When providing the `fs` option, overrides for at least one of\n`write` and `writev` are required. If no `fd` option is supplied, an override\nfor `open` is also required. If `autoClose` is `true`, an override for `close`\nis also required. Like {fs.ReadStream}, if `fd` is specified, {fs.WriteStream} will ignore the\n`path` argument and will use the specified file descriptor. This means that no\n`'open'` event will be emitted. `fd` should be blocking; non-blocking `fd`s\nshould be passed to {net.Socket}. If `options` is a string, then it specifies the encoding.",
          "position": 180,
          "windowSize": 130
        },
        {
          "id": "w_2092",
          "content": "`path` {string|Buffer|URL} `callback` {Function}\n* `exists` {boolean} Test whether or not the element at the given `path` exists by checking with the file system.\nThen call the `callback` argument with either true or false: **The parameters for this callback are not consistent with other Node.js\ncallbacks.** Normally, the first parameter to a Node.js callback is an `err`\nparameter, optionally followed by other parameters. The `fs.exists()` callback\nhas only one boolean parameter. This is one reason `fs.access()` is recommended\ninstead of `fs.exists()`. If `path` is a symbolic link, it is followed. Thus, if `path` exists but points\nto a non-existent element, the callback will receive the value `false`. Using `fs.exists()` to check for the existence of a file before calling\n`fs.open()`, `fs.readFile()`, or `fs.writeFile()` is not recommended. Doing\nso introduces a race condition, since other processes may change the file's\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file does not exist. **write (NOT RECOMMENDED)** **write (RECOMMENDED)** **read (NOT RECOMMENDED)** **read (RECOMMENDED)** The \"not recommended\" examples above check for existence and then use the\nfile; the \"recommended\" examples are better because they use the file directly\nand handle the error, if any. In general, check for the existence of a file only if the file won't be\nused directly, for example when its existence is a signal from another\nprocess.",
          "position": 0,
          "windowSize": 216
        },
        {
          "id": "w_2093",
          "content": "they use the file directly\nand handle the error, if any. In general, check for the existence of a file only if the file won't be\nused directly, for example when its existence is a signal from another\nprocess.",
          "position": 180,
          "windowSize": 36
        },
        {
          "id": "w_2165",
          "content": "`fd` {integer} `mode` {string|integer} `callback` {Function}\n* `err` {Error} Sets the permissions on the file. No arguments other than a possible exception\nare given to the completion callback. See the POSIX fchmod(2) documentation for more detail.",
          "position": 0,
          "windowSize": 34
        },
        {
          "id": "w_2177",
          "content": "`fd` {integer} `uid` {integer} `gid` {integer} `callback` {Function}\n* `err` {Error} Sets the owner of the file. No arguments other than a possible exception are\ngiven to the completion callback. See the POSIX fchown(2) documentation for more detail.",
          "position": 0,
          "windowSize": 36
        },
        {
          "id": "w_2189",
          "content": "`fd` {integer} `callback` {Function}\n* `err` {Error} Forces all currently queued I/O operations associated with the file to the\noperating system's synchronized I/O completion state. Refer to the POSIX\nfdatasync(2) documentation for details. No arguments other than a possible\nexception are given to the completion callback.",
          "position": 0,
          "windowSize": 42
        },
        {
          "id": "w_2201",
          "content": "`fd` {integer} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. `callback` {Function}\n* `err` {Error}\n* `stats` {fs.Stats} Invokes the callback with the {fs.Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
          "position": 0,
          "windowSize": 45
        },
        {
          "id": "w_2222",
          "content": "`fd` {integer} `callback` {Function}\n* `err` {Error} Request that all data for the open file descriptor is flushed to the storage\ndevice. The specific implementation is operating system and device specific.\nRefer to the POSIX fsync(2) documentation for more detail. No arguments other\nthan a possible exception are given to the completion callback.",
          "position": 0,
          "windowSize": 49
        },
        {
          "id": "w_2237",
          "content": "`fd` {integer} `len` {integer} **Default:** `0` `callback` {Function}\n* `err` {Error} Truncates the file descriptor. No arguments other than a possible exception are\ngiven to the completion callback. See the POSIX ftruncate(2) documentation for more detail. If the file referred to by the file descriptor was larger than `len` bytes, only\nthe first `len` bytes will be retained in the file. For example, the following program retains only the first four bytes of the\nfile: If the file previously was shorter than `len` bytes, it is extended, and the\nextended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
          "position": 0,
          "windowSize": 101
        },
        {
          "id": "w_2261",
          "content": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function}\n* `err` {Error} Change the file system timestamps of the object referenced by the supplied file\ndescriptor. See [`fs.utimes()`][].",
          "position": 0,
          "windowSize": 25
        },
        {
          "id": "w_2270",
          "content": "`pattern` {string|string\\[]}\n `options` {Object}\n* `cwd` {string|URL} current working directory. **Default:** `process.cwd()`\n* `exclude` {Function|string\\[]} Function to filter out files/directories or a\n  list of glob patterns to be excluded. If a function is provided, return\n  `true` to exclude the item, `false` to include it. **Default:** `undefined`.\n* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents,\n  `false` otherwise. **Default:** `false`.\n `callback` {Function}\n* `err` {Error}\n Retrieves the files matching the specified pattern.",
          "position": 0,
          "windowSize": 73
        },
        {
          "id": "w_2294",
          "content": "`path` {string|Buffer|URL} `mode` {integer} `callback` {Function}\n* `err` {Error|AggregateError} Changes the permissions on a symbolic link. No arguments other than a possible\nexception are given to the completion callback. This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
          "position": 0,
          "windowSize": 42
        },
        {
          "id": "w_2309",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function}\n* `err` {Error} Set the owner of the symbolic link. No arguments other than a possible\nexception are given to the completion callback. See the POSIX lchown(2) documentation for more detail.",
          "position": 0,
          "windowSize": 37
        },
        {
          "id": "w_2321",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function}\n* `err` {Error} Changes the access and modification times of a file in the same way as\n[`fs.utimes()`][], with the difference that if the path refers to a symbolic\nlink, then the link is not dereferenced: instead, the timestamps of the\nsymbolic link itself are changed. No arguments other than a possible exception are given to the completion\ncallback.",
          "position": 0,
          "windowSize": 62
        },
        {
          "id": "w_2333",
          "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function}\n* `err` {Error} Creates a new link from the `existingPath` to the `newPath`. See the POSIX\nlink(2) documentation for more detail. No arguments other than a possible\nexception are given to the completion callback.",
          "position": 0,
          "windowSize": 37
        },
        {
          "id": "w_2345",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. `callback` {Function}\n* `err` {Error}\n* `stats` {fs.Stats} Retrieves the {fs.Stats} for the symbolic link referred to by the path.\nThe callback gets two arguments `(err, stats)` where `stats` is a {fs.Stats}\nobject. `lstat()` is identical to `stat()`, except that if `path` is a symbolic\nlink, then the link itself is stat-ed, not the file that it refers to. See the POSIX lstat(2) documentation for more details.",
          "position": 0,
          "windowSize": 83
        },
        {
          "id": "w_2375",
          "content": "`path` {string|Buffer|URL} `options` {Object|integer}\n* `recursive` {boolean} **Default:** `false`\n* `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. `callback` {Function}\n* `err` {Error}\n* `path` {string|undefined} Present only if a directory is created with\n  `recursive` set to `true`. Asynchronously creates a directory. The callback is given a possible exception and, if `recursive` is `true`, the\nfirst directory path created, `(err[, path])`.\n`path` can still be `undefined` when `recursive` is `true`, if no directory was\ncreated (for instance, if it was previously created). The optional `options` argument can be an integer specifying `mode` (permission\nand sticky bits), or an object with a `mode` property and a `recursive`\nproperty indicating whether parent directories should be created. Calling\n`fs.mkdir()` when `path` is a directory that exists results in an error only\nwhen `recursive` is false. If `recursive` is false and the directory exists,\nan `EEXIST` error occurs. On Windows, using `fs.mkdir()` on the root directory even with recursion will\nresult in an error: See the POSIX mkdir(2) documentation for more details.",
          "position": 0,
          "windowSize": 156
        },
        {
          "id": "w_2417",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` `callback` {Function}\n* `err` {Error}\n* `directory` {string} Creates a unique temporary directory. Generates six random characters to be appended behind a required\n`prefix` to create a unique temporary directory. Due to platform\ninconsistencies, avoid trailing `X` characters in `prefix`. Some platforms,\nnotably the BSDs, can return more than six random characters, and replace\ntrailing `X` characters in `prefix` with random characters. The created directory path is passed as a string to the callback's second\nparameter. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use. The `fs.mkdtemp()` method will append the six randomly selected characters\ndirectly to the `prefix` string. For instance, given a directory `/tmp`, if the\nintention is to create a temporary directory _within_ `/tmp`, the `prefix`\nmust end with a trailing platform-specific path separator\n(`require('node:path').sep`).",
          "position": 0,
          "windowSize": 139
        },
        {
          "id": "w_2444",
          "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].\n**Default:** `'r'`. `mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function}\n* `err` {Error}\n* `fd` {integer} Asynchronous file open. See the POSIX open(2) documentation for more details. `mode` sets the file mode (permission and sticky bits), but only if the file was\ncreated. On Windows, only the write permission can be manipulated; see\n[`fs.chmod()`][]. The callback gets two arguments `(err, fd)`. Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented\nby [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n[this MSDN page][MSDN-Using-Streams]. Functions based on `fs.open()` exhibit this behavior as well:\n`fs.writeFile()`, `fs.readFile()`, etc.",
          "position": 0,
          "windowSize": 119
        },
        {
          "id": "w_2495",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `type` {string} An optional mime type for the blob. Returns: {Promise} Fulfills with a {Blob} upon success. Returns a {Blob} whose data is backed by the given file. The file must not be modified after the {Blob} is created. Any modifications\nwill cause reading the {Blob} data to fail with a `DOMException` error.\nSynchronous stat operations on the file when the `Blob` is created, and before\neach read in order to detect whether the file data has been modified on disk.",
          "position": 0,
          "windowSize": 82
        },
        {
          "id": "w_2513",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `bufferSize` {number} Number of directory entries that are buffered\n  internally when reading from the directory. Higher values lead to better\n  performance but higher memory usage. **Default:** `32`\n* `recursive` {boolean} **Default:** `false` `callback` {Function}\n* `err` {Error}\n* `dir` {fs.Dir} Asynchronously open a directory. See the POSIX opendir(3) documentation for\nmore details. Creates an {fs.Dir}, which contains all further functions for reading from\nand cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the\ndirectory and subsequent read operations.",
          "position": 0,
          "windowSize": 89
        },
        {
          "id": "w_2537",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be\nwritten to. `offset` {integer} The position in `buffer` to write the data to. `length` {integer} The number of bytes to read. `position` {integer|bigint|null} Specifies where to begin reading from in the\nfile. If `position` is `null` or `-1 `, data will be read from the current\nfile position, and the file position will be updated. If `position` is\na non-negative integer, the file position will be unchanged. `callback` {Function}\n* `err` {Error}\n* `bytesRead` {integer}\n* `buffer` {Buffer} Read data from the file specified by `fd`. The callback is given the three arguments, `(err, bytesRead, buffer)`. If the file is not modified concurrently, the end-of-file is reached when the\nnumber of bytes read is zero. If this method is invoked as its [`util.promisify()`][]ed version, it returns\na promise for an `Object` with `bytesRead` and `buffer` properties. The `fs.read()` method reads data from the file specified\nby the file descriptor (`fd`).\nThe `length` argument indicates the maximum number\nof bytes that Node.js\nwill attempt to read from the kernel.\nHowever, the actual number of bytes read (`bytesRead`) can be lower\nthan the specified `length` for various reasons. For example: If the file is shorter than the specified `length`, `bytesRead`\nwill be set to the actual number of bytes read. If the file encounters EOF (End of File) before the buffer could\nbe filled, Node.js will read all available bytes until EOF is encountered,\nand the `bytesRead` parameter in the callback will indicate\nthe actual number of bytes read, which may be less than the specified `length`. If the file is on a slow network `filesystem`\nor encounters any other issue during reading,\n`bytesRead` can be lower than the specified `length`. Therefore, when using `fs.read()`, it's important to\ncheck the `bytesRead` value to\ndetermine",
          "position": 0,
          "windowSize": 280
        },
        {
          "id": "w_2538",
          "content": "various reasons. For example: If the file is shorter than the specified `length`, `bytesRead`\nwill be set to the actual number of bytes read. If the file encounters EOF (End of File) before the buffer could\nbe filled, Node.js will read all available bytes until EOF is encountered,\nand the `bytesRead` parameter in the callback will indicate\nthe actual number of bytes read, which may be less than the specified `length`. If the file is on a slow network `filesystem`\nor encounters any other issue during reading,\n`bytesRead` can be lower than the specified `length`. Therefore, when using `fs.read()`, it's important to\ncheck the `bytesRead` value to\ndetermine how many bytes were actually read from the file.\nDepending on your application\nlogic, you may need to handle cases where `bytesRead`\nis lower than the specified `length`,\nsuch as by wrapping the read call in a loop if you require\na minimum amount of bytes. This behavior is similar to the POSIX `preadv2` function.",
          "position": 180,
          "windowSize": 150
        },
        {
          "id": "w_2613",
          "content": "`fd` {integer} `options` {Object}\n* `buffer` {Buffer|TypedArray|DataView} **Default:** `Buffer.alloc(16384)`\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|bigint|null} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesRead` {integer}\n* `buffer` {Buffer} Similar to the [`fs.read()`][] function, this version takes an optional\n`options` object. If no `options` object is specified, it will default with the\nabove values.",
          "position": 0,
          "windowSize": 53
        },
        {
          "id": "w_2631",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be\nwritten to. `options` {Object}\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|bigint} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesRead` {integer}\n* `buffer` {Buffer} Similar to the [`fs.read()`][] function, this version takes an optional\n`options` object. If no `options` object is specified, it will default with the\nabove values.",
          "position": 0,
          "windowSize": 59
        },
        {
          "id": "w_2649",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'`\n* `withFileTypes` {boolean} **Default:** `false`\n* `recursive` {boolean} If `true`, reads the contents of a directory\n  recursively. In recursive mode, it will list all files, sub files and\n  directories. **Default:** `false`. `callback` {Function}\n* `err` {Error}\n* `files` {string\\[]|Buffer\\[]|fs.Dirent\\[]} Reads the contents of a directory. The callback gets two arguments `(err, files)`\nwhere `files` is an array of the names of the files in the directory excluding\n`'.'` and `'..'`. See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe filenames passed to the callback. If the `encoding` is set to `'buffer'`,\nthe filenames returned will be passed as {Buffer} objects. If `options.withFileTypes` is set to `true`, the `files` array will contain\n{fs.Dirent} objects.",
          "position": 0,
          "windowSize": 138
        },
        {
          "id": "w_2688",
          "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string}\n* `encoding` {string|null} **Default:** `null`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`.\n* `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function}\n* `err` {Error|AggregateError}\n* `data` {string|Buffer} Asynchronously reads the entire contents of a file. The callback is passed two arguments `(err, data)`, where `data` is the\ncontents of the file. If no encoding is specified, then the raw buffer is returned. If `options` is a string, then it specifies the encoding: When the path is a directory, the behavior of `fs.readFile()` and\n[`fs.readFileSync()`][] is platform-specific. On macOS, Linux, and Windows, an\nerror will be returned. On FreeBSD, a representation of the directory's contents\nwill be returned. It is possible to abort an ongoing request using an `AbortSignal`. If a\nrequest is aborted the callback is called with an `AbortError`: The `fs.readFile()` function buffers the entire file. To minimize memory costs,\nwhen possible prefer streaming via `fs.createReadStream()`. Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.readFile` performs.",
          "position": 0,
          "windowSize": 166
        },
        {
          "id": "w_2745",
          "content": "Any specified file descriptor has to support reading. If a file descriptor is specified as the `path`, it will not be closed\nautomatically. The reading will begin at the current position. For example, if the file\nalready had `'Hello World'` and six bytes are read with the file descriptor,\nthe call to `fs.readFile()` with the same file descriptor, would give\n`'World'`, rather than `'Hello World'`.",
          "position": 0,
          "windowSize": 61
        },
        {
          "id": "w_2760",
          "content": "The `fs.readFile()` method asynchronously reads the contents of a file into\nmemory one chunk at a time, allowing the event loop to turn between each chunk.\nThis allows the read operation to have less impact on other activity that may\nbe using the underlying libuv thread pool but means that it will take longer\nto read a complete file into memory. The additional read overhead can vary broadly on different systems and depends\non the type of file being read. If the file type is not a regular file (a pipe\nfor instance) and Node.js is unable to determine an actual file size, each read\noperation will load on 64 KiB of data. For regular files, each read will process\n512 KiB of data. For applications that require as-fast-as-possible reading of file contents, it\nis better to use `fs.read()` directly and for application code to manage\nreading the full contents of the file itself. The Node.js GitHub issue [#25741][] provides more information and a detailed\nanalysis on the performance of `fs.readFile()` for multiple file sizes in\ndifferent Node.js versions.",
          "position": 0,
          "windowSize": 167
        },
        {
          "id": "w_2793",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` `callback` {Function}\n* `err` {Error}\n* `linkString` {string|Buffer} Reads the contents of the symbolic link referred to by `path`. The callback gets\ntwo arguments `(err, linkString)`. See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe link path passed to the callback. If the `encoding` is set to `'buffer'`,\nthe link path returned will be passed as a {Buffer} object.",
          "position": 0,
          "windowSize": 86
        },
        {
          "id": "w_2811",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesRead` {integer}\n* `buffers` {ArrayBufferView\\[]} Read from a file specified by `fd` and write to an array of `ArrayBufferView`s\nusing `readv()`. `position` is the offset from the beginning of the file from where data\nshould be read. If `typeof position !== 'number'`, the data will be read\nfrom the current position. The callback will be given three arguments: `err`, `bytesRead`, and\n`buffers`. `bytesRead` is how many bytes were read from the file. If this method is invoked as its [`util.promisify()`][]ed version, it returns\na promise for an `Object` with `bytesRead` and `buffers` properties.",
          "position": 0,
          "windowSize": 99
        },
        {
          "id": "w_2838",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` `callback` {Function}\n* `err` {Error}\n* `resolvedPath` {string|Buffer} Asynchronously computes the canonical pathname by resolving `.`, `..`, and\nsymbolic links. A canonical pathname is not necessarily unique. Hard links and bind mounts can\nexpose a file system entity through many pathnames. This function behaves like realpath(3), with some exceptions: No case conversion is performed on case-insensitive file systems.\n The maximum number of symbolic links is platform-independent and generally\n(much) higher than what the native realpath(3) implementation supports. The `callback` gets two arguments `(err, resolvedPath)`. May use `process.cwd`\nto resolve relative paths. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe path passed to the callback. If the `encoding` is set to `'buffer'`,\nthe path returned will be passed as a {Buffer} object. If `path` resolves to a socket or a pipe, the function will return a system\ndependent name for that object. A path that does not exist results in an ENOENT error.\n`error.path` is the absolute file path.",
          "position": 0,
          "windowSize": 184
        },
        {
          "id": "w_2889",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` `callback` {Function}\n* `err` {Error}\n* `resolvedPath` {string|Buffer} Asynchronous realpath(3). The `callback` gets two arguments `(err, resolvedPath)`. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe path passed to the callback. If the `encoding` is set to `'buffer'`,\nthe path returned will be passed as a {Buffer} object. On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on `/proc` in order for this function to work. Glibc does not have\nthis restriction.",
          "position": 0,
          "windowSize": 108
        },
        {
          "id": "w_2916",
          "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function}\n* `err` {Error} Asynchronously rename file at `oldPath` to the pathname provided\nas `newPath`. In the case that `newPath` already exists, it will\nbe overwritten. If there is a directory at `newPath`, an error will\nbe raised instead. No arguments other than a possible exception are\ngiven to the completion callback. See also: rename(2).",
          "position": 0,
          "windowSize": 55
        },
        {
          "id": "w_2934",
          "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to\nbe options for `recursive`, `maxBusyTries`, and `emfileWait` but they were\ndeprecated and removed. The `options` argument is still accepted for\nbackwards compatibility but it is not used. `callback` {Function}\n* `err` {Error} Asynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback. Using `fs.rmdir()` on a file (not a directory) results in an `ENOENT` error on\nWindows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs.rm()`][]\nwith options `{ recursive: true, force: true }`.",
          "position": 0,
          "windowSize": 95
        },
        {
          "id": "w_2961",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `force` {boolean} When `true`, exceptions will be ignored if `path` does\n  not exist. **Default:** `false`.\n* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\n  `EPERM` error is encountered, Node.js will retry the operation with a linear\n  backoff wait of `retryDelay` milliseconds longer on each try. This option\n  represents the number of retries. This option is ignored if the `recursive`\n  option is not `true`. **Default:** `0`.\n* `recursive` {boolean} If `true`, perform a recursive removal. In\n  recursive mode operations are retried on failure. **Default:** `false`.\n* `retryDelay` {integer} The amount of time in milliseconds to wait between\n  retries. This option is ignored if the `recursive` option is not `true`.\n  **Default:** `100`. `callback` {Function}\n* `err` {Error} Asynchronously removes files and directories (modeled on the standard POSIX `rm`\nutility). No arguments other than a possible exception are given to the\ncompletion callback.",
          "position": 0,
          "windowSize": 147
        },
        {
          "id": "w_3009",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. `callback` {Function}\n* `err` {Error}\n* `stats` {fs.Stats} Asynchronous stat(2). The callback gets two arguments `(err, stats)` where\n`stats` is an {fs.Stats} object. In case of an error, the `err.code` will be one of [Common System Errors][]. [`fs.stat()`][] follows symbolic links. Use [`fs.lstat()`][] to look at the\nlinks themselves. Using `fs.stat()` to check for the existence of a file before calling\n`fs.open()`, `fs.readFile()`, or `fs.writeFile()` is not recommended.\nInstead, user code should open/read/write the file directly and handle the\nerror raised if the file is not available. To check if a file exists without manipulating it afterwards, [`fs.access()`][]\nis recommended. For example, given the following directory structure: The next program will check for the stats of the given paths: The resulting output will resemble:",
          "position": 0,
          "windowSize": 137
        },
        {
          "id": "w_3072",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.StatFs} object should be `bigint`. **Default:** `false`. `callback` {Function}\n* `err` {Error}\n* `stats` {fs.StatFs} Asynchronous statfs(2). Returns information about the mounted file system which\ncontains `path`. The callback gets two arguments `(err, stats)` where `stats`\nis an {fs.StatFs} object. In case of an error, the `err.code` will be one of [Common System Errors][].",
          "position": 0,
          "windowSize": 64
        },
        {
          "id": "w_3102",
          "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` `callback` {Function}\n* `err` {Error} Creates the link called `path` pointing to `target`. No arguments other than a\npossible exception are given to the completion callback. See the POSIX symlink(2) documentation for more details. The `type` argument is only available on Windows and ignored on other platforms.\nIt can be set to `'dir'`, `'file'`, or `'junction'`. If the `type` argument is\n`null`, Node.js will autodetect `target` type and use `'file'` or `'dir'`.\nIf the `target` does not exist, `'file'` will be used. Windows junction points\nrequire the destination path to be absolute. When using `'junction'`, the\n`target` argument will automatically be normalized to absolute path. Junction\npoints on NTFS volumes can only point to directories. Relative targets are relative to the link's parent directory. The above example creates a symbolic link `mewtwo` which points to `mew` in the\nsame directory:",
          "position": 0,
          "windowSize": 139
        },
        {
          "id": "w_3144",
          "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` `callback` {Function}\n* `err` {Error|AggregateError} Truncates the file. No arguments other than a possible exception are\ngiven to the completion callback. A file descriptor can also be passed as the\nfirst argument. In this case, `fs.ftruncate()` is called. Passing a file descriptor is deprecated and may result in an error being thrown\nin the future. See the POSIX truncate(2) documentation for more details.",
          "position": 0,
          "windowSize": 65
        },
        {
          "id": "w_3168",
          "content": "`path` {string|Buffer|URL} `callback` {Function}\n* `err` {Error} Asynchronously removes a file or symbolic link. No arguments other than a\npossible exception are given to the completion callback. `fs.unlink()` will not work on a directory, empty or otherwise. To remove a\ndirectory, use [`fs.rmdir()`][]. See the POSIX unlink(2) documentation for more details.",
          "position": 0,
          "windowSize": 48
        },
        {
          "id": "w_3189",
          "content": "`filename` {string|Buffer|URL} `listener` {Function} Optional, a listener previously attached using\n`fs.watchFile()` Stop watching for changes on `filename`. If `listener` is specified, only that\nparticular listener is removed. Otherwise, _all_ listeners are removed,\neffectively stopping watching of `filename`. Calling `fs.unwatchFile()` with a filename that is not being watched is a\nno-op, not an error. Using [`fs.watch()`][] is more efficient than `fs.watchFile()` and\n`fs.unwatchFile()`. `fs.watch()` should be used instead of `fs.watchFile()`\nand `fs.unwatchFile()` when possible.",
          "position": 0,
          "windowSize": 67
        },
        {
          "id": "w_3231",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function}\n* `err` {Error} Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time in seconds,\n`Date`s, or a numeric string like `'123456789.0'`. If the value can not be converted to a number, or is `NaN`, `Infinity`, or\n`-Infinity`, an `Error` will be thrown.",
          "position": 0,
          "windowSize": 66
        },
        {
          "id": "w_3246",
          "content": "`filename` {string|Buffer|URL} `options` {string|Object}\n* `persistent` {boolean} Indicates whether the process should continue to run\n  as long as files are being watched. **Default:** `true`.\n* `recursive` {boolean} Indicates whether all subdirectories should be\n  watched, or only the current directory. This applies when a directory is\n  specified, and only on supported platforms (See [caveats][]). **Default:**\n  `false`.\n* `encoding` {string} Specifies the character encoding to be used for the\n  filename passed to the listener. **Default:** `'utf8'`.\n* `signal` {AbortSignal} allows closing the watcher with an AbortSignal. `listener` {Function|undefined} **Default:** `undefined`\n* `eventType` {string}\n* `filename` {string|Buffer|null} Returns: {fs.FSWatcher} Watch for changes on `filename`, where `filename` is either a file or a\ndirectory. The second argument is optional. If `options` is provided as a string, it\nspecifies the `encoding`. Otherwise `options` should be passed as an object. The listener callback gets two arguments `(eventType, filename)`. `eventType`\nis either `'rename'` or `'change'`, and `filename` is the name of the file\nwhich triggered the event. On most platforms, `'rename'` is emitted whenever a filename appears or\ndisappears in the directory. The listener callback is attached to the `'change'` event fired by\n{fs.FSWatcher}, but it is not the same thing as the `'change'` value of\n`eventType`. If a `signal` is passed, aborting the corresponding AbortController will close\nthe returned {fs.FSWatcher}.",
          "position": 0,
          "windowSize": 205
        },
        {
          "id": "w_3247",
          "content": "but it is not the same thing as the `'change'` value of\n`eventType`. If a `signal` is passed, aborting the corresponding AbortController will close\nthe returned {fs.FSWatcher}.",
          "position": 180,
          "windowSize": 25
        },
        {
          "id": "w_3307",
          "content": "The `fs.watch` API is not 100% consistent across platforms, and is\nunavailable in some situations. On Windows, no events will be emitted if the watched directory is moved or\nrenamed. An `EPERM` error is reported when the watched directory is deleted. The `fs.watch` API does not provide any protection with respect\nto malicious actions on the file system. For example, on Windows it is\nimplemented by monitoring changes in a directory versus specific files. This\nallows substitution of a file and fs reporting changes on the new file\nwith the same filename.",
          "position": 0,
          "windowSize": 86
        },
        {
          "id": "w_3325",
          "content": "This feature depends on the underlying operating system providing a way\nto be notified of file system changes. On Linux systems, this uses [`inotify(7)`][]. On BSD systems, this uses [`kqueue(2)`][]. On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for\ndirectories. On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][]. On Windows systems, this feature depends on [`ReadDirectoryChangesW`][]. On AIX systems, this feature depends on [`AHAFS`][], which must be enabled. On IBM i systems, this feature is not supported. If the underlying functionality is not available for some reason, then\n`fs.watch()` will not be able to function and may throw an exception.\nFor example, watching files or directories can be unreliable, and in some\ncases impossible, on network file systems (NFS, SMB, etc) or host file systems\nwhen using virtualization software such as Vagrant or Docker. It is still possible to use `fs.watchFile()`, which uses stat polling, but\nthis method is slower and less reliable.",
          "position": 0,
          "windowSize": 150
        },
        {
          "id": "w_3367",
          "content": "On Linux and macOS systems, `fs.watch()` resolves the path to an [inode][] and\nwatches the inode. If the watched path is deleted and recreated, it is assigned\na new inode. The watch will emit an event for the delete but will continue\nwatching the _original_ inode. Events for the new inode will not be emitted.\nThis is expected behavior. AIX files retain the same inode for the lifetime of a file. Saving and closing a\nwatched file on AIX will result in two notifications (one for adding new\ncontent, and one for truncation).",
          "position": 0,
          "windowSize": 87
        },
        {
          "id": "w_3391",
          "content": "Providing `filename` argument in the callback is only supported on Linux,\nmacOS, Windows, and AIX. Even on supported platforms, `filename` is not always\nguaranteed to be provided. Therefore, don't assume that `filename` argument is\nalways provided in the callback, and have some fallback logic if it is `null`.",
          "position": 0,
          "windowSize": 45
        },
        {
          "id": "w_3400",
          "content": "`filename` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} **Default:** `false`\n* `persistent` {boolean} **Default:** `true`\n* `interval` {integer} **Default:** `5007` `listener` {Function}\n* `current` {fs.Stats}\n* `previous` {fs.Stats} Returns: {fs.StatWatcher} Watch for changes on `filename`. The callback `listener` will be called each\ntime the file is accessed. The `options` argument may be omitted. If provided, it should be an object. The\n`options` object may contain a boolean named `persistent` that indicates\nwhether the process should continue to run as long as files are being watched.\nThe `options` object may specify an `interval` property indicating how often the\ntarget should be polled in milliseconds. The `listener` gets two arguments the current stat object and the previous\nstat object: These stat objects are instances of `fs.Stat`. If the `bigint` option is `true`,\nthe numeric values in these objects are specified as `BigInt`s. To be notified when the file was modified, not just accessed, it is necessary\nto compare `curr.mtimeMs` and `prev.mtimeMs`. When an `fs.watchFile` operation results in an `ENOENT` error, it\nwill invoke the listener once, with all the fields zeroed (or, for dates, the\nUnix Epoch). If the file is created later on, the listener will be called\nagain, with the latest stat objects. This is a change in functionality since\nv0.10. Using [`fs.watch()`][] is more efficient than `fs.watchFile` and\n`fs.unwatchFile`. `fs.watch` should be used instead of `fs.watchFile` and\n`fs.unwatchFile` when possible. When a file being watched by `fs.watchFile()` disappears and reappears,\nthen the contents of `previous` in the second callback event (the file's\nreappearance) will be the same as the contents of `previous` in the first\ncallback event (its disappearance). This happens when: the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name",
          "position": 0,
          "windowSize": 273
        },
        {
          "id": "w_3401",
          "content": "called\nagain, with the latest stat objects. This is a change in functionality since\nv0.10. Using [`fs.watch()`][] is more efficient than `fs.watchFile` and\n`fs.unwatchFile`. `fs.watch` should be used instead of `fs.watchFile` and\n`fs.unwatchFile` when possible. When a file being watched by `fs.watchFile()` disappears and reappears,\nthen the contents of `previous` in the second callback event (the file's\nreappearance) will be the same as the contents of `previous` in the first\ncallback event (its disappearance). This happens when: the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name",
          "position": 180,
          "windowSize": 93
        },
        {
          "id": "w_3491",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesWritten` {integer}\n* `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the file specified by `fd`. `offset` determines the part of the buffer to be written, and `length` is\nan integer specifying the number of bytes to write. `position` refers to the offset from the beginning of the file where this data\nshould be written. If `typeof position !== 'number'`, the data will be written\nat the current position. See pwrite(2). The callback will be given three arguments `(err, bytesWritten, buffer)` where\n`bytesWritten` specifies how many _bytes_ were written from `buffer`. If this method is invoked as its [`util.promisify()`][]ed version, it returns\na promise for an `Object` with `bytesWritten` and `buffer` properties. It is unsafe to use `fs.write()` multiple times on the same file without waiting\nfor the callback. For this scenario, [`fs.createWriteStream()`][] is\nrecommended. On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.",
          "position": 0,
          "windowSize": 175
        },
        {
          "id": "w_3542",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object}\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|null} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesWritten` {integer}\n* `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the file specified by `fd`. Similar to the above `fs.write` function, this version takes an\noptional `options` object. If no `options` object is specified, it will\ndefault with the above values.",
          "position": 0,
          "windowSize": 60
        },
        {
          "id": "w_3560",
          "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` `callback` {Function}\n* `err` {Error}\n* `written` {integer}\n* `string` {string} Write `string` to the file specified by `fd`. If `string` is not a string,\nan exception is thrown. `position` refers to the offset from the beginning of the file where this data\nshould be written. If `typeof position !== 'number'` the data will be written at\nthe current position. See pwrite(2). `encoding` is the expected string encoding. The callback will receive the arguments `(err, written, string)` where `written`\nspecifies how many _bytes_ the passed string required to be written. Bytes\nwritten is not necessarily the same as string characters written. See\n[`Buffer.byteLength`][]. It is unsafe to use `fs.write()` multiple times on the same file without waiting\nfor the callback. For this scenario, [`fs.createWriteStream()`][] is\nrecommended. On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file. On Windows, if the file descriptor is connected to the console (e.g. `fd == 1`\nor `stdout`) a string containing non-ASCII characters will not be rendered\nproperly by default, regardless of the encoding used.\nIt is possible to configure the console to render UTF-8 properly by changing the\nactive codepage with the `chcp 65001` command. See the [chcp][] docs for more\ndetails.",
          "position": 0,
          "windowSize": 213
        },
        {
          "id": "w_3561",
          "content": "rendered\nproperly by default, regardless of the encoding used.\nIt is possible to configure the console to render UTF-8 properly by changing the\nactive codepage with the `chcp 65001` command. See the [chcp][] docs for more\ndetails.",
          "position": 180,
          "windowSize": 33
        },
        {
          "id": "w_3627",
          "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`.\n* `flush` {boolean} If all data is successfully written to the file, and\n  `flush` is `true`, `fs.fsync()` is used to flush the data.\n  **Default:** `false`.\n* `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function}\n* `err` {Error|AggregateError} When `file` is a filename, asynchronously writes data to the file, replacing the\nfile if it already exists. `data` can be a string or a buffer. When `file` is a file descriptor, the behavior is similar to calling\n`fs.write()` directly (which is recommended). See the notes below on using\na file descriptor. The `encoding` option is ignored if `data` is a buffer. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. If `options` is a string, then it specifies the encoding: It is unsafe to use `fs.writeFile()` multiple times on the same file without\nwaiting for the callback. For this scenario, [`fs.createWriteStream()`][] is\nrecommended. Similarly to `fs.readFile` - `fs.writeFile` is a convenience method that\nperforms multiple `write` calls internally to write the buffer passed to it.\nFor performance sensitive code consider using [`fs.createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fs.writeFile()`.\nCancelation is \"best effort\", and some amount of data is likely still\nto be written. Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.writeFile` performs.",
          "position": 0,
          "windowSize": 236
        },
        {
          "id": "w_3628",
          "content": "calls internally to write the buffer passed to it.\nFor performance sensitive code consider using [`fs.createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fs.writeFile()`.\nCancelation is \"best effort\", and some amount of data is likely still\nto be written. Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.writeFile` performs.",
          "position": 180,
          "windowSize": 56
        },
        {
          "id": "w_3715",
          "content": "When `file` is a file descriptor, the behavior is almost identical to directly\ncalling `fs.write()` like: The difference from directly calling `fs.write()` is that under some unusual\nconditions, `fs.write()` might write only part of the buffer and need to be\nretried to write the remaining data, whereas `fs.writeFile()` retries until\nthe data is entirely written (or an error occurs). The implications of this are a common source of confusion. In\nthe file descriptor case, the file is not replaced! The data is not necessarily\nwritten to the beginning of the file, and the file's original data may remain\nbefore and/or after the newly written data. For example, if `fs.writeFile()` is called twice in a row, first to write the\nstring `'Hello'`, then to write the string `', World'`, the file would contain\n`'Hello, World'`, and might contain some of the file's original data (depending\non the size of the original file, and the position of the file descriptor). If\na file name had been used instead of a descriptor, the file would be guaranteed\nto contain only `', World'`.",
          "position": 0,
          "windowSize": 167
        },
        {
          "id": "w_3757",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesWritten` {integer}\n* `buffers` {ArrayBufferView\\[]} Write an array of `ArrayBufferView`s to the file specified by `fd` using\n`writev()`. `position` is the offset from the beginning of the file where this data\nshould be written. If `typeof position !== 'number'`, the data will be written\nat the current position. The callback will be given three arguments: `err`, `bytesWritten`, and\n`buffers`. `bytesWritten` is how many bytes were written from `buffers`. If this method is [`util.promisify()`][]ed, it returns a promise for an\n`Object` with `bytesWritten` and `buffers` properties. It is unsafe to use `fs.writev()` multiple times on the same file without\nwaiting for the callback. For this scenario, use [`fs.createWriteStream()`][]. On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.",
          "position": 0,
          "windowSize": 141
        },
        {
          "id": "w_3804",
          "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.constants.F_OK` Synchronously tests a user's permissions for the file or directory specified\nby `path`. The `mode` argument is an optional integer that specifies the\naccessibility checks to be performed. `mode` should be either the value\n`fs.constants.F_OK` or a mask consisting of the bitwise OR of any of\n`fs.constants.R_OK`, `fs.constants.W_OK`, and `fs.constants.X_OK` (e.g.\n`fs.constants.W_OK | fs.constants.R_OK`). Check [File access constants][] for\npossible values of `mode`. If any of the accessibility checks fail, an `Error` will be thrown. Otherwise,\nthe method will return `undefined`.",
          "position": 0,
          "windowSize": 80
        },
        {
          "id": "w_3834",
          "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`.\n* `flush` {boolean} If `true`, the underlying file descriptor is flushed\n  prior to closing it. **Default:** `false`. Synchronously append data to a file, creating the file if it does not yet\nexist. `data` can be a string or a {Buffer}. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened\nfor appending (using `fs.open()` or `fs.openSync()`). The file descriptor will\nnot be closed automatically.",
          "position": 0,
          "windowSize": 116
        },
        {
          "id": "w_3873",
          "content": "`path` {string|Buffer|URL} `mode` {string|integer} For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.chmod()`][]. See the POSIX chmod(2) documentation for more detail.",
          "position": 0,
          "windowSize": 25
        },
        {
          "id": "w_3885",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Synchronously changes owner and group of a file. Returns `undefined`.\nThis is the synchronous version of [`fs.chown()`][]. See the POSIX chown(2) documentation for more detail.",
          "position": 0,
          "windowSize": 30
        },
        {
          "id": "w_3903",
          "content": "`fd` {integer} Closes the file descriptor. Returns `undefined`. Calling `fs.closeSync()` on any file descriptor (`fd`) that is currently in use\nthrough any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
          "position": 0,
          "windowSize": 37
        },
        {
          "id": "w_3921",
          "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation. **Default:** `0`. Synchronously copies `src` to `dest`. By default, `dest` is overwritten if it\nalready exists. Returns `undefined`. Node.js makes no guarantees about the\natomicity of the copy operation. If an error occurs after the destination file\nhas been opened for writing, Node.js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`). `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest` already\nexists. `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used. `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support\ncopy-on-write, then the operation will fail.",
          "position": 0,
          "windowSize": 150
        },
        {
          "id": "w_3972",
          "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object}\n* `dereference` {boolean} dereference symlinks. **Default:** `false`.\n* `errorOnExist` {boolean} when `force` is `false`, and the destination\n  exists, throw an error. **Default:** `false`.\n* `filter` {Function} Function to filter copied files/directories. Return\n  `true` to copy the item, `false` to ignore it. When ignoring a directory,\n  all of its contents will be skipped as well. **Default:** `undefined`\n  * `src` {string} source path to copy.\n  * `dest` {string} destination path to copy to.\n  * Returns: {boolean} Any non-`Promise` value that is coercible\n    to `boolean`.\n* `force` {boolean} overwrite existing file or directory. The copy\n  operation will ignore errors if you set this to false and the destination\n  exists. Use the `errorOnExist` option to change this behavior.\n  **Default:** `true`.\n* `mode` {integer} modifiers for copy operation. **Default:** `0`.\n  See `mode` flag of [`fs.copyFileSync()`][].\n* `preserveTimestamps` {boolean} When `true` timestamps from `src` will\n  be preserved. **Default:** `false`.\n* `recursive` {boolean} copy directories recursively **Default:** `false`\n* `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will\n  be skipped. **Default:** `false` Synchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
          "position": 0,
          "windowSize": 218
        },
        {
          "id": "w_3973",
          "content": "symlinks will\n  be skipped. **Default:** `false` Synchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
          "position": 180,
          "windowSize": 38
        },
        {
          "id": "w_4051",
          "content": "`path` {string|Buffer|URL} Returns: {boolean} Returns `true` if the path exists, `false` otherwise. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.exists()`][]. `fs.exists()` is deprecated, but `fs.existsSync()` is not. The `callback`\nparameter to `fs.exists()` accepts parameters that are inconsistent with other\nNode.js callbacks. `fs.existsSync()` does not use a callback.",
          "position": 0,
          "windowSize": 50
        },
        {
          "id": "w_4092",
          "content": "`fd` {integer} `uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Sets the owner of the file. Returns `undefined`. See the POSIX fchown(2) documentation for more detail.",
          "position": 0,
          "windowSize": 34
        },
        {
          "id": "w_4107",
          "content": "`fd` {integer} Forces all currently queued I/O operations associated with the file to the\noperating system's synchronized I/O completion state. Refer to the POSIX\nfdatasync(2) documentation for details. Returns `undefined`.",
          "position": 0,
          "windowSize": 28
        },
        {
          "id": "w_4119",
          "content": "`fd` {integer} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. Returns: {fs.Stats} Retrieves the {fs.Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
          "position": 0,
          "windowSize": 38
        },
        {
          "id": "w_4140",
          "content": "`fd` {integer} Request that all data for the open file descriptor is flushed to the storage\ndevice. The specific implementation is operating system and device specific.\nRefer to the POSIX fsync(2) documentation for more detail. Returns `undefined`.",
          "position": 0,
          "windowSize": 35
        },
        {
          "id": "w_4155",
          "content": "`fd` {integer} `len` {integer} **Default:** `0` Truncates the file descriptor. Returns `undefined`. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.ftruncate()`][].",
          "position": 0,
          "windowSize": 25
        },
        {
          "id": "w_4181",
          "content": "`pattern` {string|string\\[]} `options` {Object}\n* `cwd` {string|URL} current working directory. **Default:** `process.cwd()`\n* `exclude` {Function|string\\[]} Function to filter out files/directories or a\n  list of glob patterns to be excluded. If a function is provided, return\n  `true` to exclude the item, `false` to include it. **Default:** `undefined`.\n* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents,\n  `false` otherwise. **Default:** `false`. Returns: {string\\[]} paths of files that match the pattern.",
          "position": 0,
          "windowSize": 71
        },
        {
          "id": "w_4205",
          "content": "`path` {string|Buffer|URL} `mode` {integer} Changes the permissions on a symbolic link. Returns `undefined`. This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
          "position": 0,
          "windowSize": 28
        },
        {
          "id": "w_4220",
          "content": "`path` {string|Buffer|URL} `uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Set the owner for the path. Returns `undefined`. See the POSIX lchown(2) documentation for more details.",
          "position": 0,
          "windowSize": 34
        },
        {
          "id": "w_4235",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Change the file system timestamps of the symbolic link referenced by `path`.\nReturns `undefined`, or throws an exception when parameters are incorrect or\nthe operation fails. This is the synchronous version of [`fs.lutimes()`][].",
          "position": 0,
          "windowSize": 37
        },
        {
          "id": "w_4250",
          "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Creates a new link from the `existingPath` to the `newPath`. See the POSIX\nlink(2) documentation for more detail. Returns `undefined`.",
          "position": 0,
          "windowSize": 23
        },
        {
          "id": "w_4262",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`.\n* `throwIfNoEntry` {boolean} Whether an exception will be thrown\n  if no file system entry exists, rather than returning `undefined`.\n  **Default:** `true`. Returns: {fs.Stats} Retrieves the {fs.Stats} for the symbolic link referred to by `path`. See the POSIX lstat(2) documentation for more details.",
          "position": 0,
          "windowSize": 64
        },
        {
          "id": "w_4289",
          "content": "`path` {string|Buffer|URL} `options` {Object|integer}\n* `recursive` {boolean} **Default:** `false`\n* `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. Returns: {string|undefined} Synchronously creates a directory. Returns `undefined`, or if `recursive` is\n`true`, the first directory path created.\nThis is the synchronous version of [`fs.mkdir()`][]. See the POSIX mkdir(2) documentation for more details.",
          "position": 0,
          "windowSize": 47
        },
        {
          "id": "w_4313",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {string} Returns the created directory path. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use.",
          "position": 0,
          "windowSize": 51
        },
        {
          "id": "w_4328",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {Object} A disposable object:\n* `path` {string} The path of the created directory.\n* `remove` {Function} A function which removes the created directory.\n* `[Symbol.dispose]` {Function} The same as `remove`. Returns a disposable object whose `path` property holds the created directory\npath. When the object is disposed, the directory and its contents will be\nremoved if it still exists. If the directory cannot be deleted, disposal will\nthrow an error. The object has a `remove()` method which will perform the same\ntask. For detailed information, see the documentation of [`fs.mkdtemp()`][]. There is no callback-based version of this API because it is designed for use\nwith the `using` syntax. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use.",
          "position": 0,
          "windowSize": 132
        },
        {
          "id": "w_4364",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `bufferSize` {number} Number of directory entries that are buffered\n  internally when reading from the directory. Higher values lead to better\n  performance but higher memory usage. **Default:** `32`\n* `recursive` {boolean} **Default:** `false` Returns: {fs.Dir} Synchronously open a directory. See opendir(3). Creates an {fs.Dir}, which contains all further functions for reading from\nand cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the\ndirectory and subsequent read operations.",
          "position": 0,
          "windowSize": 80
        },
        {
          "id": "w_4388",
          "content": "`path` {string|Buffer|URL} `flags` {string|number} **Default:** `'r'`.\nSee [support of file system `flags`][]. `mode` {string|integer} **Default:** `0o666` Returns: {number} Returns an integer representing the file descriptor. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.open()`][].",
          "position": 0,
          "windowSize": 37
        },
        {
          "id": "w_4406",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'`\n* `withFileTypes` {boolean} **Default:** `false`\n* `recursive` {boolean} If `true`, reads the contents of a directory\n  recursively. In recursive mode, it will list all files, sub files, and\n  directories. **Default:** `false`. Returns: {string\\[]|Buffer\\[]|fs.Dirent\\[]} Reads the contents of the directory. See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe filenames returned. If the `encoding` is set to `'buffer'`,\nthe filenames returned will be passed as {Buffer} objects. If `options.withFileTypes` is set to `true`, the result will contain\n{fs.Dirent} objects.",
          "position": 0,
          "windowSize": 107
        },
        {
          "id": "w_4439",
          "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string}\n* `encoding` {string|null} **Default:** `null`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. Returns: {string|Buffer} Returns the contents of the `path`. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.readFile()`][]. If the `encoding` option is specified then this function returns a\nstring. Otherwise it returns a buffer. Similar to [`fs.readFile()`][], when the path is a directory, the behavior of\n`fs.readFileSync()` is platform-specific.",
          "position": 0,
          "windowSize": 73
        },
        {
          "id": "w_4472",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Returns the symbolic link's string value. See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe link path returned. If the `encoding` is set to `'buffer'`,\nthe link path returned will be passed as a {Buffer} object.",
          "position": 0,
          "windowSize": 68
        },
        {
          "id": "w_4487",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} `length` {integer} `position` {integer|bigint|null} **Default:** `null` Returns: {number} Returns the number of `bytesRead`. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.read()`][].",
          "position": 0,
          "windowSize": 32
        },
        {
          "id": "w_4499",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object}\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|bigint|null} **Default:** `null` Returns: {number} Returns the number of `bytesRead`. Similar to the above `fs.readSync` function, this version takes an optional `options` object.\nIf no `options` object is specified, it will default with the above values. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.read()`][].",
          "position": 0,
          "windowSize": 65
        },
        {
          "id": "w_4523",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes read. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.readv()`][].",
          "position": 0,
          "windowSize": 28
        },
        {
          "id": "w_4532",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Returns the resolved pathname. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.realpath()`][].",
          "position": 0,
          "windowSize": 27
        },
        {
          "id": "w_4544",
          "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Synchronous realpath(3). Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe path returned. If the `encoding` is set to `'buffer'`,\nthe path returned will be passed as a {Buffer} object. On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on `/proc` in order for this function to work. Glibc does not have\nthis restriction.",
          "position": 0,
          "windowSize": 94
        },
        {
          "id": "w_4568",
          "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Renames the file from `oldPath` to `newPath`. Returns `undefined`. See the POSIX rename(2) documentation for more details.",
          "position": 0,
          "windowSize": 21
        },
        {
          "id": "w_4580",
          "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to\nbe options for `recursive`, `maxBusyTries`, and `emfileWait` but they were\ndeprecated and removed. The `options` argument is still accepted for\nbackwards compatibility but it is not used. Synchronous rmdir(2). Returns `undefined`. Using `fs.rmdirSync()` on a file (not a directory) results in an `ENOENT` error\non Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs.rmSync()`][]\nwith options `{ recursive: true, force: true }`.",
          "position": 0,
          "windowSize": 81
        },
        {
          "id": "w_4604",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `force` {boolean} When `true`, exceptions will be ignored if `path` does\n  not exist. **Default:** `false`.\n* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\n  `EPERM` error is encountered, Node.js will retry the operation with a linear\n  backoff wait of `retryDelay` milliseconds longer on each try. This option\n  represents the number of retries. This option is ignored if the `recursive`\n  option is not `true`. **Default:** `0`.\n* `recursive` {boolean} If `true`, perform a recursive directory removal. In\n  recursive mode operations are retried on failure. **Default:** `false`.\n* `retryDelay` {integer} The amount of time in milliseconds to wait between\n  retries. This option is ignored if the `recursive` option is not `true`.\n  **Default:** `100`. Synchronously removes files and directories (modeled on the standard POSIX `rm`\nutility). Returns `undefined`.",
          "position": 0,
          "windowSize": 134
        },
        {
          "id": "w_4649",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`.\n* `throwIfNoEntry` {boolean} Whether an exception will be thrown\n  if no file system entry exists, rather than returning `undefined`.\n  **Default:** `true`. Returns: {fs.Stats} Retrieves the {fs.Stats} for the path.",
          "position": 0,
          "windowSize": 51
        },
        {
          "id": "w_4673",
          "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.StatFs} object should be `bigint`. **Default:** `false`. Returns: {fs.StatFs} Synchronous statfs(2). Returns information about the mounted file system which\ncontains `path`. In case of an error, the `err.code` will be one of [Common System Errors][].",
          "position": 0,
          "windowSize": 48
        },
        {
          "id": "w_4697",
          "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: `undefined`. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.symlink()`][].",
          "position": 0,
          "windowSize": 23
        },
        {
          "id": "w_4706",
          "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Truncates the file. Returns `undefined`. A file descriptor can also be\npassed as the first argument. In this case, `fs.ftruncateSync()` is called. Passing a file descriptor is deprecated and may result in an error being thrown\nin the future.",
          "position": 0,
          "windowSize": 43
        },
        {
          "id": "w_4735",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: `undefined`. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.utimes()`][].",
          "position": 0,
          "windowSize": 21
        },
        {
          "id": "w_4744",
          "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`.\n* `flush` {boolean} If all data is successfully written to the file, and\n  `flush` is `true`, `fs.fsyncSync()` is used to flush the data. Returns: `undefined`. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.writeFile()`][].",
          "position": 0,
          "windowSize": 79
        },
        {
          "id": "w_4771",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.write(fd, buffer...)`][].",
          "position": 0,
          "windowSize": 39
        },
        {
          "id": "w_4783",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object}\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.write(fd, buffer...)`][].",
          "position": 0,
          "windowSize": 41
        },
        {
          "id": "w_4795",
          "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.write(fd, string...)`][].",
          "position": 0,
          "windowSize": 33
        },
        {
          "id": "w_4804",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.writev()`][].",
          "position": 0,
          "windowSize": 28
        },
        {
          "id": "w_4815",
          "content": "A class representing a directory stream. Created by [`fs.opendir()`][], [`fs.opendirSync()`][], or\n[`fsPromises.opendir()`][]. When using the async iterator, the {fs.Dir} object will be automatically\nclosed after the iterator exits.",
          "position": 0,
          "windowSize": 26
        },
        {
          "id": "w_4836",
          "content": "Returns: {Promise} Asynchronously close the directory's underlying resource handle.\nSubsequent reads will result in errors. A promise is returned that will be fulfilled after the resource has been\nclosed.",
          "position": 0,
          "windowSize": 27
        },
        {
          "id": "w_4848",
          "content": "`callback` {Function}\n* `err` {Error} Asynchronously close the directory's underlying resource handle.\nSubsequent reads will result in errors. The `callback` will be called after the resource handle has been closed.",
          "position": 0,
          "windowSize": 28
        },
        {
          "id": "w_4879",
          "content": "Returns: {Promise} Fulfills with a {fs.Dirent|null} Asynchronously read the next directory entry via readdir(3) as an\n{fs.Dirent}. A promise is returned that will be fulfilled with an {fs.Dirent}, or `null`\nif there are no more directory entries to read. Directory entries returned by this function are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory might not be\nincluded in the iteration results.",
          "position": 0,
          "windowSize": 71
        },
        {
          "id": "w_4900",
          "content": "`callback` {Function}\n* `err` {Error}\n* `dirent` {fs.Dirent|null} Asynchronously read the next directory entry via readdir(3) as an\n{fs.Dirent}. After the read is completed, the `callback` will be called with an\n{fs.Dirent}, or `null` if there are no more directory entries to read. Directory entries returned by this function are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory might not be\nincluded in the iteration results.",
          "position": 0,
          "windowSize": 73
        },
        {
          "id": "w_4921",
          "content": "Returns: {fs.Dirent|null} Synchronously read the next directory entry as an {fs.Dirent}. See the\nPOSIX readdir(3) documentation for more detail. If there are no more directory entries to read, `null` will be returned. Directory entries returned by this function are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory might not be\nincluded in the iteration results.",
          "position": 0,
          "windowSize": 65
        },
        {
          "id": "w_4942",
          "content": "Returns: {AsyncIterator} An AsyncIterator of {fs.Dirent} Asynchronously iterates over the directory until all entries have\nbeen read. Refer to the POSIX readdir(3) documentation for more detail. Entries returned by the async iterator are always an {fs.Dirent}.\nThe `null` case from `dir.read()` is handled internally. See {fs.Dir} for an example. Directory entries returned by this iterator are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory might not be\nincluded in the iteration results.",
          "position": 0,
          "windowSize": 81
        },
        {
          "id": "w_4979",
          "content": "A representation of a directory entry, which can be a file or a subdirectory\nwithin the directory, as returned by reading from an {fs.Dir}. The\ndirectory entry is a combination of the file name and file type pairs. Additionally, when [`fs.readdir()`][] or [`fs.readdirSync()`][] is called with\nthe `withFileTypes` option set to `true`, the resulting array is filled with\n{fs.Dirent} objects, rather than strings or {Buffer}s.",
          "position": 0,
          "windowSize": 61
        },
        {
          "id": "w_5053",
          "content": "Type: {string|Buffer} The file name that this {fs.Dirent} object refers to. The type of this\nvalue is determined by the `options.encoding` passed to [`fs.readdir()`][] or\n[`fs.readdirSync()`][].",
          "position": 0,
          "windowSize": 24
        },
        {
          "id": "w_5082",
          "content": "Extends {EventEmitter} A successful call to [`fs.watch()`][] method will return a new {fs.FSWatcher}\nobject. All {fs.FSWatcher} objects emit a `'change'` event whenever a specific watched\nfile is modified.",
          "position": 0,
          "windowSize": 26
        },
        {
          "id": "w_5097",
          "content": "`eventType` {string} The type of change event that has occurred `filename` {string|Buffer} The filename that changed (if relevant/available) Emitted when something changes in a watched directory or file.\nSee more details in [`fs.watch()`][]. The `filename` argument may not be provided depending on operating system\nsupport. If `filename` is provided, it will be provided as a {Buffer} if\n`fs.watch()` is called with its `encoding` option set to `'buffer'`, otherwise\n`filename` will be a UTF-8 string.",
          "position": 0,
          "windowSize": 70
        },
        {
          "id": "w_5126",
          "content": "`error` {Error} Emitted when an error occurs while watching the file. The errored\n{fs.FSWatcher} object is no longer usable in the event handler.",
          "position": 0,
          "windowSize": 22
        },
        {
          "id": "w_5149",
          "content": "Returns: {fs.FSWatcher} When called, requests that the Node.js event loop _not_ exit so long as the\n{fs.FSWatcher} is active. Calling `watcher.ref()` multiple times will have\nno effect. By default, all {fs.FSWatcher} objects are \"ref'ed\", making it normally\nunnecessary to call `watcher.ref()` unless `watcher.unref()` had been\ncalled previously.",
          "position": 0,
          "windowSize": 43
        },
        {
          "id": "w_5179",
          "content": "Returns: {fs.FSWatcher} When called, the active {fs.FSWatcher} object will not require the Node.js\nevent loop to remain active. If there is no other activity keeping the\nevent loop running, the process may exit before the {fs.FSWatcher} object's\ncallback is invoked. Calling `watcher.unref()` multiple times will have\nno effect.",
          "position": 0,
          "windowSize": 44
        },
        {
          "id": "w_5214",
          "content": "Returns: {fs.StatWatcher} When called, requests that the Node.js event loop _not_ exit so long as the\n{fs.StatWatcher} is active. Calling `watcher.ref()` multiple times will have\nno effect. By default, all {fs.StatWatcher} objects are \"ref'ed\", making it normally\nunnecessary to call `watcher.ref()` unless `watcher.unref()` had been\ncalled previously.",
          "position": 0,
          "windowSize": 43
        },
        {
          "id": "w_5247",
          "content": "Returns: {fs.StatWatcher} When called, the active {fs.StatWatcher} object will not require the Node.js\nevent loop to remain active. If there is no other activity keeping the\nevent loop running, the process may exit before the {fs.StatWatcher} object's\ncallback is invoked. Calling `watcher.unref()` multiple times will have\nno effect.",
          "position": 0,
          "windowSize": 44
        },
        {
          "id": "w_5314",
          "content": "Type: {string|Buffer} The path to the file the stream is reading from as specified in the first\nargument to `fs.createReadStream()`. If `path` is passed as a string, then\n`readStream.path` will be a string. If `path` is passed as a {Buffer}, then\n`readStream.path` will be a {Buffer}. If `fd` is specified, then\n`readStream.path` will be `undefined`.",
          "position": 0,
          "windowSize": 51
        },
        {
          "id": "w_5341",
          "content": "Type: {boolean} This property is `true` if the underlying file has not been opened yet,\ni.e. before the `'ready'` event is emitted.",
          "position": 0,
          "windowSize": 21
        },
        {
          "id": "w_5350",
          "content": "A {fs.Stats} object provides information about a file. Objects returned from [`fs.stat()`][], [`fs.lstat()`][], [`fs.fstat()`][], and\ntheir synchronous counterparts are of this type.\nIf `bigint` in the `options` passed to those methods is true, the numeric values\nwill be `bigint` instead of `number`, and the object will contain additional\nnanosecond-precision properties suffixed with `Ns`.\n`Stat` objects are not to be created directly using the `new` keyword. `bigint` version:",
          "position": 0,
          "windowSize": 62
        },
        {
          "id": "w_5393",
          "content": "Returns: {boolean} Returns `true` if the {fs.Stats} object describes a file system directory. If the {fs.Stats} object was obtained from calling [`fs.lstat()`][] on a\nsymbolic link which resolves to a directory, this method will return `false`.\nThis is because [`fs.lstat()`][] returns information\nabout a symbolic link itself and not the path it resolves to.",
          "position": 0,
          "windowSize": 51
        },
        {
          "id": "w_5490",
          "content": "Type: {number|bigint} The size of the file in bytes. If the underlying file system does not support getting the size of the file,\nthis will be `0`.",
          "position": 0,
          "windowSize": 26
        },
        {
          "id": "w_5529",
          "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates\nthe object.\nThe timestamp indicating the last time this file was accessed expressed in\nnanoseconds since the POSIX Epoch.",
          "position": 0,
          "windowSize": 30
        },
        {
          "id": "w_5538",
          "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates\nthe object.\nThe timestamp indicating the last time this file was modified expressed in\nnanoseconds since the POSIX Epoch.",
          "position": 0,
          "windowSize": 30
        },
        {
          "id": "w_5547",
          "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates\nthe object.\nThe timestamp indicating the last time the file status was changed expressed\nin nanoseconds since the POSIX Epoch.",
          "position": 0,
          "windowSize": 31
        },
        {
          "id": "w_5556",
          "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates\nthe object.\nThe timestamp indicating the creation time of this file expressed in\nnanoseconds since the POSIX Epoch.",
          "position": 0,
          "windowSize": 29
        },
        {
          "id": "w_5585",
          "content": "The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs` properties are\nnumeric values that hold the corresponding times in milliseconds. Their\nprecision is platform specific. When `bigint: true` is passed into the\nmethod that generates the object, the properties will be [bigints][],\notherwise they will be [numbers][MDN-Number]. The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are\n[bigints][] that hold the corresponding times in nanoseconds. They are\nonly present when `bigint: true` is passed into the method that generates\nthe object. Their precision is platform specific. `atime`, `mtime`, `ctime`, and `birthtime` are\n[`Date`][MDN-Date] object alternate representations of the various times. The\n`Date` and number values are not connected. Assigning a new number value, or\nmutating the `Date` value, will not be reflected in the corresponding alternate\nrepresentation. The times in the stat object have the following semantics: `atime` \"Access Time\": Time when file data last accessed. Changed\nby the mknod(2), utimes(2), and read(2) system calls. `mtime` \"Modified Time\": Time when file data last modified.\nChanged by the mknod(2), utimes(2), and write(2) system calls. `ctime` \"Change Time\": Time when file status was last changed\n(inode data modification). Changed by the chmod(2), chown(2),\nlink(2), mknod(2), rename(2), unlink(2), utimes(2),\nread(2), and write(2) system calls. `birthtime` \"Birth Time\": Time of file creation. Set once when the\nfile is created. On file systems where birthtime is not available,\nthis field may instead hold either the `ctime` or\n`1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`). This value may be greater\nthan `atime` or `mtime` in this case. On Darwin and other FreeBSD variants,\nalso set if the `atime` is explicitly set to an earlier value than the current\n`birthtime` using the utimes(2) system call. Prior to Node.js 0.12, the `ctime` held the `birthtime` on Windows systems. As\nof 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
          "position": 0,
          "windowSize": 274
        },
        {
          "id": "w_5586",
          "content": "Time\": Time of file creation. Set once when the\nfile is created. On file systems where birthtime is not available,\nthis field may instead hold either the `ctime` or\n`1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`). This value may be greater\nthan `atime` or `mtime` in this case. On Darwin and other FreeBSD variants,\nalso set if the `atime` is explicitly set to an earlier value than the current\n`birthtime` using the utimes(2) system call. Prior to Node.js 0.12, the `ctime` held the `birthtime` on Windows systems. As\nof 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
          "position": 180,
          "windowSize": 94
        },
        {
          "id": "w_5658",
          "content": "Provides information about a mounted file system. Objects returned from [`fs.statfs()`][] and its synchronous counterpart are of\nthis type. If `bigint` in the `options` passed to those methods is `true`, the\nnumeric values will be `bigint` instead of `number`. `bigint` version:",
          "position": 0,
          "windowSize": 39
        },
        {
          "id": "w_5708",
          "content": "An optimized UTF-8 stream writer that allows for flushing all the internal\nbuffering on demand. It handles `EAGAIN` errors correctly, allowing for\ncustomization, for example, by dropping content if the disk is busy.",
          "position": 0,
          "windowSize": 31
        },
        {
          "id": "w_5718",
          "content": "The `'drop'` event is emitted when to maximal length is reached and that data\nwill not be written. The data that was dropped is passed as the first argument\nto the event handle.",
          "position": 0,
          "windowSize": 31
        },
        {
          "id": "w_5730",
          "content": "The `'write'` event is emitted when a write operation has completed. The number\nof bytes written is passed as the first argument to the event handler.",
          "position": 0,
          "windowSize": 25
        },
        {
          "id": "w_5736",
          "content": "`options` {Object}\n* `append`: {boolean} Appends writes to dest file instead of truncating it.\n  **Default**: `true`.\n* `contentMode`: {string} Which type of data you can send to the write\n  function, supported values are `'utf8'` or `'buffer'`. **Default**:\n  `'utf8'`.\n* `dest`: {string} A path to a file to be written to (mode controlled by the\n  append option).\n* `fd`: {number} A file descriptor, something that is returned by `fs.open()`\n  or `fs.openSync()`.\n* `fs`: {Object} An object that has the same API as the `fs` module, useful\n  for mocking, testing, or customizing the behavior of the stream.\n* `fsync`: {boolean} Perform a `fs.fsyncSync()` every time a write is\n  completed.\n* `maxLength`: {number} The maximum length of the internal buffer. If a write\n  operation would cause the buffer to exceed `maxLength`, the data written is\n  dropped and a drop event is emitted with the dropped data\n* `maxWrite`: {number} The maximum number of bytes that can be written;\n  **Default**: `16384`\n* `minLength`: {number} The minimum length of the internal buffer that is\n  required to be full before flushing.\n* `mkdir`: {boolean} Ensure directory for `dest` file exists when true.\n  **Default**: `false`.\n* `mode`: {number|string} Specify the creating file mode (see `fs.open()`).\n* `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds.\n* `retryEAGAIN` {Function} A function that will be called when `write()`,\n  `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error.\n  If the return value is `true` the operation will be retried, otherwise it\n  will bubble the error. The `err` is the error that caused this function to\n  be called, `writeBufferLen` is the length of the buffer that was written,\n  and `remainingBufferLen` is the length of the remaining buffer that the\n",
          "position": 0,
          "windowSize": 280
        },
        {
          "id": "w_5737",
          "content": "directory for `dest` file exists when true.\n  **Default**: `false`.\n* `mode`: {number|string} Specify the creating file mode (see `fs.open()`).\n* `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds.\n* `retryEAGAIN` {Function} A function that will be called when `write()`,\n  `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error.\n  If the return value is `true` the operation will be retried, otherwise it\n  will bubble the error. The `err` is the error that caused this function to\n  be called, `writeBufferLen` is the length of the buffer that was written,\n  and `remainingBufferLen` is the length of the remaining buffer that the\n  stream did not try to write.\n  * `err` {any} An error or `null`.\n  * `writeBufferLen` {number}\n  * `remainingBufferLen`: {number}\n* `sync`: {boolean} Perform writes synchronously.",
          "position": 180,
          "windowSize": 128
        },
        {
          "id": "w_5824",
          "content": "`callback` {Function}\n* `err` {Error|null} An error if the flush failed, otherwise `null`. Writes the current buffer to the file if a write was not in progress. Do\nnothing if `minLength` is zero or if it is already writing.",
          "position": 0,
          "windowSize": 37
        },
        {
          "id": "w_5843",
          "content": "{number} The maximum length of the internal buffer. If a write\noperation would cause the buffer to exceed `maxLength`, the data written is\ndropped and a drop event is emitted with the dropped data.",
          "position": 0,
          "windowSize": 32
        },
        {
          "id": "w_5851",
          "content": "{boolean} Whether the stream should ensure that the directory for the\n`dest` file exists. If `true`, it will create the directory if it does not\nexist. **Default**: `false`.",
          "position": 0,
          "windowSize": 26
        },
        {
          "id": "w_5867",
          "content": "`file`: {string|Buffer|URL} A path to a file to be written to (mode\ncontrolled by the append option). Reopen the file in place, useful for log rotation.",
          "position": 0,
          "windowSize": 25
        },
        {
          "id": "w_5875",
          "content": "`data` {string|Buffer} The data to write. Returns {boolean} When the `options.contentMode` is set to `'utf8'` when the stream is created,\nthe `data` argument must be a string. If the `contentMode` is set to `'buffer'`,\nthe `data` argument must be a {Buffer}.",
          "position": 0,
          "windowSize": 39
        },
        {
          "id": "w_5945",
          "content": "The path to the file the stream is writing to as specified in the first\nargument to [`fs.createWriteStream()`][]. If `path` is passed as a string, then\n`writeStream.path` will be a string. If `path` is passed as a {Buffer}, then\n`writeStream.path` will be a {Buffer}.",
          "position": 0,
          "windowSize": 41
        },
        {
          "id": "w_5963",
          "content": "Type: {boolean} This property is `true` if the underlying file has not been opened yet,\ni.e. before the `'ready'` event is emitted.",
          "position": 0,
          "windowSize": 21
        },
        {
          "id": "w_5977",
          "content": "The following constants are exported by `fs.constants` and `fsPromises.constants`. Not every constant will be available on every operating system;\nthis is especially important for Windows, where many of the POSIX specific\ndefinitions are not available.\nFor portable applications it is recommended to check for their presence\nbefore use. To use more than one constant, use the bitwise OR `|` operator. Example:",
          "position": 0,
          "windowSize": 57
        },
        {
          "id": "w_5995",
          "content": "The following constants are meant for use as the `mode` parameter passed to\n[`fsPromises.access()`][], [`fs.access()`][], and [`fs.accessSync()`][]. The definitions are also available on Windows.",
          "position": 0,
          "windowSize": 23
        },
        {
          "id": "w_6018",
          "content": "The following constants are meant for use with `fs.open()`. On Windows, only `O_APPEND`, `O_CREAT`, `O_EXCL`, `O_RDONLY`, `O_RDWR`,\n`O_TRUNC`, `O_WRONLY`, and `UV_FS_O_FILEMAP` are available.",
          "position": 0,
          "windowSize": 22
        },
        {
          "id": "w_6024",
          "content": "The following constants are meant for use with the {fs.Stats} object's\n`mode` property for determining a file's type. On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`,\nare available.",
          "position": 0,
          "windowSize": 27
        },
        {
          "id": "w_6033",
          "content": "The following constants are meant for use with the {fs.Stats} object's\n`mode` property for determining the access permissions for a file. On Windows, only `S_IRUSR` and `S_IWUSR` are available.",
          "position": 0,
          "windowSize": 28
        },
        {
          "id": "w_6042",
          "content": "Because they are executed asynchronously by the underlying thread pool,\nthere is no guaranteed ordering when using either the callback or\npromise-based methods. For example, the following is prone to error because the `fs.stat()`\noperation might complete before the `fs.rename()` operation: It is important to correctly order the operations by awaiting the results\nof one before invoking the other: Or, when using the callback APIs, move the `fs.stat()` call into the callback\nof the `fs.rename()` operation:",
          "position": 0,
          "windowSize": 71
        },
        {
          "id": "w_6066",
          "content": "Most `fs` operations accept file paths that may be specified in the form of\na string, a {Buffer}, or a {URL} object using the `file:` protocol.",
          "position": 0,
          "windowSize": 25
        },
        {
          "id": "w_6069",
          "content": "String paths are interpreted as UTF-8 character sequences identifying\nthe absolute or relative filename. Relative paths will be resolved relative\nto the current working directory as determined by calling `process.cwd()`. Example using an absolute path on POSIX: Example using a relative path on POSIX (relative to `process.cwd()`):",
          "position": 0,
          "windowSize": 45
        },
        {
          "id": "w_6081",
          "content": "For most `node:fs` module functions, the `path` or `filename` argument may be\npassed as a {URL} object using the `file:` protocol. `file:` URLs are always absolute paths.",
          "position": 0,
          "windowSize": 26
        },
        {
          "id": "w_6087",
          "content": "On Windows, `file:` {URL}s with a host name convert to UNC paths, while `file:`\n{URL}s with drive letters convert to local absolute paths. `file:` {URL}s\nwith no host name and no drive letter will result in an error: `file:` {URL}s with drive letters must use `:` as a separator just after\nthe drive letter. Using another separator will result in an error. On all other platforms, `file:` {URL}s with a host name are unsupported and\nwill result in an error: A `file:` {URL} having encoded slash characters will result in an error on all\nplatforms: On Windows, `file:` {URL}s having encoded backslash will result in an error:",
          "position": 0,
          "windowSize": 102
        },
        {
          "id": "w_6108",
          "content": "Paths specified using a {Buffer} are useful primarily on certain POSIX\noperating systems that treat file paths as opaque byte sequences. On such\nsystems, it is possible for a single file path to contain sub-sequences that\nuse multiple character encodings. As with string paths, {Buffer} paths may\nbe relative or absolute: Example using an absolute path on POSIX:",
          "position": 0,
          "windowSize": 54
        },
        {
          "id": "w_6120",
          "content": "On Windows, Node.js follows the concept of per-drive working directory. This\nbehavior can be observed when using a drive path without a backslash. For\nexample `fs.readdirSync('C:\\\\')` can potentially return a different result than\n`fs.readdirSync('C:')`. For more information, see\n[this MSDN page][MSDN-Rel-Path].",
          "position": 0,
          "windowSize": 37
        },
        {
          "id": "w_6141",
          "content": "On POSIX systems, for every process, the kernel maintains a table of currently\nopen files and resources. Each open file is assigned a simple numeric\nidentifier called a _file descriptor_. At the system-level, all file system\noperations use these file descriptors to identify and track each specific\nfile. Windows systems use a different but conceptually similar mechanism for\ntracking resources. To simplify things for users, Node.js abstracts away the\ndifferences between operating systems and assigns all open files a numeric file\ndescriptor. The callback-based `fs.open()`, and synchronous `fs.openSync()` methods open a\nfile and allocate a new file descriptor. Once allocated, the file descriptor may\nbe used to read data from, write data to, or request information about the file. Operating systems limit the number of file descriptors that may be open\nat any given time so it is critical to close the descriptor when operations\nare completed. Failure to do so will result in a memory leak that will\neventually cause an application to crash. The promise-based APIs use a {FileHandle} object in place of the numeric\nfile descriptor. These objects are better managed by the system to ensure\nthat resources are not leaked. However, it is still required that they are\nclosed when operations are completed:",
          "position": 0,
          "windowSize": 192
        },
        {
          "id": "w_6186",
          "content": "All callback and promise-based file system APIs (with the exception of\n`fs.FSWatcher()`) use libuv's threadpool. This can have surprising and negative\nperformance implications for some applications. See the\n[`UV_THREADPOOL_SIZE`][] documentation for more information.",
          "position": 0,
          "windowSize": 30
        },
        {
          "id": "w_6198",
          "content": "The following flags are available wherever the `flag` option takes a\nstring. `'a'`: Open file for appending.\nThe file is created if it does not exist.\n `'ax'`: Like `'a'` but fails if the path exists.\n `'a+'`: Open file for reading and appending.\nThe file is created if it does not exist.\n `'ax+'`: Like `'a+'` but fails if the path exists.\n `'as'`: Open file for appending in synchronous mode.\nThe file is created if it does not exist.\n `'as+'`: Open file for reading and appending in synchronous mode.\nThe file is created if it does not exist.\n `'r'`: Open file for reading.\nAn exception occurs if the file does not exist.\n `'rs'`: Open file for reading in synchronous mode.\nAn exception occurs if the file does not exist.\n `'r+'`: Open file for reading and writing.\nAn exception occurs if the file does not exist.\n `'rs+'`: Open file for reading and writing in synchronous mode. Instructs\nthe operating system to bypass the local file system cache.\n\nThis is primarily useful for opening files on NFS mounts as it allows\nskipping the potentially stale local cache. It has a very real impact on\nI/O performance so using this flag is not recommended unless it is needed.\n\nThis doesn't turn `fs.open()` or `fsPromises.open()` into a synchronous\nblocking call. If synchronous operation is desired, something like\n`fs.openSync()` should be used.\n `'w'`: Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n `'wx'`: Like `'w'` but fails if the path exists.\n `'w+'`: Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n `'wx+'`: Like `'w+'` but fails if the path exists. `flag` can also be a number as documented by open(2); commonly used constants\nare available",
          "position": 0,
          "windowSize": 280
        },
        {
          "id": "w_6199",
          "content": "so using this flag is not recommended unless it is needed.\n\nThis doesn't turn `fs.open()` or `fsPromises.open()` into a synchronous\nblocking call. If synchronous operation is desired, something like\n`fs.openSync()` should be used.\n `'w'`: Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n `'wx'`: Like `'w'` but fails if the path exists.\n `'w+'`: Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n `'wx+'`: Like `'w+'` but fails if the path exists. `flag` can also be a number as documented by open(2); commonly used constants\nare available from `fs.constants`. On Windows, flags are translated to\ntheir equivalent ones where applicable, e.g. `O_WRONLY` to `FILE_GENERIC_WRITE`,\nor `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`. The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to\nreturn an error if the path already exists. On POSIX, if the path is a symbolic\nlink, using `O_EXCL` returns an error even if the link is to a path that does\nnot exist. The exclusive flag might not work with network file systems. On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file. Modifying a file rather than replacing it may require the `flag` option to be\nset to `'r+'` rather than the default `'w'`. The behavior of some flags are platform-specific. As such, opening a directory\non macOS and Linux with the `'a+'` flag, as in the example below, will return an\nerror. In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle`\nwill be returned. On Windows, opening an existing hidden file using the `'w'` flag (either\nthrough `fs.open()`,",
          "position": 180,
          "windowSize": 280
        },
        {
          "id": "w_6200",
          "content": "don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file. Modifying a file rather than replacing it may require the `flag` option to be\nset to `'r+'` rather than the default `'w'`. The behavior of some flags are platform-specific. As such, opening a directory\non macOS and Linux with the `'a+'` flag, as in the example below, will return an\nerror. In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle`\nwill be returned. On Windows, opening an existing hidden file using the `'w'` flag (either\nthrough `fs.open()`, `fs.writeFile()`, or `fsPromises.open()`) will fail with\n`EPERM`. Existing hidden files can be opened for writing with the `'r+'` flag. A call to `fs.ftruncate()` or `filehandle.truncate()` can be used to reset\nthe file contents.",
          "position": 360,
          "windowSize": 131
        }
      ]
    },
    "sentence_window": {
      "count": 1835,
      "chunks": [
        {
          "id": "sw_1",
          "content": "The `node:fs` module enables interacting with the file system in a way modeled on standard POSIX functions. To use the promise-based APIs: To use the callback and sync APIs:",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2",
          "content": "To use the promise-based APIs: To use the callback and sync APIs: All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3",
          "content": "To use the callback and sync APIs: All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_15",
          "content": "The callback form takes a completion callback function as its last argument and invokes the operation asynchronously. The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation is completed successfully, then the first argument is `null` or `undefined`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_16",
          "content": "The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation is completed successfully, then the first argument is `null` or `undefined`. The callback-based versions of the `node:fs` module APIs are preferable over the use of the promise APIs when maximal",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_17",
          "content": "If the operation is completed successfully, then the first argument is `null` or `undefined`. The callback-based versions of the `node:fs` module APIs are preferable over the use of the promise APIs when maximal performance (both in terms of execution time and memory allocation) is required.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_27",
          "content": "The synchronous APIs block the Node. js event loop and further JavaScript execution until the operation is complete. Exceptions are thrown immediately and can be handled using `tryâ€¦",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_28",
          "content": "js event loop and further JavaScript execution until the operation is complete. Exceptions are thrown immediately and can be handled using `tryâ€¦ catch`, or can be allowed to bubble up.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_29",
          "content": "Exceptions are thrown immediately and can be handled using `tryâ€¦ catch`, or can be allowed to bubble up.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_39",
          "content": "The `fs/promises` API provides asynchronous file system methods that return promises. The promise APIs use the underlying Node. js threadpool to perform file system operations off the event loop thread.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_40",
          "content": "The promise APIs use the underlying Node. js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_41",
          "content": "js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_42",
          "content": "These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_54",
          "content": "A {FileHandle} object is an object wrapper for a numeric file descriptor. Instances of the {FileHandle} object are created by the `fsPromises. open()` method.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_55",
          "content": "Instances of the {FileHandle} object are created by the `fsPromises. open()` method. All {FileHandle} objects are {EventEmitter}s.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_56",
          "content": "open()` method. All {FileHandle} objects are {EventEmitter}s. If a {FileHandle} is not closed using the `filehandle.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_57",
          "content": "All {FileHandle} objects are {EventEmitter}s. If a {FileHandle} is not closed using the `filehandle. close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_58",
          "content": "If a {FileHandle} is not closed using the `filehandle. close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks. Please do not rely on this behavior because it can be unreliable and the file may not be closed.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_59",
          "content": "close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks. Please do not rely on this behavior because it can be unreliable and the file may not be closed. Instead, always explicitly close {FileHandle}s.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_60",
          "content": "Please do not rely on this behavior because it can be unreliable and the file may not be closed. Instead, always explicitly close {FileHandle}s. js may change this behavior in the future.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_61",
          "content": "Instead, always explicitly close {FileHandle}s. js may change this behavior in the future.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_83",
          "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile. **Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success. Alias of [`filehandle.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_84",
          "content": "**Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success. Alias of [`filehandle. writeFile()`][].",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_85",
          "content": "Alias of [`filehandle. writeFile()`][]. When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_86",
          "content": "writeFile()`][]. When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises. open()`][].",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_87",
          "content": "When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises. open()`][]. Therefore, this is equivalent to [`filehandle.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_88",
          "content": "open()`][]. Therefore, this is equivalent to [`filehandle. writeFile()`][].",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_89",
          "content": "Therefore, this is equivalent to [`filehandle. writeFile()`][].",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_107",
          "content": "`mode` {integer} the file mode bit mask. Returns: {Promise} Fulfills with `undefined` upon success. Modifies the permissions on the file.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_108",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Modifies the permissions on the file. See chmod(2).",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_109",
          "content": "Modifies the permissions on the file. See chmod(2).",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_119",
          "content": "`uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_120",
          "content": "`gid` {integer} The file's new group's group id. Returns: {Promise} Fulfills with `undefined` upon success. Changes the ownership of the file.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_121",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Changes the ownership of the file. A wrapper for chown(2).",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_122",
          "content": "Changes the ownership of the file. A wrapper for chown(2).",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_134",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Closes the file handle after waiting for any pending operation on the handle to complete.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_141",
          "content": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `signal` {AbortSignal|undefined} **Default:** `undefined` Returns: {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_142",
          "content": "ReadStream} `options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file. Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_143",
          "content": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file. Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_144",
          "content": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range. If `start` is omitted or `undefined`, `filehandle.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_145",
          "content": "MAX_SAFE_INTEGER`][]] range. If `start` is omitted or `undefined`, `filehandle. createReadStream()` reads sequentially from the current file position.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_146",
          "content": "If `start` is omitted or `undefined`, `filehandle. createReadStream()` reads sequentially from the current file position. The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_147",
          "content": "createReadStream()` reads sequentially from the current file position. The `encoding` can be any one of those accepted by {Buffer}. If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_148",
          "content": "The `encoding` can be any one of those accepted by {Buffer}. If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available. This can prevent the process from exiting and the stream from closing naturally.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_149",
          "content": "If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available. This can prevent the process from exiting and the stream from closing naturally. By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_150",
          "content": "This can prevent the process from exiting and the stream from closing naturally. By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_151",
          "content": "By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_152",
          "content": "Set the `emitClose` option to `false` to change this behavior. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_153",
          "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak. If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_154",
          "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak. If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically. An example to read the last 10 bytes of a file which is 100 bytes long:",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_155",
          "content": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically. An example to read the last 10 bytes of a file which is 100 bytes long:",
          "position": 14,
          "sentenceCount": 2
        },
        {
          "id": "sw_189",
          "content": "`options` {Object} * `encoding` {string} **Default:** `'utf8'` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`. Returns: {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_190",
          "content": "**Default:** `false`. Returns: {fs. WriteStream}",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_191",
          "content": "Returns: {fs. WriteStream} `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_192",
          "content": "WriteStream} `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_193",
          "content": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range. Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_194",
          "content": "MAX_SAFE_INTEGER`][]] range. Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`. The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_195",
          "content": "Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`. The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_196",
          "content": "The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_197",
          "content": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_198",
          "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak. By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_199",
          "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak. By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_200",
          "content": "By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior.",
          "position": 11,
          "sentenceCount": 2
        },
        {
          "id": "sw_228",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_229",
          "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details. Unlike `filehandle.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_230",
          "content": "Refer to the POSIX fdatasync(2) documentation for details. Unlike `filehandle. sync` this method does not flush modified metadata.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_231",
          "content": "Unlike `filehandle. sync` this method does not flush modified metadata.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_245",
          "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read. `offset` {integer} The location in the buffer at which to start filling. **Default:** `0` `length` {integer} The number of bytes to read.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_246",
          "content": "`offset` {integer} The location in the buffer at which to start filling. **Default:** `0` `length` {integer} The number of bytes to read. **Default:** `buffer.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_247",
          "content": "**Default:** `0` `length` {integer} The number of bytes to read. **Default:** `buffer. byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_248",
          "content": "**Default:** `buffer. byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_249",
          "content": "byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_250",
          "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged. **Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read *",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_251",
          "content": "If `position` is a non-negative integer, the current file position will remain unchanged. **Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the file",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_252",
          "content": "**Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_253",
          "content": "Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 8,
          "sentenceCount": 2
        },
        {
          "id": "sw_275",
          "content": "`options` {Object} * `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read. **Default:** `Buffer. alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_276",
          "content": "**Default:** `Buffer. alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling. **Default:** `0` * `length` {integer} The number of bytes to read.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_277",
          "content": "alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling. **Default:** `0` * `length` {integer} The number of bytes to read. **Default:** `buffer.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_278",
          "content": "**Default:** `0` * `length` {integer} The number of bytes to read. **Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_279",
          "content": "**Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_280",
          "content": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_281",
          "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged. **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read *",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_282",
          "content": "If `position` is a non-negative integer, the current file position will remain unchanged. **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_283",
          "content": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_284",
          "content": "Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 9,
          "sentenceCount": 2
        },
        {
          "id": "sw_308",
          "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read. `options` {Object} * `offset` {integer} The location in the buffer at which to start filling. **Default:** `0` * `length` {integer} The number of bytes to read.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_309",
          "content": "`options` {Object} * `offset` {integer} The location in the buffer at which to start filling. **Default:** `0` * `length` {integer} The number of bytes to read. **Default:** `buffer.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_310",
          "content": "**Default:** `0` * `length` {integer} The number of bytes to read. **Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_311",
          "content": "**Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_312",
          "content": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_313",
          "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged. **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read *",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_314",
          "content": "If `position` is a non-negative integer, the current file position will remain unchanged. **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_315",
          "content": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_316",
          "content": "Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 8,
          "sentenceCount": 2
        },
        {
          "id": "sw_338",
          "content": "`options` {Object} * `autoClose` {boolean} When true, causes the {FileHandle} to be closed when the stream is closed. **Default:** `false` Returns: {ReadableStream} Returns a byte-oriented `ReadableStream` that may be used to read the file's contents.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_339",
          "content": "**Default:** `false` Returns: {ReadableStream} Returns a byte-oriented `ReadableStream` that may be used to read the file's contents. An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_340",
          "content": "Returns a byte-oriented `ReadableStream` that may be used to read the file's contents. An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing. While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_341",
          "content": "An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing. While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically. User code must still call the `fileHandle.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_342",
          "content": "While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically. User code must still call the `fileHandle. close()` method unless the `autoClose` option is set to `true`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_343",
          "content": "User code must still call the `fileHandle. close()` method unless the `autoClose` option is set to `true`.",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_359",
          "content": "`options` {Object|string} * `encoding` {string|null} **Default:** `null` * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills upon a successful read with the contents of the file. If no encoding is specified (using `options. encoding`), the data is returned as a {Buffer} object.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_360",
          "content": "If no encoding is specified (using `options. encoding`), the data is returned as a {Buffer} object. Otherwise, the data will be a string.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_361",
          "content": "encoding`), the data is returned as a {Buffer} object. Otherwise, the data will be a string. Asynchronously reads the entire contents of a file.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_362",
          "content": "Otherwise, the data will be a string. Asynchronously reads the entire contents of a file. If `options` is a string, then it specifies the `encoding`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_363",
          "content": "Asynchronously reads the entire contents of a file. If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support reading.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_364",
          "content": "If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support reading. If one or more `filehandle.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_365",
          "content": "The {FileHandle} has to support reading. If one or more `filehandle. read()` calls are made on a file handle and then a `filehandle.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_366",
          "content": "If one or more `filehandle. read()` calls are made on a file handle and then a `filehandle. readFile()` call is made, the data will be read from the current position till the end of the file.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_367",
          "content": "read()` calls are made on a file handle and then a `filehandle. readFile()` call is made, the data will be read from the current position till the end of the file. It doesn't always read from the beginning of the file.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_368",
          "content": "readFile()` call is made, the data will be read from the current position till the end of the file. It doesn't always read from the beginning of the file.",
          "position": 9,
          "sentenceCount": 2
        },
        {
          "id": "sw_392",
          "content": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` Returns: {readline. InterfaceConstructor} Convenience method to create a `readline`",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_393",
          "content": "InterfaceConstructor} Convenience method to create a `readline` interface and stream over the file. See [`filehandle.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_394",
          "content": "Convenience method to create a `readline` interface and stream over the file. See [`filehandle. createReadStream()`][] for the options.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_395",
          "content": "See [`filehandle. createReadStream()`][] for the options.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_407",
          "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data should be read from. If `position` is not a `number`, the data will be read from the current position. **Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead`",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_408",
          "content": "If `position` is not a `number`, the data will be read from the current position. **Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead` {integer} the number of bytes read * `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing a reference to the `buffers` input. Read from a",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_409",
          "content": "**Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead` {integer} the number of bytes read * `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing a reference to the `buffers` input. Read from a file and write to an array of {ArrayBufferView}s",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_419",
          "content": "`options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_420",
          "content": "Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with an {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_421",
          "content": "**Default:** `false`. Returns: {Promise} Fulfills with an {fs. Stats} for the file.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_422",
          "content": "Returns: {Promise} Fulfills with an {fs. Stats} for the file.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_434",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_435",
          "content": "Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_436",
          "content": "The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_446",
          "content": "`len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success. Truncates the file. If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_447",
          "content": "Truncates the file. If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file. The following example retains only the first four bytes of the file:",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_448",
          "content": "If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file. The following example retains only the first four bytes of the file: If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_449",
          "content": "The following example retains only the first four bytes of the file: If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_450",
          "content": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_464",
          "content": "`atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Change the file system timestamps of the object referenced by the {FileHandle} then fulfills the promise with no arguments upon success.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_470",
          "content": "`buffer` {Buffer|TypedArray|DataView} `offset` {integer} The start position from within `buffer` where the data to write begins. `length` {integer} The number of bytes from `buffer` to write. **Default:** `buffer.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_471",
          "content": "`length` {integer} The number of bytes from `buffer` to write. **Default:** `buffer. byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_472",
          "content": "**Default:** `buffer. byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written. If `position` is not a `number`, the data will be written at the current position.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_473",
          "content": "byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written. If `position` is not a `number`, the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_474",
          "content": "If `position` is not a `number`, the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail. **Default:** `null` Returns: {Promise}",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_475",
          "content": "See the POSIX pwrite(2) documentation for more detail. **Default:** `null` Returns: {Promise} Write `buffer` to the file.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_476",
          "content": "**Default:** `null` Returns: {Promise} Write `buffer` to the file. The promise is fulfilled with an object containing two properties:",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_477",
          "content": "Write `buffer` to the file. The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_478",
          "content": "The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written. It is unsafe to use `filehandle.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_479",
          "content": "`bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written. It is unsafe to use `filehandle. write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_480",
          "content": "It is unsafe to use `filehandle. write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). For this scenario, use [`filehandle.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_481",
          "content": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). For this scenario, use [`filehandle. createWriteStream()`][].",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_482",
          "content": "For this scenario, use [`filehandle. createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_483",
          "content": "createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_484",
          "content": "On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 14,
          "sentenceCount": 2
        },
        {
          "id": "sw_518",
          "content": "`buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {Promise} Write `buffer` to the file.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_519",
          "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {Promise} Write `buffer` to the file. Similar to the above `filehandle.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_520",
          "content": "Write `buffer` to the file. Similar to the above `filehandle. write` function, this version takes an optional `options` object.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_521",
          "content": "Similar to the above `filehandle. write` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_522",
          "content": "write` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_536",
          "content": "`string` {string} `position` {integer|null} The offset from the beginning of the file where the data from `string` should be written. If `position` is not a `number` the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_537",
          "content": "If `position` is not a `number` the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail. **Default:** `null` `encoding` {string} The expected string encoding.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_538",
          "content": "See the POSIX pwrite(2) documentation for more detail. **Default:** `null` `encoding` {string} The expected string encoding. **Default:** `'utf8'` Returns: {Promise}",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_539",
          "content": "**Default:** `null` `encoding` {string} The expected string encoding. **Default:** `'utf8'` Returns: {Promise} Write `string` to the file.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_540",
          "content": "**Default:** `'utf8'` Returns: {Promise} Write `string` to the file. If `string` is not a string, the promise is rejected with an error.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_541",
          "content": "Write `string` to the file. If `string` is not a string, the promise is rejected with an error. The promise is fulfilled with an object containing two properties:",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_542",
          "content": "If `string` is not a string, the promise is rejected with an error. The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_543",
          "content": "The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written. It is unsafe to use `filehandle.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_544",
          "content": "`bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written. It is unsafe to use `filehandle. write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_545",
          "content": "It is unsafe to use `filehandle. write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). For this scenario, use [`filehandle.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_546",
          "content": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). For this scenario, use [`filehandle. createWriteStream()`][].",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_547",
          "content": "For this scenario, use [`filehandle. createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_548",
          "content": "createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_549",
          "content": "On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 13,
          "sentenceCount": 2
        },
        {
          "id": "sw_581",
          "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} The expected character encoding when `data` is a string. **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile. **Default:** `undefined` Returns: {Promise}",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_582",
          "content": "**Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile. **Default:** `undefined` Returns: {Promise} Asynchronously writes data to a file, replacing the file if it already exists.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_583",
          "content": "**Default:** `undefined` Returns: {Promise} Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_584",
          "content": "Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object. The promise is fulfilled with no arguments upon success.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_585",
          "content": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object. The promise is fulfilled with no arguments upon success. If `options` is a string, then it specifies the `encoding`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_586",
          "content": "The promise is fulfilled with no arguments upon success. If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support writing.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_587",
          "content": "If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support writing. It is unsafe to use `filehandle.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_588",
          "content": "The {FileHandle} has to support writing. It is unsafe to use `filehandle. writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_589",
          "content": "It is unsafe to use `filehandle. writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). If one or more `filehandle.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_590",
          "content": "writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). If one or more `filehandle. write()` calls are made on a file handle and then a `filehandle.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_591",
          "content": "If one or more `filehandle. write()` calls are made on a file handle and then a `filehandle. writeFile()` call is made, the data will be written from the current position till the end of the file.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_592",
          "content": "write()` calls are made on a file handle and then a `filehandle. writeFile()` call is made, the data will be written from the current position till the end of the file. It doesn't always write from the beginning of the file.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_593",
          "content": "writeFile()` call is made, the data will be written from the current position till the end of the file. It doesn't always write from the beginning of the file.",
          "position": 12,
          "sentenceCount": 2
        },
        {
          "id": "sw_623",
          "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data from `buffers` should be written. If `position` is not a `number`, the data will be written at the current position. **Default:** `null` Returns: {Promise}",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_624",
          "content": "If `position` is not a `number`, the data will be written at the current position. **Default:** `null` Returns: {Promise} Write an array of {ArrayBufferView}s to the file.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_625",
          "content": "**Default:** `null` Returns: {Promise} Write an array of {ArrayBufferView}s to the file. The promise is fulfilled with an object containing a two properties:",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_626",
          "content": "Write an array of {ArrayBufferView}s to the file. The promise is fulfilled with an object containing a two properties: `bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_627",
          "content": "The promise is fulfilled with an object containing a two properties: `bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input. It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_628",
          "content": "`bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input. It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_629",
          "content": "It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_630",
          "content": "On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_649",
          "content": "Calls `filehandle. close()` and returns a promise that fulfills when the filehandle is closed.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_655",
          "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs. F_OK` Returns: {Promise} Fulfills with `undefined` upon success. Tests a user's permissions for the file or directory specified by `path`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_656",
          "content": "F_OK` Returns: {Promise} Fulfills with `undefined` upon success. Tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_657",
          "content": "Tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_658",
          "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_659",
          "content": "`mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_660",
          "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs. W_OK`, and `fs.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_661",
          "content": "R_OK`, `fs. W_OK`, and `fs. Check [File access constants][] for possible values of `mode`.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_662",
          "content": "W_OK`, and `fs. Check [File access constants][] for possible values of `mode`. If the accessibility check is successful, the promise is fulfilled with no value.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_663",
          "content": "Check [File access constants][] for possible values of `mode`. If the accessibility check is successful, the promise is fulfilled with no value. If any of the accessibility checks fail, the promise is rejected with an {Error} object.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_664",
          "content": "If the accessibility check is successful, the promise is fulfilled with no value. If any of the accessibility checks fail, the promise is rejected with an {Error} object. The following example checks if the file `/etc/passwd` can be read and written by the current process.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_665",
          "content": "If any of the accessibility checks fail, the promise is rejected with an {Error} object. The following example checks if the file `/etc/passwd` can be read and written by the current process. Using `fsPromises.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_666",
          "content": "The following example checks if the file `/etc/passwd` can be read and written by the current process. Using `fsPromises. access()` to check for the accessibility of a file before calling `fsPromises.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_667",
          "content": "Using `fsPromises. access()` to check for the accessibility of a file before calling `fsPromises. open()` is not recommended.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_668",
          "content": "access()` to check for the accessibility of a file before calling `fsPromises. open()` is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_669",
          "content": "open()` is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_670",
          "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
          "position": 15,
          "sentenceCount": 2
        },
        {
          "id": "sw_706",
          "content": "`path` {string|Buffer|URL|FileHandle} filename or {FileHandle} `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_707",
          "content": "**Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_708",
          "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`. Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_709",
          "content": "**Default:** `false`. Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously append data to a file, creating the file if it does not yet exist.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_710",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_711",
          "content": "Asynchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}. If `options` is a string, then it specifies the `encoding`.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_712",
          "content": "`data` can be a string or a {Buffer}. If `options` is a string, then it specifies the `encoding`. The `mode` option only affects the newly created file.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_713",
          "content": "If `options` is a string, then it specifies the `encoding`. The `mode` option only affects the newly created file. open()`][] for more details.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_714",
          "content": "The `mode` option only affects the newly created file. open()`][] for more details. The `path` may be specified as a {FileHandle} that has been opened for appending (using `fsPromises.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_715",
          "content": "open()`][] for more details. The `path` may be specified as a {FileHandle} that has been opened for appending (using `fsPromises.",
          "position": 9,
          "sentenceCount": 2
        },
        {
          "id": "sw_738",
          "content": "`path` {string|Buffer|URL} `mode` {string|integer} Returns: {Promise} Fulfills with `undefined` upon success. Changes the permissions of a file.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_743",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success. Changes the ownership of a file.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_749",
          "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} Optional modifiers that specify the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_750",
          "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs. COPYFILE_FICLONE`) **Default:** `0`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_751",
          "content": "COPYFILE_EXCL | fs. COPYFILE_FICLONE`) **Default:** `0`. COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_752",
          "content": "COPYFILE_FICLONE`) **Default:** `0`. COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_753",
          "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_754",
          "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_755",
          "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_756",
          "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail. Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_757",
          "content": "If the platform does not support copy-on-write, then the operation will fail. Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies `src` to `dest`.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_758",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_759",
          "content": "Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists. No guarantees are made about the atomicity of the copy operation.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_760",
          "content": "By default, `dest` is overwritten if it already exists. No guarantees are made about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_761",
          "content": "No guarantees are made about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination.",
          "position": 12,
          "sentenceCount": 2
        },
        {
          "id": "sw_792",
          "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_793",
          "content": "`dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_794",
          "content": "`options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_795",
          "content": "**Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_796",
          "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`. * `filter` {Function} Function to filter copied files/directories.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_797",
          "content": "**Default:** `false`. * `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_798",
          "content": "* `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_799",
          "content": "Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well. Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_800",
          "content": "When ignoring a directory, all of its contents will be skipped as well. Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`. * `src` {string} source path to copy.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_801",
          "content": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`. * `src` {string} source path to copy. * `dest` {string} destination path to copy to.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_802",
          "content": "* `src` {string} source path to copy. * `dest` {string} destination path to copy to. * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_803",
          "content": "* `dest` {string} destination path to copy to. * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value. * `force` {boolean} overwrite existing file or directory.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_804",
          "content": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value. * `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_805",
          "content": "* `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_806",
          "content": "The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior. **Default:** `true`.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_807",
          "content": "Use the `errorOnExist` option to change this behavior. **Default:** `true`. * `mode` {integer} modifiers for copy operation.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_808",
          "content": "**Default:** `true`. * `mode` {integer} modifiers for copy operation. **Default:** `0`.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_809",
          "content": "* `mode` {integer} modifiers for copy operation. **Default:** `0`. See `mode` flag of [`fsPromises.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_810",
          "content": "**Default:** `0`. See `mode` flag of [`fsPromises. copyFile()`][].",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_811",
          "content": "See `mode` flag of [`fsPromises. copyFile()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_812",
          "content": "copyFile()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_813",
          "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_814",
          "content": "**Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_815",
          "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and",
          "position": 23,
          "sentenceCount": 3
        },
        {
          "id": "sw_816",
          "content": "**Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 24,
          "sentenceCount": 3
        },
        {
          "id": "sw_817",
          "content": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 25,
          "sentenceCount": 2
        },
        {
          "id": "sw_873",
          "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory. **Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_874",
          "content": "**Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_875",
          "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_876",
          "content": "If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`. If a string array is provided, each string should be a glob pattern that specifies paths to exclude.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_877",
          "content": "**Default:** `undefined`. If a string array is provided, each string should be a glob pattern that specifies paths to exclude. Note: Negation patterns (e.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_878",
          "content": "If a string array is provided, each string should be a glob pattern that specifies paths to exclude. Note: Negation patterns (e. js') are not supported.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_879",
          "content": "Note: Negation patterns (e. js') are not supported. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_880",
          "content": "js') are not supported. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_881",
          "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`. Returns: {AsyncIterator} An AsyncIterator that yields the paths of files that match the pattern.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_882",
          "content": "**Default:** `false`. Returns: {AsyncIterator} An AsyncIterator that yields the paths of files that match the pattern.",
          "position": 9,
          "sentenceCount": 2
        },
        {
          "id": "sw_906",
          "content": "`path` {string|Buffer|URL} `mode` {integer} Returns: {Promise} Fulfills with `undefined` upon success. Changes the permissions on a symbolic link. This method is only implemented on macOS.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_907",
          "content": "Changes the permissions on a symbolic link. This method is only implemented on macOS.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_915",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success. Changes the ownership on a symbolic link.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_921",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success. Changes the access and modification times of a file in the same way as [`fsPromises. utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced:",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_922",
          "content": "Changes the access and modification times of a file in the same way as [`fsPromises. utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_930",
          "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success. Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_931",
          "content": "Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_939",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_940",
          "content": "Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with the {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_941",
          "content": "**Default:** `false`. Returns: {Promise} Fulfills with the {fs. Stats} object for the given symbolic link `path`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_942",
          "content": "Returns: {Promise} Fulfills with the {fs. Stats} object for the given symbolic link `path`. Equivalent to [`fsPromises.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_943",
          "content": "Stats} object for the given symbolic link `path`. Equivalent to [`fsPromises. stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_944",
          "content": "Equivalent to [`fsPromises. stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to. Refer to the POSIX lstat(2) document for more detail.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_945",
          "content": "stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to. Refer to the POSIX lstat(2) document for more detail.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_963",
          "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_964",
          "content": "**Default:** `0o777`. Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`. Asynchronously creates a directory.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_965",
          "content": "Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`. Asynchronously creates a directory. The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_966",
          "content": "Asynchronously creates a directory. The optional `options` argument can be an integer specifying `mode` (permission and sticky bits) or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_967",
          "content": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits) or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created. Calling `fsPromises.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_968",
          "content": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created. Calling `fsPromises. mkdir()` when `path` is a directory that exists results in a rejection only when `recursive` is false.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_969",
          "content": "Calling `fsPromises. mkdir()` when `path` is a directory that exists results in a rejection only when `recursive` is false.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_987",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a string containing the file system path of the newly created temporary directory. Creates a unique temporary directory. A unique directory name is generated by appending six random characters to the end of the",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_988",
          "content": "Creates a unique temporary directory. A unique directory name is generated by appending six random characters to the end of the provided `prefix`. Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_989",
          "content": "A unique directory name is generated by appending six random characters to the end of the provided `prefix`. Due to platform inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_990",
          "content": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_991",
          "content": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use. The `fsPromises.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_992",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use. The `fsPromises. mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_993",
          "content": "The `fsPromises. mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string. For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_994",
          "content": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string. For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_1014",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a Promise for an async-disposable Object: * `path` {string} The path of the created directory. * `remove` {AsyncFunction} A function which removes the created directory. * `[Symbol.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1015",
          "content": "* `remove` {AsyncFunction} A function which removes the created directory. * `[Symbol. asyncDispose]` {AsyncFunction} The same as `remove`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1016",
          "content": "* `[Symbol. asyncDispose]` {AsyncFunction} The same as `remove`. The resulting Promise holds an async-disposable object whose `path` property holds the created directory path.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1017",
          "content": "asyncDispose]` {AsyncFunction} The same as `remove`. The resulting Promise holds an async-disposable object whose `path` property holds the created directory path. When the object is disposed, the directory and its contents will be removed asynchronously if it still exists.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1018",
          "content": "The resulting Promise holds an async-disposable object whose `path` property holds the created directory path. When the object is disposed, the directory and its contents will be removed asynchronously if it still exists. If the directory cannot be deleted, disposal will throw an error.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1019",
          "content": "When the object is disposed, the directory and its contents will be removed asynchronously if it still exists. If the directory cannot be deleted, disposal will throw an error. The object has an async `remove()` method which will perform the same task.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1020",
          "content": "If the directory cannot be deleted, disposal will throw an error. The object has an async `remove()` method which will perform the same task. Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1021",
          "content": "The object has an async `remove()` method which will perform the same task. Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises. mkdtempDisposable('prefix')`.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1022",
          "content": "Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises. mkdtempDisposable('prefix')`. For detailed information, see the documentation of [`fsPromises.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1023",
          "content": "mkdtempDisposable('prefix')`. For detailed information, see the documentation of [`fsPromises. mkdtemp()`][].",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1024",
          "content": "For detailed information, see the documentation of [`fsPromises. mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1025",
          "content": "mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 11,
          "sentenceCount": 2
        },
        {
          "id": "sw_1053",
          "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][]. **Default:** `'r'`. `mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1054",
          "content": "**Default:** `'r'`. `mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created. **Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1055",
          "content": "`mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created. **Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object. Opens a {FileHandle}.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1056",
          "content": "**Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object. Opens a {FileHandle}. Refer to the POSIX open(2) documentation for more detail.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1057",
          "content": "Opens a {FileHandle}. Refer to the POSIX open(2) documentation for more detail. Some characters (`< > : \" / \\ | ?",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1058",
          "content": "Refer to the POSIX open(2) documentation for more detail. Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1059",
          "content": "Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains a colon, Node.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1060",
          "content": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains a colon, Node. js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1061",
          "content": "Under NTFS, if the filename contains a colon, Node. js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
          "position": 8,
          "sentenceCount": 2
        },
        {
          "id": "sw_1083",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1084",
          "content": "Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable} containing all sub files and directories. **Default:** `false` Returns: {Promise} Fulfills with an {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1085",
          "content": "**Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable} containing all sub files and directories. **Default:** `false` Returns: {Promise} Fulfills with an {fs. Asynchronously open a directory for iterative scanning.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1086",
          "content": "**Default:** `false` Returns: {Promise} Fulfills with an {fs. Asynchronously open a directory for iterative scanning. See the POSIX opendir(3) documentation for more detail.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1087",
          "content": "Asynchronously open a directory for iterative scanning. See the POSIX opendir(3) documentation for more detail. Creates an {fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1088",
          "content": "See the POSIX opendir(3) documentation for more detail. Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1089",
          "content": "Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1090",
          "content": "Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations. Example using async iteration:",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1091",
          "content": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations. Example using async iteration: When using the async iterator, the {fs.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1092",
          "content": "Example using async iteration: When using the async iterator, the {fs. Dir} object will be automatically closed after the iterator exits.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1093",
          "content": "When using the async iterator, the {fs. Dir} object will be automatically closed after the iterator exits.",
          "position": 10,
          "sentenceCount": 2
        },
        {
          "id": "sw_1119",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively. In recursive mode, it will list all files, sub files, and directories. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1120",
          "content": "In recursive mode, it will list all files, sub files, and directories. **Default:** `false`. Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.'",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1121",
          "content": "**Default:** `false`. Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.' ` and `'..'",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1122",
          "content": "Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.' ` and `'..' Reads the contents of a directory.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1123",
          "content": "` and `'..' Reads the contents of a directory. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1124",
          "content": "Reads the contents of a directory. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1125",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1126",
          "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options. withFileTypes` is set to `true`, the returned array will contain {fs.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1127",
          "content": "If `options. withFileTypes` is set to `true`, the returned array will contain {fs. Dirent} objects.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1128",
          "content": "withFileTypes` is set to `true`, the returned array will contain {fs. Dirent} objects.",
          "position": 9,
          "sentenceCount": 2
        },
        {
          "id": "sw_1152",
          "content": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1153",
          "content": "**Default:** `'r'`. * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file. Asynchronously reads the entire contents of a file.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1154",
          "content": "* `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file. Asynchronously reads the entire contents of a file. If no encoding is specified (using `options.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1155",
          "content": "Asynchronously reads the entire contents of a file. If no encoding is specified (using `options. encoding`), the data is returned as a {Buffer} object.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1156",
          "content": "If no encoding is specified (using `options. encoding`), the data is returned as a {Buffer} object. Otherwise, the data will be a string.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1157",
          "content": "encoding`), the data is returned as a {Buffer} object. Otherwise, the data will be a string. If `options` is a string, then it specifies the encoding.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1158",
          "content": "Otherwise, the data will be a string. If `options` is a string, then it specifies the encoding. When the `path` is a directory, the behavior of `fsPromises.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1159",
          "content": "If `options` is a string, then it specifies the encoding. When the `path` is a directory, the behavior of `fsPromises. readFile()` is platform-specific.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1160",
          "content": "When the `path` is a directory, the behavior of `fsPromises. readFile()` is platform-specific. On macOS, Linux, and Windows, the promise will be rejected with an error.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1161",
          "content": "readFile()` is platform-specific. On macOS, Linux, and Windows, the promise will be rejected with an error. On FreeBSD, a representation of the directory's contents will be returned.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1162",
          "content": "On macOS, Linux, and Windows, the promise will be rejected with an error. On FreeBSD, a representation of the directory's contents will be returned. An example of reading a `package.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1163",
          "content": "On FreeBSD, a representation of the directory's contents will be returned. An example of reading a `package. json` file located in the same directory of the running code:",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_1164",
          "content": "An example of reading a `package. json` file located in the same directory of the running code: It is possible to abort an ongoing `readFile` using an {AbortSignal}.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_1165",
          "content": "json` file located in the same directory of the running code: It is possible to abort an ongoing `readFile` using an {AbortSignal}. If a request is aborted the promise returned is rejected with an `AbortError`:",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_1166",
          "content": "It is possible to abort an ongoing `readFile` using an {AbortSignal}. If a request is aborted the promise returned is rejected with an `AbortError`: Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_1167",
          "content": "If a request is aborted the promise returned is rejected with an `AbortError`: Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. readFile` performs.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_1168",
          "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. readFile` performs. Any specified {FileHandle} has to support reading.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_1169",
          "content": "readFile` performs. Any specified {FileHandle} has to support reading.",
          "position": 17,
          "sentenceCount": 2
        },
        {
          "id": "sw_1209",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the `linkString` upon success. Reads the contents of the symbolic link referred to by `path`. See the POSIX readlink(2) documentation for more detail.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1210",
          "content": "Reads the contents of the symbolic link referred to by `path`. See the POSIX readlink(2) documentation for more detail. The promise is fulfilled with the `linkString` upon success.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1211",
          "content": "See the POSIX readlink(2) documentation for more detail. The promise is fulfilled with the `linkString` upon success. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1212",
          "content": "The promise is fulfilled with the `linkString` upon success. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1213",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_1227",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the resolved path upon success. Determines the actual location of `path` using the same semantics as the `fs. native()` function.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1228",
          "content": "Determines the actual location of `path` using the same semantics as the `fs. native()` function. Only paths that can be converted to UTF8 strings are supported.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1229",
          "content": "native()` function. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1230",
          "content": "Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1231",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1232",
          "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1233",
          "content": "On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1234",
          "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_1253",
          "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success. Renames `oldPath` to `newPath`.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_1259",
          "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1260",
          "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used. Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1261",
          "content": "The `options` argument is still accepted for backwards compatibility but it is not used. Returns: {Promise} Fulfills with `undefined` upon success. Removes the directory identified by `path`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1262",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Removes the directory identified by `path`. Using `fsPromises.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1263",
          "content": "Removes the directory identified by `path`. Using `fsPromises. rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1264",
          "content": "Using `fsPromises. rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1265",
          "content": "rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises. rm()`][] with options `{ recursive: true, force: true }`.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1266",
          "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises. rm()`][] with options `{ recursive: true, force: true }`.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_1286",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist. **Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1287",
          "content": "**Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1288",
          "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1289",
          "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries. This option is ignored if the `recursive` option is not `true`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1290",
          "content": "This option represents the number of retries. This option is ignored if the `recursive` option is not `true`. **Default:** `0`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1291",
          "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive directory removal.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1292",
          "content": "**Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive directory removal. In recursive mode operations are retried on failure.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1293",
          "content": "* `recursive` {boolean} If `true`, perform a recursive directory removal. In recursive mode operations are retried on failure. **Default:** `false`.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1294",
          "content": "In recursive mode operations are retried on failure. **Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1295",
          "content": "**Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1296",
          "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`. **Default:** `100`.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1297",
          "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `100`. Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_1298",
          "content": "**Default:** `100`. Returns: {Promise} Fulfills with `undefined` upon success. Removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_1299",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success. Removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 13,
          "sentenceCount": 2
        },
        {
          "id": "sw_1331",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1332",
          "content": "Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with the {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1333",
          "content": "**Default:** `false`. Returns: {Promise} Fulfills with the {fs. Stats} object for the given `path`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1334",
          "content": "Returns: {Promise} Fulfills with the {fs. Stats} object for the given `path`.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_1346",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. StatFs} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1347",
          "content": "StatFs} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with the {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1348",
          "content": "**Default:** `false`. Returns: {Promise} Fulfills with the {fs. StatFs} object for the given `path`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1349",
          "content": "Returns: {Promise} Fulfills with the {fs. StatFs} object for the given `path`.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_1361",
          "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: {Promise} Fulfills with `undefined` upon success. Creates a symbolic link. The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1362",
          "content": "Creates a symbolic link. The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`. If the `type` argument is `null`, Node.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1363",
          "content": "The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`. If the `type` argument is `null`, Node. js will autodetect `target` type and use `'file'` or `'dir'`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1364",
          "content": "If the `type` argument is `null`, Node. js will autodetect `target` type and use `'file'` or `'dir'`. If the `target` does not exist, `'file'` will be used.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1365",
          "content": "js will autodetect `target` type and use `'file'` or `'dir'`. If the `target` does not exist, `'file'` will be used. Windows junction points require the destination path to be absolute.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1366",
          "content": "If the `target` does not exist, `'file'` will be used. Windows junction points require the destination path to be absolute. When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1367",
          "content": "Windows junction points require the destination path to be absolute. When using `'junction'`, the `target` argument will automatically be normalized to absolute path. Junction points on NTFS volumes can only point to directories.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1368",
          "content": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path. Junction points on NTFS volumes can only point to directories.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_1388",
          "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success. Truncates (shortens or extends the length) of the content at `path` to `len` bytes.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_1394",
          "content": "`path` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success. If `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers. If the `path` refers to a file path that is not a symbolic link, the file is deleted.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1395",
          "content": "If `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers. If the `path` refers to a file path that is not a symbolic link, the file is deleted. See the POSIX unlink(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1396",
          "content": "If the `path` refers to a file path that is not a symbolic link, the file is deleted. See the POSIX unlink(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_1406",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success. Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules:",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1407",
          "content": "Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1408",
          "content": "The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789. If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1409",
          "content": "Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789. If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_1422",
          "content": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched. **Default:** `true`. * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1423",
          "content": "**Default:** `true`. * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1424",
          "content": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [caveats][]). **Default:** `false`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1425",
          "content": "This applies when a directory is specified, and only on supported platforms (See [caveats][]). **Default:** `false`. * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1426",
          "content": "**Default:** `false`. * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener. **Default:** `'utf8'`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1427",
          "content": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener. **Default:** `'utf8'`. * `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1428",
          "content": "**Default:** `'utf8'`. * `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop. * `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1429",
          "content": "* `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop. * `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned. **Default:** `2048`.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1430",
          "content": "* `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned. **Default:** `2048`. * `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1431",
          "content": "**Default:** `2048`. * `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows. `'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1432",
          "content": "* `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows. `'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception. **Default:** `'ignore'`.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1433",
          "content": "`'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception. **Default:** `'ignore'`. Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_1434",
          "content": "**Default:** `'ignore'`. Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed. Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_1435",
          "content": "Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed. Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory. On most platforms, `'rename'` is emitted whenever a filename appears",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_1436",
          "content": "Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory. On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory. All the [caveats][] for `fs.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_1437",
          "content": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory. All the [caveats][] for `fs. watch()` also apply to `fsPromises.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_1438",
          "content": "All the [caveats][] for `fs. watch()` also apply to `fsPromises.",
          "position": 16,
          "sentenceCount": 2
        },
        {
          "id": "sw_1477",
          "content": "`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. * `flush` {boolean}",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1478",
          "content": "**Default:** `'w'`. * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `filehandle. sync()` is used to flush the data.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1479",
          "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `filehandle. sync()` is used to flush the data. **Default:** `false`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1480",
          "content": "sync()` is used to flush the data. **Default:** `false`. * `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1481",
          "content": "**Default:** `false`. * `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously writes data to a file, replacing the file if it already exists.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1482",
          "content": "* `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1483",
          "content": "Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object. The `encoding` option is ignored if `data` is a buffer.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1484",
          "content": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object. The `encoding` option is ignored if `data` is a buffer. If `options` is a string, then it specifies the encoding.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1485",
          "content": "The `encoding` option is ignored if `data` is a buffer. If `options` is a string, then it specifies the encoding. The `mode` option only affects the newly created file.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1486",
          "content": "If `options` is a string, then it specifies the encoding. The `mode` option only affects the newly created file. open()`][] for more details.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1487",
          "content": "The `mode` option only affects the newly created file. open()`][] for more details. Any specified {FileHandle} has to support writing.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1488",
          "content": "open()`][] for more details. Any specified {FileHandle} has to support writing. It is unsafe to use `fsPromises.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_1489",
          "content": "Any specified {FileHandle} has to support writing. It is unsafe to use `fsPromises. writeFile()` multiple times on the same file without waiting for the promise to be settled.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_1490",
          "content": "It is unsafe to use `fsPromises. writeFile()` multiple times on the same file without waiting for the promise to be settled. Similarly to `fsPromises.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_1491",
          "content": "writeFile()` multiple times on the same file without waiting for the promise to be settled. Similarly to `fsPromises. readFile` - `fsPromises.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_1492",
          "content": "Similarly to `fsPromises. readFile` - `fsPromises. writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_1493",
          "content": "readFile` - `fsPromises. writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it. For performance sensitive code consider using [`fs.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_1494",
          "content": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it. For performance sensitive code consider using [`fs. createWriteStream()`][] or [`filehandle.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_1495",
          "content": "For performance sensitive code consider using [`fs. createWriteStream()`][] or [`filehandle. createWriteStream()`][].",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_1496",
          "content": "createWriteStream()`][] or [`filehandle. createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fsPromises.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_1497",
          "content": "createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fsPromises. writeFile()`.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_1498",
          "content": "It is possible to use an {AbortSignal} to cancel an `fsPromises. writeFile()`. Cancelation is \"best effort\", and some amount of data is likely still to be written.",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_1499",
          "content": "writeFile()`. Cancelation is \"best effort\", and some amount of data is likely still to be written. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_1500",
          "content": "Cancelation is \"best effort\", and some amount of data is likely still to be written. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. writeFile` performs.",
          "position": 23,
          "sentenceCount": 3
        },
        {
          "id": "sw_1501",
          "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. writeFile` performs.",
          "position": 24,
          "sentenceCount": 2
        },
        {
          "id": "sw_1555",
          "content": "Type: {Object} Returns an object containing commonly used constants for file system operations. The object is the same as `fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1556",
          "content": "Returns an object containing commonly used constants for file system operations. The object is the same as `fs. constants`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1557",
          "content": "The object is the same as `fs. constants`. See [FS constants][] for more details.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1558",
          "content": "constants`. See [FS constants][] for more details.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_1570",
          "content": "The callback APIs perform all operations asynchronously, without blocking the event loop, then invoke a callback function upon completion or error. The callback APIs use the underlying Node. js threadpool to perform file system operations off the event loop thread.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1571",
          "content": "The callback APIs use the underlying Node. js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1572",
          "content": "js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1573",
          "content": "These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_1586",
          "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs. F_OK` `callback` {Function} * `err` {Error} Tests a user's permissions for the file or directory specified by `path`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1587",
          "content": "F_OK` `callback` {Function} * `err` {Error} Tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1588",
          "content": "Tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1589",
          "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1590",
          "content": "`mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1591",
          "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs. W_OK`, and `fs.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1592",
          "content": "R_OK`, `fs. W_OK`, and `fs. Check [File access constants][] for possible values of `mode`.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1593",
          "content": "W_OK`, and `fs. Check [File access constants][] for possible values of `mode`. The final argument, `callback`, is a callback function that is invoked with a possible error argument.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1594",
          "content": "Check [File access constants][] for possible values of `mode`. The final argument, `callback`, is a callback function that is invoked with a possible error argument. If any of the accessibility checks fail, the error argument will be an `Error` object.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1595",
          "content": "The final argument, `callback`, is a callback function that is invoked with a possible error argument. If any of the accessibility checks fail, the error argument will be an `Error` object. The following examples check if `package.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1596",
          "content": "If any of the accessibility checks fail, the error argument will be an `Error` object. The following examples check if `package. json` exists, and if it is readable or writable.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1597",
          "content": "The following examples check if `package. json` exists, and if it is readable or writable. Do not use `fs.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_1598",
          "content": "json` exists, and if it is readable or writable. Do not use `fs. access()` to check for the accessibility of a file before calling `fs.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_1599",
          "content": "Do not use `fs. access()` to check for the accessibility of a file before calling `fs. open()`, `fs.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_1600",
          "content": "access()` to check for the accessibility of a file before calling `fs. open()`, `fs. readFile()`, or `fs.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_1601",
          "content": "open()`, `fs. readFile()`, or `fs. writeFile()`.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_1602",
          "content": "readFile()`, or `fs. writeFile()`. Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_1603",
          "content": "writeFile()`. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_1604",
          "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible. **write (NOT RECOMMENDED)**",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_1605",
          "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible. **write (NOT RECOMMENDED)** **write (RECOMMENDED)**",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_1606",
          "content": "**write (NOT RECOMMENDED)** **write (RECOMMENDED)** **read (NOT RECOMMENDED)**",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_1607",
          "content": "**write (RECOMMENDED)** **read (NOT RECOMMENDED)** **read (RECOMMENDED)**",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_1608",
          "content": "**read (NOT RECOMMENDED)** **read (RECOMMENDED)** The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_1609",
          "content": "**read (RECOMMENDED)** The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any. In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a",
          "position": 23,
          "sentenceCount": 3
        },
        {
          "id": "sw_1610",
          "content": "The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any. In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another",
          "position": 24,
          "sentenceCount": 3
        },
        {
          "id": "sw_1611",
          "content": "In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process. On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory. access()` function, however, does not check the ACL and therefore may report that a",
          "position": 25,
          "sentenceCount": 3
        },
        {
          "id": "sw_1612",
          "content": "On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory. access()` function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it.",
          "position": 26,
          "sentenceCount": 2
        },
        {
          "id": "sw_1670",
          "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1671",
          "content": "**Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1672",
          "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`. `callback` {Function} * `err` {Error}",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1673",
          "content": "**Default:** `false`. `callback` {Function} * `err` {Error} Asynchronously append data to a file, creating the file if it does not yet exist.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1674",
          "content": "`callback` {Function} * `err` {Error} Asynchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1675",
          "content": "Asynchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}. The `mode` option only affects the newly created file.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1676",
          "content": "`data` can be a string or a {Buffer}. The `mode` option only affects the newly created file. open()`][] for more details.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1677",
          "content": "The `mode` option only affects the newly created file. open()`][] for more details. If `options` is a string, then it specifies the encoding:",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1678",
          "content": "open()`][] for more details. If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1679",
          "content": "If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs. open()` or `fs.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1680",
          "content": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs. open()` or `fs. openSync()`).",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1681",
          "content": "open()` or `fs. openSync()`). The file descriptor will not be closed automatically.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_1682",
          "content": "openSync()`). The file descriptor will not be closed automatically.",
          "position": 12,
          "sentenceCount": 2
        },
        {
          "id": "sw_1712",
          "content": "`path` {string|Buffer|URL} `mode` {string|integer} `callback` {Function} * `err` {Error} Asynchronously changes the permissions of a file. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1713",
          "content": "Asynchronously changes the permissions of a file. No arguments other than a possible exception are given to the completion callback. See the POSIX chmod(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1714",
          "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX chmod(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_1724",
          "content": "The `mode` argument used in both the `fs. chmod()` and `fs. chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants:",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1725",
          "content": "chmod()` and `fs. chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants: An easier method of constructing the `mode` is to use a sequence of three octal digits (e.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1726",
          "content": "chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants: An easier method of constructing the `mode` is to use a sequence of three octal digits (e. The left-most digit (`7` in the example), specifies the permissions for the file owner.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1727",
          "content": "An easier method of constructing the `mode` is to use a sequence of three octal digits (e. The left-most digit (`7` in the example), specifies the permissions for the file owner. The middle digit (`6` in the example), specifies permissions for the group.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1728",
          "content": "The left-most digit (`7` in the example), specifies the permissions for the file owner. The middle digit (`6` in the example), specifies permissions for the group. The right-most digit (`5` in the example), specifies the permissions for others.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1729",
          "content": "The middle digit (`6` in the example), specifies permissions for the group. The right-most digit (`5` in the example), specifies the permissions for others. For example, the octal value `0o765` means:",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1730",
          "content": "The right-most digit (`5` in the example), specifies the permissions for others. For example, the octal value `0o765` means: The owner may read, write, and execute the file.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1731",
          "content": "For example, the octal value `0o765` means: The owner may read, write, and execute the file. The group may read and write the file.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1732",
          "content": "The owner may read, write, and execute the file. The group may read and write the file. Others may read and execute the file.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1733",
          "content": "The group may read and write the file. Others may read and execute the file. When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1734",
          "content": "Others may read and execute the file. When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently. Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1735",
          "content": "When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently. Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs. constants`.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_1736",
          "content": "Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs. constants`. Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_1737",
          "content": "constants`. Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented.",
          "position": 13,
          "sentenceCount": 2
        },
        {
          "id": "sw_1769",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error} Asynchronously changes owner and group of a file. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1770",
          "content": "Asynchronously changes owner and group of a file. No arguments other than a possible exception are given to the completion callback. See the POSIX chown(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1771",
          "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX chown(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_1781",
          "content": "`fd` {integer} `callback` {Function} * `err` {Error} Closes the file descriptor. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1782",
          "content": "Closes the file descriptor. No arguments other than a possible exception are given to the completion callback. Calling `fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1783",
          "content": "No arguments other than a possible exception are given to the completion callback. Calling `fs. close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1784",
          "content": "Calling `fs. close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1785",
          "content": "close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_1799",
          "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation. **Default:** `0`. `callback` {Function} * `err` {Error}",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1800",
          "content": "**Default:** `0`. `callback` {Function} * `err` {Error} Asynchronously copies `src` to `dest`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1801",
          "content": "`callback` {Function} * `err` {Error} Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1802",
          "content": "Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists. No arguments other than a possible exception are given to the callback function.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1803",
          "content": "By default, `dest` is overwritten if it already exists. No arguments other than a possible exception are given to the callback function. js makes no guarantees about the atomicity of the copy operation.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1804",
          "content": "No arguments other than a possible exception are given to the callback function. js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1805",
          "content": "js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node. js will attempt to remove the destination.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1806",
          "content": "If an error occurs after the destination file has been opened for writing, Node. js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior of the copy operation.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1807",
          "content": "js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1808",
          "content": "`mode` is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1809",
          "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs. COPYFILE_FICLONE`).",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1810",
          "content": "COPYFILE_EXCL | fs. COPYFILE_FICLONE`). COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_1811",
          "content": "COPYFILE_FICLONE`). COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_1812",
          "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_1813",
          "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_1814",
          "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_1815",
          "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.",
          "position": 16,
          "sentenceCount": 2
        },
        {
          "id": "sw_1854",
          "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1855",
          "content": "`dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1856",
          "content": "`options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1857",
          "content": "**Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1858",
          "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`. * `filter` {Function} Function to filter copied files/directories.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1859",
          "content": "**Default:** `false`. * `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1860",
          "content": "* `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1861",
          "content": "Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well. Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1862",
          "content": "When ignoring a directory, all of its contents will be skipped as well. Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`. * `src` {string} source path to copy.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1863",
          "content": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`. * `src` {string} source path to copy. * `dest` {string} destination path to copy to.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1864",
          "content": "* `src` {string} source path to copy. * `dest` {string} destination path to copy to. * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1865",
          "content": "* `dest` {string} destination path to copy to. * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value. * `force` {boolean} overwrite existing file or directory.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_1866",
          "content": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value. * `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_1867",
          "content": "* `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_1868",
          "content": "The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior. **Default:** `true`.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_1869",
          "content": "Use the `errorOnExist` option to change this behavior. **Default:** `true`. * `mode` {integer} modifiers for copy operation.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_1870",
          "content": "**Default:** `true`. * `mode` {integer} modifiers for copy operation. **Default:** `0`.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_1871",
          "content": "* `mode` {integer} modifiers for copy operation. **Default:** `0`. See `mode` flag of [`fs.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_1872",
          "content": "**Default:** `0`. See `mode` flag of [`fs. copyFile()`][].",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_1873",
          "content": "See `mode` flag of [`fs. copyFile()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_1874",
          "content": "copyFile()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_1875",
          "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_1876",
          "content": "**Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false` `callback` {Function} * `err` {Error}",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_1877",
          "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false` `callback` {Function} * `err` {Error} Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
          "position": 23,
          "sentenceCount": 3
        },
        {
          "id": "sw_1878",
          "content": "**Default:** `false` `callback` {Function} * `err` {Error} Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 24,
          "sentenceCount": 3
        },
        {
          "id": "sw_1879",
          "content": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 25,
          "sentenceCount": 2
        },
        {
          "id": "sw_1936",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][]. **Default:** `'r'`. * `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:**",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_1937",
          "content": "**Default:** `'r'`. * `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 *",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_1938",
          "content": "* `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `fs`",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_1939",
          "content": "ReadStream} `options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file. Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_1940",
          "content": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file. Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_1941",
          "content": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range. If `fd` is specified and `start` is omitted or `undefined`, `fs.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_1942",
          "content": "MAX_SAFE_INTEGER`][]] range. If `fd` is specified and `start` is omitted or `undefined`, `fs. createReadStream()` reads sequentially from the current file position.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_1943",
          "content": "If `fd` is specified and `start` is omitted or `undefined`, `fs. createReadStream()` reads sequentially from the current file position. The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_1944",
          "content": "createReadStream()` reads sequentially from the current file position. The `encoding` can be any one of those accepted by {Buffer}. If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_1945",
          "content": "The `encoding` can be any one of those accepted by {Buffer}. If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor. This means that no `'open'` event will be emitted.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_1946",
          "content": "If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor. This means that no `'open'` event will be emitted. `fd` should be blocking; non-blocking `fd`s should be passed to {net.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_1947",
          "content": "This means that no `'open'` event will be emitted. `fd` should be blocking; non-blocking `fd`s should be passed to {net. If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_1948",
          "content": "`fd` should be blocking; non-blocking `fd`s should be passed to {net. If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available. This can prevent the process from exiting and the stream from closing naturally.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_1949",
          "content": "If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available. This can prevent the process from exiting and the stream from closing naturally. By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_1950",
          "content": "This can prevent the process from exiting and the stream from closing naturally. By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_1951",
          "content": "By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_1952",
          "content": "Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`. When providing the `fs` option, an override for `read` is required.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_1953",
          "content": "By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`. When providing the `fs` option, an override for `read` is required. If no `fd` is provided, an override for `open` is also required.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_1954",
          "content": "When providing the `fs` option, an override for `read` is required. If no `fd` is provided, an override for `open` is also required. If `autoClose` is `true`, an override for `close` is also required.",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_1955",
          "content": "If no `fd` is provided, an override for `open` is also required. If `autoClose` is `true`, an override for `close` is also required. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_1956",
          "content": "If `autoClose` is `true`, an override for `close` is also required. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_1957",
          "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak. If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_1958",
          "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak. If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically. `mode` sets the file mode (permission and sticky bits), but only if the file was created.",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_1959",
          "content": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically. `mode` sets the file mode (permission and sticky bits), but only if the file was created. An example to read the last 10 bytes of a file which is 100 bytes long:",
          "position": 23,
          "sentenceCount": 3
        },
        {
          "id": "sw_1960",
          "content": "`mode` sets the file mode (permission and sticky bits), but only if the file was created. An example to read the last 10 bytes of a file which is 100 bytes long: If `options` is a string, then it specifies the encoding.",
          "position": 24,
          "sentenceCount": 3
        },
        {
          "id": "sw_1961",
          "content": "An example to read the last 10 bytes of a file which is 100 bytes long: If `options` is a string, then it specifies the encoding.",
          "position": 25,
          "sentenceCount": 2
        },
        {
          "id": "sw_2018",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][]. **Default:** `'w'`. * `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:**",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2019",
          "content": "**Default:** `'w'`. * `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:**",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2020",
          "content": "* `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:** `null` * `highWaterMark`",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2021",
          "content": "**Default:** `false`. Returns: {fs. WriteStream}",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2022",
          "content": "Returns: {fs. WriteStream} `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2023",
          "content": "WriteStream} `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2024",
          "content": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range. Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2025",
          "content": "MAX_SAFE_INTEGER`][]] range. Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`. The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2026",
          "content": "Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`. The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_2027",
          "content": "The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_2028",
          "content": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_2029",
          "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak. By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_2030",
          "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak. By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_2031",
          "content": "By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_2032",
          "content": "Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`. Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_2033",
          "content": "By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`. Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled. When providing the `fs` option, overrides for at least one of `write` and `writev` are",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_2034",
          "content": "Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled. When providing the `fs` option, overrides for at least one of `write` and `writev` are required. If no `fd` option is supplied, an override for `open` is also required.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_2035",
          "content": "When providing the `fs` option, overrides for at least one of `write` and `writev` are required. If no `fd` option is supplied, an override for `open` is also required. If `autoClose` is `true`, an override for `close` is also required.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_2036",
          "content": "If no `fd` option is supplied, an override for `open` is also required. If `autoClose` is `true`, an override for `close` is also required. ReadStream}, if `fd` is specified, {fs.",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_2037",
          "content": "If `autoClose` is `true`, an override for `close` is also required. ReadStream}, if `fd` is specified, {fs. WriteStream} will ignore the `path` argument and will use the specified file descriptor.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_2038",
          "content": "ReadStream}, if `fd` is specified, {fs. WriteStream} will ignore the `path` argument and will use the specified file descriptor. This means that no `'open'` event will be emitted.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_2039",
          "content": "WriteStream} will ignore the `path` argument and will use the specified file descriptor. This means that no `'open'` event will be emitted. `fd` should be blocking; non-blocking `fd`s should be passed to {net.",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_2040",
          "content": "This means that no `'open'` event will be emitted. `fd` should be blocking; non-blocking `fd`s should be passed to {net. If `options` is a string, then it specifies the encoding.",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_2041",
          "content": "`fd` should be blocking; non-blocking `fd`s should be passed to {net. If `options` is a string, then it specifies the encoding.",
          "position": 23,
          "sentenceCount": 2
        },
        {
          "id": "sw_2094",
          "content": "`path` {string|Buffer|URL} `callback` {Function} * `exists` {boolean} Test whether or not the element at the given `path` exists by checking with the file system. Then call the `callback` argument with either true or false:",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2095",
          "content": "Test whether or not the element at the given `path` exists by checking with the file system. Then call the `callback` argument with either true or false: **The parameters for this callback are not consistent with other Node.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2096",
          "content": "Then call the `callback` argument with either true or false: **The parameters for this callback are not consistent with other Node. js callbacks.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2097",
          "content": "**The parameters for this callback are not consistent with other Node. js callbacks. ** Normally, the first parameter to a Node.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2098",
          "content": "js callbacks. ** Normally, the first parameter to a Node. js callback is an `err` parameter, optionally followed by other parameters.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2099",
          "content": "** Normally, the first parameter to a Node. js callback is an `err` parameter, optionally followed by other parameters. exists()` callback has only one boolean parameter.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2100",
          "content": "js callback is an `err` parameter, optionally followed by other parameters. exists()` callback has only one boolean parameter. This is one reason `fs.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2101",
          "content": "exists()` callback has only one boolean parameter. This is one reason `fs. access()` is recommended instead of `fs.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2102",
          "content": "This is one reason `fs. access()` is recommended instead of `fs. If `path` is a symbolic link, it is followed.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_2103",
          "content": "access()` is recommended instead of `fs. If `path` is a symbolic link, it is followed. Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_2104",
          "content": "If `path` is a symbolic link, it is followed. Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`. exists()` to check for the existence of a file before calling `fs.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_2105",
          "content": "Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`. exists()` to check for the existence of a file before calling `fs. open()`, `fs.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_2106",
          "content": "exists()` to check for the existence of a file before calling `fs. open()`, `fs. readFile()`, or `fs.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_2107",
          "content": "open()`, `fs. readFile()`, or `fs. writeFile()` is not recommended.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_2108",
          "content": "readFile()`, or `fs. writeFile()` is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_2109",
          "content": "writeFile()` is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_2110",
          "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist. **write (NOT RECOMMENDED)**",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_2111",
          "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist. **write (NOT RECOMMENDED)** **write (RECOMMENDED)**",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_2112",
          "content": "**write (NOT RECOMMENDED)** **write (RECOMMENDED)** **read (NOT RECOMMENDED)**",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_2113",
          "content": "**write (RECOMMENDED)** **read (NOT RECOMMENDED)** **read (RECOMMENDED)**",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_2114",
          "content": "**read (NOT RECOMMENDED)** **read (RECOMMENDED)** The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_2115",
          "content": "**read (RECOMMENDED)** The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any. In general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_2116",
          "content": "The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any. In general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another process.",
          "position": 22,
          "sentenceCount": 2
        },
        {
          "id": "sw_2166",
          "content": "`fd` {integer} `mode` {string|integer} `callback` {Function} * `err` {Error} Sets the permissions on the file. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2167",
          "content": "Sets the permissions on the file. No arguments other than a possible exception are given to the completion callback. See the POSIX fchmod(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2168",
          "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX fchmod(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_2178",
          "content": "`fd` {integer} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error} Sets the owner of the file. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2179",
          "content": "Sets the owner of the file. No arguments other than a possible exception are given to the completion callback. See the POSIX fchown(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2180",
          "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX fchown(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_2190",
          "content": "`fd` {integer} `callback` {Function} * `err` {Error} Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2191",
          "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details. No arguments other than a possible exception are given to the completion callback.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2192",
          "content": "Refer to the POSIX fdatasync(2) documentation for details. No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_2202",
          "content": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2203",
          "content": "Stats} object should be `bigint`. **Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2204",
          "content": "**Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs. Invokes the callback with the {fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2205",
          "content": "`callback` {Function} * `err` {Error} * `stats` {fs. Invokes the callback with the {fs. Stats} for the file descriptor.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2206",
          "content": "Invokes the callback with the {fs. Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2207",
          "content": "Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_2223",
          "content": "`fd` {integer} `callback` {Function} * `err` {Error} Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2224",
          "content": "Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2225",
          "content": "The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2226",
          "content": "Refer to the POSIX fsync(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_2238",
          "content": "`fd` {integer} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error} Truncates the file descriptor. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2239",
          "content": "Truncates the file descriptor. No arguments other than a possible exception are given to the completion callback. See the POSIX ftruncate(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2240",
          "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX ftruncate(2) documentation for more detail. If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2241",
          "content": "See the POSIX ftruncate(2) documentation for more detail. If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file. For example, the following program retains only the first four bytes of the file:",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2242",
          "content": "If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file. For example, the following program retains only the first four bytes of the file: If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2243",
          "content": "For example, the following program retains only the first four bytes of the file: If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2244",
          "content": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_2262",
          "content": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error} Change the file system timestamps of the object referenced by the supplied file descriptor. utimes()`][].",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2263",
          "content": "Change the file system timestamps of the object referenced by the supplied file descriptor. utimes()`][].",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_2271",
          "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory. **Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2272",
          "content": "**Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2273",
          "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2274",
          "content": "If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2275",
          "content": "**Default:** `undefined`. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2276",
          "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`. `callback` {Function} * `err` {Error} Retrieves the files matching the specified pattern.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2277",
          "content": "**Default:** `false`. `callback` {Function} * `err` {Error} Retrieves the files matching the specified pattern.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_2295",
          "content": "`path` {string|Buffer|URL} `mode` {integer} `callback` {Function} * `err` {Error|AggregateError} Changes the permissions on a symbolic link. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2296",
          "content": "Changes the permissions on a symbolic link. No arguments other than a possible exception are given to the completion callback. This method is only implemented on macOS.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2297",
          "content": "No arguments other than a possible exception are given to the completion callback. This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2298",
          "content": "This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_2310",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error} Set the owner of the symbolic link. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2311",
          "content": "Set the owner of the symbolic link. No arguments other than a possible exception are given to the completion callback. See the POSIX lchown(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2312",
          "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX lchown(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_2322",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error} Changes the access and modification times of a file in the same way as [`fs. utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2323",
          "content": "Changes the access and modification times of a file in the same way as [`fs. utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed. No arguments other than a possible exception are given to the completion callback.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2324",
          "content": "utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed. No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_2334",
          "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error} Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2335",
          "content": "Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2336",
          "content": "See the POSIX link(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_2346",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2347",
          "content": "Stats} object should be `bigint`. **Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2348",
          "content": "**Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs. Retrieves the {fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2349",
          "content": "`callback` {Function} * `err` {Error} * `stats` {fs. Retrieves the {fs. Stats} for the symbolic link referred to by the path.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2350",
          "content": "Retrieves the {fs. Stats} for the symbolic link referred to by the path. The callback gets two arguments `(err, stats)` where `stats` is a {fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2351",
          "content": "Stats} for the symbolic link referred to by the path. The callback gets two arguments `(err, stats)` where `stats` is a {fs. Stats} object.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2352",
          "content": "The callback gets two arguments `(err, stats)` where `stats` is a {fs. Stats} object. `lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2353",
          "content": "Stats} object. `lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to. See the POSIX lstat(2) documentation for more details.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2354",
          "content": "`lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to. See the POSIX lstat(2) documentation for more details.",
          "position": 8,
          "sentenceCount": 2
        },
        {
          "id": "sw_2376",
          "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. `callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2377",
          "content": "**Default:** `0o777`. `callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`. Asynchronously creates a directory.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2378",
          "content": "`callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`. Asynchronously creates a directory. The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2379",
          "content": "Asynchronously creates a directory. The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`. `path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created).",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2380",
          "content": "The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`. `path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created). The optional `options` argument can be an integer specifying `mode` (permission and",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2381",
          "content": "`path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created). The optional `options` argument can be an integer specifying `mode` (permission and sticky bits) or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2382",
          "content": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits) or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created. Calling `fs.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2383",
          "content": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created. Calling `fs. mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2384",
          "content": "Calling `fs. mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false. If `recursive` is false and the directory exists, an `EEXIST` error occurs.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_2385",
          "content": "mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false. If `recursive` is false and the directory exists, an `EEXIST` error occurs. On Windows, using `fs.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_2386",
          "content": "If `recursive` is false and the directory exists, an `EEXIST` error occurs. On Windows, using `fs. mkdir()` on the root directory even with recursion will result in an error:",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_2387",
          "content": "On Windows, using `fs. mkdir()` on the root directory even with recursion will result in an error: See the POSIX mkdir(2) documentation for more details.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_2388",
          "content": "mkdir()` on the root directory even with recursion will result in an error: See the POSIX mkdir(2) documentation for more details.",
          "position": 12,
          "sentenceCount": 2
        },
        {
          "id": "sw_2418",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `directory` {string} Creates a unique temporary directory. Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2419",
          "content": "Creates a unique temporary directory. Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory. Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2420",
          "content": "Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory. Due to platform inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2421",
          "content": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters. The created directory path is passed as a string to the callback's second parameter.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2422",
          "content": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters. The created directory path is passed as a string to the callback's second parameter. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2423",
          "content": "The created directory path is passed as a string to the callback's second parameter. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use. mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2424",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use. mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string. For instance, given a directory `/tmp`, if the intention is to create a temporary directory",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2425",
          "content": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string. For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_2445",
          "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][]. **Default:** `'r'`. `mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer}",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2446",
          "content": "**Default:** `'r'`. `mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer} Asynchronous file open.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2447",
          "content": "`mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer} Asynchronous file open. See the POSIX open(2) documentation for more details.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2448",
          "content": "Asynchronous file open. See the POSIX open(2) documentation for more details. `mode` sets the file mode (permission and sticky bits), but only if the file was created.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2449",
          "content": "See the POSIX open(2) documentation for more details. `mode` sets the file mode (permission and sticky bits), but only if the file was created. On Windows, only the write permission can be manipulated; see [`fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2450",
          "content": "`mode` sets the file mode (permission and sticky bits), but only if the file was created. On Windows, only the write permission can be manipulated; see [`fs. chmod()`][].",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2451",
          "content": "On Windows, only the write permission can be manipulated; see [`fs. chmod()`][]. The callback gets two arguments `(err, fd)`.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2452",
          "content": "chmod()`][]. The callback gets two arguments `(err, fd)`. Some characters (`< > : \" / \\ | ?",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2453",
          "content": "The callback gets two arguments `(err, fd)`. Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_2454",
          "content": "Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains a colon, Node.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_2455",
          "content": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains a colon, Node. js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_2456",
          "content": "Under NTFS, if the filename contains a colon, Node. js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams]. Functions based on `fs.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_2457",
          "content": "js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams]. Functions based on `fs. open()` exhibit this behavior as well: `fs.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_2458",
          "content": "Functions based on `fs. open()` exhibit this behavior as well: `fs. writeFile()`, `fs.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_2459",
          "content": "open()` exhibit this behavior as well: `fs. writeFile()`, `fs. readFile()`, etc.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_2460",
          "content": "writeFile()`, `fs. readFile()`, etc.",
          "position": 15,
          "sentenceCount": 2
        },
        {
          "id": "sw_2496",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `type` {string} An optional mime type for the blob. Returns: {Promise} Fulfills with a {Blob} upon success. Returns a {Blob} whose data is backed by the given file.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2497",
          "content": "Returns: {Promise} Fulfills with a {Blob} upon success. Returns a {Blob} whose data is backed by the given file. The file must not be modified after the {Blob} is created.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2498",
          "content": "Returns a {Blob} whose data is backed by the given file. The file must not be modified after the {Blob} is created. Any modifications will cause reading the {Blob} data to fail with a `DOMException` error.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2499",
          "content": "The file must not be modified after the {Blob} is created. Any modifications will cause reading the {Blob} data to fail with a `DOMException` error. Synchronous stat operations on the file when the `Blob` is created, and before each read in order to detect whether the file data has been modified on disk.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2500",
          "content": "Any modifications will cause reading the {Blob} data to fail with a `DOMException` error. Synchronous stat operations on the file when the `Blob` is created, and before each read in order to detect whether the file data has been modified on disk.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_2514",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} **Default:** `false` `callback`",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2515",
          "content": "Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} **Default:** `false` `callback` {Function} * `err` {Error} * `dir` {fs. Asynchronously open a directory.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2516",
          "content": "**Default:** `32` * `recursive` {boolean} **Default:** `false` `callback` {Function} * `err` {Error} * `dir` {fs. Asynchronously open a directory. See the POSIX opendir(3) documentation for more details.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2517",
          "content": "Asynchronously open a directory. See the POSIX opendir(3) documentation for more details. Creates an {fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2518",
          "content": "See the POSIX opendir(3) documentation for more details. Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2519",
          "content": "Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2520",
          "content": "Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_2539",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to. `offset` {integer} The position in `buffer` to write the data to. `length` {integer} The number of bytes to read.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2540",
          "content": "`offset` {integer} The position in `buffer` to write the data to. `length` {integer} The number of bytes to read. `position` {integer|bigint|null} Specifies where to begin reading from in the file.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2541",
          "content": "`length` {integer} The number of bytes to read. `position` {integer|bigint|null} Specifies where to begin reading from in the file. If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2542",
          "content": "`position` {integer|bigint|null} Specifies where to begin reading from in the file. If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated. If `position` is a non-negative integer, the file position will be unchanged.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2543",
          "content": "If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated. If `position` is a non-negative integer, the file position will be unchanged. `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2544",
          "content": "If `position` is a non-negative integer, the file position will be unchanged. `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Read data from the file specified by `fd`.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2545",
          "content": "`callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Read data from the file specified by `fd`. The callback is given the three arguments, `(err, bytesRead, buffer)`.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2546",
          "content": "Read data from the file specified by `fd`. The callback is given the three arguments, `(err, bytesRead, buffer)`. If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2547",
          "content": "The callback is given the three arguments, `(err, bytesRead, buffer)`. If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero. If this method is invoked as its [`util.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_2548",
          "content": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero. If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_2549",
          "content": "If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties. read()` method reads data from the file specified by the file descriptor (`fd`).",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_2550",
          "content": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties. read()` method reads data from the file specified by the file descriptor (`fd`). The `length` argument indicates the maximum number of bytes that Node.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_2551",
          "content": "read()` method reads data from the file specified by the file descriptor (`fd`). The `length` argument indicates the maximum number of bytes that Node. js will attempt to read from the kernel.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_2552",
          "content": "The `length` argument indicates the maximum number of bytes that Node. js will attempt to read from the kernel. However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_2553",
          "content": "js will attempt to read from the kernel. However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons. For example:",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_2554",
          "content": "However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons. For example: If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_2555",
          "content": "For example: If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read. If the file encounters EOF (End of File) before the buffer could be filled, Node.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_2556",
          "content": "If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read. If the file encounters EOF (End of File) before the buffer could be filled, Node. js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read,",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_2557",
          "content": "If the file encounters EOF (End of File) before the buffer could be filled, Node. js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read, which may be less than the specified `length`. If the file is on a slow network `filesystem` or encounters any",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_2558",
          "content": "js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read, which may be less than the specified `length`. If the file is on a slow network `filesystem` or encounters any other issue during reading, `bytesRead` can be lower than the specified `length`.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_2559",
          "content": "If the file is on a slow network `filesystem` or encounters any other issue during reading, `bytesRead` can be lower than the specified `length`. Therefore, when using `fs. read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_2560",
          "content": "Therefore, when using `fs. read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file. Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_2561",
          "content": "read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file. Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of bytes. This behavior is",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_2562",
          "content": "Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of bytes. This behavior is similar to the POSIX `preadv2` function.",
          "position": 23,
          "sentenceCount": 2
        },
        {
          "id": "sw_2614",
          "content": "`fd` {integer} `options` {Object} * `buffer` {Buffer|TypedArray|DataView} **Default:** `Buffer. alloc(16384)` * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2615",
          "content": "alloc(16384)` * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Similar to the [`fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2616",
          "content": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Similar to the [`fs. read()`][] function, this version takes an optional `options` object.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2617",
          "content": "Similar to the [`fs. read()`][] function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2618",
          "content": "read()`][] function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_2632",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to. `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2633",
          "content": "`options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Similar to the [`fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2634",
          "content": "byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Similar to the [`fs. read()`][] function, this version takes an optional `options` object.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2635",
          "content": "Similar to the [`fs. read()`][] function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2636",
          "content": "read()`][] function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_2650",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively. In recursive mode, it will list all files, sub files and directories. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2651",
          "content": "In recursive mode, it will list all files, sub files and directories. **Default:** `false`. `callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2652",
          "content": "**Default:** `false`. `callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs. Reads the contents of a directory.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2653",
          "content": "`callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs. Reads the contents of a directory. The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.'",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2654",
          "content": "Reads the contents of a directory. The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.' ` and `'..'",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2655",
          "content": "The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.' ` and `'..' See the POSIX readdir(3) documentation for more details.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2656",
          "content": "` and `'..' See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2657",
          "content": "See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer}",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2658",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_2659",
          "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options. withFileTypes` is set to `true`, the `files` array will contain {fs.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_2660",
          "content": "If `options. withFileTypes` is set to `true`, the `files` array will contain {fs. Dirent} objects.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_2661",
          "content": "withFileTypes` is set to `true`, the `files` array will contain {fs. Dirent} objects.",
          "position": 11,
          "sentenceCount": 2
        },
        {
          "id": "sw_2689",
          "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. * `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data`",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2690",
          "content": "**Default:** `'r'`. * `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data` {string|Buffer} Asynchronously reads the entire contents of a file.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2691",
          "content": "* `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data` {string|Buffer} Asynchronously reads the entire contents of a file. The callback is passed two arguments `(err, data)`, where `data` is the contents of the file.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2692",
          "content": "Asynchronously reads the entire contents of a file. The callback is passed two arguments `(err, data)`, where `data` is the contents of the file. If no encoding is specified, then the raw buffer is returned.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2693",
          "content": "The callback is passed two arguments `(err, data)`, where `data` is the contents of the file. If no encoding is specified, then the raw buffer is returned. If `options` is a string, then it specifies the encoding:",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2694",
          "content": "If no encoding is specified, then the raw buffer is returned. If `options` is a string, then it specifies the encoding: When the path is a directory, the behavior of `fs.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2695",
          "content": "If `options` is a string, then it specifies the encoding: When the path is a directory, the behavior of `fs. readFile()` and [`fs.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2696",
          "content": "When the path is a directory, the behavior of `fs. readFile()` and [`fs. readFileSync()`][] is platform-specific.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2697",
          "content": "readFile()` and [`fs. readFileSync()`][] is platform-specific. On macOS, Linux, and Windows, an error will be returned.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_2698",
          "content": "readFileSync()`][] is platform-specific. On macOS, Linux, and Windows, an error will be returned. On FreeBSD, a representation of the directory's contents will be returned.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_2699",
          "content": "On macOS, Linux, and Windows, an error will be returned. On FreeBSD, a representation of the directory's contents will be returned. It is possible to abort an ongoing request using an `AbortSignal`.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_2700",
          "content": "On FreeBSD, a representation of the directory's contents will be returned. It is possible to abort an ongoing request using an `AbortSignal`. If a request is aborted the callback is called with an `AbortError`:",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_2701",
          "content": "It is possible to abort an ongoing request using an `AbortSignal`. If a request is aborted the callback is called with an `AbortError`: readFile()` function buffers the entire file.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_2702",
          "content": "If a request is aborted the callback is called with an `AbortError`: readFile()` function buffers the entire file. To minimize memory costs, when possible prefer streaming via `fs.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_2703",
          "content": "readFile()` function buffers the entire file. To minimize memory costs, when possible prefer streaming via `fs. createReadStream()`.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_2704",
          "content": "To minimize memory costs, when possible prefer streaming via `fs. createReadStream()`. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_2705",
          "content": "createReadStream()`. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. readFile` performs.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_2706",
          "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. readFile` performs.",
          "position": 17,
          "sentenceCount": 2
        },
        {
          "id": "sw_2746",
          "content": "Any specified file descriptor has to support reading. If a file descriptor is specified as the `path`, it will not be closed automatically. The reading will begin at the current position.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2747",
          "content": "If a file descriptor is specified as the `path`, it will not be closed automatically. The reading will begin at the current position. For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2748",
          "content": "The reading will begin at the current position. For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs. readFile()` with the same file descriptor, would give `'World'`, rather than `'Hello World'`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2749",
          "content": "For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs. readFile()` with the same file descriptor, would give `'World'`, rather than `'Hello World'`.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_2761",
          "content": "readFile()` method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk. This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory. The",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2762",
          "content": "This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory. The additional read overhead can vary broadly on different systems and depends on the type of file being read. If the file type is not a regular file (a",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2763",
          "content": "The additional read overhead can vary broadly on different systems and depends on the type of file being read. If the file type is not a regular file (a pipe for instance) and Node. js is unable to determine an actual file size, each read operation will load on 64 KiB of data.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2764",
          "content": "If the file type is not a regular file (a pipe for instance) and Node. js is unable to determine an actual file size, each read operation will load on 64 KiB of data. For regular files, each read will process 512 KiB of data.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2765",
          "content": "js is unable to determine an actual file size, each read operation will load on 64 KiB of data. For regular files, each read will process 512 KiB of data. For applications that require as-fast-as-possible reading of file contents, it is better to use `fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2766",
          "content": "For regular files, each read will process 512 KiB of data. For applications that require as-fast-as-possible reading of file contents, it is better to use `fs. read()` directly and for application code to manage reading the full contents of the file itself.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2767",
          "content": "For applications that require as-fast-as-possible reading of file contents, it is better to use `fs. read()` directly and for application code to manage reading the full contents of the file itself. js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2768",
          "content": "read()` directly and for application code to manage reading the full contents of the file itself. js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs. readFile()` for multiple file sizes in different Node.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2769",
          "content": "js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs. readFile()` for multiple file sizes in different Node. js versions.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_2770",
          "content": "readFile()` for multiple file sizes in different Node. js versions.",
          "position": 9,
          "sentenceCount": 2
        },
        {
          "id": "sw_2794",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `linkString` {string|Buffer} Reads the contents of the symbolic link referred to by `path`. The callback gets two arguments `(err, linkString)`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2795",
          "content": "Reads the contents of the symbolic link referred to by `path`. The callback gets two arguments `(err, linkString)`. See the POSIX readlink(2) documentation for more details.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2796",
          "content": "The callback gets two arguments `(err, linkString)`. See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2797",
          "content": "See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer}",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2798",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_2812",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffers` {ArrayBufferView\\[]} Read from a file specified by `fd` and write to an array of `ArrayBufferView`s using `readv()`. `position` is the offset from the beginning of the file from",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2813",
          "content": "Read from a file specified by `fd` and write to an array of `ArrayBufferView`s using `readv()`. `position` is the offset from the beginning of the file from where data should be read. If `typeof position !",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2814",
          "content": "`position` is the offset from the beginning of the file from where data should be read. If `typeof position ! == 'number'`, the data will be read from the current position.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2815",
          "content": "If `typeof position ! == 'number'`, the data will be read from the current position. The callback will be given three arguments: `err`, `bytesRead`, and `buffers`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2816",
          "content": "== 'number'`, the data will be read from the current position. The callback will be given three arguments: `err`, `bytesRead`, and `buffers`. `bytesRead` is how many bytes were read from the file.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2817",
          "content": "The callback will be given three arguments: `err`, `bytesRead`, and `buffers`. `bytesRead` is how many bytes were read from the file. If this method is invoked as its [`util.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2818",
          "content": "`bytesRead` is how many bytes were read from the file. If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffers` properties.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2819",
          "content": "If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffers` properties.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_2839",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer} Asynchronously computes the canonical pathname by resolving `. `, and symbolic links.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2840",
          "content": "Asynchronously computes the canonical pathname by resolving `. `, and symbolic links. A canonical pathname is not necessarily unique.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2841",
          "content": "`, and symbolic links. A canonical pathname is not necessarily unique. Hard links and bind mounts can expose a file system entity through many pathnames.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2842",
          "content": "A canonical pathname is not necessarily unique. Hard links and bind mounts can expose a file system entity through many pathnames. This function behaves like realpath(3), with some exceptions:",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2843",
          "content": "Hard links and bind mounts can expose a file system entity through many pathnames. This function behaves like realpath(3), with some exceptions: No case conversion is performed on case-insensitive file systems.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2844",
          "content": "This function behaves like realpath(3), with some exceptions: No case conversion is performed on case-insensitive file systems. The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2845",
          "content": "No case conversion is performed on case-insensitive file systems. The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports. The `callback` gets two arguments `(err, resolvedPath)`.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2846",
          "content": "The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports. The `callback` gets two arguments `(err, resolvedPath)`. May use `process.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2847",
          "content": "The `callback` gets two arguments `(err, resolvedPath)`. May use `process. cwd` to resolve relative paths.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_2848",
          "content": "May use `process. cwd` to resolve relative paths. Only paths that can be converted to UTF8 strings are supported.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_2849",
          "content": "cwd` to resolve relative paths. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_2850",
          "content": "Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_2851",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. If `path` resolves to a socket or a pipe, the function will",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_2852",
          "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. If `path` resolves to a socket or a pipe, the function will return a system dependent name for that object. A path that does not exist results in an ENOENT error.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_2853",
          "content": "If `path` resolves to a socket or a pipe, the function will return a system dependent name for that object. A path that does not exist results in an ENOENT error. path` is the absolute file path.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_2854",
          "content": "A path that does not exist results in an ENOENT error. path` is the absolute file path.",
          "position": 15,
          "sentenceCount": 2
        },
        {
          "id": "sw_2890",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer} Asynchronous realpath(3). The `callback` gets two arguments `(err, resolvedPath)`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2891",
          "content": "Asynchronous realpath(3). The `callback` gets two arguments `(err, resolvedPath)`. Only paths that can be converted to UTF8 strings are supported.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2892",
          "content": "The `callback` gets two arguments `(err, resolvedPath)`. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2893",
          "content": "Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2894",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2895",
          "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2896",
          "content": "On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2897",
          "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_2917",
          "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error} Asynchronously rename file at `oldPath` to the pathname provided as `newPath`. In the case that `newPath` already exists, it will be overwritten.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2918",
          "content": "Asynchronously rename file at `oldPath` to the pathname provided as `newPath`. In the case that `newPath` already exists, it will be overwritten. If there is a directory at `newPath`, an error will be raised instead.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2919",
          "content": "In the case that `newPath` already exists, it will be overwritten. If there is a directory at `newPath`, an error will be raised instead. No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2920",
          "content": "If there is a directory at `newPath`, an error will be raised instead. No arguments other than a possible exception are given to the completion callback. See also: rename(2).",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2921",
          "content": "No arguments other than a possible exception are given to the completion callback. See also: rename(2).",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_2935",
          "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2936",
          "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used. `callback` {Function} * `err` {Error}",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2937",
          "content": "The `options` argument is still accepted for backwards compatibility but it is not used. `callback` {Function} * `err` {Error} Asynchronous rmdir(2).",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2938",
          "content": "`callback` {Function} * `err` {Error} Asynchronous rmdir(2). No arguments other than a possible exception are given to the completion callback.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2939",
          "content": "Asynchronous rmdir(2). No arguments other than a possible exception are given to the completion callback. rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2940",
          "content": "No arguments other than a possible exception are given to the completion callback. rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2941",
          "content": "rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs. rm()`][] with options `{ recursive: true, force: true }`.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2942",
          "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fs. rm()`][] with options `{ recursive: true, force: true }`.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_2962",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist. **Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_2963",
          "content": "**Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_2964",
          "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_2965",
          "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries. This option is ignored if the `recursive` option is not `true`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_2966",
          "content": "This option represents the number of retries. This option is ignored if the `recursive` option is not `true`. **Default:** `0`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_2967",
          "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive removal.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_2968",
          "content": "**Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive removal. In recursive mode operations are retried on failure.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_2969",
          "content": "* `recursive` {boolean} If `true`, perform a recursive removal. In recursive mode operations are retried on failure. **Default:** `false`.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_2970",
          "content": "In recursive mode operations are retried on failure. **Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_2971",
          "content": "**Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_2972",
          "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`. **Default:** `100`.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_2973",
          "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `100`. `callback` {Function} * `err` {Error}",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_2974",
          "content": "**Default:** `100`. `callback` {Function} * `err` {Error} Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_2975",
          "content": "`callback` {Function} * `err` {Error} Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility). No arguments other than a possible exception are given to the completion callback.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_2976",
          "content": "Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility). No arguments other than a possible exception are given to the completion callback.",
          "position": 14,
          "sentenceCount": 2
        },
        {
          "id": "sw_3010",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3011",
          "content": "Stats} object should be `bigint`. **Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3012",
          "content": "**Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs. Asynchronous stat(2).",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3013",
          "content": "`callback` {Function} * `err` {Error} * `stats` {fs. Asynchronous stat(2). The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3014",
          "content": "Asynchronous stat(2). The callback gets two arguments `(err, stats)` where `stats` is an {fs. Stats} object.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3015",
          "content": "The callback gets two arguments `(err, stats)` where `stats` is an {fs. Stats} object. In case of an error, the `err.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3016",
          "content": "Stats} object. In case of an error, the `err. code` will be one of [Common System Errors][].",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3017",
          "content": "In case of an error, the `err. code` will be one of [Common System Errors][]. stat()`][] follows symbolic links.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3018",
          "content": "code` will be one of [Common System Errors][]. stat()`][] follows symbolic links. lstat()`][] to look at the links themselves.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3019",
          "content": "stat()`][] follows symbolic links. lstat()`][] to look at the links themselves. stat()` to check for the existence of a file before calling `fs.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3020",
          "content": "lstat()`][] to look at the links themselves. stat()` to check for the existence of a file before calling `fs. open()`, `fs.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3021",
          "content": "stat()` to check for the existence of a file before calling `fs. open()`, `fs. readFile()`, or `fs.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3022",
          "content": "open()`, `fs. readFile()`, or `fs. writeFile()` is not recommended.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_3023",
          "content": "readFile()`, or `fs. writeFile()` is not recommended. Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_3024",
          "content": "writeFile()` is not recommended. Instead, user code should open/read/write the file directly and handle the error raised if the file is not available. To check if a file exists without manipulating it afterwards, [`fs.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_3025",
          "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not available. To check if a file exists without manipulating it afterwards, [`fs. access()`][] is recommended.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_3026",
          "content": "To check if a file exists without manipulating it afterwards, [`fs. access()`][] is recommended. For example, given the following directory structure:",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_3027",
          "content": "access()`][] is recommended. For example, given the following directory structure: The next program will check for the stats of the given paths:",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_3028",
          "content": "For example, given the following directory structure: The next program will check for the stats of the given paths: The resulting output will resemble:",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_3029",
          "content": "The next program will check for the stats of the given paths: The resulting output will resemble:",
          "position": 19,
          "sentenceCount": 2
        },
        {
          "id": "sw_3073",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. StatFs} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3074",
          "content": "StatFs} object should be `bigint`. **Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3075",
          "content": "**Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs. Asynchronous statfs(2).",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3076",
          "content": "`callback` {Function} * `err` {Error} * `stats` {fs. Asynchronous statfs(2). Returns information about the mounted file system which contains `path`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3077",
          "content": "Asynchronous statfs(2). Returns information about the mounted file system which contains `path`. The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3078",
          "content": "Returns information about the mounted file system which contains `path`. The callback gets two arguments `(err, stats)` where `stats` is an {fs. StatFs} object.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3079",
          "content": "The callback gets two arguments `(err, stats)` where `stats` is an {fs. StatFs} object. In case of an error, the `err.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3080",
          "content": "StatFs} object. In case of an error, the `err. code` will be one of [Common System Errors][].",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3081",
          "content": "In case of an error, the `err. code` will be one of [Common System Errors][].",
          "position": 8,
          "sentenceCount": 2
        },
        {
          "id": "sw_3103",
          "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` `callback` {Function} * `err` {Error} Creates the link called `path` pointing to `target`. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3104",
          "content": "Creates the link called `path` pointing to `target`. No arguments other than a possible exception are given to the completion callback. See the POSIX symlink(2) documentation for more details.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3105",
          "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX symlink(2) documentation for more details. The `type` argument is only available on Windows and ignored on other platforms.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3106",
          "content": "See the POSIX symlink(2) documentation for more details. The `type` argument is only available on Windows and ignored on other platforms. It can be set to `'dir'`, `'file'`, or `'junction'`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3107",
          "content": "The `type` argument is only available on Windows and ignored on other platforms. It can be set to `'dir'`, `'file'`, or `'junction'`. If the `type` argument is `null`, Node.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3108",
          "content": "It can be set to `'dir'`, `'file'`, or `'junction'`. If the `type` argument is `null`, Node. js will autodetect `target` type and use `'file'` or `'dir'`.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3109",
          "content": "If the `type` argument is `null`, Node. js will autodetect `target` type and use `'file'` or `'dir'`. If the `target` does not exist, `'file'` will be used.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3110",
          "content": "js will autodetect `target` type and use `'file'` or `'dir'`. If the `target` does not exist, `'file'` will be used. Windows junction points require the destination path to be absolute.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3111",
          "content": "If the `target` does not exist, `'file'` will be used. Windows junction points require the destination path to be absolute. When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3112",
          "content": "Windows junction points require the destination path to be absolute. When using `'junction'`, the `target` argument will automatically be normalized to absolute path. Junction points on NTFS volumes can only point to directories.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3113",
          "content": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path. Junction points on NTFS volumes can only point to directories. Relative targets are relative to the link's parent directory.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3114",
          "content": "Junction points on NTFS volumes can only point to directories. Relative targets are relative to the link's parent directory. The above example creates a symbolic link `mewtwo` which points to `mew` in the same directory:",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3115",
          "content": "Relative targets are relative to the link's parent directory. The above example creates a symbolic link `mewtwo` which points to `mew` in the same directory:",
          "position": 12,
          "sentenceCount": 2
        },
        {
          "id": "sw_3145",
          "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error|AggregateError} Truncates the file. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3146",
          "content": "Truncates the file. No arguments other than a possible exception are given to the completion callback. A file descriptor can also be passed as the first argument.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3147",
          "content": "No arguments other than a possible exception are given to the completion callback. A file descriptor can also be passed as the first argument. In this case, `fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3148",
          "content": "A file descriptor can also be passed as the first argument. In this case, `fs. ftruncate()` is called.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3149",
          "content": "In this case, `fs. ftruncate()` is called. Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3150",
          "content": "ftruncate()` is called. Passing a file descriptor is deprecated and may result in an error being thrown in the future. See the POSIX truncate(2) documentation for more details.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3151",
          "content": "Passing a file descriptor is deprecated and may result in an error being thrown in the future. See the POSIX truncate(2) documentation for more details.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_3169",
          "content": "`path` {string|Buffer|URL} `callback` {Function} * `err` {Error} Asynchronously removes a file or symbolic link. No arguments other than a possible exception are given to the completion callback.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3170",
          "content": "Asynchronously removes a file or symbolic link. No arguments other than a possible exception are given to the completion callback. unlink()` will not work on a directory, empty or otherwise.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3171",
          "content": "No arguments other than a possible exception are given to the completion callback. unlink()` will not work on a directory, empty or otherwise. To remove a directory, use [`fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3172",
          "content": "unlink()` will not work on a directory, empty or otherwise. To remove a directory, use [`fs. rmdir()`][].",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3173",
          "content": "To remove a directory, use [`fs. rmdir()`][]. See the POSIX unlink(2) documentation for more details.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3174",
          "content": "rmdir()`][]. See the POSIX unlink(2) documentation for more details.",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_3190",
          "content": "`filename` {string|Buffer|URL} `listener` {Function} Optional, a listener previously attached using `fs. watchFile()` Stop watching for changes on `filename`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3191",
          "content": "watchFile()` Stop watching for changes on `filename`. If `listener` is specified, only that particular listener is removed.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3192",
          "content": "Stop watching for changes on `filename`. If `listener` is specified, only that particular listener is removed. Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3193",
          "content": "If `listener` is specified, only that particular listener is removed. Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`. Calling `fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3194",
          "content": "Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`. Calling `fs. unwatchFile()` with a filename that is not being watched is a no-op, not an error.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3195",
          "content": "Calling `fs. unwatchFile()` with a filename that is not being watched is a no-op, not an error. Using [`fs.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3196",
          "content": "unwatchFile()` with a filename that is not being watched is a no-op, not an error. Using [`fs. watch()`][] is more efficient than `fs.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3197",
          "content": "Using [`fs. watch()`][] is more efficient than `fs. watchFile()` and `fs.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3198",
          "content": "watch()`][] is more efficient than `fs. watchFile()` and `fs. unwatchFile()`.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3199",
          "content": "watchFile()` and `fs. unwatchFile()`. watch()` should be used instead of `fs.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3200",
          "content": "unwatchFile()`. watch()` should be used instead of `fs. watchFile()` and `fs.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3201",
          "content": "watch()` should be used instead of `fs. watchFile()` and `fs. unwatchFile()` when possible.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3202",
          "content": "watchFile()` and `fs. unwatchFile()` when possible.",
          "position": 12,
          "sentenceCount": 2
        },
        {
          "id": "sw_3232",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error} Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules:",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3233",
          "content": "Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3234",
          "content": "The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789. If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3235",
          "content": "Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789. If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_3248",
          "content": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched. **Default:** `true`. * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3249",
          "content": "**Default:** `true`. * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3250",
          "content": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [caveats][]). **Default:** `false`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3251",
          "content": "This applies when a directory is specified, and only on supported platforms (See [caveats][]). **Default:** `false`. * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3252",
          "content": "**Default:** `false`. * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener. **Default:** `'utf8'`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3253",
          "content": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener. **Default:** `'utf8'`. * `signal` {AbortSignal} allows closing the watcher with an AbortSignal.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3254",
          "content": "**Default:** `'utf8'`. * `signal` {AbortSignal} allows closing the watcher with an AbortSignal. `listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3255",
          "content": "* `signal` {AbortSignal} allows closing the watcher with an AbortSignal. `listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs. Watch for changes on `filename`, where `filename` is either a file or a directory.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3256",
          "content": "`listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs. Watch for changes on `filename`, where `filename` is either a file or a directory. The second argument is optional.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3257",
          "content": "Watch for changes on `filename`, where `filename` is either a file or a directory. The second argument is optional. If `options` is provided as a string, it specifies the `encoding`.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3258",
          "content": "The second argument is optional. If `options` is provided as a string, it specifies the `encoding`. Otherwise `options` should be passed as an object.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3259",
          "content": "If `options` is provided as a string, it specifies the `encoding`. Otherwise `options` should be passed as an object. The listener callback gets two arguments `(eventType, filename)`.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3260",
          "content": "Otherwise `options` should be passed as an object. The listener callback gets two arguments `(eventType, filename)`. `eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_3261",
          "content": "The listener callback gets two arguments `(eventType, filename)`. `eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event. On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_3262",
          "content": "`eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event. On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory. The listener callback is attached to the `'change'` event fired by {fs.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_3263",
          "content": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory. The listener callback is attached to the `'change'` event fired by {fs. FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_3264",
          "content": "The listener callback is attached to the `'change'` event fired by {fs. FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`. If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_3265",
          "content": "FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`. If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs. FSWatcher}.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_3266",
          "content": "If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs. FSWatcher}.",
          "position": 18,
          "sentenceCount": 2
        },
        {
          "id": "sw_3308",
          "content": "watch` API is not 100% consistent across platforms, and is unavailable in some situations. On Windows, no events will be emitted if the watched directory is moved or renamed. An `EPERM` error is reported when the watched directory is deleted.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3309",
          "content": "On Windows, no events will be emitted if the watched directory is moved or renamed. An `EPERM` error is reported when the watched directory is deleted. watch` API does not provide any protection with respect to malicious actions on the file system.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3310",
          "content": "An `EPERM` error is reported when the watched directory is deleted. watch` API does not provide any protection with respect to malicious actions on the file system. For example, on Windows it is implemented by monitoring changes in a directory versus specific files.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3311",
          "content": "watch` API does not provide any protection with respect to malicious actions on the file system. For example, on Windows it is implemented by monitoring changes in a directory versus specific files. This allows substitution of a file and fs reporting changes on the new file with the same filename.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3312",
          "content": "For example, on Windows it is implemented by monitoring changes in a directory versus specific files. This allows substitution of a file and fs reporting changes on the new file with the same filename.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_3326",
          "content": "This feature depends on the underlying operating system providing a way to be notified of file system changes. On Linux systems, this uses [`inotify(7)`][]. On BSD systems, this uses [`kqueue(2)`][].",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3327",
          "content": "On Linux systems, this uses [`inotify(7)`][]. On BSD systems, this uses [`kqueue(2)`][]. On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3328",
          "content": "On BSD systems, this uses [`kqueue(2)`][]. On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories. On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][].",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3329",
          "content": "On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories. On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][]. On Windows systems, this feature depends on [`ReadDirectoryChangesW`][].",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3330",
          "content": "On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][]. On Windows systems, this feature depends on [`ReadDirectoryChangesW`][]. On AIX systems, this feature depends on [`AHAFS`][], which must be enabled.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3331",
          "content": "On Windows systems, this feature depends on [`ReadDirectoryChangesW`][]. On AIX systems, this feature depends on [`AHAFS`][], which must be enabled. On IBM i systems, this feature is not supported.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3332",
          "content": "On AIX systems, this feature depends on [`AHAFS`][], which must be enabled. On IBM i systems, this feature is not supported. If the underlying functionality is not available for some reason, then `fs.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3333",
          "content": "On IBM i systems, this feature is not supported. If the underlying functionality is not available for some reason, then `fs. watch()` will not be able to function and may throw an exception.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3334",
          "content": "If the underlying functionality is not available for some reason, then `fs. watch()` will not be able to function and may throw an exception. For example, watching files or directories can be unreliable",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3335",
          "content": "watch()` will not be able to function and may throw an exception. For example, watching files or directories can be unreliable and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3336",
          "content": "For example, watching files or directories can be unreliable and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker. It is still possible to use `fs.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3337",
          "content": "and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker. It is still possible to use `fs. watchFile()`, which uses stat polling, but this method is slower and less reliable.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3338",
          "content": "It is still possible to use `fs. watchFile()`, which uses stat polling, but this method is slower and less reliable.",
          "position": 12,
          "sentenceCount": 2
        },
        {
          "id": "sw_3368",
          "content": "On Linux and macOS systems, `fs. watch()` resolves the path to an [inode][] and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3369",
          "content": "watch()` resolves the path to an [inode][] and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the _original_ inode.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3370",
          "content": "If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the _original_ inode. Events for the new inode will not be emitted.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3371",
          "content": "The watch will emit an event for the delete but will continue watching the _original_ inode. Events for the new inode will not be emitted. This is expected behavior.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3372",
          "content": "Events for the new inode will not be emitted. This is expected behavior. AIX files retain the same inode for the lifetime of a file.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3373",
          "content": "This is expected behavior. AIX files retain the same inode for the lifetime of a file. Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation).",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3374",
          "content": "AIX files retain the same inode for the lifetime of a file. Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation).",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_3392",
          "content": "Providing `filename` argument in the callback is only supported on Linux, macOS, Windows, and AIX. Even on supported platforms, `filename` is not always guaranteed to be provided. Therefore, don't assume that `filename` argument is always provided in the callback, and have some fallback logic if it is `null`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3393",
          "content": "Even on supported platforms, `filename` is not always guaranteed to be provided. Therefore, don't assume that `filename` argument is always provided in the callback, and have some fallback logic if it is `null`.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_3402",
          "content": "`filename` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} **Default:** `false` * `persistent` {boolean} **Default:** `true` * `interval` {integer} **Default:** `5007` `listener` {Function} * `current` {fs. Stats} * `previous` {fs. Stats} Returns: {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3403",
          "content": "Stats} * `previous` {fs. Stats} Returns: {fs. StatWatcher}",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3404",
          "content": "Stats} Returns: {fs. StatWatcher} Watch for changes on `filename`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3405",
          "content": "StatWatcher} Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3406",
          "content": "Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed. The `options` argument may be omitted.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3407",
          "content": "The callback `listener` will be called each time the file is accessed. The `options` argument may be omitted. If provided, it should be an object.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3408",
          "content": "The `options` argument may be omitted. If provided, it should be an object. The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3409",
          "content": "If provided, it should be an object. The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched. The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3410",
          "content": "The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched. The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds. The `listener` gets two arguments the current stat object and the",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3411",
          "content": "The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds. The `listener` gets two arguments the current stat object and the previous stat object: These stat objects are instances of `fs.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3412",
          "content": "The `listener` gets two arguments the current stat object and the previous stat object: These stat objects are instances of `fs. If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3413",
          "content": "These stat objects are instances of `fs. If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s. To be notified when the file was modified, not just accessed, it is necessary to compare `curr.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3414",
          "content": "If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s. To be notified when the file was modified, not just accessed, it is necessary to compare `curr. mtimeMs` and `prev.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_3415",
          "content": "To be notified when the file was modified, not just accessed, it is necessary to compare `curr. mtimeMs` and `prev. When an `fs.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_3416",
          "content": "mtimeMs` and `prev. When an `fs. watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch).",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_3417",
          "content": "When an `fs. watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). If the file is created later on, the listener will be called again, with the latest stat objects.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_3418",
          "content": "watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_3419",
          "content": "If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0. Using [`fs.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_3420",
          "content": "This is a change in functionality since v0. Using [`fs. watch()`][] is more efficient than `fs.",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_3421",
          "content": "Using [`fs. watch()`][] is more efficient than `fs. watchFile` and `fs.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_3422",
          "content": "watch()`][] is more efficient than `fs. watchFile` and `fs. unwatchFile`.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_3423",
          "content": "watchFile` and `fs. unwatchFile`. watch` should be used instead of `fs.",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_3424",
          "content": "unwatchFile`. watch` should be used instead of `fs. watchFile` and `fs.",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_3425",
          "content": "watch` should be used instead of `fs. watchFile` and `fs. unwatchFile` when possible.",
          "position": 23,
          "sentenceCount": 3
        },
        {
          "id": "sw_3426",
          "content": "watchFile` and `fs. unwatchFile` when possible. When a file being watched by `fs.",
          "position": 24,
          "sentenceCount": 3
        },
        {
          "id": "sw_3427",
          "content": "unwatchFile` when possible. When a file being watched by `fs. watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance).",
          "position": 25,
          "sentenceCount": 3
        },
        {
          "id": "sw_3428",
          "content": "When a file being watched by `fs. watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance). This happens when:",
          "position": 26,
          "sentenceCount": 3
        },
        {
          "id": "sw_3429",
          "content": "watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance). This happens when: the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its",
          "position": 27,
          "sentenceCount": 3
        },
        {
          "id": "sw_3430",
          "content": "This happens when: the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name",
          "position": 28,
          "sentenceCount": 2
        },
        {
          "id": "sw_3492",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer. byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the file specified by `fd`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3493",
          "content": "byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the file specified by `fd`. `offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3494",
          "content": "Write `buffer` to the file specified by `fd`. `offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write. `position` refers to the offset from the beginning of the file where this data should be written.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3495",
          "content": "`offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write. `position` refers to the offset from the beginning of the file where this data should be written. If `typeof position !",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3496",
          "content": "`position` refers to the offset from the beginning of the file where this data should be written. If `typeof position ! == 'number'`, the data will be written at the current position.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3497",
          "content": "If `typeof position ! == 'number'`, the data will be written at the current position. See pwrite(2).",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3498",
          "content": "== 'number'`, the data will be written at the current position. See pwrite(2). The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3499",
          "content": "See pwrite(2). The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`. If this method is invoked as its [`util.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3500",
          "content": "The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`. If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3501",
          "content": "If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties. It is unsafe to use `fs.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3502",
          "content": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties. It is unsafe to use `fs. write()` multiple times on the same file without waiting for the callback.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3503",
          "content": "It is unsafe to use `fs. write()` multiple times on the same file without waiting for the callback. For this scenario, [`fs.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3504",
          "content": "write()` multiple times on the same file without waiting for the callback. For this scenario, [`fs. createWriteStream()`][] is recommended.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_3505",
          "content": "For this scenario, [`fs. createWriteStream()`][] is recommended. On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_3506",
          "content": "createWriteStream()`][] is recommended. On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_3507",
          "content": "On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 15,
          "sentenceCount": 2
        },
        {
          "id": "sw_3543",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3544",
          "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the file specified by `fd`. Similar to the above `fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3545",
          "content": "Write `buffer` to the file specified by `fd`. Similar to the above `fs. write` function, this version takes an optional `options` object.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3546",
          "content": "Similar to the above `fs. write` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3547",
          "content": "write` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_3562",
          "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `written` {integer} * `string` {string} Write `string` to the file specified by `fd`. If `string` is not a string, an exception is thrown.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3563",
          "content": "Write `string` to the file specified by `fd`. If `string` is not a string, an exception is thrown. `position` refers to the offset from the beginning of the file where this data should be written.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3564",
          "content": "If `string` is not a string, an exception is thrown. `position` refers to the offset from the beginning of the file where this data should be written. If `typeof position !",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3565",
          "content": "`position` refers to the offset from the beginning of the file where this data should be written. If `typeof position ! == 'number'` the data will be written at the current position.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3566",
          "content": "If `typeof position ! == 'number'` the data will be written at the current position. See pwrite(2).",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3567",
          "content": "== 'number'` the data will be written at the current position. See pwrite(2). `encoding` is the expected string encoding.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3568",
          "content": "See pwrite(2). `encoding` is the expected string encoding. The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3569",
          "content": "`encoding` is the expected string encoding. The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written. Bytes written is not necessarily the same as string characters written.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3570",
          "content": "The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written. Bytes written is not necessarily the same as string characters written. See [`Buffer.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3571",
          "content": "Bytes written is not necessarily the same as string characters written. See [`Buffer. byteLength`][].",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3572",
          "content": "See [`Buffer. byteLength`][]. It is unsafe to use `fs.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3573",
          "content": "byteLength`][]. It is unsafe to use `fs. write()` multiple times on the same file without waiting for the callback.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3574",
          "content": "It is unsafe to use `fs. write()` multiple times on the same file without waiting for the callback. For this scenario, [`fs.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_3575",
          "content": "write()` multiple times on the same file without waiting for the callback. For this scenario, [`fs. createWriteStream()`][] is recommended.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_3576",
          "content": "For this scenario, [`fs. createWriteStream()`][] is recommended. On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_3577",
          "content": "createWriteStream()`][] is recommended. On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_3578",
          "content": "On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file. On Windows, if the file descriptor is connected to the console (e.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_3579",
          "content": "The kernel ignores the position argument and always appends the data to the end of the file. On Windows, if the file descriptor is connected to the console (e. `fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_3580",
          "content": "On Windows, if the file descriptor is connected to the console (e. `fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used. It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command.",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_3581",
          "content": "`fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used. It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command. See the [chcp][] docs for more details.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_3582",
          "content": "It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command. See the [chcp][] docs for more details.",
          "position": 20,
          "sentenceCount": 2
        },
        {
          "id": "sw_3629",
          "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. * `flush` {boolean} If all data is successfully",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3630",
          "content": "**Default:** `'w'`. * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs. fsync()` is used to flush the data.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3631",
          "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs. fsync()` is used to flush the data. **Default:** `false`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3632",
          "content": "fsync()` is used to flush the data. **Default:** `false`. * `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError}",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3633",
          "content": "**Default:** `false`. * `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError} When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3634",
          "content": "* `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError} When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists. `data` can be a string or a buffer.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3635",
          "content": "When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists. `data` can be a string or a buffer. When `file` is a file descriptor, the behavior is similar to calling `fs.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3636",
          "content": "`data` can be a string or a buffer. When `file` is a file descriptor, the behavior is similar to calling `fs. write()` directly (which is recommended).",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3637",
          "content": "When `file` is a file descriptor, the behavior is similar to calling `fs. write()` directly (which is recommended). See the notes below on using a file descriptor.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3638",
          "content": "write()` directly (which is recommended). See the notes below on using a file descriptor. The `encoding` option is ignored if `data` is a buffer.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3639",
          "content": "See the notes below on using a file descriptor. The `encoding` option is ignored if `data` is a buffer. The `mode` option only affects the newly created file.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3640",
          "content": "The `encoding` option is ignored if `data` is a buffer. The `mode` option only affects the newly created file. open()`][] for more details.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3641",
          "content": "The `mode` option only affects the newly created file. open()`][] for more details. If `options` is a string, then it specifies the encoding:",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_3642",
          "content": "open()`][] for more details. If `options` is a string, then it specifies the encoding: It is unsafe to use `fs.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_3643",
          "content": "If `options` is a string, then it specifies the encoding: It is unsafe to use `fs. writeFile()` multiple times on the same file without waiting for the callback.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_3644",
          "content": "It is unsafe to use `fs. writeFile()` multiple times on the same file without waiting for the callback. For this scenario, [`fs.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_3645",
          "content": "writeFile()` multiple times on the same file without waiting for the callback. For this scenario, [`fs. createWriteStream()`][] is recommended.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_3646",
          "content": "For this scenario, [`fs. createWriteStream()`][] is recommended. Similarly to `fs.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_3647",
          "content": "createWriteStream()`][] is recommended. Similarly to `fs. readFile` - `fs.",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_3648",
          "content": "Similarly to `fs. readFile` - `fs. writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_3649",
          "content": "readFile` - `fs. writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it. For performance sensitive code consider using [`fs.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_3650",
          "content": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it. For performance sensitive code consider using [`fs. createWriteStream()`][].",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_3651",
          "content": "For performance sensitive code consider using [`fs. createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fs.",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_3652",
          "content": "createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fs. writeFile()`.",
          "position": 23,
          "sentenceCount": 3
        },
        {
          "id": "sw_3653",
          "content": "It is possible to use an {AbortSignal} to cancel an `fs. writeFile()`. Cancelation is \"best effort\", and some amount of data is likely still to be written.",
          "position": 24,
          "sentenceCount": 3
        },
        {
          "id": "sw_3654",
          "content": "writeFile()`. Cancelation is \"best effort\", and some amount of data is likely still to be written. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 25,
          "sentenceCount": 3
        },
        {
          "id": "sw_3655",
          "content": "Cancelation is \"best effort\", and some amount of data is likely still to be written. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. writeFile` performs.",
          "position": 26,
          "sentenceCount": 3
        },
        {
          "id": "sw_3656",
          "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. writeFile` performs.",
          "position": 27,
          "sentenceCount": 2
        },
        {
          "id": "sw_3716",
          "content": "When `file` is a file descriptor, the behavior is almost identical to directly calling `fs. write()` like: The difference from directly calling `fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3717",
          "content": "write()` like: The difference from directly calling `fs. write()` is that under some unusual conditions, `fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3718",
          "content": "The difference from directly calling `fs. write()` is that under some unusual conditions, `fs. write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3719",
          "content": "write()` is that under some unusual conditions, `fs. write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs. writeFile()` retries until the data is entirely written (or an error occurs).",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3720",
          "content": "write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs. writeFile()` retries until the data is entirely written (or an error occurs). The implications of this are a common source of confusion.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3721",
          "content": "writeFile()` retries until the data is entirely written (or an error occurs). The implications of this are a common source of confusion. In the file descriptor case, the file is not replaced!",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3722",
          "content": "The implications of this are a common source of confusion. In the file descriptor case, the file is not replaced! The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3723",
          "content": "In the file descriptor case, the file is not replaced! The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data. For example, if `fs.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3724",
          "content": "The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data. For example, if `fs. writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'`",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3725",
          "content": "For example, if `fs. writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'` and might contain some of the file's original data (depending on the size of the original file",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3726",
          "content": "writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'` and might contain some of the file's original data (depending on the size of the original file and the position of the file descriptor).",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3727",
          "content": "and might contain some of the file's original data (depending on the size of the original file and the position of the file descriptor). If a file name had been used instead of a descriptor, the file would be guaranteed to contain only `', World'`.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3728",
          "content": "and the position of the file descriptor). If a file name had been used instead of a descriptor, the file would be guaranteed to contain only `', World'`.",
          "position": 12,
          "sentenceCount": 2
        },
        {
          "id": "sw_3758",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffers` {ArrayBufferView\\[]} Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`. `position` is the offset from the beginning of the file where this data",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3759",
          "content": "Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`. `position` is the offset from the beginning of the file where this data should be written. If `typeof position !",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3760",
          "content": "`position` is the offset from the beginning of the file where this data should be written. If `typeof position ! == 'number'`, the data will be written at the current position.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3761",
          "content": "If `typeof position ! == 'number'`, the data will be written at the current position. The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3762",
          "content": "== 'number'`, the data will be written at the current position. The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`. `bytesWritten` is how many bytes were written from `buffers`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3763",
          "content": "The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`. `bytesWritten` is how many bytes were written from `buffers`. If this method is [`util.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3764",
          "content": "`bytesWritten` is how many bytes were written from `buffers`. If this method is [`util. promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3765",
          "content": "If this method is [`util. promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties. It is unsafe to use `fs.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3766",
          "content": "promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties. It is unsafe to use `fs. writev()` multiple times on the same file without waiting for the callback.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3767",
          "content": "It is unsafe to use `fs. writev()` multiple times on the same file without waiting for the callback. For this scenario, use [`fs.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3768",
          "content": "writev()` multiple times on the same file without waiting for the callback. For this scenario, use [`fs. createWriteStream()`][].",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3769",
          "content": "For this scenario, use [`fs. createWriteStream()`][]. On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3770",
          "content": "createWriteStream()`][]. On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_3771",
          "content": "On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 13,
          "sentenceCount": 2
        },
        {
          "id": "sw_3805",
          "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs. Synchronously tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3806",
          "content": "Synchronously tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3807",
          "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3808",
          "content": "`mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3809",
          "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs. W_OK`, and `fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3810",
          "content": "R_OK`, `fs. W_OK`, and `fs. Check [File access constants][] for possible values of `mode`.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3811",
          "content": "W_OK`, and `fs. Check [File access constants][] for possible values of `mode`. If any of the accessibility checks fail, an `Error` will be thrown.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3812",
          "content": "Check [File access constants][] for possible values of `mode`. If any of the accessibility checks fail, an `Error` will be thrown. Otherwise, the method will return `undefined`.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3813",
          "content": "If any of the accessibility checks fail, an `Error` will be thrown. Otherwise, the method will return `undefined`.",
          "position": 8,
          "sentenceCount": 2
        },
        {
          "id": "sw_3835",
          "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3836",
          "content": "**Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3837",
          "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`. Synchronously append data to a file, creating the file if it does not yet exist.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3838",
          "content": "**Default:** `false`. Synchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3839",
          "content": "Synchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}. The `mode` option only affects the newly created file.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3840",
          "content": "`data` can be a string or a {Buffer}. The `mode` option only affects the newly created file. open()`][] for more details.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3841",
          "content": "The `mode` option only affects the newly created file. open()`][] for more details. If `options` is a string, then it specifies the encoding:",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3842",
          "content": "open()`][] for more details. If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3843",
          "content": "If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs. open()` or `fs.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3844",
          "content": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs. open()` or `fs. openSync()`).",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3845",
          "content": "open()` or `fs. openSync()`). The file descriptor will not be closed automatically.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3846",
          "content": "openSync()`). The file descriptor will not be closed automatically.",
          "position": 11,
          "sentenceCount": 2
        },
        {
          "id": "sw_3874",
          "content": "`path` {string|Buffer|URL} `mode` {string|integer} For detailed information, see the documentation of the asynchronous version of this API: [`fs. chmod()`][].",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3875",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. chmod()`][]. See the POSIX chmod(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3876",
          "content": "chmod()`][]. See the POSIX chmod(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_3886",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Synchronously changes owner and group of a file. Returns `undefined`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3887",
          "content": "Synchronously changes owner and group of a file. Returns `undefined`. This is the synchronous version of [`fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3888",
          "content": "Returns `undefined`. This is the synchronous version of [`fs. chown()`][].",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3889",
          "content": "This is the synchronous version of [`fs. chown()`][]. See the POSIX chown(2) documentation for more detail.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3890",
          "content": "chown()`][]. See the POSIX chown(2) documentation for more detail.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_3904",
          "content": "`fd` {integer} Closes the file descriptor. Returns `undefined`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3905",
          "content": "Closes the file descriptor. Returns `undefined`. Calling `fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3906",
          "content": "Returns `undefined`. Calling `fs. closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3907",
          "content": "Calling `fs. closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3908",
          "content": "closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_3922",
          "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation. **Default:** `0`. Synchronously copies `src` to `dest`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3923",
          "content": "**Default:** `0`. Synchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3924",
          "content": "Synchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists. Returns `undefined`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3925",
          "content": "By default, `dest` is overwritten if it already exists. Returns `undefined`. js makes no guarantees about the atomicity of the copy operation.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3926",
          "content": "Returns `undefined`. js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3927",
          "content": "js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node. js will attempt to remove the destination.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3928",
          "content": "If an error occurs after the destination file has been opened for writing, Node. js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior of the copy operation.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3929",
          "content": "js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3930",
          "content": "`mode` is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3931",
          "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs. COPYFILE_FICLONE`).",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3932",
          "content": "COPYFILE_EXCL | fs. COPYFILE_FICLONE`). COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3933",
          "content": "COPYFILE_FICLONE`). COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3934",
          "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_3935",
          "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_3936",
          "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_3937",
          "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.",
          "position": 15,
          "sentenceCount": 2
        },
        {
          "id": "sw_3974",
          "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_3975",
          "content": "`dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_3976",
          "content": "`options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_3977",
          "content": "**Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_3978",
          "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`. * `filter` {Function} Function to filter copied files/directories.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_3979",
          "content": "**Default:** `false`. * `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_3980",
          "content": "* `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_3981",
          "content": "Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well. **Default:** `undefined` * `src` {string} source path to copy.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_3982",
          "content": "When ignoring a directory, all of its contents will be skipped as well. **Default:** `undefined` * `src` {string} source path to copy. * `dest` {string} destination path to copy to.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_3983",
          "content": "**Default:** `undefined` * `src` {string} source path to copy. * `dest` {string} destination path to copy to. * Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_3984",
          "content": "* `dest` {string} destination path to copy to. * Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`. * `force` {boolean} overwrite existing file or directory.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_3985",
          "content": "* Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`. * `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_3986",
          "content": "* `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_3987",
          "content": "The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior. **Default:** `true`.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_3988",
          "content": "Use the `errorOnExist` option to change this behavior. **Default:** `true`. * `mode` {integer} modifiers for copy operation.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_3989",
          "content": "**Default:** `true`. * `mode` {integer} modifiers for copy operation. **Default:** `0`.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_3990",
          "content": "* `mode` {integer} modifiers for copy operation. **Default:** `0`. See `mode` flag of [`fs.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_3991",
          "content": "**Default:** `0`. See `mode` flag of [`fs. copyFileSync()`][].",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_3992",
          "content": "See `mode` flag of [`fs. copyFileSync()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_3993",
          "content": "copyFileSync()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_3994",
          "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_3995",
          "content": "**Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false`",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_3996",
          "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false` Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_3997",
          "content": "**Default:** `false` Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 23,
          "sentenceCount": 3
        },
        {
          "id": "sw_3998",
          "content": "Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 24,
          "sentenceCount": 2
        },
        {
          "id": "sw_4052",
          "content": "`path` {string|Buffer|URL} Returns: {boolean} Returns `true` if the path exists, `false` otherwise. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4053",
          "content": "Returns `true` if the path exists, `false` otherwise. For detailed information, see the documentation of the asynchronous version of this API: [`fs. exists()`][].",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4054",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. exists()`][]. exists()` is deprecated, but `fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4055",
          "content": "exists()`][]. exists()` is deprecated, but `fs. existsSync()` is not.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4056",
          "content": "exists()` is deprecated, but `fs. existsSync()` is not. The `callback` parameter to `fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4057",
          "content": "existsSync()` is not. The `callback` parameter to `fs. exists()` accepts parameters that are inconsistent with other Node.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4058",
          "content": "The `callback` parameter to `fs. exists()` accepts parameters that are inconsistent with other Node. js callbacks.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_4059",
          "content": "exists()` accepts parameters that are inconsistent with other Node. js callbacks. existsSync()` does not use a callback.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_4060",
          "content": "js callbacks. existsSync()` does not use a callback.",
          "position": 8,
          "sentenceCount": 2
        },
        {
          "id": "sw_4081",
          "content": "`fd` {integer} `mode` {string|integer} Sets the permissions on the file. Returns `undefined`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4082",
          "content": "Sets the permissions on the file. Returns `undefined`. See the POSIX fchmod(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4083",
          "content": "Returns `undefined`. See the POSIX fchmod(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4093",
          "content": "`fd` {integer} `uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Sets the owner of the file.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4094",
          "content": "`gid` {integer} The file's new group's group id. Sets the owner of the file. Returns `undefined`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4095",
          "content": "Sets the owner of the file. Returns `undefined`. See the POSIX fchown(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4096",
          "content": "Returns `undefined`. See the POSIX fchown(2) documentation for more detail.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_4108",
          "content": "`fd` {integer} Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4109",
          "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details. Returns `undefined`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4110",
          "content": "Refer to the POSIX fdatasync(2) documentation for details. Returns `undefined`.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4120",
          "content": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4121",
          "content": "Stats} object should be `bigint`. **Default:** `false`. Returns: {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4122",
          "content": "**Default:** `false`. Returns: {fs. Retrieves the {fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4123",
          "content": "Returns: {fs. Retrieves the {fs. Stats} for the file descriptor.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4124",
          "content": "Retrieves the {fs. Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4125",
          "content": "Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_4141",
          "content": "`fd` {integer} Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4142",
          "content": "Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4143",
          "content": "The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail. Returns `undefined`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4144",
          "content": "Refer to the POSIX fsync(2) documentation for more detail. Returns `undefined`.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_4156",
          "content": "`fd` {integer} `len` {integer} **Default:** `0` Truncates the file descriptor. Returns `undefined`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4157",
          "content": "Truncates the file descriptor. Returns `undefined`. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4158",
          "content": "Returns `undefined`. For detailed information, see the documentation of the asynchronous version of this API: [`fs. ftruncate()`][].",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4159",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. ftruncate()`][].",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_4170",
          "content": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} Synchronous version of [`fs. futimes()`][].",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4171",
          "content": "Synchronous version of [`fs. futimes()`][]. Returns `undefined`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4172",
          "content": "futimes()`][]. Returns `undefined`.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4182",
          "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory. **Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4183",
          "content": "**Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4184",
          "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4185",
          "content": "If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4186",
          "content": "**Default:** `undefined`. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4187",
          "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`. Returns: {string\\[]} paths of files that match the pattern.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4188",
          "content": "**Default:** `false`. Returns: {string\\[]} paths of files that match the pattern.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_4206",
          "content": "`path` {string|Buffer|URL} `mode` {integer} Changes the permissions on a symbolic link. Returns `undefined`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4207",
          "content": "Changes the permissions on a symbolic link. Returns `undefined`. This method is only implemented on macOS.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4208",
          "content": "Returns `undefined`. This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4209",
          "content": "This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_4221",
          "content": "`path` {string|Buffer|URL} `uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Set the owner for the path.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4222",
          "content": "`gid` {integer} The file's new group's group id. Set the owner for the path. Returns `undefined`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4223",
          "content": "Set the owner for the path. Returns `undefined`. See the POSIX lchown(2) documentation for more details.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4224",
          "content": "Returns `undefined`. See the POSIX lchown(2) documentation for more details.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_4236",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Change the file system timestamps of the symbolic link referenced by `path`. Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4237",
          "content": "Change the file system timestamps of the symbolic link referenced by `path`. Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails. This is the synchronous version of [`fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4238",
          "content": "Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails. This is the synchronous version of [`fs. lutimes()`][].",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4239",
          "content": "This is the synchronous version of [`fs. lutimes()`][].",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_4251",
          "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4252",
          "content": "Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail. Returns `undefined`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4253",
          "content": "See the POSIX link(2) documentation for more detail. Returns `undefined`.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4263",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4264",
          "content": "Stats} object should be `bigint`. **Default:** `false`. * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4265",
          "content": "**Default:** `false`. * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`. **Default:** `true`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4266",
          "content": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`. **Default:** `true`. Returns: {fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4267",
          "content": "**Default:** `true`. Returns: {fs. Retrieves the {fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4268",
          "content": "Returns: {fs. Retrieves the {fs. Stats} for the symbolic link referred to by `path`.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4269",
          "content": "Retrieves the {fs. Stats} for the symbolic link referred to by `path`. See the POSIX lstat(2) documentation for more details.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_4270",
          "content": "Stats} for the symbolic link referred to by `path`. See the POSIX lstat(2) documentation for more details.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_4290",
          "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. Returns: {string|undefined}",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4291",
          "content": "**Default:** `0o777`. Returns: {string|undefined} Synchronously creates a directory.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4292",
          "content": "Returns: {string|undefined} Synchronously creates a directory. Returns `undefined`, or if `recursive` is `true`, the first directory path created.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4293",
          "content": "Synchronously creates a directory. Returns `undefined`, or if `recursive` is `true`, the first directory path created. This is the synchronous version of [`fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4294",
          "content": "Returns `undefined`, or if `recursive` is `true`, the first directory path created. This is the synchronous version of [`fs. mkdir()`][].",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4295",
          "content": "This is the synchronous version of [`fs. mkdir()`][]. See the POSIX mkdir(2) documentation for more details.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4296",
          "content": "mkdir()`][]. See the POSIX mkdir(2) documentation for more details.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_4314",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string} Returns the created directory path. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4315",
          "content": "Returns the created directory path. For detailed information, see the documentation of the asynchronous version of this API: [`fs. mkdtemp()`][].",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4316",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4317",
          "content": "mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_4329",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Object} A disposable object: * `path` {string} The path of the created directory. * `remove` {Function} A function which removes the created directory. * `[Symbol.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4330",
          "content": "* `remove` {Function} A function which removes the created directory. * `[Symbol. dispose]` {Function} The same as `remove`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4331",
          "content": "* `[Symbol. dispose]` {Function} The same as `remove`. Returns a disposable object whose `path` property holds the created directory path.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4332",
          "content": "dispose]` {Function} The same as `remove`. Returns a disposable object whose `path` property holds the created directory path. When the object is disposed, the directory and its contents will be removed if it still exists.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4333",
          "content": "Returns a disposable object whose `path` property holds the created directory path. When the object is disposed, the directory and its contents will be removed if it still exists. If the directory cannot be deleted, disposal will throw an error.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4334",
          "content": "When the object is disposed, the directory and its contents will be removed if it still exists. If the directory cannot be deleted, disposal will throw an error. The object has a `remove()` method which will perform the same task.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4335",
          "content": "If the directory cannot be deleted, disposal will throw an error. The object has a `remove()` method which will perform the same task. For detailed information, see the documentation of [`fs.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_4336",
          "content": "The object has a `remove()` method which will perform the same task. For detailed information, see the documentation of [`fs. mkdtemp()`][].",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_4337",
          "content": "For detailed information, see the documentation of [`fs. mkdtemp()`][]. There is no callback-based version of this API because it is designed for use with the `using` syntax.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_4338",
          "content": "mkdtemp()`][]. There is no callback-based version of this API because it is designed for use with the `using` syntax. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_4339",
          "content": "There is no callback-based version of this API because it is designed for use with the `using` syntax. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 10,
          "sentenceCount": 2
        },
        {
          "id": "sw_4365",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} **Default:** `false` Returns:",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4366",
          "content": "Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} **Default:** `false` Returns: {fs. Synchronously open a directory.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4367",
          "content": "**Default:** `32` * `recursive` {boolean} **Default:** `false` Returns: {fs. Synchronously open a directory. See opendir(3).",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4368",
          "content": "Synchronously open a directory. See opendir(3). Creates an {fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4369",
          "content": "See opendir(3). Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4370",
          "content": "Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4371",
          "content": "Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_4389",
          "content": "`path` {string|Buffer|URL} `flags` {string|number} **Default:** `'r'`. See [support of file system `flags`][]. `mode` {string|integer} **Default:** `0o666` Returns: {number}",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4390",
          "content": "See [support of file system `flags`][]. `mode` {string|integer} **Default:** `0o666` Returns: {number} Returns an integer representing the file descriptor.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4391",
          "content": "`mode` {string|integer} **Default:** `0o666` Returns: {number} Returns an integer representing the file descriptor. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4392",
          "content": "Returns an integer representing the file descriptor. For detailed information, see the documentation of the asynchronous version of this API: [`fs. open()`][].",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4393",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. open()`][].",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_4407",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively. In recursive mode, it will list all files, sub files, and directories. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4408",
          "content": "In recursive mode, it will list all files, sub files, and directories. **Default:** `false`. Returns: {string\\[]|Buffer\\[]|fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4409",
          "content": "**Default:** `false`. Returns: {string\\[]|Buffer\\[]|fs. Reads the contents of the directory.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4410",
          "content": "Returns: {string\\[]|Buffer\\[]|fs. Reads the contents of the directory. See the POSIX readdir(3) documentation for more details.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4411",
          "content": "Reads the contents of the directory. See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4412",
          "content": "See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4413",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_4414",
          "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options. withFileTypes` is set to `true`, the result will contain {fs.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_4415",
          "content": "If `options. withFileTypes` is set to `true`, the result will contain {fs. Dirent} objects.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_4416",
          "content": "withFileTypes` is set to `true`, the result will contain {fs. Dirent} objects.",
          "position": 9,
          "sentenceCount": 2
        },
        {
          "id": "sw_4440",
          "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. Returns: {string|Buffer}",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4441",
          "content": "**Default:** `'r'`. Returns: {string|Buffer} Returns the contents of the `path`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4442",
          "content": "Returns: {string|Buffer} Returns the contents of the `path`. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4443",
          "content": "Returns the contents of the `path`. For detailed information, see the documentation of the asynchronous version of this API: [`fs. readFile()`][].",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4444",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. readFile()`][]. If the `encoding` option is specified then this function returns a string.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4445",
          "content": "readFile()`][]. If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4446",
          "content": "If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer. Similar to [`fs.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_4447",
          "content": "Otherwise it returns a buffer. Similar to [`fs. readFile()`][], when the path is a directory, the behavior of `fs.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_4448",
          "content": "Similar to [`fs. readFile()`][], when the path is a directory, the behavior of `fs. readFileSync()` is platform-specific.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_4449",
          "content": "readFile()`][], when the path is a directory, the behavior of `fs. readFileSync()` is platform-specific.",
          "position": 9,
          "sentenceCount": 2
        },
        {
          "id": "sw_4473",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Returns the symbolic link's string value. See the POSIX readlink(2) documentation for more details.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4474",
          "content": "Returns the symbolic link's string value. See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4475",
          "content": "See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4476",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_4488",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} `length` {integer} `position` {integer|bigint|null} **Default:** `null` Returns: {number} Returns the number of `bytesRead`. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4489",
          "content": "Returns the number of `bytesRead`. For detailed information, see the documentation of the asynchronous version of this API: [`fs. read()`][].",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4490",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. read()`][].",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4500",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` Returns: {number} Returns the number of `bytesRead`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4501",
          "content": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` Returns: {number} Returns the number of `bytesRead`. Similar to the above `fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4502",
          "content": "Returns the number of `bytesRead`. Similar to the above `fs. readSync` function, this version takes an optional `options` object.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4503",
          "content": "Similar to the above `fs. readSync` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4504",
          "content": "readSync` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4505",
          "content": "If no `options` object is specified, it will default with the above values. For detailed information, see the documentation of the asynchronous version of this API: [`fs. read()`][].",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4506",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. read()`][].",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_4524",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes read. For detailed information, see the documentation of the asynchronous version of this API: [`fs. readv()`][].",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4525",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. readv()`][].",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_4533",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Returns the resolved pathname. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4534",
          "content": "Returns the resolved pathname. For detailed information, see the documentation of the asynchronous version of this API: [`fs. realpath()`][].",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4535",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. realpath()`][].",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4545",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Synchronous realpath(3). Only paths that can be converted to UTF8 strings are supported.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4546",
          "content": "Synchronous realpath(3). Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4547",
          "content": "Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4548",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4549",
          "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4550",
          "content": "On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4551",
          "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_4569",
          "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Renames the file from `oldPath` to `newPath`. Returns `undefined`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4570",
          "content": "Renames the file from `oldPath` to `newPath`. Returns `undefined`. See the POSIX rename(2) documentation for more details.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4571",
          "content": "Returns `undefined`. See the POSIX rename(2) documentation for more details.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4581",
          "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4582",
          "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used. Synchronous rmdir(2).",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4583",
          "content": "The `options` argument is still accepted for backwards compatibility but it is not used. Synchronous rmdir(2). Returns `undefined`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4584",
          "content": "Synchronous rmdir(2). Returns `undefined`. rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4585",
          "content": "Returns `undefined`. rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4586",
          "content": "rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs. rmSync()`][] with options `{ recursive: true, force: true }`.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4587",
          "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fs. rmSync()`][] with options `{ recursive: true, force: true }`.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_4605",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist. **Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4606",
          "content": "**Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4607",
          "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4608",
          "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries. This option is ignored if the `recursive` option is not `true`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4609",
          "content": "This option represents the number of retries. This option is ignored if the `recursive` option is not `true`. **Default:** `0`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4610",
          "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive directory removal.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4611",
          "content": "**Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive directory removal. In recursive mode operations are retried on failure.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_4612",
          "content": "* `recursive` {boolean} If `true`, perform a recursive directory removal. In recursive mode operations are retried on failure. **Default:** `false`.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_4613",
          "content": "In recursive mode operations are retried on failure. **Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_4614",
          "content": "**Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_4615",
          "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`. **Default:** `100`.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_4616",
          "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `100`. Synchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_4617",
          "content": "**Default:** `100`. Synchronously removes files and directories (modeled on the standard POSIX `rm` utility). Returns `undefined`.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_4618",
          "content": "Synchronously removes files and directories (modeled on the standard POSIX `rm` utility). Returns `undefined`.",
          "position": 13,
          "sentenceCount": 2
        },
        {
          "id": "sw_4650",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4651",
          "content": "Stats} object should be `bigint`. **Default:** `false`. * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4652",
          "content": "**Default:** `false`. * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`. **Default:** `true`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4653",
          "content": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`. **Default:** `true`. Returns: {fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4654",
          "content": "**Default:** `true`. Returns: {fs. Retrieves the {fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4655",
          "content": "Returns: {fs. Retrieves the {fs. Stats} for the path.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4656",
          "content": "Retrieves the {fs. Stats} for the path.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_4674",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. StatFs} object should be `bigint`. **Default:** `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4675",
          "content": "StatFs} object should be `bigint`. **Default:** `false`. Returns: {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4676",
          "content": "**Default:** `false`. Returns: {fs. Synchronous statfs(2).",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4677",
          "content": "Returns: {fs. Synchronous statfs(2). Returns information about the mounted file system which contains `path`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4678",
          "content": "Synchronous statfs(2). Returns information about the mounted file system which contains `path`. In case of an error, the `err.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4679",
          "content": "Returns information about the mounted file system which contains `path`. In case of an error, the `err. code` will be one of [Common System Errors][].",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4680",
          "content": "In case of an error, the `err. code` will be one of [Common System Errors][].",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_4698",
          "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: `undefined`. For detailed information, see the documentation of the asynchronous version of this API: [`fs. symlink()`][].",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4699",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. symlink()`][].",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_4707",
          "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Truncates the file. Returns `undefined`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4708",
          "content": "Truncates the file. Returns `undefined`. A file descriptor can also be passed as the first argument.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4709",
          "content": "Returns `undefined`. A file descriptor can also be passed as the first argument. In this case, `fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4710",
          "content": "A file descriptor can also be passed as the first argument. In this case, `fs. ftruncateSync()` is called.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4711",
          "content": "In this case, `fs. ftruncateSync()` is called. Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4712",
          "content": "ftruncateSync()` is called. Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_4727",
          "content": "`path` {string|Buffer|URL} Synchronous unlink(2). Returns `undefined`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4728",
          "content": "Synchronous unlink(2). Returns `undefined`.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_4736",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: `undefined`. For detailed information, see the documentation of the asynchronous version of this API: [`fs. utimes()`][].",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4737",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. utimes()`][].",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_4745",
          "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. * `flush` {boolean} If all data is successfully",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4746",
          "content": "**Default:** `'w'`. * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs. fsyncSync()` is used to flush the data.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4747",
          "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs. fsyncSync()` is used to flush the data. Returns: `undefined`.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4748",
          "content": "fsyncSync()` is used to flush the data. Returns: `undefined`. The `mode` option only affects the newly created file.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4749",
          "content": "Returns: `undefined`. The `mode` option only affects the newly created file. open()`][] for more details.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4750",
          "content": "The `mode` option only affects the newly created file. open()`][] for more details. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4751",
          "content": "open()`][] for more details. For detailed information, see the documentation of the asynchronous version of this API: [`fs. writeFile()`][].",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_4752",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. writeFile()`][].",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_4772",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer. byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4773",
          "content": "byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, buffer...)",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4774",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, buffer...)",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4784",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4785",
          "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, buffer...)",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4786",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, buffer...)",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4796",
          "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, string...)",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4797",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, string...)",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_4805",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of this API: [`fs. writev()`][].",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4806",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. writev()`][].",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_4816",
          "content": "A class representing a directory stream. Created by [`fs. opendir()`][], [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4817",
          "content": "Created by [`fs. opendir()`][], [`fs. opendirSync()`][], or [`fsPromises.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4818",
          "content": "opendir()`][], [`fs. opendirSync()`][], or [`fsPromises. opendir()`][].",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4819",
          "content": "opendirSync()`][], or [`fsPromises. opendir()`][]. When using the async iterator, the {fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4820",
          "content": "opendir()`][]. When using the async iterator, the {fs. Dir} object will be automatically closed after the iterator exits.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4821",
          "content": "When using the async iterator, the {fs. Dir} object will be automatically closed after the iterator exits.",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_4837",
          "content": "Returns: {Promise} Asynchronously close the directory's underlying resource handle. Subsequent reads will result in errors.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4838",
          "content": "Asynchronously close the directory's underlying resource handle. Subsequent reads will result in errors. A promise is returned that will be fulfilled after the resource has been closed.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4839",
          "content": "Subsequent reads will result in errors. A promise is returned that will be fulfilled after the resource has been closed.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4849",
          "content": "`callback` {Function} * `err` {Error} Asynchronously close the directory's underlying resource handle. Subsequent reads will result in errors.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4850",
          "content": "Asynchronously close the directory's underlying resource handle. Subsequent reads will result in errors. The `callback` will be called after the resource handle has been closed.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4851",
          "content": "Subsequent reads will result in errors. The `callback` will be called after the resource handle has been closed.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_4860",
          "content": "Synchronously close the directory's underlying resource handle. Subsequent reads will result in errors.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_4865",
          "content": "Type: {string} The read-only path of this directory as was provided to [`fs. opendir()`][], [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4866",
          "content": "The read-only path of this directory as was provided to [`fs. opendir()`][], [`fs. opendirSync()`][], or [`fsPromises.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4867",
          "content": "opendir()`][], [`fs. opendirSync()`][], or [`fsPromises. opendir()`][].",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4868",
          "content": "opendirSync()`][], or [`fsPromises. opendir()`][].",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_4880",
          "content": "Returns: {Promise} Fulfills with a {fs. Dirent|null} Asynchronously read the next directory entry via readdir(3) as an {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4881",
          "content": "Dirent|null} Asynchronously read the next directory entry via readdir(3) as an {fs. A promise is returned that will be fulfilled with an {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4882",
          "content": "Asynchronously read the next directory entry via readdir(3) as an {fs. A promise is returned that will be fulfilled with an {fs. Dirent}, or `null` if there are no more directory entries to read.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4883",
          "content": "A promise is returned that will be fulfilled with an {fs. Dirent}, or `null` if there are no more directory entries to read. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4884",
          "content": "Dirent}, or `null` if there are no more directory entries to read. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4885",
          "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_4901",
          "content": "`callback` {Function} * `err` {Error} * `dirent` {fs. Dirent|null} Asynchronously read the next directory entry via readdir(3) as an {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4902",
          "content": "Dirent|null} Asynchronously read the next directory entry via readdir(3) as an {fs. After the read is completed, the `callback` will be called with an {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4903",
          "content": "Asynchronously read the next directory entry via readdir(3) as an {fs. After the read is completed, the `callback` will be called with an {fs. Dirent}, or `null` if there are no more directory entries to read.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4904",
          "content": "After the read is completed, the `callback` will be called with an {fs. Dirent}, or `null` if there are no more directory entries to read. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4905",
          "content": "Dirent}, or `null` if there are no more directory entries to read. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4906",
          "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_4922",
          "content": "Returns: {fs. Dirent|null} Synchronously read the next directory entry as an {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4923",
          "content": "Dirent|null} Synchronously read the next directory entry as an {fs. See the POSIX readdir(3) documentation for more detail.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4924",
          "content": "Synchronously read the next directory entry as an {fs. See the POSIX readdir(3) documentation for more detail. If there are no more directory entries to read, `null` will be returned.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4925",
          "content": "See the POSIX readdir(3) documentation for more detail. If there are no more directory entries to read, `null` will be returned. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4926",
          "content": "If there are no more directory entries to read, `null` will be returned. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4927",
          "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_4943",
          "content": "Returns: {AsyncIterator} An AsyncIterator of {fs. Asynchronously iterates over the directory until all entries have been read. Refer to the POSIX readdir(3) documentation for more detail.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4944",
          "content": "Asynchronously iterates over the directory until all entries have been read. Refer to the POSIX readdir(3) documentation for more detail. Entries returned by the async iterator are always an {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4945",
          "content": "Refer to the POSIX readdir(3) documentation for more detail. Entries returned by the async iterator are always an {fs. The `null` case from `dir.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4946",
          "content": "Entries returned by the async iterator are always an {fs. The `null` case from `dir. read()` is handled internally.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4947",
          "content": "The `null` case from `dir. read()` is handled internally. Dir} for an example.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_4948",
          "content": "read()` is handled internally. Dir} for an example. Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_4949",
          "content": "Dir} for an example. Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_4950",
          "content": "Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_4969",
          "content": "Calls `dir. close()` if the directory handle is open, and returns a promise that fulfills when disposal is complete.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_4974",
          "content": "Calls `dir. closeSync()` if the directory handle is open, and returns `undefined`.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_4980",
          "content": "A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an {fs. The directory entry is a combination of the file name and file type pairs. Additionally, when [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4981",
          "content": "The directory entry is a combination of the file name and file type pairs. Additionally, when [`fs. readdir()`][] or [`fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_4982",
          "content": "Additionally, when [`fs. readdir()`][] or [`fs. readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_4983",
          "content": "readdir()`][] or [`fs. readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs. Dirent} objects, rather than strings or {Buffer}s.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_4984",
          "content": "readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs. Dirent} objects, rather than strings or {Buffer}s.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_4997",
          "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a block device.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_4998",
          "content": "Returns `true` if the {fs. Dirent} object describes a block device.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5005",
          "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a character device.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5006",
          "content": "Returns `true` if the {fs. Dirent} object describes a character device.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5013",
          "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a file system directory.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5014",
          "content": "Returns `true` if the {fs. Dirent} object describes a file system directory.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5021",
          "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a first-in-first-out (FIFO) pipe.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5022",
          "content": "Returns `true` if the {fs. Dirent} object describes a first-in-first-out (FIFO) pipe.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5029",
          "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a regular file.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5030",
          "content": "Returns `true` if the {fs. Dirent} object describes a regular file.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5037",
          "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a socket.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5038",
          "content": "Returns `true` if the {fs. Dirent} object describes a socket.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5045",
          "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a symbolic link.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5046",
          "content": "Returns `true` if the {fs. Dirent} object describes a symbolic link.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5054",
          "content": "Type: {string|Buffer} The file name that this {fs. Dirent} object refers to.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5055",
          "content": "The file name that this {fs. Dirent} object refers to. The type of this value is determined by the `options.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5056",
          "content": "Dirent} object refers to. The type of this value is determined by the `options. encoding` passed to [`fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5057",
          "content": "The type of this value is determined by the `options. encoding` passed to [`fs. readdir()`][] or [`fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5058",
          "content": "encoding` passed to [`fs. readdir()`][] or [`fs. readdirSync()`][].",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5059",
          "content": "readdir()`][] or [`fs. readdirSync()`][].",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_5074",
          "content": "Type: {string} The path to the parent directory of the file this {fs. Dirent} object refers to.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5075",
          "content": "The path to the parent directory of the file this {fs. Dirent} object refers to.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5083",
          "content": "Extends {EventEmitter} A successful call to [`fs. watch()`][] method will return a new {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5084",
          "content": "A successful call to [`fs. watch()`][] method will return a new {fs. FSWatcher} object.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5085",
          "content": "watch()`][] method will return a new {fs. FSWatcher} object. FSWatcher} objects emit a `'change'` event whenever a specific watched file is modified.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5086",
          "content": "FSWatcher} object. FSWatcher} objects emit a `'change'` event whenever a specific watched file is modified.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_5098",
          "content": "`eventType` {string} The type of change event that has occurred `filename` {string|Buffer} The filename that changed (if relevant/available) Emitted when something changes in a watched directory or file. See more details in [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5099",
          "content": "Emitted when something changes in a watched directory or file. See more details in [`fs. watch()`][].",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5100",
          "content": "See more details in [`fs. watch()`][]. The `filename` argument may not be provided depending on operating system support.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5101",
          "content": "watch()`][]. The `filename` argument may not be provided depending on operating system support. If `filename` is provided, it will be provided as a {Buffer} if `fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5102",
          "content": "The `filename` argument may not be provided depending on operating system support. If `filename` is provided, it will be provided as a {Buffer} if `fs. watch()` is called with its `encoding` option set to `'buffer'`, otherwise `filename` will be a UTF-8 string.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5103",
          "content": "If `filename` is provided, it will be provided as a {Buffer} if `fs. watch()` is called with its `encoding` option set to `'buffer'`, otherwise `filename` will be a UTF-8 string.",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_5118",
          "content": "Emitted when the watcher stops watching for changes. The closed {fs. FSWatcher} object is no longer usable in the event handler.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5119",
          "content": "The closed {fs. FSWatcher} object is no longer usable in the event handler.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5127",
          "content": "`error` {Error} Emitted when an error occurs while watching the file. The errored {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5128",
          "content": "Emitted when an error occurs while watching the file. The errored {fs. FSWatcher} object is no longer usable in the event handler.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5129",
          "content": "The errored {fs. FSWatcher} object is no longer usable in the event handler.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_5138",
          "content": "Stop watching for changes on the given {fs. FSWatcher}. Once stopped, the {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5139",
          "content": "FSWatcher}. Once stopped, the {fs. FSWatcher} object is no longer usable.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5140",
          "content": "Once stopped, the {fs. FSWatcher} object is no longer usable.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_5150",
          "content": "Returns: {fs. When called, requests that the Node. js event loop _not_ exit so long as the {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5151",
          "content": "When called, requests that the Node. js event loop _not_ exit so long as the {fs. FSWatcher} is active.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5152",
          "content": "js event loop _not_ exit so long as the {fs. FSWatcher} is active. Calling `watcher.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5153",
          "content": "FSWatcher} is active. Calling `watcher. ref()` multiple times will have no effect.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5154",
          "content": "Calling `watcher. ref()` multiple times will have no effect. By default, all {fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5155",
          "content": "ref()` multiple times will have no effect. By default, all {fs. FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_5156",
          "content": "By default, all {fs. FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher. ref()` unless `watcher.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_5157",
          "content": "FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher. ref()` unless `watcher. unref()` had been called previously.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_5158",
          "content": "ref()` unless `watcher. unref()` had been called previously.",
          "position": 8,
          "sentenceCount": 2
        },
        {
          "id": "sw_5180",
          "content": "Returns: {fs. When called, the active {fs. FSWatcher} object will not require the Node.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5181",
          "content": "When called, the active {fs. FSWatcher} object will not require the Node. js event loop to remain active.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5182",
          "content": "FSWatcher} object will not require the Node. js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the {fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5183",
          "content": "js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the {fs. FSWatcher} object's callback is invoked.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5184",
          "content": "If there is no other activity keeping the event loop running, the process may exit before the {fs. FSWatcher} object's callback is invoked. Calling `watcher.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5185",
          "content": "FSWatcher} object's callback is invoked. Calling `watcher. unref()` multiple times will have no effect.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_5186",
          "content": "Calling `watcher. unref()` multiple times will have no effect.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_5203",
          "content": "Extends {EventEmitter} A successful call to `fs. watchFile()` method will return a new {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5204",
          "content": "A successful call to `fs. watchFile()` method will return a new {fs. StatWatcher} object.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5205",
          "content": "watchFile()` method will return a new {fs. StatWatcher} object.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_5215",
          "content": "Returns: {fs. StatWatcher} When called, requests that the Node.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5216",
          "content": "StatWatcher} When called, requests that the Node. js event loop _not_ exit so long as the {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5217",
          "content": "When called, requests that the Node. js event loop _not_ exit so long as the {fs. StatWatcher} is active.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5218",
          "content": "js event loop _not_ exit so long as the {fs. StatWatcher} is active. Calling `watcher.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5219",
          "content": "StatWatcher} is active. Calling `watcher. ref()` multiple times will have no effect.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5220",
          "content": "Calling `watcher. ref()` multiple times will have no effect. By default, all {fs.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_5221",
          "content": "ref()` multiple times will have no effect. By default, all {fs. StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_5222",
          "content": "By default, all {fs. StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher. ref()` unless `watcher.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_5223",
          "content": "StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher. ref()` unless `watcher. unref()` had been called previously.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_5224",
          "content": "ref()` unless `watcher. unref()` had been called previously.",
          "position": 9,
          "sentenceCount": 2
        },
        {
          "id": "sw_5248",
          "content": "Returns: {fs. StatWatcher} When called, the active {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5249",
          "content": "StatWatcher} When called, the active {fs. StatWatcher} object will not require the Node.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5250",
          "content": "When called, the active {fs. StatWatcher} object will not require the Node. js event loop to remain active.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5251",
          "content": "StatWatcher} object will not require the Node. js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the {fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5252",
          "content": "js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the {fs. StatWatcher} object's callback is invoked.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5253",
          "content": "If there is no other activity keeping the event loop running, the process may exit before the {fs. StatWatcher} object's callback is invoked. Calling `watcher.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_5254",
          "content": "StatWatcher} object's callback is invoked. Calling `watcher. unref()` multiple times will have no effect.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_5255",
          "content": "Calling `watcher. unref()` multiple times will have no effect.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_5274",
          "content": "Extends: {stream. Instances of {fs. ReadStream} are created and returned using the [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5275",
          "content": "Instances of {fs. ReadStream} are created and returned using the [`fs. createReadStream()`][] function.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5276",
          "content": "ReadStream} are created and returned using the [`fs. createReadStream()`][] function.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_5285",
          "content": "Emitted when the {fs. ReadStream}'s underlying file descriptor has been closed.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5290",
          "content": "`fd` {integer} Integer file descriptor used by the {fs. ReadStream}. Emitted when the {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5291",
          "content": "ReadStream}. Emitted when the {fs. ReadStream}'s file descriptor has been opened.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5292",
          "content": "Emitted when the {fs. ReadStream}'s file descriptor has been opened.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_5301",
          "content": "Emitted when the {fs. ReadStream} is ready to be used. Fires immediately after `'open'`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5302",
          "content": "ReadStream} is ready to be used. Fires immediately after `'open'`.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5309",
          "content": "Type: {number} The number of bytes that have been read so far.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5315",
          "content": "Type: {string|Buffer} The path to the file the stream is reading from as specified in the first argument to `fs. createReadStream()`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5316",
          "content": "The path to the file the stream is reading from as specified in the first argument to `fs. createReadStream()`. If `path` is passed as a string, then `readStream.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5317",
          "content": "createReadStream()`. If `path` is passed as a string, then `readStream. path` will be a string.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5318",
          "content": "If `path` is passed as a string, then `readStream. path` will be a string. If `path` is passed as a {Buffer}, then `readStream.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5319",
          "content": "path` will be a string. If `path` is passed as a {Buffer}, then `readStream. path` will be a {Buffer}.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5320",
          "content": "If `path` is passed as a {Buffer}, then `readStream. path` will be a {Buffer}. If `fd` is specified, then `readStream.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_5321",
          "content": "path` will be a {Buffer}. If `fd` is specified, then `readStream. path` will be `undefined`.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_5322",
          "content": "If `fd` is specified, then `readStream. path` will be `undefined`.",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_5342",
          "content": "Type: {boolean} This property is `true` if the underlying file has not been opened yet, i. before the `'ready'` event is emitted.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5343",
          "content": "This property is `true` if the underlying file has not been opened yet, i. before the `'ready'` event is emitted.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5351",
          "content": "Stats} object provides information about a file. Objects returned from [`fs. stat()`][], [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5352",
          "content": "Objects returned from [`fs. stat()`][], [`fs. lstat()`][], [`fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5353",
          "content": "stat()`][], [`fs. lstat()`][], [`fs. fstat()`][], and their synchronous counterparts are of this type.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5354",
          "content": "lstat()`][], [`fs. fstat()`][], and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5355",
          "content": "fstat()`][], and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number` and the object will contain additional nanosecond-precision properties suffixed with `Ns`.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5356",
          "content": "If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number` and the object will contain additional nanosecond-precision properties suffixed with `Ns`. `Stat` objects are not to be created directly using the `new` keyword.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_5357",
          "content": "and the object will contain additional nanosecond-precision properties suffixed with `Ns`. `Stat` objects are not to be created directly using the `new` keyword. `bigint` version:",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_5358",
          "content": "`Stat` objects are not to be created directly using the `new` keyword. `bigint` version:",
          "position": 7,
          "sentenceCount": 2
        },
        {
          "id": "sw_5377",
          "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a block device.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5378",
          "content": "Returns `true` if the {fs. Stats} object describes a block device.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5385",
          "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a character device.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5386",
          "content": "Returns `true` if the {fs. Stats} object describes a character device.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5394",
          "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a file system directory.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5395",
          "content": "Returns `true` if the {fs. Stats} object describes a file system directory. If the {fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5396",
          "content": "Stats} object describes a file system directory. If the {fs. Stats} object was obtained from calling [`fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5397",
          "content": "If the {fs. Stats} object was obtained from calling [`fs. lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5398",
          "content": "Stats} object was obtained from calling [`fs. lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`. This is because [`fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5399",
          "content": "lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`. This is because [`fs. lstat()`][] returns information about a symbolic link itself and not the path it resolves to.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_5400",
          "content": "This is because [`fs. lstat()`][] returns information about a symbolic link itself and not the path it resolves to.",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_5417",
          "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a first-in-first-out (FIFO) pipe.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5418",
          "content": "Returns `true` if the {fs. Stats} object describes a first-in-first-out (FIFO) pipe.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5425",
          "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a regular file.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5426",
          "content": "Returns `true` if the {fs. Stats} object describes a regular file.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5433",
          "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a socket.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5434",
          "content": "Returns `true` if the {fs. Stats} object describes a socket.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5441",
          "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a symbolic link.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5442",
          "content": "Returns `true` if the {fs. Stats} object describes a symbolic link. This method is only valid when using [`fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5443",
          "content": "Stats} object describes a symbolic link. This method is only valid when using [`fs. lstat()`][].",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5444",
          "content": "This method is only valid when using [`fs. lstat()`][].",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_5455",
          "content": "Type: {number|bigint} The numeric identifier of the device containing the file.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5460",
          "content": "Type: {number|bigint} The file system specific \"Inode\" number for the file.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5465",
          "content": "Type: {number|bigint} A bit-field describing the file type and mode.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5470",
          "content": "Type: {number|bigint} The number of hard-links that exist for the file.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5475",
          "content": "Type: {number|bigint} The numeric user identifier of the user that owns the file (POSIX).",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5480",
          "content": "Type: {number|bigint} The numeric group identifier of the group that owns the file (POSIX).",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5485",
          "content": "Type: {number|bigint} A numeric device identifier if the file represents a device.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5491",
          "content": "Type: {number|bigint} The size of the file in bytes. If the underlying file system does not support getting the size of the file, this will be `0`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5492",
          "content": "The size of the file in bytes. If the underlying file system does not support getting the size of the file, this will be `0`.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5499",
          "content": "Type: {number|bigint} The file system block size for i/o operations.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5504",
          "content": "Type: {number|bigint} The number of blocks allocated for this file.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5509",
          "content": "Type: {number|bigint} The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5514",
          "content": "Type: {number|bigint} The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5519",
          "content": "Type: {number|bigint} The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5524",
          "content": "Type: {number|bigint} The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5530",
          "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5531",
          "content": "Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5539",
          "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5540",
          "content": "Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5548",
          "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5549",
          "content": "Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5557",
          "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5558",
          "content": "Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5565",
          "content": "Type: {Date} The timestamp indicating the last time this file was accessed.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5570",
          "content": "Type: {Date} The timestamp indicating the last time this file was modified.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5575",
          "content": "Type: {Date} The timestamp indicating the last time the file status was changed.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5580",
          "content": "Type: {Date} The timestamp indicating the creation time of this file.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5587",
          "content": "The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs` properties are numeric values that hold the corresponding times in milliseconds. Their precision is platform specific. When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number].",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5588",
          "content": "Their precision is platform specific. When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number]. The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5589",
          "content": "When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number]. The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds. They are only present when `bigint: true` is passed into the",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5590",
          "content": "The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds. They are only present when `bigint: true` is passed into the method that generates the object. Their precision is platform specific.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5591",
          "content": "They are only present when `bigint: true` is passed into the method that generates the object. Their precision is platform specific. `atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5592",
          "content": "Their precision is platform specific. `atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times. The `Date` and number values are not connected.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_5593",
          "content": "`atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times. The `Date` and number values are not connected. Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_5594",
          "content": "The `Date` and number values are not connected. Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation. The times in the stat object have the following semantics:",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_5595",
          "content": "Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation. The times in the stat object have the following semantics: `atime` \"Access Time\": Time when file data last accessed.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_5596",
          "content": "The times in the stat object have the following semantics: `atime` \"Access Time\": Time when file data last accessed. Changed by the mknod(2), utimes(2), and read(2) system calls.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_5597",
          "content": "`atime` \"Access Time\": Time when file data last accessed. Changed by the mknod(2), utimes(2), and read(2) system calls. `mtime` \"Modified Time\": Time when file data last modified.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_5598",
          "content": "Changed by the mknod(2), utimes(2), and read(2) system calls. `mtime` \"Modified Time\": Time when file data last modified. Changed by the mknod(2), utimes(2), and write(2) system calls.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_5599",
          "content": "`mtime` \"Modified Time\": Time when file data last modified. Changed by the mknod(2), utimes(2), and write(2) system calls. `ctime` \"Change Time\": Time when file status was last changed (inode data modification).",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_5600",
          "content": "Changed by the mknod(2), utimes(2), and write(2) system calls. `ctime` \"Change Time\": Time when file status was last changed (inode data modification). Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_5601",
          "content": "`ctime` \"Change Time\": Time when file status was last changed (inode data modification). Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls. `birthtime` \"Birth Time\": Time of file creation.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_5602",
          "content": "Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls. `birthtime` \"Birth Time\": Time of file creation. Set once when the file is created.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_5603",
          "content": "`birthtime` \"Birth Time\": Time of file creation. Set once when the file is created. On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`).",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_5604",
          "content": "Set once when the file is created. On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`). This value may be greater than `atime` or `mtime` in this case.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_5605",
          "content": "On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`). This value may be greater than `atime` or `mtime` in this case. On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime`",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_5606",
          "content": "This value may be greater than `atime` or `mtime` in this case. On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime` using the utimes(2) system call. Prior to Node.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_5607",
          "content": "On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime` using the utimes(2) system call. Prior to Node. js 0.12, the `ctime` held the `birthtime` on Windows systems.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_5608",
          "content": "Prior to Node. js 0.12, the `ctime` held the `birthtime` on Windows systems. As of 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_5609",
          "content": "js 0.12, the `ctime` held the `birthtime` on Windows systems. As of 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
          "position": 22,
          "sentenceCount": 2
        },
        {
          "id": "sw_5659",
          "content": "Provides information about a mounted file system. Objects returned from [`fs. statfs()`][] and its synchronous counterpart are of this type.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5660",
          "content": "Objects returned from [`fs. statfs()`][] and its synchronous counterpart are of this type. If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5661",
          "content": "statfs()`][] and its synchronous counterpart are of this type. If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`. `bigint` version:",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5662",
          "content": "If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`. `bigint` version:",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_5673",
          "content": "Type: {number|bigint} Free blocks available to unprivileged users.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5678",
          "content": "Type: {number|bigint} Free blocks in file system.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5683",
          "content": "Type: {number|bigint} Total data blocks in file system.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5688",
          "content": "Type: {number|bigint} Optimal transfer block size.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5693",
          "content": "Type: {number|bigint} Free file nodes in file system.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5698",
          "content": "Type: {number|bigint} Total file nodes in file system.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5703",
          "content": "Type: {number|bigint} Type of file system.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5709",
          "content": "An optimized UTF-8 stream writer that allows for flushing all the internal buffering on demand. It handles `EAGAIN` errors correctly, allowing for customization, for example, by dropping content if the disk is busy.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5719",
          "content": "The `'drop'` event is emitted when to maximal length is reached and that data will not be written. The data that was dropped is passed as the first argument to the event handle.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5731",
          "content": "The `'write'` event is emitted when a write operation has completed. The number of bytes written is passed as the first argument to the event handler.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5738",
          "content": "`options` {Object} * `append`: {boolean} Appends writes to dest file instead of truncating it. **Default**: `true`. * `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5739",
          "content": "**Default**: `true`. * `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`. **Default**: `'utf8'`.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5740",
          "content": "* `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`. **Default**: `'utf8'`. * `dest`: {string} A path to a file to be written to (mode controlled by the append option).",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5741",
          "content": "**Default**: `'utf8'`. * `dest`: {string} A path to a file to be written to (mode controlled by the append option). * `fd`: {number} A file descriptor, something that is returned by `fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5742",
          "content": "* `dest`: {string} A path to a file to be written to (mode controlled by the append option). * `fd`: {number} A file descriptor, something that is returned by `fs. open()` or `fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_5743",
          "content": "* `fd`: {number} A file descriptor, something that is returned by `fs. open()` or `fs. openSync()`.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_5744",
          "content": "open()` or `fs. openSync()`. * `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_5745",
          "content": "openSync()`. * `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream. * `fsync`: {boolean} Perform a `fs.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_5746",
          "content": "* `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream. * `fsync`: {boolean} Perform a `fs. fsyncSync()` every time a write is completed.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_5747",
          "content": "* `fsync`: {boolean} Perform a `fs. fsyncSync()` every time a write is completed. * `maxLength`: {number} The maximum length of the internal buffer.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_5748",
          "content": "fsyncSync()` every time a write is completed. * `maxLength`: {number} The maximum length of the internal buffer. If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**:",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_5749",
          "content": "* `maxLength`: {number} The maximum length of the internal buffer. If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**: `16384` * `minLength`: {number} The minimum length",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_5750",
          "content": "If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**: `16384` * `minLength`: {number} The minimum length of the internal buffer that is required to be full before flushing.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_5751",
          "content": "* `mkdir`: {boolean} Ensure directory for `dest` file exists when true. **Default**: `false`. * `mode`: {number|string} Specify the creating file mode (see `fs.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_5752",
          "content": "**Default**: `false`. * `mode`: {number|string} Specify the creating file mode (see `fs. * `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_5753",
          "content": "* `mode`: {number|string} Specify the creating file mode (see `fs. * `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds. * `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_5754",
          "content": "* `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds. * `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error. If the return value is `true` the operation will be retried, otherwise it will bubble the error.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_5755",
          "content": "* `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error. If the return value is `true` the operation will be retried, otherwise it will bubble the error. The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_5756",
          "content": "If the return value is `true` the operation will be retried, otherwise it will bubble the error. The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the buffer that was written and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write.",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_5757",
          "content": "The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the buffer that was written and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write. * `err` {any} An error or `null`.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_5758",
          "content": "and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write. * `err` {any} An error or `null`. * `writeBufferLen` {number} * `remainingBufferLen`: {number} * `sync`: {boolean} Perform writes synchronously.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_5759",
          "content": "* `err` {any} An error or `null`. * `writeBufferLen` {number} * `remainingBufferLen`: {number} * `sync`: {boolean} Perform writes synchronously.",
          "position": 21,
          "sentenceCount": 2
        },
        {
          "id": "sw_5808",
          "content": "{string} The type of data that can be written to the stream. Supported values are `'utf8'` or `'buffer'`. **Default**: `'utf8'`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5809",
          "content": "Supported values are `'utf8'` or `'buffer'`. **Default**: `'utf8'`.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5825",
          "content": "`callback` {Function} * `err` {Error|null} An error if the flush failed, otherwise `null`. Writes the current buffer to the file if a write was not in progress. Do nothing if `minLength` is zero or if it is already writing.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5826",
          "content": "Writes the current buffer to the file if a write was not in progress. Do nothing if `minLength` is zero or if it is already writing.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5833",
          "content": "Flushes the buffered data synchronously. This is a costly operation.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5838",
          "content": "{boolean} Whether the stream is performing a `fs. fsyncSync()` after every write operation.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5844",
          "content": "{number} The maximum length of the internal buffer. If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5852",
          "content": "{boolean} Whether the stream should ensure that the directory for the `dest` file exists. If `true`, it will create the directory if it does not exist. **Default**: `false`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5853",
          "content": "If `true`, it will create the directory if it does not exist. **Default**: `false`.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5862",
          "content": "{number} The number of milliseconds between flushes. If set to `0`, no periodic flushes will be performed.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5868",
          "content": "`file`: {string|Buffer|URL} A path to a file to be written to (mode controlled by the append option). Reopen the file in place, useful for log rotation.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5876",
          "content": "`data` {string|Buffer} The data to write. Returns {boolean} When the `options.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5877",
          "content": "Returns {boolean} When the `options. contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5878",
          "content": "When the `options. contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string. If the `contentMode` is set to `'buffer'`, the `data` argument must be a {Buffer}.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5879",
          "content": "contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string. If the `contentMode` is set to `'buffer'`, the `data` argument must be a {Buffer}.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_5892",
          "content": "Calls `utf8Stream. destroy()`.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5897",
          "content": "Extends {stream. Instances of {fs. WriteStream} are created and returned using the [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5898",
          "content": "Instances of {fs. WriteStream} are created and returned using the [`fs. createWriteStream()`][] function.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5899",
          "content": "WriteStream} are created and returned using the [`fs. createWriteStream()`][] function.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_5908",
          "content": "Emitted when the {fs. WriteStream}'s underlying file descriptor has been closed.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5913",
          "content": "`fd` {integer} Integer file descriptor used by the {fs. WriteStream}. Emitted when the {fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5914",
          "content": "WriteStream}. Emitted when the {fs. WriteStream}'s file is opened.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5915",
          "content": "Emitted when the {fs. WriteStream}'s file is opened.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_5924",
          "content": "Emitted when the {fs. WriteStream} is ready to be used. Fires immediately after `'open'`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5925",
          "content": "WriteStream} is ready to be used. Fires immediately after `'open'`.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5932",
          "content": "The number of bytes written so far. Does not include data that is still queued for writing.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5937",
          "content": "`callback` {Function} * `err` {Error} Closes `writeStream`. Optionally accepts a callback that will be executed once the `writeStream` is closed.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5938",
          "content": "Closes `writeStream`. Optionally accepts a callback that will be executed once the `writeStream` is closed.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5946",
          "content": "The path to the file the stream is writing to as specified in the first argument to [`fs. createWriteStream()`][]. If `path` is passed as a string, then `writeStream.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5947",
          "content": "createWriteStream()`][]. If `path` is passed as a string, then `writeStream. path` will be a string.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5948",
          "content": "If `path` is passed as a string, then `writeStream. path` will be a string. If `path` is passed as a {Buffer}, then `writeStream.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5949",
          "content": "path` will be a string. If `path` is passed as a {Buffer}, then `writeStream. path` will be a {Buffer}.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5950",
          "content": "If `path` is passed as a {Buffer}, then `writeStream. path` will be a {Buffer}.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_5964",
          "content": "Type: {boolean} This property is `true` if the underlying file has not been opened yet, i. before the `'ready'` event is emitted.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5965",
          "content": "This property is `true` if the underlying file has not been opened yet, i. before the `'ready'` event is emitted.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_5972",
          "content": "Type: {Object} Returns an object containing commonly used constants for file system operations.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_5978",
          "content": "The following constants are exported by `fs. constants` and `fsPromises. constants`.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5979",
          "content": "constants` and `fsPromises. constants`. Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5980",
          "content": "constants`. Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available. For portable applications it is recommended to check for their presence before use.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5981",
          "content": "Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available. For portable applications it is recommended to check for their presence before use. To use more than one constant, use the bitwise OR `|` operator.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_5982",
          "content": "For portable applications it is recommended to check for their presence before use. To use more than one constant, use the bitwise OR `|` operator.",
          "position": 4,
          "sentenceCount": 2
        },
        {
          "id": "sw_5996",
          "content": "The following constants are meant for use as the `mode` parameter passed to [`fsPromises. access()`][], [`fs. access()`][], and [`fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_5997",
          "content": "access()`][], [`fs. access()`][], and [`fs. accessSync()`][].",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_5998",
          "content": "access()`][], and [`fs. accessSync()`][]. The definitions are also available on Windows.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_5999",
          "content": "accessSync()`][]. The definitions are also available on Windows.",
          "position": 3,
          "sentenceCount": 2
        },
        {
          "id": "sw_6010",
          "content": "The following constants are meant for use with [`fs. copyFile()`][]. The definitions are also available on Windows.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6011",
          "content": "copyFile()`][]. The definitions are also available on Windows.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_6019",
          "content": "The following constants are meant for use with `fs. On Windows, only `O_APPEND`, `O_CREAT`, `O_EXCL`, `O_RDONLY`, `O_RDWR`, `O_TRUNC`, `O_WRONLY`, and `UV_FS_O_FILEMAP` are available.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_6025",
          "content": "The following constants are meant for use with the {fs. Stats} object's `mode` property for determining a file's type. On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`, are available.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6026",
          "content": "Stats} object's `mode` property for determining a file's type. On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`, are available.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_6034",
          "content": "The following constants are meant for use with the {fs. Stats} object's `mode` property for determining the access permissions for a file. On Windows, only `S_IRUSR` and `S_IWUSR` are available.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6035",
          "content": "Stats} object's `mode` property for determining the access permissions for a file. On Windows, only `S_IRUSR` and `S_IWUSR` are available.",
          "position": 1,
          "sentenceCount": 2
        },
        {
          "id": "sw_6043",
          "content": "Because they are executed asynchronously by the underlying thread pool, there is no guaranteed ordering when using either the callback or promise-based methods. For example, the following is prone to error because the `fs. stat()` operation might complete before the `fs.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6044",
          "content": "For example, the following is prone to error because the `fs. stat()` operation might complete before the `fs. rename()` operation:",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_6045",
          "content": "stat()` operation might complete before the `fs. rename()` operation: It is important to correctly order the operations by awaiting the results of one before invoking the other:",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_6046",
          "content": "rename()` operation: It is important to correctly order the operations by awaiting the results of one before invoking the other: Or, when using the callback APIs, move the `fs.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_6047",
          "content": "It is important to correctly order the operations by awaiting the results of one before invoking the other: Or, when using the callback APIs, move the `fs. stat()` call into the callback of the `fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_6048",
          "content": "Or, when using the callback APIs, move the `fs. stat()` call into the callback of the `fs. rename()` operation:",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_6049",
          "content": "stat()` call into the callback of the `fs. rename()` operation:",
          "position": 6,
          "sentenceCount": 2
        },
        {
          "id": "sw_6070",
          "content": "String paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename. Relative paths will be resolved relative to the current working directory as determined by calling `process. Example using an absolute path on POSIX:",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6071",
          "content": "Relative paths will be resolved relative to the current working directory as determined by calling `process. Example using an absolute path on POSIX: Example using a relative path on POSIX (relative to `process.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_6072",
          "content": "Example using an absolute path on POSIX: Example using a relative path on POSIX (relative to `process.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_6082",
          "content": "For most `node:fs` module functions, the `path` or `filename` argument may be passed as a {URL} object using the `file:` protocol. `file:` URLs are always absolute paths.",
          "position": 0,
          "sentenceCount": 2
        },
        {
          "id": "sw_6088",
          "content": "On Windows, `file:` {URL}s with a host name convert to UNC paths, while `file:` {URL}s with drive letters convert to local absolute paths. `file:` {URL}s with no host name and no drive letter will result in an error: `file:` {URL}s with drive letters must use `:` as a separator just after the drive letter.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6089",
          "content": "`file:` {URL}s with no host name and no drive letter will result in an error: `file:` {URL}s with drive letters must use `:` as a separator just after the drive letter. Using another separator will result in an error.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_6090",
          "content": "`file:` {URL}s with drive letters must use `:` as a separator just after the drive letter. Using another separator will result in an error. On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error:",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_6091",
          "content": "Using another separator will result in an error. On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error: A `file:` {URL} having encoded slash characters will result in an error on all platforms:",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_6092",
          "content": "On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error: A `file:` {URL} having encoded slash characters will result in an error on all platforms: On Windows, `file:` {URL}s having encoded backslash will result in an error:",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_6093",
          "content": "A `file:` {URL} having encoded slash characters will result in an error on all platforms: On Windows, `file:` {URL}s having encoded backslash will result in an error:",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_6109",
          "content": "Paths specified using a {Buffer} are useful primarily on certain POSIX operating systems that treat file paths as opaque byte sequences. On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings. As with string paths, {Buffer} paths may be relative or absolute:",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6110",
          "content": "On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings. As with string paths, {Buffer} paths may be relative or absolute: Example using an absolute path on POSIX:",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_6111",
          "content": "As with string paths, {Buffer} paths may be relative or absolute: Example using an absolute path on POSIX:",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_6121",
          "content": "On Windows, Node. js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6122",
          "content": "js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example `fs.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_6123",
          "content": "This behavior can be observed when using a drive path without a backslash. For example `fs. readdirSync('C:\\\\')` can potentially return a different result than `fs.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_6124",
          "content": "For example `fs. readdirSync('C:\\\\')` can potentially return a different result than `fs. readdirSync('C:')`.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_6125",
          "content": "readdirSync('C:\\\\')` can potentially return a different result than `fs. readdirSync('C:')`. For more information, see [this MSDN page][MSDN-Rel-Path].",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_6126",
          "content": "readdirSync('C:')`. For more information, see [this MSDN page][MSDN-Rel-Path].",
          "position": 5,
          "sentenceCount": 2
        },
        {
          "id": "sw_6142",
          "content": "On POSIX systems, for every process, the kernel maintains a table of currently open files and resources. Each open file is assigned a simple numeric identifier called a _file descriptor_. At the system-level, all file system operations use these file descriptors to identify and track each specific file.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6143",
          "content": "Each open file is assigned a simple numeric identifier called a _file descriptor_. At the system-level, all file system operations use these file descriptors to identify and track each specific file. Windows systems use a different but conceptually similar mechanism for tracking resources.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_6144",
          "content": "At the system-level, all file system operations use these file descriptors to identify and track each specific file. Windows systems use a different but conceptually similar mechanism for tracking resources. To simplify things for users, Node.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_6145",
          "content": "Windows systems use a different but conceptually similar mechanism for tracking resources. To simplify things for users, Node. js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_6146",
          "content": "To simplify things for users, Node. js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor. The callback-based `fs.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_6147",
          "content": "js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor. The callback-based `fs. open()`, and synchronous `fs.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_6148",
          "content": "The callback-based `fs. open()`, and synchronous `fs. openSync()` methods open a file and allocate a new file descriptor.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_6149",
          "content": "open()`, and synchronous `fs. openSync()` methods open a file and allocate a new file descriptor. Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_6150",
          "content": "openSync()` methods open a file and allocate a new file descriptor. Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file. Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_6151",
          "content": "Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file. Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed. Failure to do so will result in a memory leak that will",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_6152",
          "content": "Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed. Failure to do so will result in a memory leak that will eventually cause an application to crash. The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_6153",
          "content": "Failure to do so will result in a memory leak that will eventually cause an application to crash. The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor. These objects are better managed by the system to ensure that resources are not leaked.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_6154",
          "content": "The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor. These objects are better managed by the system to ensure that resources are not leaked. However, it is still required that they are closed when operations are completed:",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_6155",
          "content": "These objects are better managed by the system to ensure that resources are not leaked. However, it is still required that they are closed when operations are completed:",
          "position": 13,
          "sentenceCount": 2
        },
        {
          "id": "sw_6187",
          "content": "All callback and promise-based file system APIs (with the exception of `fs. FSWatcher()`) use libuv's threadpool. This can have surprising and negative performance implications for some applications.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6188",
          "content": "FSWatcher()`) use libuv's threadpool. This can have surprising and negative performance implications for some applications. See the [`UV_THREADPOOL_SIZE`][] documentation for more information.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_6189",
          "content": "This can have surprising and negative performance implications for some applications. See the [`UV_THREADPOOL_SIZE`][] documentation for more information.",
          "position": 2,
          "sentenceCount": 2
        },
        {
          "id": "sw_6201",
          "content": "The following flags are available wherever the `flag` option takes a string. `'a'`: Open file for appending. The file is created if it does not exist.",
          "position": 0,
          "sentenceCount": 3
        },
        {
          "id": "sw_6202",
          "content": "`'a'`: Open file for appending. The file is created if it does not exist. `'ax'`: Like `'a'` but fails if the path exists.",
          "position": 1,
          "sentenceCount": 3
        },
        {
          "id": "sw_6203",
          "content": "The file is created if it does not exist. `'ax'`: Like `'a'` but fails if the path exists. `'a+'`: Open file for reading and appending.",
          "position": 2,
          "sentenceCount": 3
        },
        {
          "id": "sw_6204",
          "content": "`'ax'`: Like `'a'` but fails if the path exists. `'a+'`: Open file for reading and appending. The file is created if it does not exist.",
          "position": 3,
          "sentenceCount": 3
        },
        {
          "id": "sw_6205",
          "content": "`'a+'`: Open file for reading and appending. The file is created if it does not exist. `'ax+'`: Like `'a+'` but fails if the path exists.",
          "position": 4,
          "sentenceCount": 3
        },
        {
          "id": "sw_6206",
          "content": "The file is created if it does not exist. `'ax+'`: Like `'a+'` but fails if the path exists. `'as'`: Open file for appending in synchronous mode.",
          "position": 5,
          "sentenceCount": 3
        },
        {
          "id": "sw_6207",
          "content": "`'ax+'`: Like `'a+'` but fails if the path exists. `'as'`: Open file for appending in synchronous mode. The file is created if it does not exist.",
          "position": 6,
          "sentenceCount": 3
        },
        {
          "id": "sw_6208",
          "content": "`'as'`: Open file for appending in synchronous mode. The file is created if it does not exist. `'as+'`: Open file for reading and appending in synchronous mode.",
          "position": 7,
          "sentenceCount": 3
        },
        {
          "id": "sw_6209",
          "content": "The file is created if it does not exist. `'as+'`: Open file for reading and appending in synchronous mode. The file is created if it does not exist.",
          "position": 8,
          "sentenceCount": 3
        },
        {
          "id": "sw_6210",
          "content": "`'as+'`: Open file for reading and appending in synchronous mode. The file is created if it does not exist. `'r'`: Open file for reading.",
          "position": 9,
          "sentenceCount": 3
        },
        {
          "id": "sw_6211",
          "content": "The file is created if it does not exist. `'r'`: Open file for reading. An exception occurs if the file does not exist.",
          "position": 10,
          "sentenceCount": 3
        },
        {
          "id": "sw_6212",
          "content": "`'r'`: Open file for reading. An exception occurs if the file does not exist. `'rs'`: Open file for reading in synchronous mode.",
          "position": 11,
          "sentenceCount": 3
        },
        {
          "id": "sw_6213",
          "content": "An exception occurs if the file does not exist. `'rs'`: Open file for reading in synchronous mode. An exception occurs if the file does not exist.",
          "position": 12,
          "sentenceCount": 3
        },
        {
          "id": "sw_6214",
          "content": "`'rs'`: Open file for reading in synchronous mode. An exception occurs if the file does not exist. `'r+'`: Open file for reading and writing.",
          "position": 13,
          "sentenceCount": 3
        },
        {
          "id": "sw_6215",
          "content": "An exception occurs if the file does not exist. `'r+'`: Open file for reading and writing. An exception occurs if the file does not exist.",
          "position": 14,
          "sentenceCount": 3
        },
        {
          "id": "sw_6216",
          "content": "`'r+'`: Open file for reading and writing. An exception occurs if the file does not exist. `'rs+'`: Open file for reading and writing in synchronous mode.",
          "position": 15,
          "sentenceCount": 3
        },
        {
          "id": "sw_6217",
          "content": "An exception occurs if the file does not exist. `'rs+'`: Open file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache.",
          "position": 16,
          "sentenceCount": 3
        },
        {
          "id": "sw_6218",
          "content": "`'rs+'`: Open file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache. This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache.",
          "position": 17,
          "sentenceCount": 3
        },
        {
          "id": "sw_6219",
          "content": "Instructs the operating system to bypass the local file system cache. This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.",
          "position": 18,
          "sentenceCount": 3
        },
        {
          "id": "sw_6220",
          "content": "This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed. This doesn't turn `fs.",
          "position": 19,
          "sentenceCount": 3
        },
        {
          "id": "sw_6221",
          "content": "It has a very real impact on I/O performance so using this flag is not recommended unless it is needed. This doesn't turn `fs. open()` or `fsPromises.",
          "position": 20,
          "sentenceCount": 3
        },
        {
          "id": "sw_6222",
          "content": "This doesn't turn `fs. open()` or `fsPromises. open()` into a synchronous blocking call.",
          "position": 21,
          "sentenceCount": 3
        },
        {
          "id": "sw_6223",
          "content": "open()` or `fsPromises. open()` into a synchronous blocking call. If synchronous operation is desired, something like `fs.",
          "position": 22,
          "sentenceCount": 3
        },
        {
          "id": "sw_6224",
          "content": "open()` into a synchronous blocking call. If synchronous operation is desired, something like `fs. openSync()` should be used.",
          "position": 23,
          "sentenceCount": 3
        },
        {
          "id": "sw_6225",
          "content": "If synchronous operation is desired, something like `fs. openSync()` should be used. `'w'`: Open file for writing.",
          "position": 24,
          "sentenceCount": 3
        },
        {
          "id": "sw_6226",
          "content": "openSync()` should be used. `'w'`: Open file for writing. The file is created (if it does not exist) or truncated (if it exists).",
          "position": 25,
          "sentenceCount": 3
        },
        {
          "id": "sw_6227",
          "content": "`'w'`: Open file for writing. The file is created (if it does not exist) or truncated (if it exists). `'wx'`: Like `'w'` but fails if the path exists.",
          "position": 26,
          "sentenceCount": 3
        },
        {
          "id": "sw_6228",
          "content": "The file is created (if it does not exist) or truncated (if it exists). `'wx'`: Like `'w'` but fails if the path exists. `'w+'`: Open file for reading and writing.",
          "position": 27,
          "sentenceCount": 3
        },
        {
          "id": "sw_6229",
          "content": "`'wx'`: Like `'w'` but fails if the path exists. `'w+'`: Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).",
          "position": 28,
          "sentenceCount": 3
        },
        {
          "id": "sw_6230",
          "content": "`'w+'`: Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists). `'wx+'`: Like `'w+'` but fails if the path exists.",
          "position": 29,
          "sentenceCount": 3
        },
        {
          "id": "sw_6231",
          "content": "The file is created (if it does not exist) or truncated (if it exists). `'wx+'`: Like `'w+'` but fails if the path exists. `flag` can also be a number as documented by open(2); commonly used constants are available from `fs.",
          "position": 30,
          "sentenceCount": 3
        },
        {
          "id": "sw_6232",
          "content": "`'wx+'`: Like `'w+'` but fails if the path exists. `flag` can also be a number as documented by open(2); commonly used constants are available from `fs. constants`.",
          "position": 31,
          "sentenceCount": 3
        },
        {
          "id": "sw_6233",
          "content": "`flag` can also be a number as documented by open(2); commonly used constants are available from `fs. constants`. On Windows, flags are translated to their equivalent ones where applicable, e.",
          "position": 32,
          "sentenceCount": 3
        },
        {
          "id": "sw_6234",
          "content": "constants`. On Windows, flags are translated to their equivalent ones where applicable, e. `O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`.",
          "position": 33,
          "sentenceCount": 3
        },
        {
          "id": "sw_6235",
          "content": "On Windows, flags are translated to their equivalent ones where applicable, e. `O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`. The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists.",
          "position": 34,
          "sentenceCount": 3
        },
        {
          "id": "sw_6236",
          "content": "`O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`. The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists. On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist.",
          "position": 35,
          "sentenceCount": 3
        },
        {
          "id": "sw_6237",
          "content": "The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists. On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist. The exclusive flag might not work with network file systems.",
          "position": 36,
          "sentenceCount": 3
        },
        {
          "id": "sw_6238",
          "content": "On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist. The exclusive flag might not work with network file systems. On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 37,
          "sentenceCount": 3
        },
        {
          "id": "sw_6239",
          "content": "The exclusive flag might not work with network file systems. On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 38,
          "sentenceCount": 3
        },
        {
          "id": "sw_6240",
          "content": "On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file. Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`.",
          "position": 39,
          "sentenceCount": 3
        },
        {
          "id": "sw_6241",
          "content": "The kernel ignores the position argument and always appends the data to the end of the file. Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`. The behavior of some flags are platform-specific.",
          "position": 40,
          "sentenceCount": 3
        },
        {
          "id": "sw_6242",
          "content": "Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`. The behavior of some flags are platform-specific. As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error.",
          "position": 41,
          "sentenceCount": 3
        },
        {
          "id": "sw_6243",
          "content": "The behavior of some flags are platform-specific. As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error. In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned.",
          "position": 42,
          "sentenceCount": 3
        },
        {
          "id": "sw_6244",
          "content": "As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error. In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned. On Windows, opening an existing hidden file using the `'w'` flag (either through `fs.",
          "position": 43,
          "sentenceCount": 3
        },
        {
          "id": "sw_6245",
          "content": "In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned. On Windows, opening an existing hidden file using the `'w'` flag (either through `fs. open()`, `fs.",
          "position": 44,
          "sentenceCount": 3
        },
        {
          "id": "sw_6246",
          "content": "On Windows, opening an existing hidden file using the `'w'` flag (either through `fs. open()`, `fs. writeFile()`, or `fsPromises.",
          "position": 45,
          "sentenceCount": 3
        },
        {
          "id": "sw_6247",
          "content": "open()`, `fs. writeFile()`, or `fsPromises. open()`) will fail with `EPERM`.",
          "position": 46,
          "sentenceCount": 3
        },
        {
          "id": "sw_6248",
          "content": "writeFile()`, or `fsPromises. open()`) will fail with `EPERM`. Existing hidden files can be opened for writing with the `'r+'` flag.",
          "position": 47,
          "sentenceCount": 3
        },
        {
          "id": "sw_6249",
          "content": "open()`) will fail with `EPERM`. Existing hidden files can be opened for writing with the `'r+'` flag. A call to `fs.",
          "position": 48,
          "sentenceCount": 3
        },
        {
          "id": "sw_6250",
          "content": "Existing hidden files can be opened for writing with the `'r+'` flag. A call to `fs. ftruncate()` or `filehandle.",
          "position": 49,
          "sentenceCount": 3
        },
        {
          "id": "sw_6251",
          "content": "A call to `fs. ftruncate()` or `filehandle. truncate()` can be used to reset the file contents.",
          "position": 50,
          "sentenceCount": 3
        },
        {
          "id": "sw_6252",
          "content": "ftruncate()` or `filehandle. truncate()` can be used to reset the file contents.",
          "position": 51,
          "sentenceCount": 2
        }
      ]
    },
    "sentence_context": {
      "count": 2143,
      "chunks": [
        {
          "id": "sc_4",
          "content": "[File system] The `node:fs` module enables interacting with the file system in a way modeled on standard POSIX functions.",
          "position": 0,
          "originalSentence": "The `node:fs` module enables interacting with the file system in a way modeled on standard POSIX functions."
        },
        {
          "id": "sc_5",
          "content": "[File system] [Previous: The `node:fs` module enables interacting with the ...] To use the promise-based APIs:",
          "position": 1,
          "originalSentence": "To use the promise-based APIs:"
        },
        {
          "id": "sc_6",
          "content": "[File system] [Previous: To use the promise-based APIs:...] To use the callback and sync APIs:",
          "position": 2,
          "originalSentence": "To use the callback and sync APIs:"
        },
        {
          "id": "sc_7",
          "content": "[File system] [Previous: To use the callback and sync APIs:...] All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).",
          "position": 3,
          "originalSentence": "All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM)."
        },
        {
          "id": "sc_12",
          "content": "[Promise example] Promise-based operations return a promise that is fulfilled when the asynchronous operation is complete.",
          "position": 0,
          "originalSentence": "Promise-based operations return a promise that is fulfilled when the asynchronous operation is complete."
        },
        {
          "id": "sc_18",
          "content": "[Callback example] The callback form takes a completion callback function as its last argument and invokes the operation asynchronously.",
          "position": 0,
          "originalSentence": "The callback form takes a completion callback function as its last argument and invokes the operation asynchronously."
        },
        {
          "id": "sc_19",
          "content": "[Callback example] [Previous: The callback form takes a completion callback func...] The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception.",
          "position": 1,
          "originalSentence": "The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception."
        },
        {
          "id": "sc_20",
          "content": "[Callback example] [Previous: The arguments passed to the completion callback de...] If the operation is completed successfully, then the first argument is `null` or `undefined`.",
          "position": 2,
          "originalSentence": "If the operation is completed successfully, then the first argument is `null` or `undefined`."
        },
        {
          "id": "sc_21",
          "content": "[Callback example] [Previous: If the operation is completed successfully, then t...] The callback-based versions of the `node:fs` module APIs are preferable over the use of the promise APIs when maximal performance (both in terms of execution time and memory allocation) is required.",
          "position": 3,
          "originalSentence": "The callback-based versions of the `node:fs` module APIs are preferable over the use of the promise APIs when maximal performance (both in terms of execution time and memory allocation) is required."
        },
        {
          "id": "sc_30",
          "content": "[Synchronous example] The synchronous APIs block the Node.",
          "position": 0,
          "originalSentence": "The synchronous APIs block the Node."
        },
        {
          "id": "sc_31",
          "content": "[Synchronous example] [Previous: The synchronous APIs block the Node....] js event loop and further JavaScript execution until the operation is complete.",
          "position": 1,
          "originalSentence": "js event loop and further JavaScript execution until the operation is complete."
        },
        {
          "id": "sc_32",
          "content": "[Synchronous example] [Previous: js event loop and further JavaScript execution unt...] Exceptions are thrown immediately and can be handled using `tryâ€¦",
          "position": 2,
          "originalSentence": "Exceptions are thrown immediately and can be handled using `tryâ€¦"
        },
        {
          "id": "sc_33",
          "content": "[Synchronous example] [Previous: Exceptions are thrown immediately and can be handl...] catch`, or can be allowed to bubble up.",
          "position": 3,
          "originalSentence": "catch`, or can be allowed to bubble up."
        },
        {
          "id": "sc_43",
          "content": "[Promises API] The `fs/promises` API provides asynchronous file system methods that return promises.",
          "position": 0,
          "originalSentence": "The `fs/promises` API provides asynchronous file system methods that return promises."
        },
        {
          "id": "sc_44",
          "content": "[Promises API] [Previous: The `fs/promises` API provides asynchronous file s...] The promise APIs use the underlying Node.",
          "position": 1,
          "originalSentence": "The promise APIs use the underlying Node."
        },
        {
          "id": "sc_45",
          "content": "[Promises API] [Previous: The promise APIs use the underlying Node....] js threadpool to perform file system operations off the event loop thread.",
          "position": 2,
          "originalSentence": "js threadpool to perform file system operations off the event loop thread."
        },
        {
          "id": "sc_46",
          "content": "[Promises API] [Previous: js threadpool to perform file system operations of...] These operations are not synchronized or threadsafe.",
          "position": 3,
          "originalSentence": "These operations are not synchronized or threadsafe."
        },
        {
          "id": "sc_47",
          "content": "[Promises API] [Previous: These operations are not synchronized or threadsaf...] Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
          "position": 4,
          "originalSentence": "Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur."
        },
        {
          "id": "sc_62",
          "content": "[Class: `FileHandle`] A {FileHandle} object is an object wrapper for a numeric file descriptor.",
          "position": 0,
          "originalSentence": "A {FileHandle} object is an object wrapper for a numeric file descriptor."
        },
        {
          "id": "sc_63",
          "content": "[Class: `FileHandle`] [Previous: A {FileHandle} object is an object wrapper for a n...] Instances of the {FileHandle} object are created by the `fsPromises.",
          "position": 1,
          "originalSentence": "Instances of the {FileHandle} object are created by the `fsPromises."
        },
        {
          "id": "sc_64",
          "content": "[Class: `FileHandle`] [Previous: Instances of the {FileHandle} object are created b...] open()` method.",
          "position": 2,
          "originalSentence": "open()` method."
        },
        {
          "id": "sc_65",
          "content": "[Class: `FileHandle`] All {FileHandle} objects are {EventEmitter}s.",
          "position": 3,
          "originalSentence": "All {FileHandle} objects are {EventEmitter}s."
        },
        {
          "id": "sc_66",
          "content": "[Class: `FileHandle`] [Previous: All {FileHandle} objects are {EventEmitter}s....] If a {FileHandle} is not closed using the `filehandle.",
          "position": 4,
          "originalSentence": "If a {FileHandle} is not closed using the `filehandle."
        },
        {
          "id": "sc_67",
          "content": "[Class: `FileHandle`] [Previous: If a {FileHandle} is not closed using the `filehan...] close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks.",
          "position": 5,
          "originalSentence": "close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks."
        },
        {
          "id": "sc_68",
          "content": "[Class: `FileHandle`] [Previous: close()` method, it will try to automatically clos...] Please do not rely on this behavior because it can be unreliable and the file may not be closed.",
          "position": 6,
          "originalSentence": "Please do not rely on this behavior because it can be unreliable and the file may not be closed."
        },
        {
          "id": "sc_69",
          "content": "[Class: `FileHandle`] [Previous: Please do not rely on this behavior because it can...] Instead, always explicitly close {FileHandle}s.",
          "position": 7,
          "originalSentence": "Instead, always explicitly close {FileHandle}s."
        },
        {
          "id": "sc_70",
          "content": "[Class: `FileHandle`] [Previous: Instead, always explicitly close {FileHandle}s....] js may change this behavior in the future.",
          "position": 8,
          "originalSentence": "js may change this behavior in the future."
        },
        {
          "id": "sc_80",
          "content": "[Event: `'close'`] The `'close'` event is emitted when the {FileHandle} has been closed and can no longer be used.",
          "position": 0,
          "originalSentence": "The `'close'` event is emitted when the {FileHandle} has been closed and can no longer be used."
        },
        {
          "id": "sc_90",
          "content": "[`filehandle.appendFile(data[, options])`] `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile.",
          "position": 0,
          "originalSentence": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile."
        },
        {
          "id": "sc_91",
          "content": "[`filehandle.appendFile(data[, options])`] [Previous: `data` {string|Buffer|TypedArray|DataView|AsyncIte...] **Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 1,
          "originalSentence": "**Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_92",
          "content": "[`filehandle.appendFile(data[, options])`] [Previous: **Default:** `undefined` Returns: {Promise} Fulfil...] Alias of [`filehandle.",
          "position": 2,
          "originalSentence": "Alias of [`filehandle."
        },
        {
          "id": "sc_93",
          "content": "[`filehandle.appendFile(data[, options])`] [Previous: Alias of [`filehandle....] writeFile()`][].",
          "position": 3,
          "originalSentence": "writeFile()`][]."
        },
        {
          "id": "sc_94",
          "content": "[`filehandle.appendFile(data[, options])`] When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises.",
          "position": 4,
          "originalSentence": "When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises."
        },
        {
          "id": "sc_95",
          "content": "[`filehandle.appendFile(data[, options])`] [Previous: When operating on file handles, the mode cannot be...] open()`][].",
          "position": 5,
          "originalSentence": "open()`][]."
        },
        {
          "id": "sc_96",
          "content": "[`filehandle.appendFile(data[, options])`] Therefore, this is equivalent to [`filehandle.",
          "position": 6,
          "originalSentence": "Therefore, this is equivalent to [`filehandle."
        },
        {
          "id": "sc_97",
          "content": "[`filehandle.appendFile(data[, options])`] [Previous: Therefore, this is equivalent to [`filehandle....] writeFile()`][].",
          "position": 7,
          "originalSentence": "writeFile()`][]."
        },
        {
          "id": "sc_110",
          "content": "[`filehandle.chmod(mode)`] `mode` {integer} the file mode bit mask.",
          "position": 0,
          "originalSentence": "`mode` {integer} the file mode bit mask."
        },
        {
          "id": "sc_111",
          "content": "[`filehandle.chmod(mode)`] [Previous: `mode` {integer} the file mode bit mask....] Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 1,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_112",
          "content": "[`filehandle.chmod(mode)`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Modifies the permissions on the file.",
          "position": 2,
          "originalSentence": "Modifies the permissions on the file."
        },
        {
          "id": "sc_113",
          "content": "[`filehandle.chmod(mode)`] [Previous: Modifies the permissions on the file....] See chmod(2).",
          "position": 3,
          "originalSentence": "See chmod(2)."
        },
        {
          "id": "sc_123",
          "content": "[`filehandle.chown(uid, gid)`] `uid` {integer} The file's new owner's user id.",
          "position": 0,
          "originalSentence": "`uid` {integer} The file's new owner's user id."
        },
        {
          "id": "sc_124",
          "content": "[`filehandle.chown(uid, gid)`] [Previous: `uid` {integer} The file's new owner's user id....] `gid` {integer} The file's new group's group id.",
          "position": 1,
          "originalSentence": "`gid` {integer} The file's new group's group id."
        },
        {
          "id": "sc_125",
          "content": "[`filehandle.chown(uid, gid)`] [Previous: `gid` {integer} The file's new group's group id....] Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 2,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_126",
          "content": "[`filehandle.chown(uid, gid)`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Changes the ownership of the file.",
          "position": 3,
          "originalSentence": "Changes the ownership of the file."
        },
        {
          "id": "sc_127",
          "content": "[`filehandle.chown(uid, gid)`] [Previous: Changes the ownership of the file....] A wrapper for chown(2).",
          "position": 4,
          "originalSentence": "A wrapper for chown(2)."
        },
        {
          "id": "sc_135",
          "content": "[`filehandle.close()`] Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_136",
          "content": "[`filehandle.close()`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Closes the file handle after waiting for any pending operation on the handle to complete.",
          "position": 1,
          "originalSentence": "Closes the file handle after waiting for any pending operation on the handle to complete."
        },
        {
          "id": "sc_156",
          "content": "[`filehandle.createReadStream([options])`] `options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `signal` {AbortSignal|undefined}",
          "position": 0,
          "originalSentence": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `signal` {AbortSignal|undefined} **Default:** `undefined` Returns: {fs."
        },
        {
          "id": "sc_157",
          "content": "[`filehandle.createReadStream([options])`] [Previous: `options` {Object} * `encoding` {string} **Default...] ReadStream}",
          "position": 1,
          "originalSentence": "ReadStream}"
        },
        {
          "id": "sc_158",
          "content": "[`filehandle.createReadStream([options])`] `options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file.",
          "position": 2,
          "originalSentence": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file."
        },
        {
          "id": "sc_159",
          "content": "[`filehandle.createReadStream([options])`] [Previous: `options` can include `start` and `end` values to ...] Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
          "position": 3,
          "originalSentence": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number."
        },
        {
          "id": "sc_160",
          "content": "[`filehandle.createReadStream([options])`] [Previous: Both `start` and `end` are inclusive and start cou...] MAX_SAFE_INTEGER`][]] range.",
          "position": 4,
          "originalSentence": "MAX_SAFE_INTEGER`][]] range."
        },
        {
          "id": "sc_161",
          "content": "[`filehandle.createReadStream([options])`] [Previous: MAX_SAFE_INTEGER`][]] range....] If `start` is omitted or `undefined`, `filehandle.",
          "position": 5,
          "originalSentence": "If `start` is omitted or `undefined`, `filehandle."
        },
        {
          "id": "sc_162",
          "content": "[`filehandle.createReadStream([options])`] [Previous: If `start` is omitted or `undefined`, `filehandle....] createReadStream()` reads sequentially from the current file position.",
          "position": 6,
          "originalSentence": "createReadStream()` reads sequentially from the current file position."
        },
        {
          "id": "sc_163",
          "content": "[`filehandle.createReadStream([options])`] [Previous: createReadStream()` reads sequentially from the cu...] The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 7,
          "originalSentence": "The `encoding` can be any one of those accepted by {Buffer}."
        },
        {
          "id": "sc_164",
          "content": "[`filehandle.createReadStream([options])`] [Previous: The `encoding` can be any one of those accepted by...] If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
          "position": 8,
          "originalSentence": "If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available."
        },
        {
          "id": "sc_165",
          "content": "[`filehandle.createReadStream([options])`] [Previous: If the `FileHandle` points to a character device t...] This can prevent the process from exiting and the stream from closing naturally.",
          "position": 9,
          "originalSentence": "This can prevent the process from exiting and the stream from closing naturally."
        },
        {
          "id": "sc_166",
          "content": "[`filehandle.createReadStream([options])`] [Previous: This can prevent the process from exiting and the ...] By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 10,
          "originalSentence": "By default, the stream will emit a `'close'` event after it has been destroyed."
        },
        {
          "id": "sc_167",
          "content": "[`filehandle.createReadStream([options])`] [Previous: By default, the stream will emit a `'close'` event...] Set the `emitClose` option to `false` to change this behavior.",
          "position": 11,
          "originalSentence": "Set the `emitClose` option to `false` to change this behavior."
        },
        {
          "id": "sc_168",
          "content": "[`filehandle.createReadStream([options])`] [Previous: Set the `emitClose` option to `false` to change th...] If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 12,
          "originalSentence": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error."
        },
        {
          "id": "sc_169",
          "content": "[`filehandle.createReadStream([options])`] [Previous: If `autoClose` is false, then the file descriptor ...] It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 13,
          "originalSentence": "It is the application's responsibility to close it and make sure there's no file descriptor leak."
        },
        {
          "id": "sc_170",
          "content": "[`filehandle.createReadStream([options])`] [Previous: It is the application's responsibility to close it...] If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
          "position": 14,
          "originalSentence": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically."
        },
        {
          "id": "sc_171",
          "content": "[`filehandle.createReadStream([options])`] [Previous: If `autoClose` is set to true (default behavior), ...] An example to read the last 10 bytes of a file which is 100 bytes long:",
          "position": 15,
          "originalSentence": "An example to read the last 10 bytes of a file which is 100 bytes long:"
        },
        {
          "id": "sc_201",
          "content": "[`filehandle.createWriteStream([options])`] `options` {Object} * `encoding` {string} **Default:** `'utf8'` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to",
          "position": 0,
          "originalSentence": "`options` {Object} * `encoding` {string} **Default:** `'utf8'` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it."
        },
        {
          "id": "sc_202",
          "content": "[`filehandle.createWriteStream([options])`] [Previous: `options` {Object} * `encoding` {string} **Default...] **Default:** `false`.",
          "position": 1,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_203",
          "content": "[`filehandle.createWriteStream([options])`] [Previous: **Default:** `false`....] Returns: {fs.",
          "position": 2,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_204",
          "content": "[`filehandle.createWriteStream([options])`] WriteStream}",
          "position": 3,
          "originalSentence": "WriteStream}"
        },
        {
          "id": "sc_205",
          "content": "[`filehandle.createWriteStream([options])`] `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
          "position": 4,
          "originalSentence": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number."
        },
        {
          "id": "sc_206",
          "content": "[`filehandle.createWriteStream([options])`] [Previous: `options` may also include a `start` option to all...] MAX_SAFE_INTEGER`][]] range.",
          "position": 5,
          "originalSentence": "MAX_SAFE_INTEGER`][]] range."
        },
        {
          "id": "sc_207",
          "content": "[`filehandle.createWriteStream([options])`] [Previous: MAX_SAFE_INTEGER`][]] range....] Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`.",
          "position": 6,
          "originalSentence": "Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`."
        },
        {
          "id": "sc_208",
          "content": "[`filehandle.createWriteStream([options])`] [Previous: Modifying a file rather than replacing it may requ...] The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 7,
          "originalSentence": "The `encoding` can be any one of those accepted by {Buffer}."
        },
        {
          "id": "sc_209",
          "content": "[`filehandle.createWriteStream([options])`] [Previous: The `encoding` can be any one of those accepted by...] If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
          "position": 8,
          "originalSentence": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically."
        },
        {
          "id": "sc_210",
          "content": "[`filehandle.createWriteStream([options])`] [Previous: If `autoClose` is set to true (default behavior) o...] If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 9,
          "originalSentence": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error."
        },
        {
          "id": "sc_211",
          "content": "[`filehandle.createWriteStream([options])`] [Previous: If `autoClose` is false, then the file descriptor ...] It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 10,
          "originalSentence": "It is the application's responsibility to close it and make sure there's no file descriptor leak."
        },
        {
          "id": "sc_212",
          "content": "[`filehandle.createWriteStream([options])`] [Previous: It is the application's responsibility to close it...] By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 11,
          "originalSentence": "By default, the stream will emit a `'close'` event after it has been destroyed."
        },
        {
          "id": "sc_213",
          "content": "[`filehandle.createWriteStream([options])`] [Previous: By default, the stream will emit a `'close'` event...] Set the `emitClose` option to `false` to change this behavior.",
          "position": 12,
          "originalSentence": "Set the `emitClose` option to `false` to change this behavior."
        },
        {
          "id": "sc_232",
          "content": "[`filehandle.datasync()`] Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_233",
          "content": "[`filehandle.datasync()`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
          "position": 1,
          "originalSentence": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state."
        },
        {
          "id": "sc_234",
          "content": "[`filehandle.datasync()`] [Previous: Forces all currently queued I/O operations associa...] Refer to the POSIX fdatasync(2) documentation for details.",
          "position": 2,
          "originalSentence": "Refer to the POSIX fdatasync(2) documentation for details."
        },
        {
          "id": "sc_235",
          "content": "[`filehandle.datasync()`] [Previous: Refer to the POSIX fdatasync(2) documentation for ...] Unlike `filehandle.",
          "position": 3,
          "originalSentence": "Unlike `filehandle."
        },
        {
          "id": "sc_236",
          "content": "[`filehandle.datasync()`] sync` this method does not flush modified metadata.",
          "position": 4,
          "originalSentence": "sync` this method does not flush modified metadata."
        },
        {
          "id": "sc_242",
          "content": "[`filehandle.fd`] Type: {number} The numeric file descriptor managed by the {FileHandle} object.",
          "position": 0,
          "originalSentence": "Type: {number} The numeric file descriptor managed by the {FileHandle} object."
        },
        {
          "id": "sc_254",
          "content": "[`filehandle.read(buffer, offset, length, position)`] `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
          "position": 0,
          "originalSentence": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read."
        },
        {
          "id": "sc_255",
          "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: `buffer` {Buffer|TypedArray|DataView} A buffer tha...] `offset` {integer} The location in the buffer at which to start filling.",
          "position": 1,
          "originalSentence": "`offset` {integer} The location in the buffer at which to start filling."
        },
        {
          "id": "sc_256",
          "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: `offset` {integer} The location in the buffer at w...] **Default:** `0` `length` {integer} The number of bytes to read.",
          "position": 2,
          "originalSentence": "**Default:** `0` `length` {integer} The number of bytes to read."
        },
        {
          "id": "sc_257",
          "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: **Default:** `0` `length` {integer} The number of ...] **Default:** `buffer.",
          "position": 3,
          "originalSentence": "**Default:** `buffer."
        },
        {
          "id": "sc_258",
          "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: **Default:** `buffer....] byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file.",
          "position": 4,
          "originalSentence": "byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file."
        },
        {
          "id": "sc_259",
          "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: byteLength - offset` `position` {integer|bigint|nu...] If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
          "position": 5,
          "originalSentence": "If `null` or `-1`, data will be read from the current file position, and the position will be updated."
        },
        {
          "id": "sc_260",
          "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: If `null` or `-1`, data will be read from the curr...] If `position` is a non-negative integer, the current file position will remain unchanged.",
          "position": 6,
          "originalSentence": "If `position` is a non-negative integer, the current file position will remain unchanged."
        },
        {
          "id": "sc_261",
          "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: If `position` is a non-negative integer, the curre...] **Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer`",
          "position": 7,
          "originalSentence": "**Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument."
        },
        {
          "id": "sc_262",
          "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: **Default:** `null` Returns: {Promise} Fulfills up...] Reads data from the file and stores that in the given buffer.",
          "position": 8,
          "originalSentence": "Reads data from the file and stores that in the given buffer."
        },
        {
          "id": "sc_263",
          "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: Reads data from the file and stores that in the gi...] If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 9,
          "originalSentence": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero."
        },
        {
          "id": "sc_285",
          "content": "[`filehandle.read([options])`] `options` {Object} * `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
          "position": 0,
          "originalSentence": "`options` {Object} * `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read."
        },
        {
          "id": "sc_286",
          "content": "[`filehandle.read([options])`] [Previous: `options` {Object} * `buffer` {Buffer|TypedArray|D...] **Default:** `Buffer.",
          "position": 1,
          "originalSentence": "**Default:** `Buffer."
        },
        {
          "id": "sc_287",
          "content": "[`filehandle.read([options])`] [Previous: **Default:** `Buffer....] alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling.",
          "position": 2,
          "originalSentence": "alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling."
        },
        {
          "id": "sc_288",
          "content": "[`filehandle.read([options])`] [Previous: alloc(16384)` * `offset` {integer} The location in...] **Default:** `0` * `length` {integer} The number of bytes to read.",
          "position": 3,
          "originalSentence": "**Default:** `0` * `length` {integer} The number of bytes to read."
        },
        {
          "id": "sc_289",
          "content": "[`filehandle.read([options])`] [Previous: **Default:** `0` * `length` {integer} The number o...] **Default:** `buffer.",
          "position": 4,
          "originalSentence": "**Default:** `buffer."
        },
        {
          "id": "sc_290",
          "content": "[`filehandle.read([options])`] [Previous: **Default:** `buffer....] byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
          "position": 5,
          "originalSentence": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file."
        },
        {
          "id": "sc_291",
          "content": "[`filehandle.read([options])`] [Previous: byteLength - offset` * `position` {integer|bigint|...] If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
          "position": 6,
          "originalSentence": "If `null` or `-1`, data will be read from the current file position, and the position will be updated."
        },
        {
          "id": "sc_292",
          "content": "[`filehandle.read([options])`] [Previous: If `null` or `-1`, data will be read from the curr...] If `position` is a non-negative integer, the current file position will remain unchanged.",
          "position": 7,
          "originalSentence": "If `position` is a non-negative integer, the current file position will remain unchanged."
        },
        {
          "id": "sc_293",
          "content": "[`filehandle.read([options])`] [Previous: If `position` is a non-negative integer, the curre...] **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument.",
          "position": 8,
          "originalSentence": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument."
        },
        {
          "id": "sc_294",
          "content": "[`filehandle.read([options])`] [Previous: **Default:**: `null` Returns: {Promise} Fulfills u...] Reads data from the file and stores that in the given buffer.",
          "position": 9,
          "originalSentence": "Reads data from the file and stores that in the given buffer."
        },
        {
          "id": "sc_295",
          "content": "[`filehandle.read([options])`] [Previous: Reads data from the file and stores that in the gi...] If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 10,
          "originalSentence": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero."
        },
        {
          "id": "sc_317",
          "content": "[`filehandle.read(buffer[, options])`] `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
          "position": 0,
          "originalSentence": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read."
        },
        {
          "id": "sc_318",
          "content": "[`filehandle.read(buffer[, options])`] [Previous: `buffer` {Buffer|TypedArray|DataView} A buffer tha...] `options` {Object} * `offset` {integer} The location in the buffer at which to start filling.",
          "position": 1,
          "originalSentence": "`options` {Object} * `offset` {integer} The location in the buffer at which to start filling."
        },
        {
          "id": "sc_319",
          "content": "[`filehandle.read(buffer[, options])`] [Previous: `options` {Object} * `offset` {integer} The locati...] **Default:** `0` * `length` {integer} The number of bytes to read.",
          "position": 2,
          "originalSentence": "**Default:** `0` * `length` {integer} The number of bytes to read."
        },
        {
          "id": "sc_320",
          "content": "[`filehandle.read(buffer[, options])`] [Previous: **Default:** `0` * `length` {integer} The number o...] **Default:** `buffer.",
          "position": 3,
          "originalSentence": "**Default:** `buffer."
        },
        {
          "id": "sc_321",
          "content": "[`filehandle.read(buffer[, options])`] [Previous: **Default:** `buffer....] byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
          "position": 4,
          "originalSentence": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file."
        },
        {
          "id": "sc_322",
          "content": "[`filehandle.read(buffer[, options])`] [Previous: byteLength - offset` * `position` {integer|bigint|...] If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
          "position": 5,
          "originalSentence": "If `null` or `-1`, data will be read from the current file position, and the position will be updated."
        },
        {
          "id": "sc_323",
          "content": "[`filehandle.read(buffer[, options])`] [Previous: If `null` or `-1`, data will be read from the curr...] If `position` is a non-negative integer, the current file position will remain unchanged.",
          "position": 6,
          "originalSentence": "If `position` is a non-negative integer, the current file position will remain unchanged."
        },
        {
          "id": "sc_324",
          "content": "[`filehandle.read(buffer[, options])`] [Previous: If `position` is a non-negative integer, the curre...] **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument.",
          "position": 7,
          "originalSentence": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument."
        },
        {
          "id": "sc_325",
          "content": "[`filehandle.read(buffer[, options])`] [Previous: **Default:**: `null` Returns: {Promise} Fulfills u...] Reads data from the file and stores that in the given buffer.",
          "position": 8,
          "originalSentence": "Reads data from the file and stores that in the given buffer."
        },
        {
          "id": "sc_326",
          "content": "[`filehandle.read(buffer[, options])`] [Previous: Reads data from the file and stores that in the gi...] If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 9,
          "originalSentence": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero."
        },
        {
          "id": "sc_344",
          "content": "[`filehandle.readableWebStream([options])`] `options` {Object} * `autoClose` {boolean} When true, causes the {FileHandle} to be closed when the stream is closed.",
          "position": 0,
          "originalSentence": "`options` {Object} * `autoClose` {boolean} When true, causes the {FileHandle} to be closed when the stream is closed."
        },
        {
          "id": "sc_345",
          "content": "[`filehandle.readableWebStream([options])`] [Previous: `options` {Object} * `autoClose` {boolean} When tr...] **Default:** `false` Returns: {ReadableStream}",
          "position": 1,
          "originalSentence": "**Default:** `false` Returns: {ReadableStream}"
        },
        {
          "id": "sc_346",
          "content": "[`filehandle.readableWebStream([options])`] [Previous: **Default:** `false` Returns: {ReadableStream}...] Returns a byte-oriented `ReadableStream` that may be used to read the file's contents.",
          "position": 2,
          "originalSentence": "Returns a byte-oriented `ReadableStream` that may be used to read the file's contents."
        },
        {
          "id": "sc_347",
          "content": "[`filehandle.readableWebStream([options])`] [Previous: Returns a byte-oriented `ReadableStream` that may ...] An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing.",
          "position": 3,
          "originalSentence": "An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing."
        },
        {
          "id": "sc_348",
          "content": "[`filehandle.readableWebStream([options])`] [Previous: An error will be thrown if this method is called m...] While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically.",
          "position": 4,
          "originalSentence": "While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically."
        },
        {
          "id": "sc_349",
          "content": "[`filehandle.readableWebStream([options])`] [Previous: While the `ReadableStream` will read the file to c...] User code must still call the `fileHandle.",
          "position": 5,
          "originalSentence": "User code must still call the `fileHandle."
        },
        {
          "id": "sc_350",
          "content": "[`filehandle.readableWebStream([options])`] [Previous: User code must still call the `fileHandle....] close()` method unless the `autoClose` option is set to `true`.",
          "position": 6,
          "originalSentence": "close()` method unless the `autoClose` option is set to `true`."
        },
        {
          "id": "sc_369",
          "content": "[`filehandle.readFile(options)`] `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills upon a successful read with the contents of the file.",
          "position": 0,
          "originalSentence": "`options` {Object|string} * `encoding` {string|null} **Default:** `null` * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills upon a successful read with the contents of the file."
        },
        {
          "id": "sc_370",
          "content": "[`filehandle.readFile(options)`] [Previous: `options` {Object|string} * `encoding` {string|nul...] If no encoding is specified (using `options.",
          "position": 1,
          "originalSentence": "If no encoding is specified (using `options."
        },
        {
          "id": "sc_371",
          "content": "[`filehandle.readFile(options)`] [Previous: If no encoding is specified (using `options....] encoding`), the data is returned as a {Buffer} object.",
          "position": 2,
          "originalSentence": "encoding`), the data is returned as a {Buffer} object."
        },
        {
          "id": "sc_372",
          "content": "[`filehandle.readFile(options)`] [Previous: encoding`), the data is returned as a {Buffer} obj...] Otherwise, the data will be a string.",
          "position": 3,
          "originalSentence": "Otherwise, the data will be a string."
        },
        {
          "id": "sc_373",
          "content": "[`filehandle.readFile(options)`] [Previous: Otherwise, the data will be a string....] Asynchronously reads the entire contents of a file.",
          "position": 4,
          "originalSentence": "Asynchronously reads the entire contents of a file."
        },
        {
          "id": "sc_374",
          "content": "[`filehandle.readFile(options)`] [Previous: Asynchronously reads the entire contents of a file...] If `options` is a string, then it specifies the `encoding`.",
          "position": 5,
          "originalSentence": "If `options` is a string, then it specifies the `encoding`."
        },
        {
          "id": "sc_375",
          "content": "[`filehandle.readFile(options)`] [Previous: If `options` is a string, then it specifies the `e...] The {FileHandle} has to support reading.",
          "position": 6,
          "originalSentence": "The {FileHandle} has to support reading."
        },
        {
          "id": "sc_376",
          "content": "[`filehandle.readFile(options)`] [Previous: The {FileHandle} has to support reading....] If one or more `filehandle.",
          "position": 7,
          "originalSentence": "If one or more `filehandle."
        },
        {
          "id": "sc_377",
          "content": "[`filehandle.readFile(options)`] [Previous: If one or more `filehandle....] read()` calls are made on a file handle and then a `filehandle.",
          "position": 8,
          "originalSentence": "read()` calls are made on a file handle and then a `filehandle."
        },
        {
          "id": "sc_378",
          "content": "[`filehandle.readFile(options)`] [Previous: read()` calls are made on a file handle and then a...] readFile()` call is made, the data will be read from the current position till the end of the file.",
          "position": 9,
          "originalSentence": "readFile()` call is made, the data will be read from the current position till the end of the file."
        },
        {
          "id": "sc_379",
          "content": "[`filehandle.readFile(options)`] [Previous: readFile()` call is made, the data will be read fr...] It doesn't always read from the beginning of the file.",
          "position": 10,
          "originalSentence": "It doesn't always read from the beginning of the file."
        },
        {
          "id": "sc_396",
          "content": "[`filehandle.readLines([options])`] `options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` Returns: {readline.",
          "position": 0,
          "originalSentence": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` Returns: {readline."
        },
        {
          "id": "sc_397",
          "content": "[`filehandle.readLines([options])`] [Previous: `options` {Object} * `encoding` {string} **Default...] InterfaceConstructor}",
          "position": 1,
          "originalSentence": "InterfaceConstructor}"
        },
        {
          "id": "sc_398",
          "content": "[`filehandle.readLines([options])`] [Previous: InterfaceConstructor}...] Convenience method to create a `readline` interface and stream over the file.",
          "position": 2,
          "originalSentence": "Convenience method to create a `readline` interface and stream over the file."
        },
        {
          "id": "sc_399",
          "content": "[`filehandle.readLines([options])`] [Previous: Convenience method to create a `readline` interfac...] See [`filehandle.",
          "position": 3,
          "originalSentence": "See [`filehandle."
        },
        {
          "id": "sc_400",
          "content": "[`filehandle.readLines([options])`] createReadStream()`][] for the options.",
          "position": 4,
          "originalSentence": "createReadStream()`][] for the options."
        },
        {
          "id": "sc_410",
          "content": "[`filehandle.readv(buffers[, position])`] `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data should be read from.",
          "position": 0,
          "originalSentence": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data should be read from."
        },
        {
          "id": "sc_411",
          "content": "[`filehandle.readv(buffers[, position])`] [Previous: `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `p...] If `position` is not a `number`, the data will be read from the current position.",
          "position": 1,
          "originalSentence": "If `position` is not a `number`, the data will be read from the current position."
        },
        {
          "id": "sc_412",
          "content": "[`filehandle.readv(buffers[, position])`] [Previous: If `position` is not a `number`, the data will be ...] **Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead` {integer} the number of bytes read * `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing a reference to the",
          "position": 2,
          "originalSentence": "**Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead` {integer} the number of bytes read * `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing a reference to the `buffers` input."
        },
        {
          "id": "sc_413",
          "content": "[`filehandle.readv(buffers[, position])`] [Previous: **Default:** `null` Returns: {Promise} Fulfills up...] Read from a file and write to an array of {ArrayBufferView}s",
          "position": 3,
          "originalSentence": "Read from a file and write to an array of {ArrayBufferView}s"
        },
        {
          "id": "sc_423",
          "content": "[`filehandle.stat([options])`] `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_424",
          "content": "[`filehandle.stat([options])`] [Previous: `options` {Object} * `bigint` {boolean} Whether th...] Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "sc_425",
          "content": "[`filehandle.stat([options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_426",
          "content": "[`filehandle.stat([options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with an {fs.",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with an {fs."
        },
        {
          "id": "sc_427",
          "content": "[`filehandle.stat([options])`] [Previous: Returns: {Promise} Fulfills with an {fs....] Stats} for the file.",
          "position": 4,
          "originalSentence": "Stats} for the file."
        },
        {
          "id": "sc_437",
          "content": "[`filehandle.sync()`] Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_438",
          "content": "[`filehandle.sync()`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Request that all data for the open file descriptor is flushed to the storage device.",
          "position": 1,
          "originalSentence": "Request that all data for the open file descriptor is flushed to the storage device."
        },
        {
          "id": "sc_439",
          "content": "[`filehandle.sync()`] [Previous: Request that all data for the open file descriptor...] The specific implementation is operating system and device specific.",
          "position": 2,
          "originalSentence": "The specific implementation is operating system and device specific."
        },
        {
          "id": "sc_440",
          "content": "[`filehandle.sync()`] [Previous: The specific implementation is operating system an...] Refer to the POSIX fsync(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "Refer to the POSIX fsync(2) documentation for more detail."
        },
        {
          "id": "sc_451",
          "content": "[`filehandle.truncate(len)`] `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_452",
          "content": "[`filehandle.truncate(len)`] [Previous: `len` {integer} **Default:** `0` Returns: {Promise...] Truncates the file.",
          "position": 1,
          "originalSentence": "Truncates the file."
        },
        {
          "id": "sc_453",
          "content": "[`filehandle.truncate(len)`] If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
          "position": 2,
          "originalSentence": "If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file."
        },
        {
          "id": "sc_454",
          "content": "[`filehandle.truncate(len)`] [Previous: If the file was larger than `len` bytes, only the ...] The following example retains only the first four bytes of the file:",
          "position": 3,
          "originalSentence": "The following example retains only the first four bytes of the file:"
        },
        {
          "id": "sc_455",
          "content": "[`filehandle.truncate(len)`] [Previous: The following example retains only the first four ...] If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
          "position": 4,
          "originalSentence": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):"
        },
        {
          "id": "sc_456",
          "content": "[`filehandle.truncate(len)`] [Previous: If the file previously was shorter than `len` byte...] If `len` is negative then `0` will be used.",
          "position": 5,
          "originalSentence": "If `len` is negative then `0` will be used."
        },
        {
          "id": "sc_465",
          "content": "[`filehandle.utimes(atime, mtime)`] `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise}",
          "position": 0,
          "originalSentence": "`atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise}"
        },
        {
          "id": "sc_466",
          "content": "[`filehandle.utimes(atime, mtime)`] [Previous: `atime` {number|string|Date} `mtime` {number|strin...] Change the file system timestamps of the object referenced by the {FileHandle} then fulfills the promise with no arguments upon success.",
          "position": 1,
          "originalSentence": "Change the file system timestamps of the object referenced by the {FileHandle} then fulfills the promise with no arguments upon success."
        },
        {
          "id": "sc_485",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] `buffer` {Buffer|TypedArray|DataView} `offset` {integer} The start position from within `buffer` where the data to write begins.",
          "position": 0,
          "originalSentence": "`buffer` {Buffer|TypedArray|DataView} `offset` {integer} The start position from within `buffer` where the data to write begins."
        },
        {
          "id": "sc_486",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: `buffer` {Buffer|TypedArray|DataView} `offset` {in...] `length` {integer} The number of bytes from `buffer` to write.",
          "position": 1,
          "originalSentence": "`length` {integer} The number of bytes from `buffer` to write."
        },
        {
          "id": "sc_487",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: `length` {integer} The number of bytes from `buffe...] **Default:** `buffer.",
          "position": 2,
          "originalSentence": "**Default:** `buffer."
        },
        {
          "id": "sc_488",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: **Default:** `buffer....] byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written.",
          "position": 3,
          "originalSentence": "byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written."
        },
        {
          "id": "sc_489",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: byteLength - offset` `position` {integer|null} The...] If `position` is not a `number`, the data will be written at the current position.",
          "position": 4,
          "originalSentence": "If `position` is not a `number`, the data will be written at the current position."
        },
        {
          "id": "sc_490",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: If `position` is not a `number`, the data will be ...] See the POSIX pwrite(2) documentation for more detail.",
          "position": 5,
          "originalSentence": "See the POSIX pwrite(2) documentation for more detail."
        },
        {
          "id": "sc_491",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: See the POSIX pwrite(2) documentation for more det...] **Default:** `null` Returns: {Promise}",
          "position": 6,
          "originalSentence": "**Default:** `null` Returns: {Promise}"
        },
        {
          "id": "sc_492",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: **Default:** `null` Returns: {Promise}...] Write `buffer` to the file.",
          "position": 7,
          "originalSentence": "Write `buffer` to the file."
        },
        {
          "id": "sc_493",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: Write `buffer` to the file....] The promise is fulfilled with an object containing two properties:",
          "position": 8,
          "originalSentence": "The promise is fulfilled with an object containing two properties:"
        },
        {
          "id": "sc_494",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: The promise is fulfilled with an object containing...] `bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written.",
          "position": 9,
          "originalSentence": "`bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written."
        },
        {
          "id": "sc_495",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: `bytesWritten` {integer} the number of bytes writt...] It is unsafe to use `filehandle.",
          "position": 10,
          "originalSentence": "It is unsafe to use `filehandle."
        },
        {
          "id": "sc_496",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: It is unsafe to use `filehandle....] write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 11,
          "originalSentence": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected)."
        },
        {
          "id": "sc_497",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: write()` multiple times on the same file without w...] For this scenario, use [`filehandle.",
          "position": 12,
          "originalSentence": "For this scenario, use [`filehandle."
        },
        {
          "id": "sc_498",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: For this scenario, use [`filehandle....] createWriteStream()`][].",
          "position": 13,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "sc_499",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: createWriteStream()`][]....] On Linux, positional writes do not work when the file is opened in append mode.",
          "position": 14,
          "originalSentence": "On Linux, positional writes do not work when the file is opened in append mode."
        },
        {
          "id": "sc_500",
          "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: On Linux, positional writes do not work when the f...] The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 15,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "sc_523",
          "content": "[`filehandle.write(buffer[, options])`] `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "sc_524",
          "content": "[`filehandle.write(buffer[, options])`] [Previous: `buffer` {Buffer|TypedArray|DataView} `options` {O...] byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {Promise}",
          "position": 1,
          "originalSentence": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {Promise}"
        },
        {
          "id": "sc_525",
          "content": "[`filehandle.write(buffer[, options])`] [Previous: byteLength - offset` * `position` {integer|null} *...] Write `buffer` to the file.",
          "position": 2,
          "originalSentence": "Write `buffer` to the file."
        },
        {
          "id": "sc_526",
          "content": "[`filehandle.write(buffer[, options])`] [Previous: Write `buffer` to the file....] Similar to the above `filehandle.",
          "position": 3,
          "originalSentence": "Similar to the above `filehandle."
        },
        {
          "id": "sc_527",
          "content": "[`filehandle.write(buffer[, options])`] [Previous: Similar to the above `filehandle....] write` function, this version takes an optional `options` object.",
          "position": 4,
          "originalSentence": "write` function, this version takes an optional `options` object."
        },
        {
          "id": "sc_528",
          "content": "[`filehandle.write(buffer[, options])`] [Previous: write` function, this version takes an optional `o...] If no `options` object is specified, it will default with the above values.",
          "position": 5,
          "originalSentence": "If no `options` object is specified, it will default with the above values."
        },
        {
          "id": "sc_550",
          "content": "[`filehandle.write(string[, position[, encoding]])`] `string` {string} `position` {integer|null} The offset from the beginning of the file where the data from `string` should be written.",
          "position": 0,
          "originalSentence": "`string` {string} `position` {integer|null} The offset from the beginning of the file where the data from `string` should be written."
        },
        {
          "id": "sc_551",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: `string` {string} `position` {integer|null} The of...] If `position` is not a `number` the data will be written at the current position.",
          "position": 1,
          "originalSentence": "If `position` is not a `number` the data will be written at the current position."
        },
        {
          "id": "sc_552",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: If `position` is not a `number` the data will be w...] See the POSIX pwrite(2) documentation for more detail.",
          "position": 2,
          "originalSentence": "See the POSIX pwrite(2) documentation for more detail."
        },
        {
          "id": "sc_553",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: See the POSIX pwrite(2) documentation for more det...] **Default:** `null` `encoding` {string} The expected string encoding.",
          "position": 3,
          "originalSentence": "**Default:** `null` `encoding` {string} The expected string encoding."
        },
        {
          "id": "sc_554",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: **Default:** `null` `encoding` {string} The expect...] **Default:** `'utf8'` Returns: {Promise}",
          "position": 4,
          "originalSentence": "**Default:** `'utf8'` Returns: {Promise}"
        },
        {
          "id": "sc_555",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: **Default:** `'utf8'` Returns: {Promise}...] Write `string` to the file.",
          "position": 5,
          "originalSentence": "Write `string` to the file."
        },
        {
          "id": "sc_556",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: Write `string` to the file....] If `string` is not a string, the promise is rejected with an error.",
          "position": 6,
          "originalSentence": "If `string` is not a string, the promise is rejected with an error."
        },
        {
          "id": "sc_557",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: If `string` is not a string, the promise is reject...] The promise is fulfilled with an object containing two properties:",
          "position": 7,
          "originalSentence": "The promise is fulfilled with an object containing two properties:"
        },
        {
          "id": "sc_558",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: The promise is fulfilled with an object containing...] `bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written.",
          "position": 8,
          "originalSentence": "`bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written."
        },
        {
          "id": "sc_559",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: `bytesWritten` {integer} the number of bytes writt...] It is unsafe to use `filehandle.",
          "position": 9,
          "originalSentence": "It is unsafe to use `filehandle."
        },
        {
          "id": "sc_560",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: It is unsafe to use `filehandle....] write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 10,
          "originalSentence": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected)."
        },
        {
          "id": "sc_561",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: write()` multiple times on the same file without w...] For this scenario, use [`filehandle.",
          "position": 11,
          "originalSentence": "For this scenario, use [`filehandle."
        },
        {
          "id": "sc_562",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: For this scenario, use [`filehandle....] createWriteStream()`][].",
          "position": 12,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "sc_563",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: createWriteStream()`][]....] On Linux, positional writes do not work when the file is opened in append mode.",
          "position": 13,
          "originalSentence": "On Linux, positional writes do not work when the file is opened in append mode."
        },
        {
          "id": "sc_564",
          "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: On Linux, positional writes do not work when the f...] The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 14,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "sc_594",
          "content": "[`filehandle.writeFile(data, options)`] `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} The expected character encoding when `data` is a string.",
          "position": 0,
          "originalSentence": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} The expected character encoding when `data` is a string."
        },
        {
          "id": "sc_595",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: `data` {string|Buffer|TypedArray|DataView|AsyncIte...] **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile.",
          "position": 1,
          "originalSentence": "**Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile."
        },
        {
          "id": "sc_596",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: **Default:** `'utf8'` * `signal` {AbortSignal|unde...] **Default:** `undefined` Returns: {Promise}",
          "position": 2,
          "originalSentence": "**Default:** `undefined` Returns: {Promise}"
        },
        {
          "id": "sc_597",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: **Default:** `undefined` Returns: {Promise}...] Asynchronously writes data to a file, replacing the file if it already exists.",
          "position": 3,
          "originalSentence": "Asynchronously writes data to a file, replacing the file if it already exists."
        },
        {
          "id": "sc_598",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: Asynchronously writes data to a file, replacing th...] `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
          "position": 4,
          "originalSentence": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object."
        },
        {
          "id": "sc_599",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: `data` can be a string, a buffer, an {AsyncIterabl...] The promise is fulfilled with no arguments upon success.",
          "position": 5,
          "originalSentence": "The promise is fulfilled with no arguments upon success."
        },
        {
          "id": "sc_600",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: The promise is fulfilled with no arguments upon su...] If `options` is a string, then it specifies the `encoding`.",
          "position": 6,
          "originalSentence": "If `options` is a string, then it specifies the `encoding`."
        },
        {
          "id": "sc_601",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: If `options` is a string, then it specifies the `e...] The {FileHandle} has to support writing.",
          "position": 7,
          "originalSentence": "The {FileHandle} has to support writing."
        },
        {
          "id": "sc_602",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: The {FileHandle} has to support writing....] It is unsafe to use `filehandle.",
          "position": 8,
          "originalSentence": "It is unsafe to use `filehandle."
        },
        {
          "id": "sc_603",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: It is unsafe to use `filehandle....] writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 9,
          "originalSentence": "writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected)."
        },
        {
          "id": "sc_604",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: writeFile()` multiple times on the same file witho...] If one or more `filehandle.",
          "position": 10,
          "originalSentence": "If one or more `filehandle."
        },
        {
          "id": "sc_605",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: If one or more `filehandle....] write()` calls are made on a file handle and then a `filehandle.",
          "position": 11,
          "originalSentence": "write()` calls are made on a file handle and then a `filehandle."
        },
        {
          "id": "sc_606",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: write()` calls are made on a file handle and then ...] writeFile()` call is made, the data will be written from the current position till the end of the file.",
          "position": 12,
          "originalSentence": "writeFile()` call is made, the data will be written from the current position till the end of the file."
        },
        {
          "id": "sc_607",
          "content": "[`filehandle.writeFile(data, options)`] [Previous: writeFile()` call is made, the data will be writte...] It doesn't always write from the beginning of the file.",
          "position": 13,
          "originalSentence": "It doesn't always write from the beginning of the file."
        },
        {
          "id": "sc_631",
          "content": "[`filehandle.writev(buffers[, position])`] `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data from `buffers` should be written.",
          "position": 0,
          "originalSentence": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data from `buffers` should be written."
        },
        {
          "id": "sc_632",
          "content": "[`filehandle.writev(buffers[, position])`] [Previous: `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `p...] If `position` is not a `number`, the data will be written at the current position.",
          "position": 1,
          "originalSentence": "If `position` is not a `number`, the data will be written at the current position."
        },
        {
          "id": "sc_633",
          "content": "[`filehandle.writev(buffers[, position])`] [Previous: If `position` is not a `number`, the data will be ...] **Default:** `null` Returns: {Promise}",
          "position": 2,
          "originalSentence": "**Default:** `null` Returns: {Promise}"
        },
        {
          "id": "sc_634",
          "content": "[`filehandle.writev(buffers[, position])`] [Previous: **Default:** `null` Returns: {Promise}...] Write an array of {ArrayBufferView}s to the file.",
          "position": 3,
          "originalSentence": "Write an array of {ArrayBufferView}s to the file."
        },
        {
          "id": "sc_635",
          "content": "[`filehandle.writev(buffers[, position])`] [Previous: Write an array of {ArrayBufferView}s to the file....] The promise is fulfilled with an object containing a two properties:",
          "position": 4,
          "originalSentence": "The promise is fulfilled with an object containing a two properties:"
        },
        {
          "id": "sc_636",
          "content": "[`filehandle.writev(buffers[, position])`] [Previous: The promise is fulfilled with an object containing...] `bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input.",
          "position": 5,
          "originalSentence": "`bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input."
        },
        {
          "id": "sc_637",
          "content": "[`filehandle.writev(buffers[, position])`] [Previous: `bytesWritten` {integer} the number of bytes writt...] It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 6,
          "originalSentence": "It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected)."
        },
        {
          "id": "sc_638",
          "content": "[`filehandle.writev(buffers[, position])`] [Previous: It is unsafe to call `writev()` multiple times on ...] On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 7,
          "originalSentence": "On Linux, positional writes don't work when the file is opened in append mode."
        },
        {
          "id": "sc_639",
          "content": "[`filehandle.writev(buffers[, position])`] [Previous: On Linux, positional writes don't work when the fi...] The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 8,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "sc_650",
          "content": "[`filehandle[Symbol.asyncDispose]()`] Calls `filehandle.",
          "position": 0,
          "originalSentence": "Calls `filehandle."
        },
        {
          "id": "sc_651",
          "content": "[`filehandle[Symbol.asyncDispose]()`] close()` and returns a promise that fulfills when the filehandle is closed.",
          "position": 1,
          "originalSentence": "close()` and returns a promise that fulfills when the filehandle is closed."
        },
        {
          "id": "sc_671",
          "content": "[`fsPromises.access(path[, mode])`] `path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs."
        },
        {
          "id": "sc_672",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: `path` {string|Buffer|URL} `mode` {integer} **Defa...] F_OK` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 1,
          "originalSentence": "F_OK` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_673",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: F_OK` Returns: {Promise} Fulfills with `undefined`...] Tests a user's permissions for the file or directory specified by `path`.",
          "position": 2,
          "originalSentence": "Tests a user's permissions for the file or directory specified by `path`."
        },
        {
          "id": "sc_674",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: Tests a user's permissions for the file or directo...] The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
          "position": 3,
          "originalSentence": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed."
        },
        {
          "id": "sc_675",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: The `mode` argument is an optional integer that sp...] `mode` should be either the value `fs.",
          "position": 4,
          "originalSentence": "`mode` should be either the value `fs."
        },
        {
          "id": "sc_676",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: `mode` should be either the value `fs....] F_OK` or a mask consisting of the bitwise OR of any of `fs.",
          "position": 5,
          "originalSentence": "F_OK` or a mask consisting of the bitwise OR of any of `fs."
        },
        {
          "id": "sc_677",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: F_OK` or a mask consisting of the bitwise OR of an...] R_OK`, `fs.",
          "position": 6,
          "originalSentence": "R_OK`, `fs."
        },
        {
          "id": "sc_678",
          "content": "[`fsPromises.access(path[, mode])`] W_OK`, and `fs.",
          "position": 7,
          "originalSentence": "W_OK`, and `fs."
        },
        {
          "id": "sc_679",
          "content": "[`fsPromises.access(path[, mode])`] Check [File access constants][] for possible values of `mode`.",
          "position": 8,
          "originalSentence": "Check [File access constants][] for possible values of `mode`."
        },
        {
          "id": "sc_680",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: Check [File access constants][] for possible value...] If the accessibility check is successful, the promise is fulfilled with no value.",
          "position": 9,
          "originalSentence": "If the accessibility check is successful, the promise is fulfilled with no value."
        },
        {
          "id": "sc_681",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: If the accessibility check is successful, the prom...] If any of the accessibility checks fail, the promise is rejected with an {Error} object.",
          "position": 10,
          "originalSentence": "If any of the accessibility checks fail, the promise is rejected with an {Error} object."
        },
        {
          "id": "sc_682",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: If any of the accessibility checks fail, the promi...] The following example checks if the file `/etc/passwd` can be read and written by the current process.",
          "position": 11,
          "originalSentence": "The following example checks if the file `/etc/passwd` can be read and written by the current process."
        },
        {
          "id": "sc_683",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: The following example checks if the file `/etc/pas...] Using `fsPromises.",
          "position": 12,
          "originalSentence": "Using `fsPromises."
        },
        {
          "id": "sc_684",
          "content": "[`fsPromises.access(path[, mode])`] access()` to check for the accessibility of a file before calling `fsPromises.",
          "position": 13,
          "originalSentence": "access()` to check for the accessibility of a file before calling `fsPromises."
        },
        {
          "id": "sc_685",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: access()` to check for the accessibility of a file...] open()` is not recommended.",
          "position": 14,
          "originalSentence": "open()` is not recommended."
        },
        {
          "id": "sc_686",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: open()` is not recommended....] Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
          "position": 15,
          "originalSentence": "Doing so introduces a race condition, since other processes may change the file's state between the two calls."
        },
        {
          "id": "sc_687",
          "content": "[`fsPromises.access(path[, mode])`] [Previous: Doing so introduces a race condition, since other ...] Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
          "position": 16,
          "originalSentence": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible."
        },
        {
          "id": "sc_716",
          "content": "[`fsPromises.appendFile(path, data[, options])`] `path` {string|Buffer|URL|FileHandle} filename or {FileHandle} `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|FileHandle} filename or {FileHandle} `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_717",
          "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: `path` {string|Buffer|URL|FileHandle} filename or ...] **Default:** `'a'`.",
          "position": 1,
          "originalSentence": "**Default:** `'a'`."
        },
        {
          "id": "sc_718",
          "content": "[`fsPromises.appendFile(path, data[, options])`] * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it."
        },
        {
          "id": "sc_719",
          "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: * `flush` {boolean} If `true`, the underlying file...] **Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_720",
          "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 4,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_721",
          "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Asynchronously append data to a file, creating the file if it does not yet exist.",
          "position": 5,
          "originalSentence": "Asynchronously append data to a file, creating the file if it does not yet exist."
        },
        {
          "id": "sc_722",
          "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: Asynchronously append data to a file, creating the...] `data` can be a string or a {Buffer}.",
          "position": 6,
          "originalSentence": "`data` can be a string or a {Buffer}."
        },
        {
          "id": "sc_723",
          "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: `data` can be a string or a {Buffer}....] If `options` is a string, then it specifies the `encoding`.",
          "position": 7,
          "originalSentence": "If `options` is a string, then it specifies the `encoding`."
        },
        {
          "id": "sc_724",
          "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: If `options` is a string, then it specifies the `e...] The `mode` option only affects the newly created file.",
          "position": 8,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "sc_725",
          "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
          "position": 9,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "sc_726",
          "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: open()`][] for more details....] The `path` may be specified as a {FileHandle} that has been opened for appending (using `fsPromises.",
          "position": 10,
          "originalSentence": "The `path` may be specified as a {FileHandle} that has been opened for appending (using `fsPromises."
        },
        {
          "id": "sc_739",
          "content": "[`fsPromises.chmod(path, mode)`] `path` {string|Buffer|URL} `mode` {string|integer} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {string|integer} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_740",
          "content": "[`fsPromises.chmod(path, mode)`] [Previous: `path` {string|Buffer|URL} `mode` {string|integer}...] Changes the permissions of a file.",
          "position": 1,
          "originalSentence": "Changes the permissions of a file."
        },
        {
          "id": "sc_744",
          "content": "[`fsPromises.chown(path, uid, gid)`] `path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_745",
          "content": "[`fsPromises.chown(path, uid, gid)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} `gid` {...] Changes the ownership of a file.",
          "position": 1,
          "originalSentence": "Changes the ownership of a file."
        },
        {
          "id": "sc_762",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] `src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} Optional modifiers that specify the behavior of the copy operation.",
          "position": 0,
          "originalSentence": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} Optional modifiers that specify the behavior of the copy operation."
        },
        {
          "id": "sc_763",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: `src` {string|Buffer|URL} source filename to copy ...] It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
          "position": 1,
          "originalSentence": "It is possible to create a mask consisting of the bitwise OR of two or more values (e."
        },
        {
          "id": "sc_764",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: It is possible to create a mask consisting of the ...] COPYFILE_EXCL | fs.",
          "position": 2,
          "originalSentence": "COPYFILE_EXCL | fs."
        },
        {
          "id": "sc_765",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] COPYFILE_FICLONE`) **Default:** `0`.",
          "position": 3,
          "originalSentence": "COPYFILE_FICLONE`) **Default:** `0`."
        },
        {
          "id": "sc_766",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: COPYFILE_FICLONE`) **Default:** `0`....] COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
          "position": 4,
          "originalSentence": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists."
        },
        {
          "id": "sc_767",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: COPYFILE_EXCL`: The copy operation will fail if `d...] COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 5,
          "originalSentence": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "sc_768",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: COPYFILE_FICLONE`: The copy operation will attempt...] If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
          "position": 6,
          "originalSentence": "If the platform does not support copy-on-write, then a fallback copy mechanism is used."
        },
        {
          "id": "sc_769",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: If the platform does not support copy-on-write, th...] COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 7,
          "originalSentence": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "sc_770",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: COPYFILE_FICLONE_FORCE`: The copy operation will a...] If the platform does not support copy-on-write, then the operation will fail.",
          "position": 8,
          "originalSentence": "If the platform does not support copy-on-write, then the operation will fail."
        },
        {
          "id": "sc_771",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: If the platform does not support copy-on-write, th...] Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 9,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_772",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Asynchronously copies `src` to `dest`.",
          "position": 10,
          "originalSentence": "Asynchronously copies `src` to `dest`."
        },
        {
          "id": "sc_773",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: Asynchronously copies `src` to `dest`....] By default, `dest` is overwritten if it already exists.",
          "position": 11,
          "originalSentence": "By default, `dest` is overwritten if it already exists."
        },
        {
          "id": "sc_774",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: By default, `dest` is overwritten if it already ex...] No guarantees are made about the atomicity of the copy operation.",
          "position": 12,
          "originalSentence": "No guarantees are made about the atomicity of the copy operation."
        },
        {
          "id": "sc_775",
          "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: No guarantees are made about the atomicity of the ...] If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination.",
          "position": 13,
          "originalSentence": "If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination."
        },
        {
          "id": "sc_818",
          "content": "[`fsPromises.cp(src, dest[, options])`] `src` {string|URL} source path to copy.",
          "position": 0,
          "originalSentence": "`src` {string|URL} source path to copy."
        },
        {
          "id": "sc_819",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: `src` {string|URL} source path to copy....] `dest` {string|URL} destination path to copy to.",
          "position": 1,
          "originalSentence": "`dest` {string|URL} destination path to copy to."
        },
        {
          "id": "sc_820",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: `dest` {string|URL} destination path to copy to....] `options` {Object} * `dereference` {boolean} dereference symlinks.",
          "position": 2,
          "originalSentence": "`options` {Object} * `dereference` {boolean} dereference symlinks."
        },
        {
          "id": "sc_821",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: `options` {Object} * `dereference` {boolean} deref...] **Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_822",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: **Default:** `false`....] * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
          "position": 4,
          "originalSentence": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error."
        },
        {
          "id": "sc_823",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `errorOnExist` {boolean} when `force` is `false`...] **Default:** `false`.",
          "position": 5,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_824",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: **Default:** `false`....] * `filter` {Function} Function to filter copied files/directories.",
          "position": 6,
          "originalSentence": "* `filter` {Function} Function to filter copied files/directories."
        },
        {
          "id": "sc_825",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `filter` {Function} Function to filter copied fi...] Return `true` to copy the item, `false` to ignore it.",
          "position": 7,
          "originalSentence": "Return `true` to copy the item, `false` to ignore it."
        },
        {
          "id": "sc_826",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: Return `true` to copy the item, `false` to ignore ...] When ignoring a directory, all of its contents will be skipped as well.",
          "position": 8,
          "originalSentence": "When ignoring a directory, all of its contents will be skipped as well."
        },
        {
          "id": "sc_827",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: When ignoring a directory, all of its contents wil...] Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
          "position": 9,
          "originalSentence": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`."
        },
        {
          "id": "sc_828",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: Can also return a `Promise` that resolves to `true...] * `src` {string} source path to copy.",
          "position": 10,
          "originalSentence": "* `src` {string} source path to copy."
        },
        {
          "id": "sc_829",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `src` {string} source path to copy....] * `dest` {string} destination path to copy to.",
          "position": 11,
          "originalSentence": "* `dest` {string} destination path to copy to."
        },
        {
          "id": "sc_830",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `dest` {string} destination path to copy to....] * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
          "position": 12,
          "originalSentence": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value."
        },
        {
          "id": "sc_831",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * Returns: {boolean|Promise} A value that is coerc...] * `force` {boolean} overwrite existing file or directory.",
          "position": 13,
          "originalSentence": "* `force` {boolean} overwrite existing file or directory."
        },
        {
          "id": "sc_832",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `force` {boolean} overwrite existing file or dir...] The copy operation will ignore errors if you set this to false and the destination exists.",
          "position": 14,
          "originalSentence": "The copy operation will ignore errors if you set this to false and the destination exists."
        },
        {
          "id": "sc_833",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: The copy operation will ignore errors if you set t...] Use the `errorOnExist` option to change this behavior.",
          "position": 15,
          "originalSentence": "Use the `errorOnExist` option to change this behavior."
        },
        {
          "id": "sc_834",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: Use the `errorOnExist` option to change this behav...] **Default:** `true`.",
          "position": 16,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "sc_835",
          "content": "[`fsPromises.cp(src, dest[, options])`] * `mode` {integer} modifiers for copy operation.",
          "position": 17,
          "originalSentence": "* `mode` {integer} modifiers for copy operation."
        },
        {
          "id": "sc_836",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `mode` {integer} modifiers for copy operation....] **Default:** `0`.",
          "position": 18,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "sc_837",
          "content": "[`fsPromises.cp(src, dest[, options])`] See `mode` flag of [`fsPromises.",
          "position": 19,
          "originalSentence": "See `mode` flag of [`fsPromises."
        },
        {
          "id": "sc_838",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: See `mode` flag of [`fsPromises....] copyFile()`][].",
          "position": 20,
          "originalSentence": "copyFile()`][]."
        },
        {
          "id": "sc_839",
          "content": "[`fsPromises.cp(src, dest[, options])`] * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
          "position": 21,
          "originalSentence": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved."
        },
        {
          "id": "sc_840",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `preserveTimestamps` {boolean} When `true` times...] **Default:** `false`.",
          "position": 22,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_841",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: **Default:** `false`....] * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
          "position": 23,
          "originalSentence": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped."
        },
        {
          "id": "sc_842",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `recursive` {boolean} copy directories recursive...] **Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 24,
          "originalSentence": "**Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_843",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: **Default:** `false` Returns: {Promise} Fulfills w...] Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
          "position": 25,
          "originalSentence": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files."
        },
        {
          "id": "sc_844",
          "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: Asynchronously copies the entire directory structu...] When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 26,
          "originalSentence": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`."
        },
        {
          "id": "sc_883",
          "content": "[`fsPromises.glob(pattern[, options])`] `pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
          "position": 0,
          "originalSentence": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory."
        },
        {
          "id": "sc_884",
          "content": "[`fsPromises.glob(pattern[, options])`] [Previous: `pattern` {string|string\\[]} `options` {Object} * ...] **Default:** `process.",
          "position": 1,
          "originalSentence": "**Default:** `process."
        },
        {
          "id": "sc_885",
          "content": "[`fsPromises.glob(pattern[, options])`] [Previous: **Default:** `process....] cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
          "position": 2,
          "originalSentence": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded."
        },
        {
          "id": "sc_886",
          "content": "[`fsPromises.glob(pattern[, options])`] [Previous: cwd()` * `exclude` {Function|string\\[]} Function t...] If a function is provided, return `true` to exclude the item, `false` to include it.",
          "position": 3,
          "originalSentence": "If a function is provided, return `true` to exclude the item, `false` to include it."
        },
        {
          "id": "sc_887",
          "content": "[`fsPromises.glob(pattern[, options])`] [Previous: If a function is provided, return `true` to exclud...] **Default:** `undefined`.",
          "position": 4,
          "originalSentence": "**Default:** `undefined`."
        },
        {
          "id": "sc_888",
          "content": "[`fsPromises.glob(pattern[, options])`] [Previous: **Default:** `undefined`....] If a string array is provided, each string should be a glob pattern that specifies paths to exclude.",
          "position": 5,
          "originalSentence": "If a string array is provided, each string should be a glob pattern that specifies paths to exclude."
        },
        {
          "id": "sc_889",
          "content": "[`fsPromises.glob(pattern[, options])`] [Previous: If a string array is provided, each string should ...] Note: Negation patterns (e.",
          "position": 6,
          "originalSentence": "Note: Negation patterns (e."
        },
        {
          "id": "sc_890",
          "content": "[`fsPromises.glob(pattern[, options])`] [Previous: Note: Negation patterns (e....] js') are not supported.",
          "position": 7,
          "originalSentence": "js') are not supported."
        },
        {
          "id": "sc_891",
          "content": "[`fsPromises.glob(pattern[, options])`] [Previous: js') are not supported....] * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
          "position": 8,
          "originalSentence": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise."
        },
        {
          "id": "sc_892",
          "content": "[`fsPromises.glob(pattern[, options])`] [Previous: * `withFileTypes` {boolean} `true` if the glob sho...] **Default:** `false`.",
          "position": 9,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_893",
          "content": "[`fsPromises.glob(pattern[, options])`] [Previous: **Default:** `false`....] Returns: {AsyncIterator} An AsyncIterator that yields the paths of files that match the pattern.",
          "position": 10,
          "originalSentence": "Returns: {AsyncIterator} An AsyncIterator that yields the paths of files that match the pattern."
        },
        {
          "id": "sc_908",
          "content": "[`fsPromises.lchmod(path, mode)`] `path` {string|Buffer|URL} `mode` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_909",
          "content": "[`fsPromises.lchmod(path, mode)`] [Previous: `path` {string|Buffer|URL} `mode` {integer} Return...] Changes the permissions on a symbolic link.",
          "position": 1,
          "originalSentence": "Changes the permissions on a symbolic link."
        },
        {
          "id": "sc_910",
          "content": "[`fsPromises.lchmod(path, mode)`] [Previous: Changes the permissions on a symbolic link....] This method is only implemented on macOS.",
          "position": 2,
          "originalSentence": "This method is only implemented on macOS."
        },
        {
          "id": "sc_916",
          "content": "[`fsPromises.lchown(path, uid, gid)`] `path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_917",
          "content": "[`fsPromises.lchown(path, uid, gid)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} `gid` {...] Changes the ownership on a symbolic link.",
          "position": 1,
          "originalSentence": "Changes the ownership on a symbolic link."
        },
        {
          "id": "sc_923",
          "content": "[`fsPromises.lutimes(path, atime, mtime)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_924",
          "content": "[`fsPromises.lutimes(path, atime, mtime)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] Changes the access and modification times of a file in the same way as [`fsPromises.",
          "position": 1,
          "originalSentence": "Changes the access and modification times of a file in the same way as [`fsPromises."
        },
        {
          "id": "sc_925",
          "content": "[`fsPromises.lutimes(path, atime, mtime)`] [Previous: Changes the access and modification times of a fil...] utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.",
          "position": 2,
          "originalSentence": "utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed."
        },
        {
          "id": "sc_932",
          "content": "[`fsPromises.link(existingPath, newPath)`] `existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_933",
          "content": "[`fsPromises.link(existingPath, newPath)`] [Previous: `existingPath` {string|Buffer|URL} `newPath` {stri...] Creates a new link from the `existingPath` to the `newPath`.",
          "position": 1,
          "originalSentence": "Creates a new link from the `existingPath` to the `newPath`."
        },
        {
          "id": "sc_934",
          "content": "[`fsPromises.link(existingPath, newPath)`] [Previous: Creates a new link from the `existingPath` to the ...] See the POSIX link(2) documentation for more detail.",
          "position": 2,
          "originalSentence": "See the POSIX link(2) documentation for more detail."
        },
        {
          "id": "sc_946",
          "content": "[`fsPromises.lstat(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_947",
          "content": "[`fsPromises.lstat(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "sc_948",
          "content": "[`fsPromises.lstat(path[, options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_949",
          "content": "[`fsPromises.lstat(path[, options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with the {fs.",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with the {fs."
        },
        {
          "id": "sc_950",
          "content": "[`fsPromises.lstat(path[, options])`] [Previous: Returns: {Promise} Fulfills with the {fs....] Stats} object for the given symbolic link `path`.",
          "position": 4,
          "originalSentence": "Stats} object for the given symbolic link `path`."
        },
        {
          "id": "sc_951",
          "content": "[`fsPromises.lstat(path[, options])`] [Previous: Stats} object for the given symbolic link `path`....] Equivalent to [`fsPromises.",
          "position": 5,
          "originalSentence": "Equivalent to [`fsPromises."
        },
        {
          "id": "sc_952",
          "content": "[`fsPromises.lstat(path[, options])`] [Previous: Equivalent to [`fsPromises....] stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to.",
          "position": 6,
          "originalSentence": "stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to."
        },
        {
          "id": "sc_953",
          "content": "[`fsPromises.lstat(path[, options])`] [Previous: stat()`][] unless `path` refers to a symbolic link...] Refer to the POSIX lstat(2) document for more detail.",
          "position": 7,
          "originalSentence": "Refer to the POSIX lstat(2) document for more detail."
        },
        {
          "id": "sc_970",
          "content": "[`fsPromises.mkdir(path[, options])`] `path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows."
        },
        {
          "id": "sc_971",
          "content": "[`fsPromises.mkdir(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object|integ...] **Default:** `0o777`.",
          "position": 1,
          "originalSentence": "**Default:** `0o777`."
        },
        {
          "id": "sc_972",
          "content": "[`fsPromises.mkdir(path[, options])`] [Previous: **Default:** `0o777`....] Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`.",
          "position": 2,
          "originalSentence": "Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`."
        },
        {
          "id": "sc_973",
          "content": "[`fsPromises.mkdir(path[, options])`] [Previous: Returns: {Promise} Upon success, fulfills with `un...] Asynchronously creates a directory.",
          "position": 3,
          "originalSentence": "Asynchronously creates a directory."
        },
        {
          "id": "sc_974",
          "content": "[`fsPromises.mkdir(path[, options])`] [Previous: Asynchronously creates a directory....] The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)",
          "position": 4,
          "originalSentence": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)"
        },
        {
          "id": "sc_975",
          "content": "[`fsPromises.mkdir(path[, options])`] [Previous: The optional `options` argument can be an integer ...] or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
          "position": 5,
          "originalSentence": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created."
        },
        {
          "id": "sc_976",
          "content": "[`fsPromises.mkdir(path[, options])`] [Previous: or an object with a `mode` property and a `recursi...] Calling `fsPromises.",
          "position": 6,
          "originalSentence": "Calling `fsPromises."
        },
        {
          "id": "sc_977",
          "content": "[`fsPromises.mkdir(path[, options])`] mkdir()` when `path` is a directory that exists results in a rejection only when `recursive` is false.",
          "position": 7,
          "originalSentence": "mkdir()` when `path` is a directory that exists results in a rejection only when `recursive` is false."
        },
        {
          "id": "sc_995",
          "content": "[`fsPromises.mkdtemp(prefix[, options])`] `prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a string containing the file system path of the newly created temporary directory.",
          "position": 0,
          "originalSentence": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a string containing the file system path of the newly created temporary directory."
        },
        {
          "id": "sc_996",
          "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: `prefix` {string|Buffer|URL} `options` {string|Obj...] Creates a unique temporary directory.",
          "position": 1,
          "originalSentence": "Creates a unique temporary directory."
        },
        {
          "id": "sc_997",
          "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: Creates a unique temporary directory....] A unique directory name is generated by appending six random characters to the end of the provided `prefix`.",
          "position": 2,
          "originalSentence": "A unique directory name is generated by appending six random characters to the end of the provided `prefix`."
        },
        {
          "id": "sc_998",
          "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: A unique directory name is generated by appending ...] Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
          "position": 3,
          "originalSentence": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`."
        },
        {
          "id": "sc_999",
          "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: Due to platform inconsistencies, avoid trailing `X...] Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
          "position": 4,
          "originalSentence": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters."
        },
        {
          "id": "sc_1000",
          "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: Some platforms, notably the BSDs, can return more ...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 5,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use."
        },
        {
          "id": "sc_1001",
          "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: The optional `options` argument can be a string sp...] The `fsPromises.",
          "position": 6,
          "originalSentence": "The `fsPromises."
        },
        {
          "id": "sc_1002",
          "content": "[`fsPromises.mkdtemp(prefix[, options])`] mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
          "position": 7,
          "originalSentence": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string."
        },
        {
          "id": "sc_1003",
          "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: mkdtemp()` method will append the six randomly sel...] For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
          "position": 8,
          "originalSentence": "For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path')."
        },
        {
          "id": "sc_1026",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] `prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a Promise for an async-disposable Object: * `path` {string} The path of the created directory.",
          "position": 0,
          "originalSentence": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a Promise for an async-disposable Object: * `path` {string} The path of the created directory."
        },
        {
          "id": "sc_1027",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: `prefix` {string|Buffer|URL} `options` {string|Obj...] * `remove` {AsyncFunction} A function which removes the created directory.",
          "position": 1,
          "originalSentence": "* `remove` {AsyncFunction} A function which removes the created directory."
        },
        {
          "id": "sc_1028",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: * `remove` {AsyncFunction} A function which remove...] * `[Symbol.",
          "position": 2,
          "originalSentence": "* `[Symbol."
        },
        {
          "id": "sc_1029",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] asyncDispose]` {AsyncFunction} The same as `remove`.",
          "position": 3,
          "originalSentence": "asyncDispose]` {AsyncFunction} The same as `remove`."
        },
        {
          "id": "sc_1030",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: asyncDispose]` {AsyncFunction} The same as `remove...] The resulting Promise holds an async-disposable object whose `path` property holds the created directory path.",
          "position": 4,
          "originalSentence": "The resulting Promise holds an async-disposable object whose `path` property holds the created directory path."
        },
        {
          "id": "sc_1031",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: The resulting Promise holds an async-disposable ob...] When the object is disposed, the directory and its contents will be removed asynchronously if it still exists.",
          "position": 5,
          "originalSentence": "When the object is disposed, the directory and its contents will be removed asynchronously if it still exists."
        },
        {
          "id": "sc_1032",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: When the object is disposed, the directory and its...] If the directory cannot be deleted, disposal will throw an error.",
          "position": 6,
          "originalSentence": "If the directory cannot be deleted, disposal will throw an error."
        },
        {
          "id": "sc_1033",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: If the directory cannot be deleted, disposal will ...] The object has an async `remove()` method which will perform the same task.",
          "position": 7,
          "originalSentence": "The object has an async `remove()` method which will perform the same task."
        },
        {
          "id": "sc_1034",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: The object has an async `remove()` method which wi...] Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises.",
          "position": 8,
          "originalSentence": "Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises."
        },
        {
          "id": "sc_1035",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: Both this function and the disposal function on th...] mkdtempDisposable('prefix')`.",
          "position": 9,
          "originalSentence": "mkdtempDisposable('prefix')`."
        },
        {
          "id": "sc_1036",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: mkdtempDisposable('prefix')`....] For detailed information, see the documentation of [`fsPromises.",
          "position": 10,
          "originalSentence": "For detailed information, see the documentation of [`fsPromises."
        },
        {
          "id": "sc_1037",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: For detailed information, see the documentation of...] mkdtemp()`][].",
          "position": 11,
          "originalSentence": "mkdtemp()`][]."
        },
        {
          "id": "sc_1038",
          "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 12,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use."
        },
        {
          "id": "sc_1062",
          "content": "[`fsPromises.open(path, flags[, mode])`] `path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][]."
        },
        {
          "id": "sc_1063",
          "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: `path` {string|Buffer|URL} `flags` {string|number}...] **Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "sc_1064",
          "content": "[`fsPromises.open(path, flags[, mode])`] `mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created.",
          "position": 2,
          "originalSentence": "`mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created."
        },
        {
          "id": "sc_1065",
          "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: `mode` {string|integer} Sets the file mode (permis...] **Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object.",
          "position": 3,
          "originalSentence": "**Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object."
        },
        {
          "id": "sc_1066",
          "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: **Default:** `0o666` (readable and writable) Retur...] Opens a {FileHandle}.",
          "position": 4,
          "originalSentence": "Opens a {FileHandle}."
        },
        {
          "id": "sc_1067",
          "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: Opens a {FileHandle}....] Refer to the POSIX open(2) documentation for more detail.",
          "position": 5,
          "originalSentence": "Refer to the POSIX open(2) documentation for more detail."
        },
        {
          "id": "sc_1068",
          "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: Refer to the POSIX open(2) documentation for more ...] Some characters (`< > : \" / \\ | ?",
          "position": 6,
          "originalSentence": "Some characters (`< > : \" / \\ | ?"
        },
        {
          "id": "sc_1069",
          "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: Some characters (`< > : \" / \\ | ?...] *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
          "position": 7,
          "originalSentence": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]."
        },
        {
          "id": "sc_1070",
          "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: *`) are reserved under Windows as documented by [N...] Under NTFS, if the filename contains a colon, Node.",
          "position": 8,
          "originalSentence": "Under NTFS, if the filename contains a colon, Node."
        },
        {
          "id": "sc_1071",
          "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: Under NTFS, if the filename contains a colon, Node...] js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
          "position": 9,
          "originalSentence": "js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams]."
        },
        {
          "id": "sc_1094",
          "content": "[`fsPromises.opendir(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory."
        },
        {
          "id": "sc_1095",
          "content": "[`fsPromises.opendir(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `e...] Higher values lead to better performance but higher memory usage.",
          "position": 1,
          "originalSentence": "Higher values lead to better performance but higher memory usage."
        },
        {
          "id": "sc_1096",
          "content": "[`fsPromises.opendir(path[, options])`] [Previous: Higher values lead to better performance but highe...] **Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable} containing all sub files and directories.",
          "position": 2,
          "originalSentence": "**Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable} containing all sub files and directories."
        },
        {
          "id": "sc_1097",
          "content": "[`fsPromises.opendir(path[, options])`] [Previous: **Default:** `32` * `recursive` {boolean} Resolved...] **Default:** `false` Returns: {Promise} Fulfills with an {fs.",
          "position": 3,
          "originalSentence": "**Default:** `false` Returns: {Promise} Fulfills with an {fs."
        },
        {
          "id": "sc_1098",
          "content": "[`fsPromises.opendir(path[, options])`] [Previous: **Default:** `false` Returns: {Promise} Fulfills w...] Asynchronously open a directory for iterative scanning.",
          "position": 4,
          "originalSentence": "Asynchronously open a directory for iterative scanning."
        },
        {
          "id": "sc_1099",
          "content": "[`fsPromises.opendir(path[, options])`] [Previous: Asynchronously open a directory for iterative scan...] See the POSIX opendir(3) documentation for more detail.",
          "position": 5,
          "originalSentence": "See the POSIX opendir(3) documentation for more detail."
        },
        {
          "id": "sc_1100",
          "content": "[`fsPromises.opendir(path[, options])`] [Previous: See the POSIX opendir(3) documentation for more de...] Creates an {fs.",
          "position": 6,
          "originalSentence": "Creates an {fs."
        },
        {
          "id": "sc_1101",
          "content": "[`fsPromises.opendir(path[, options])`] Dir}, which contains all further functions for reading from and cleaning up the directory.",
          "position": 7,
          "originalSentence": "Dir}, which contains all further functions for reading from and cleaning up the directory."
        },
        {
          "id": "sc_1102",
          "content": "[`fsPromises.opendir(path[, options])`] [Previous: Dir}, which contains all further functions for rea...] The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 8,
          "originalSentence": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations."
        },
        {
          "id": "sc_1103",
          "content": "[`fsPromises.opendir(path[, options])`] [Previous: The `encoding` option sets the encoding for the `p...] Example using async iteration:",
          "position": 9,
          "originalSentence": "Example using async iteration:"
        },
        {
          "id": "sc_1104",
          "content": "[`fsPromises.opendir(path[, options])`] [Previous: Example using async iteration:...] When using the async iterator, the {fs.",
          "position": 10,
          "originalSentence": "When using the async iterator, the {fs."
        },
        {
          "id": "sc_1105",
          "content": "[`fsPromises.opendir(path[, options])`] [Previous: When using the async iterator, the {fs....] Dir} object will be automatically closed after the iterator exits.",
          "position": 11,
          "originalSentence": "Dir} object will be automatically closed after the iterator exits."
        },
        {
          "id": "sc_1129",
          "content": "[`fsPromises.readdir(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively."
        },
        {
          "id": "sc_1130",
          "content": "[`fsPromises.readdir(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] In recursive mode, it will list all files, sub files, and directories.",
          "position": 1,
          "originalSentence": "In recursive mode, it will list all files, sub files, and directories."
        },
        {
          "id": "sc_1131",
          "content": "[`fsPromises.readdir(path[, options])`] [Previous: In recursive mode, it will list all files, sub fil...] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1132",
          "content": "[`fsPromises.readdir(path[, options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.'",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.'"
        },
        {
          "id": "sc_1133",
          "content": "[`fsPromises.readdir(path[, options])`] [Previous: Returns: {Promise} Fulfills with an array of the n...] ` and `'..'",
          "position": 4,
          "originalSentence": "` and `'..'"
        },
        {
          "id": "sc_1134",
          "content": "[`fsPromises.readdir(path[, options])`] Reads the contents of a directory.",
          "position": 5,
          "originalSentence": "Reads the contents of a directory."
        },
        {
          "id": "sc_1135",
          "content": "[`fsPromises.readdir(path[, options])`] [Previous: Reads the contents of a directory....] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames.",
          "position": 6,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames."
        },
        {
          "id": "sc_1136",
          "content": "[`fsPromises.readdir(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
          "position": 7,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects."
        },
        {
          "id": "sc_1137",
          "content": "[`fsPromises.readdir(path[, options])`] [Previous: If the `encoding` is set to `'buffer'`, the filena...] If `options.",
          "position": 8,
          "originalSentence": "If `options."
        },
        {
          "id": "sc_1138",
          "content": "[`fsPromises.readdir(path[, options])`] withFileTypes` is set to `true`, the returned array will contain {fs.",
          "position": 9,
          "originalSentence": "withFileTypes` is set to `true`, the returned array will contain {fs."
        },
        {
          "id": "sc_1139",
          "content": "[`fsPromises.readdir(path[, options])`] [Previous: withFileTypes` is set to `true`, the returned arra...] Dirent} objects.",
          "position": 10,
          "originalSentence": "Dirent} objects."
        },
        {
          "id": "sc_1170",
          "content": "[`fsPromises.readFile(path[, options])`] `path` {string|Buffer|URL|FileHandle} filename or `FileHandle` `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_1171",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: `path` {string|Buffer|URL|FileHandle} filename or ...] **Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "sc_1172",
          "content": "[`fsPromises.readFile(path[, options])`] * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file.",
          "position": 2,
          "originalSentence": "* `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file."
        },
        {
          "id": "sc_1173",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: * `signal` {AbortSignal} allows aborting an in-pro...] Asynchronously reads the entire contents of a file.",
          "position": 3,
          "originalSentence": "Asynchronously reads the entire contents of a file."
        },
        {
          "id": "sc_1174",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: Asynchronously reads the entire contents of a file...] If no encoding is specified (using `options.",
          "position": 4,
          "originalSentence": "If no encoding is specified (using `options."
        },
        {
          "id": "sc_1175",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: If no encoding is specified (using `options....] encoding`), the data is returned as a {Buffer} object.",
          "position": 5,
          "originalSentence": "encoding`), the data is returned as a {Buffer} object."
        },
        {
          "id": "sc_1176",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: encoding`), the data is returned as a {Buffer} obj...] Otherwise, the data will be a string.",
          "position": 6,
          "originalSentence": "Otherwise, the data will be a string."
        },
        {
          "id": "sc_1177",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: Otherwise, the data will be a string....] If `options` is a string, then it specifies the encoding.",
          "position": 7,
          "originalSentence": "If `options` is a string, then it specifies the encoding."
        },
        {
          "id": "sc_1178",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: If `options` is a string, then it specifies the en...] When the `path` is a directory, the behavior of `fsPromises.",
          "position": 8,
          "originalSentence": "When the `path` is a directory, the behavior of `fsPromises."
        },
        {
          "id": "sc_1179",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: When the `path` is a directory, the behavior of `f...] readFile()` is platform-specific.",
          "position": 9,
          "originalSentence": "readFile()` is platform-specific."
        },
        {
          "id": "sc_1180",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: readFile()` is platform-specific....] On macOS, Linux, and Windows, the promise will be rejected with an error.",
          "position": 10,
          "originalSentence": "On macOS, Linux, and Windows, the promise will be rejected with an error."
        },
        {
          "id": "sc_1181",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: On macOS, Linux, and Windows, the promise will be ...] On FreeBSD, a representation of the directory's contents will be returned.",
          "position": 11,
          "originalSentence": "On FreeBSD, a representation of the directory's contents will be returned."
        },
        {
          "id": "sc_1182",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: On FreeBSD, a representation of the directory's co...] An example of reading a `package.",
          "position": 12,
          "originalSentence": "An example of reading a `package."
        },
        {
          "id": "sc_1183",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: An example of reading a `package....] json` file located in the same directory of the running code:",
          "position": 13,
          "originalSentence": "json` file located in the same directory of the running code:"
        },
        {
          "id": "sc_1184",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: json` file located in the same directory of the ru...] It is possible to abort an ongoing `readFile` using an {AbortSignal}.",
          "position": 14,
          "originalSentence": "It is possible to abort an ongoing `readFile` using an {AbortSignal}."
        },
        {
          "id": "sc_1185",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: It is possible to abort an ongoing `readFile` usin...] If a request is aborted the promise returned is rejected with an `AbortError`:",
          "position": 15,
          "originalSentence": "If a request is aborted the promise returned is rejected with an `AbortError`:"
        },
        {
          "id": "sc_1186",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: If a request is aborted the promise returned is re...] Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 16,
          "originalSentence": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs."
        },
        {
          "id": "sc_1187",
          "content": "[`fsPromises.readFile(path[, options])`] [Previous: Aborting an ongoing request does not abort individ...] readFile` performs.",
          "position": 17,
          "originalSentence": "readFile` performs."
        },
        {
          "id": "sc_1188",
          "content": "[`fsPromises.readFile(path[, options])`] Any specified {FileHandle} has to support reading.",
          "position": 18,
          "originalSentence": "Any specified {FileHandle} has to support reading."
        },
        {
          "id": "sc_1214",
          "content": "[`fsPromises.readlink(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the `linkString` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the `linkString` upon success."
        },
        {
          "id": "sc_1215",
          "content": "[`fsPromises.readlink(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Reads the contents of the symbolic link referred to by `path`.",
          "position": 1,
          "originalSentence": "Reads the contents of the symbolic link referred to by `path`."
        },
        {
          "id": "sc_1216",
          "content": "[`fsPromises.readlink(path[, options])`] [Previous: Reads the contents of the symbolic link referred t...] See the POSIX readlink(2) documentation for more detail.",
          "position": 2,
          "originalSentence": "See the POSIX readlink(2) documentation for more detail."
        },
        {
          "id": "sc_1217",
          "content": "[`fsPromises.readlink(path[, options])`] [Previous: See the POSIX readlink(2) documentation for more d...] The promise is fulfilled with the `linkString` upon success.",
          "position": 3,
          "originalSentence": "The promise is fulfilled with the `linkString` upon success."
        },
        {
          "id": "sc_1218",
          "content": "[`fsPromises.readlink(path[, options])`] [Previous: The promise is fulfilled with the `linkString` upo...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
          "position": 4,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned."
        },
        {
          "id": "sc_1219",
          "content": "[`fsPromises.readlink(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 5,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object."
        },
        {
          "id": "sc_1235",
          "content": "[`fsPromises.realpath(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the resolved path upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the resolved path upon success."
        },
        {
          "id": "sc_1236",
          "content": "[`fsPromises.realpath(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Determines the actual location of `path` using the same semantics as the `fs.",
          "position": 1,
          "originalSentence": "Determines the actual location of `path` using the same semantics as the `fs."
        },
        {
          "id": "sc_1237",
          "content": "[`fsPromises.realpath(path[, options])`] [Previous: Determines the actual location of `path` using the...] native()` function.",
          "position": 2,
          "originalSentence": "native()` function."
        },
        {
          "id": "sc_1238",
          "content": "[`fsPromises.realpath(path[, options])`] Only paths that can be converted to UTF8 strings are supported.",
          "position": 3,
          "originalSentence": "Only paths that can be converted to UTF8 strings are supported."
        },
        {
          "id": "sc_1239",
          "content": "[`fsPromises.realpath(path[, options])`] [Previous: Only paths that can be converted to UTF8 strings a...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path.",
          "position": 4,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path."
        },
        {
          "id": "sc_1240",
          "content": "[`fsPromises.realpath(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 5,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object."
        },
        {
          "id": "sc_1241",
          "content": "[`fsPromises.realpath(path[, options])`] [Previous: If the `encoding` is set to `'buffer'`, the path r...] On Linux, when Node.",
          "position": 6,
          "originalSentence": "On Linux, when Node."
        },
        {
          "id": "sc_1242",
          "content": "[`fsPromises.realpath(path[, options])`] js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
          "position": 7,
          "originalSentence": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work."
        },
        {
          "id": "sc_1243",
          "content": "[`fsPromises.realpath(path[, options])`] [Previous: js is linked against musl libc, the procfs file sy...] Glibc does not have this restriction.",
          "position": 8,
          "originalSentence": "Glibc does not have this restriction."
        },
        {
          "id": "sc_1254",
          "content": "[`fsPromises.rename(oldPath, newPath)`] `oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_1255",
          "content": "[`fsPromises.rename(oldPath, newPath)`] [Previous: `oldPath` {string|Buffer|URL} `newPath` {string|Bu...] Renames `oldPath` to `newPath`.",
          "position": 1,
          "originalSentence": "Renames `oldPath` to `newPath`."
        },
        {
          "id": "sc_1267",
          "content": "[`fsPromises.rmdir(path[, options])`] `path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed."
        },
        {
          "id": "sc_1268",
          "content": "[`fsPromises.rmdir(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} Ther...] There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
          "position": 1,
          "originalSentence": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed."
        },
        {
          "id": "sc_1269",
          "content": "[`fsPromises.rmdir(path[, options])`] [Previous: There used to be options for `recursive`, `maxBusy...] The `options` argument is still accepted for backwards compatibility but it is not used.",
          "position": 2,
          "originalSentence": "The `options` argument is still accepted for backwards compatibility but it is not used."
        },
        {
          "id": "sc_1270",
          "content": "[`fsPromises.rmdir(path[, options])`] [Previous: The `options` argument is still accepted for backw...] Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_1271",
          "content": "[`fsPromises.rmdir(path[, options])`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Removes the directory identified by `path`.",
          "position": 4,
          "originalSentence": "Removes the directory identified by `path`."
        },
        {
          "id": "sc_1272",
          "content": "[`fsPromises.rmdir(path[, options])`] [Previous: Removes the directory identified by `path`....] Using `fsPromises.",
          "position": 5,
          "originalSentence": "Using `fsPromises."
        },
        {
          "id": "sc_1273",
          "content": "[`fsPromises.rmdir(path[, options])`] rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
          "position": 6,
          "originalSentence": "rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX."
        },
        {
          "id": "sc_1274",
          "content": "[`fsPromises.rmdir(path[, options])`] [Previous: rmdir()` on a file (not a directory) results in th...] To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises.",
          "position": 7,
          "originalSentence": "To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises."
        },
        {
          "id": "sc_1275",
          "content": "[`fsPromises.rmdir(path[, options])`] [Previous: To get a behavior similar to the `rm -rf` Unix com...] rm()`][] with options `{ recursive: true, force: true }`.",
          "position": 8,
          "originalSentence": "rm()`][] with options `{ recursive: true, force: true }`."
        },
        {
          "id": "sc_1300",
          "content": "[`fsPromises.rm(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist."
        },
        {
          "id": "sc_1301",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `f...] **Default:** `false`.",
          "position": 1,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1302",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: **Default:** `false`....] * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
          "position": 2,
          "originalSentence": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node."
        },
        {
          "id": "sc_1303",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, ...] js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
          "position": 3,
          "originalSentence": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try."
        },
        {
          "id": "sc_1304",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: js will retry the operation with a linear backoff ...] This option represents the number of retries.",
          "position": 4,
          "originalSentence": "This option represents the number of retries."
        },
        {
          "id": "sc_1305",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: This option represents the number of retries....] This option is ignored if the `recursive` option is not `true`.",
          "position": 5,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "sc_1306",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `0`.",
          "position": 6,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "sc_1307",
          "content": "[`fsPromises.rm(path[, options])`] * `recursive` {boolean} If `true`, perform a recursive directory removal.",
          "position": 7,
          "originalSentence": "* `recursive` {boolean} If `true`, perform a recursive directory removal."
        },
        {
          "id": "sc_1308",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: * `recursive` {boolean} If `true`, perform a recur...] In recursive mode operations are retried on failure.",
          "position": 8,
          "originalSentence": "In recursive mode operations are retried on failure."
        },
        {
          "id": "sc_1309",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: In recursive mode operations are retried on failur...] **Default:** `false`.",
          "position": 9,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1310",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: **Default:** `false`....] * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
          "position": 10,
          "originalSentence": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries."
        },
        {
          "id": "sc_1311",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: * `retryDelay` {integer} The amount of time in mil...] This option is ignored if the `recursive` option is not `true`.",
          "position": 11,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "sc_1312",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `100`.",
          "position": 12,
          "originalSentence": "**Default:** `100`."
        },
        {
          "id": "sc_1313",
          "content": "[`fsPromises.rm(path[, options])`] Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 13,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_1314",
          "content": "[`fsPromises.rm(path[, options])`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 14,
          "originalSentence": "Removes files and directories (modeled on the standard POSIX `rm` utility)."
        },
        {
          "id": "sc_1335",
          "content": "[`fsPromises.stat(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_1336",
          "content": "[`fsPromises.stat(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "sc_1337",
          "content": "[`fsPromises.stat(path[, options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1338",
          "content": "[`fsPromises.stat(path[, options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with the {fs.",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with the {fs."
        },
        {
          "id": "sc_1339",
          "content": "[`fsPromises.stat(path[, options])`] [Previous: Returns: {Promise} Fulfills with the {fs....] Stats} object for the given `path`.",
          "position": 4,
          "originalSentence": "Stats} object for the given `path`."
        },
        {
          "id": "sc_1350",
          "content": "[`fsPromises.statfs(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_1351",
          "content": "[`fsPromises.statfs(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] StatFs} object should be `bigint`.",
          "position": 1,
          "originalSentence": "StatFs} object should be `bigint`."
        },
        {
          "id": "sc_1352",
          "content": "[`fsPromises.statfs(path[, options])`] [Previous: StatFs} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1353",
          "content": "[`fsPromises.statfs(path[, options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with the {fs.",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with the {fs."
        },
        {
          "id": "sc_1354",
          "content": "[`fsPromises.statfs(path[, options])`] [Previous: Returns: {Promise} Fulfills with the {fs....] StatFs} object for the given `path`.",
          "position": 4,
          "originalSentence": "StatFs} object for the given `path`."
        },
        {
          "id": "sc_1369",
          "content": "[`fsPromises.symlink(target, path[, type])`] `target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_1370",
          "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: `target` {string|Buffer|URL} `path` {string|Buffer...] Creates a symbolic link.",
          "position": 1,
          "originalSentence": "Creates a symbolic link."
        },
        {
          "id": "sc_1371",
          "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: Creates a symbolic link....] The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`.",
          "position": 2,
          "originalSentence": "The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`."
        },
        {
          "id": "sc_1372",
          "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: The `type` argument is only used on Windows platfo...] If the `type` argument is `null`, Node.",
          "position": 3,
          "originalSentence": "If the `type` argument is `null`, Node."
        },
        {
          "id": "sc_1373",
          "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: If the `type` argument is `null`, Node....] js will autodetect `target` type and use `'file'` or `'dir'`.",
          "position": 4,
          "originalSentence": "js will autodetect `target` type and use `'file'` or `'dir'`."
        },
        {
          "id": "sc_1374",
          "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: js will autodetect `target` type and use `'file'` ...] If the `target` does not exist, `'file'` will be used.",
          "position": 5,
          "originalSentence": "If the `target` does not exist, `'file'` will be used."
        },
        {
          "id": "sc_1375",
          "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: If the `target` does not exist, `'file'` will be u...] Windows junction points require the destination path to be absolute.",
          "position": 6,
          "originalSentence": "Windows junction points require the destination path to be absolute."
        },
        {
          "id": "sc_1376",
          "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: Windows junction points require the destination pa...] When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
          "position": 7,
          "originalSentence": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path."
        },
        {
          "id": "sc_1377",
          "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: When using `'junction'`, the `target` argument wil...] Junction points on NTFS volumes can only point to directories.",
          "position": 8,
          "originalSentence": "Junction points on NTFS volumes can only point to directories."
        },
        {
          "id": "sc_1389",
          "content": "[`fsPromises.truncate(path[, len])`] `path` {string|Buffer|URL} `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_1390",
          "content": "[`fsPromises.truncate(path[, len])`] [Previous: `path` {string|Buffer|URL} `len` {integer} **Defau...] Truncates (shortens or extends the length) of the content at `path` to `len` bytes.",
          "position": 1,
          "originalSentence": "Truncates (shortens or extends the length) of the content at `path` to `len` bytes."
        },
        {
          "id": "sc_1397",
          "content": "[`fsPromises.unlink(path)`] `path` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_1398",
          "content": "[`fsPromises.unlink(path)`] [Previous: `path` {string|Buffer|URL} Returns: {Promise} Fulf...] If `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers.",
          "position": 1,
          "originalSentence": "If `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers."
        },
        {
          "id": "sc_1399",
          "content": "[`fsPromises.unlink(path)`] [Previous: If `path` refers to a symbolic link, then the link...] If the `path` refers to a file path that is not a symbolic link, the file is deleted.",
          "position": 2,
          "originalSentence": "If the `path` refers to a file path that is not a symbolic link, the file is deleted."
        },
        {
          "id": "sc_1400",
          "content": "[`fsPromises.unlink(path)`] [Previous: If the `path` refers to a file path that is not a ...] See the POSIX unlink(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX unlink(2) documentation for more detail."
        },
        {
          "id": "sc_1410",
          "content": "[`fsPromises.utimes(path, atime, mtime)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_1411",
          "content": "[`fsPromises.utimes(path, atime, mtime)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] Change the file system timestamps of the object referenced by `path`.",
          "position": 1,
          "originalSentence": "Change the file system timestamps of the object referenced by `path`."
        },
        {
          "id": "sc_1412",
          "content": "[`fsPromises.utimes(path, atime, mtime)`] [Previous: Change the file system timestamps of the object re...] The `atime` and `mtime` arguments follow these rules:",
          "position": 2,
          "originalSentence": "The `atime` and `mtime` arguments follow these rules:"
        },
        {
          "id": "sc_1413",
          "content": "[`fsPromises.utimes(path, atime, mtime)`] [Previous: The `atime` and `mtime` arguments follow these rul...] Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789.",
          "position": 3,
          "originalSentence": "Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789."
        },
        {
          "id": "sc_1414",
          "content": "[`fsPromises.utimes(path, atime, mtime)`] [Previous: Values can be either numbers representing Unix epo...] If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
          "position": 4,
          "originalSentence": "If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown."
        },
        {
          "id": "sc_1439",
          "content": "[`fsPromises.watch(filename[, options])`] `filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched.",
          "position": 0,
          "originalSentence": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched."
        },
        {
          "id": "sc_1440",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: `filename` {string|Buffer|URL} `options` {string|O...] **Default:** `true`.",
          "position": 1,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "sc_1441",
          "content": "[`fsPromises.watch(filename[, options])`] * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
          "position": 2,
          "originalSentence": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory."
        },
        {
          "id": "sc_1442",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: * `recursive` {boolean} Indicates whether all subd...] This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
          "position": 3,
          "originalSentence": "This applies when a directory is specified, and only on supported platforms (See [caveats][])."
        },
        {
          "id": "sc_1443",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: This applies when a directory is specified, and on...] **Default:** `false`.",
          "position": 4,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1444",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: **Default:** `false`....] * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
          "position": 5,
          "originalSentence": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener."
        },
        {
          "id": "sc_1445",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: * `encoding` {string} Specifies the character enco...] **Default:** `'utf8'`.",
          "position": 6,
          "originalSentence": "**Default:** `'utf8'`."
        },
        {
          "id": "sc_1446",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: **Default:** `'utf8'`....] * `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop.",
          "position": 7,
          "originalSentence": "* `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop."
        },
        {
          "id": "sc_1447",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: * `signal` {AbortSignal} An {AbortSignal} used to ...] * `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned.",
          "position": 8,
          "originalSentence": "* `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned."
        },
        {
          "id": "sc_1448",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: * `maxQueue` {number} Specifies the number of even...] **Default:** `2048`.",
          "position": 9,
          "originalSentence": "**Default:** `2048`."
        },
        {
          "id": "sc_1449",
          "content": "[`fsPromises.watch(filename[, options])`] * `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows.",
          "position": 10,
          "originalSentence": "* `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows."
        },
        {
          "id": "sc_1450",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: * `overflow` {string} Either `'ignore'` or `'throw...] `'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception.",
          "position": 11,
          "originalSentence": "`'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception."
        },
        {
          "id": "sc_1451",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: `'ignore'` means overflow events are dropped and a...] **Default:** `'ignore'`.",
          "position": 12,
          "originalSentence": "**Default:** `'ignore'`."
        },
        {
          "id": "sc_1452",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: **Default:** `'ignore'`....] Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed.",
          "position": 13,
          "originalSentence": "Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed."
        },
        {
          "id": "sc_1453",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: Returns: {AsyncIterator} of objects with the prope...] Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory.",
          "position": 14,
          "originalSentence": "Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory."
        },
        {
          "id": "sc_1454",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: Returns an async iterator that watches for changes...] On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory.",
          "position": 15,
          "originalSentence": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory."
        },
        {
          "id": "sc_1455",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: On most platforms, `'rename'` is emitted whenever ...] All the [caveats][] for `fs.",
          "position": 16,
          "originalSentence": "All the [caveats][] for `fs."
        },
        {
          "id": "sc_1456",
          "content": "[`fsPromises.watch(filename[, options])`] [Previous: All the [caveats][] for `fs....] watch()` also apply to `fsPromises.",
          "position": 17,
          "originalSentence": "watch()` also apply to `fsPromises."
        },
        {
          "id": "sc_1502",
          "content": "[`fsPromises.writeFile(file, data[, options])`] `file` {string|Buffer|URL|FileHandle} filename or `FileHandle` `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system",
          "position": 0,
          "originalSentence": "`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_1503",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: `file` {string|Buffer|URL|FileHandle} filename or ...] **Default:** `'w'`.",
          "position": 1,
          "originalSentence": "**Default:** `'w'`."
        },
        {
          "id": "sc_1504",
          "content": "[`fsPromises.writeFile(file, data[, options])`] * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `filehandle.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `filehandle."
        },
        {
          "id": "sc_1505",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: * `flush` {boolean} If all data is successfully wr...] sync()` is used to flush the data.",
          "position": 3,
          "originalSentence": "sync()` is used to flush the data."
        },
        {
          "id": "sc_1506",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: sync()` is used to flush the data....] **Default:** `false`.",
          "position": 4,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1507",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: **Default:** `false`....] * `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 5,
          "originalSentence": "* `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "sc_1508",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: * `signal` {AbortSignal} allows aborting an in-pro...] Asynchronously writes data to a file, replacing the file if it already exists.",
          "position": 6,
          "originalSentence": "Asynchronously writes data to a file, replacing the file if it already exists."
        },
        {
          "id": "sc_1509",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: Asynchronously writes data to a file, replacing th...] `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
          "position": 7,
          "originalSentence": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object."
        },
        {
          "id": "sc_1510",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: `data` can be a string, a buffer, an {AsyncIterabl...] The `encoding` option is ignored if `data` is a buffer.",
          "position": 8,
          "originalSentence": "The `encoding` option is ignored if `data` is a buffer."
        },
        {
          "id": "sc_1511",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: The `encoding` option is ignored if `data` is a bu...] If `options` is a string, then it specifies the encoding.",
          "position": 9,
          "originalSentence": "If `options` is a string, then it specifies the encoding."
        },
        {
          "id": "sc_1512",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: If `options` is a string, then it specifies the en...] The `mode` option only affects the newly created file.",
          "position": 10,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "sc_1513",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
          "position": 11,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "sc_1514",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: open()`][] for more details....] Any specified {FileHandle} has to support writing.",
          "position": 12,
          "originalSentence": "Any specified {FileHandle} has to support writing."
        },
        {
          "id": "sc_1515",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: Any specified {FileHandle} has to support writing....] It is unsafe to use `fsPromises.",
          "position": 13,
          "originalSentence": "It is unsafe to use `fsPromises."
        },
        {
          "id": "sc_1516",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: It is unsafe to use `fsPromises....] writeFile()` multiple times on the same file without waiting for the promise to be settled.",
          "position": 14,
          "originalSentence": "writeFile()` multiple times on the same file without waiting for the promise to be settled."
        },
        {
          "id": "sc_1517",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: writeFile()` multiple times on the same file witho...] Similarly to `fsPromises.",
          "position": 15,
          "originalSentence": "Similarly to `fsPromises."
        },
        {
          "id": "sc_1518",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: Similarly to `fsPromises....] readFile` - `fsPromises.",
          "position": 16,
          "originalSentence": "readFile` - `fsPromises."
        },
        {
          "id": "sc_1519",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: readFile` - `fsPromises....] writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
          "position": 17,
          "originalSentence": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it."
        },
        {
          "id": "sc_1520",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: writeFile` is a convenience method that performs m...] For performance sensitive code consider using [`fs.",
          "position": 18,
          "originalSentence": "For performance sensitive code consider using [`fs."
        },
        {
          "id": "sc_1521",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: For performance sensitive code consider using [`fs...] createWriteStream()`][] or [`filehandle.",
          "position": 19,
          "originalSentence": "createWriteStream()`][] or [`filehandle."
        },
        {
          "id": "sc_1522",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: createWriteStream()`][] or [`filehandle....] createWriteStream()`][].",
          "position": 20,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "sc_1523",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: createWriteStream()`][]....] It is possible to use an {AbortSignal} to cancel an `fsPromises.",
          "position": 21,
          "originalSentence": "It is possible to use an {AbortSignal} to cancel an `fsPromises."
        },
        {
          "id": "sc_1524",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: It is possible to use an {AbortSignal} to cancel a...] writeFile()`.",
          "position": 22,
          "originalSentence": "writeFile()`."
        },
        {
          "id": "sc_1525",
          "content": "[`fsPromises.writeFile(file, data[, options])`] Cancelation is \"best effort\", and some amount of data is likely still to be written.",
          "position": 23,
          "originalSentence": "Cancelation is \"best effort\", and some amount of data is likely still to be written."
        },
        {
          "id": "sc_1526",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: Cancelation is \"best effort\", and some amount of d...] Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 24,
          "originalSentence": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs."
        },
        {
          "id": "sc_1527",
          "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: Aborting an ongoing request does not abort individ...] writeFile` performs.",
          "position": 25,
          "originalSentence": "writeFile` performs."
        },
        {
          "id": "sc_1559",
          "content": "[`fsPromises.constants`] Type: {Object}",
          "position": 0,
          "originalSentence": "Type: {Object}"
        },
        {
          "id": "sc_1560",
          "content": "[`fsPromises.constants`] Returns an object containing commonly used constants for file system operations.",
          "position": 1,
          "originalSentence": "Returns an object containing commonly used constants for file system operations."
        },
        {
          "id": "sc_1561",
          "content": "[`fsPromises.constants`] [Previous: Returns an object containing commonly used constan...] The object is the same as `fs.",
          "position": 2,
          "originalSentence": "The object is the same as `fs."
        },
        {
          "id": "sc_1562",
          "content": "[`fsPromises.constants`] [Previous: The object is the same as `fs....] constants`.",
          "position": 3,
          "originalSentence": "constants`."
        },
        {
          "id": "sc_1563",
          "content": "[`fsPromises.constants`] See [FS constants][] for more details.",
          "position": 4,
          "originalSentence": "See [FS constants][] for more details."
        },
        {
          "id": "sc_1574",
          "content": "[Callback API] The callback APIs perform all operations asynchronously, without blocking the event loop, then invoke a callback function upon completion or error.",
          "position": 0,
          "originalSentence": "The callback APIs perform all operations asynchronously, without blocking the event loop, then invoke a callback function upon completion or error."
        },
        {
          "id": "sc_1575",
          "content": "[Callback API] [Previous: The callback APIs perform all operations asynchron...] The callback APIs use the underlying Node.",
          "position": 1,
          "originalSentence": "The callback APIs use the underlying Node."
        },
        {
          "id": "sc_1576",
          "content": "[Callback API] [Previous: The callback APIs use the underlying Node....] js threadpool to perform file system operations off the event loop thread.",
          "position": 2,
          "originalSentence": "js threadpool to perform file system operations off the event loop thread."
        },
        {
          "id": "sc_1577",
          "content": "[Callback API] [Previous: js threadpool to perform file system operations of...] These operations are not synchronized or threadsafe.",
          "position": 3,
          "originalSentence": "These operations are not synchronized or threadsafe."
        },
        {
          "id": "sc_1578",
          "content": "[Callback API] [Previous: These operations are not synchronized or threadsaf...] Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
          "position": 4,
          "originalSentence": "Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur."
        },
        {
          "id": "sc_1613",
          "content": "[`fs.access(path[, mode], callback)`] `path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs."
        },
        {
          "id": "sc_1614",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: `path` {string|Buffer|URL} `mode` {integer} **Defa...] F_OK` `callback` {Function} * `err` {Error}",
          "position": 1,
          "originalSentence": "F_OK` `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_1615",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: F_OK` `callback` {Function} * `err` {Error}...] Tests a user's permissions for the file or directory specified by `path`.",
          "position": 2,
          "originalSentence": "Tests a user's permissions for the file or directory specified by `path`."
        },
        {
          "id": "sc_1616",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: Tests a user's permissions for the file or directo...] The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
          "position": 3,
          "originalSentence": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed."
        },
        {
          "id": "sc_1617",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: The `mode` argument is an optional integer that sp...] `mode` should be either the value `fs.",
          "position": 4,
          "originalSentence": "`mode` should be either the value `fs."
        },
        {
          "id": "sc_1618",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: `mode` should be either the value `fs....] F_OK` or a mask consisting of the bitwise OR of any of `fs.",
          "position": 5,
          "originalSentence": "F_OK` or a mask consisting of the bitwise OR of any of `fs."
        },
        {
          "id": "sc_1619",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: F_OK` or a mask consisting of the bitwise OR of an...] R_OK`, `fs.",
          "position": 6,
          "originalSentence": "R_OK`, `fs."
        },
        {
          "id": "sc_1620",
          "content": "[`fs.access(path[, mode], callback)`] W_OK`, and `fs.",
          "position": 7,
          "originalSentence": "W_OK`, and `fs."
        },
        {
          "id": "sc_1621",
          "content": "[`fs.access(path[, mode], callback)`] Check [File access constants][] for possible values of `mode`.",
          "position": 8,
          "originalSentence": "Check [File access constants][] for possible values of `mode`."
        },
        {
          "id": "sc_1622",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: Check [File access constants][] for possible value...] The final argument, `callback`, is a callback function that is invoked with a possible error argument.",
          "position": 9,
          "originalSentence": "The final argument, `callback`, is a callback function that is invoked with a possible error argument."
        },
        {
          "id": "sc_1623",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: The final argument, `callback`, is a callback func...] If any of the accessibility checks fail, the error argument will be an `Error` object.",
          "position": 10,
          "originalSentence": "If any of the accessibility checks fail, the error argument will be an `Error` object."
        },
        {
          "id": "sc_1624",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: If any of the accessibility checks fail, the error...] The following examples check if `package.",
          "position": 11,
          "originalSentence": "The following examples check if `package."
        },
        {
          "id": "sc_1625",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: The following examples check if `package....] json` exists, and if it is readable or writable.",
          "position": 12,
          "originalSentence": "json` exists, and if it is readable or writable."
        },
        {
          "id": "sc_1626",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: json` exists, and if it is readable or writable....] Do not use `fs.",
          "position": 13,
          "originalSentence": "Do not use `fs."
        },
        {
          "id": "sc_1627",
          "content": "[`fs.access(path[, mode], callback)`] access()` to check for the accessibility of a file before calling `fs.",
          "position": 14,
          "originalSentence": "access()` to check for the accessibility of a file before calling `fs."
        },
        {
          "id": "sc_1628",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: access()` to check for the accessibility of a file...] open()`, `fs.",
          "position": 15,
          "originalSentence": "open()`, `fs."
        },
        {
          "id": "sc_1629",
          "content": "[`fs.access(path[, mode], callback)`] readFile()`, or `fs.",
          "position": 16,
          "originalSentence": "readFile()`, or `fs."
        },
        {
          "id": "sc_1630",
          "content": "[`fs.access(path[, mode], callback)`] writeFile()`.",
          "position": 17,
          "originalSentence": "writeFile()`."
        },
        {
          "id": "sc_1631",
          "content": "[`fs.access(path[, mode], callback)`] Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
          "position": 18,
          "originalSentence": "Doing so introduces a race condition, since other processes may change the file's state between the two calls."
        },
        {
          "id": "sc_1632",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: Doing so introduces a race condition, since other ...] Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
          "position": 19,
          "originalSentence": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible."
        },
        {
          "id": "sc_1633",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: Instead, user code should open/read/write the file...] **write (NOT RECOMMENDED)**",
          "position": 20,
          "originalSentence": "**write (NOT RECOMMENDED)**"
        },
        {
          "id": "sc_1634",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: **write (NOT RECOMMENDED)**...] **write (RECOMMENDED)**",
          "position": 21,
          "originalSentence": "**write (RECOMMENDED)**"
        },
        {
          "id": "sc_1635",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: **write (RECOMMENDED)**...] **read (NOT RECOMMENDED)**",
          "position": 22,
          "originalSentence": "**read (NOT RECOMMENDED)**"
        },
        {
          "id": "sc_1636",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: **read (NOT RECOMMENDED)**...] **read (RECOMMENDED)**",
          "position": 23,
          "originalSentence": "**read (RECOMMENDED)**"
        },
        {
          "id": "sc_1637",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: **read (RECOMMENDED)**...] The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
          "position": 24,
          "originalSentence": "The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any."
        },
        {
          "id": "sc_1638",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: The \"not recommended\" examples above check for acc...] In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process.",
          "position": 25,
          "originalSentence": "In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process."
        },
        {
          "id": "sc_1639",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: In general, check for the accessibility of a file ...] On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory.",
          "position": 26,
          "originalSentence": "On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory."
        },
        {
          "id": "sc_1640",
          "content": "[`fs.access(path[, mode], callback)`] [Previous: On Windows, access-control policies (ACLs) on a di...] access()` function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it.",
          "position": 27,
          "originalSentence": "access()` function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it."
        },
        {
          "id": "sc_1683",
          "content": "[`fs.appendFile(path, data[, options], callback)`] `path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_1684",
          "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: `path` {string|Buffer|URL|number} filename or file...] **Default:** `'a'`.",
          "position": 1,
          "originalSentence": "**Default:** `'a'`."
        },
        {
          "id": "sc_1685",
          "content": "[`fs.appendFile(path, data[, options], callback)`] * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it."
        },
        {
          "id": "sc_1686",
          "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: * `flush` {boolean} If `true`, the underlying file...] **Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1687",
          "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error}",
          "position": 4,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_1688",
          "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: `callback` {Function} * `err` {Error}...] Asynchronously append data to a file, creating the file if it does not yet exist.",
          "position": 5,
          "originalSentence": "Asynchronously append data to a file, creating the file if it does not yet exist."
        },
        {
          "id": "sc_1689",
          "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: Asynchronously append data to a file, creating the...] `data` can be a string or a {Buffer}.",
          "position": 6,
          "originalSentence": "`data` can be a string or a {Buffer}."
        },
        {
          "id": "sc_1690",
          "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: `data` can be a string or a {Buffer}....] The `mode` option only affects the newly created file.",
          "position": 7,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "sc_1691",
          "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
          "position": 8,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "sc_1692",
          "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: open()`][] for more details....] If `options` is a string, then it specifies the encoding:",
          "position": 9,
          "originalSentence": "If `options` is a string, then it specifies the encoding:"
        },
        {
          "id": "sc_1693",
          "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: If `options` is a string, then it specifies the en...] The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
          "position": 10,
          "originalSentence": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs."
        },
        {
          "id": "sc_1694",
          "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: The `path` may be specified as a numeric file desc...] open()` or `fs.",
          "position": 11,
          "originalSentence": "open()` or `fs."
        },
        {
          "id": "sc_1695",
          "content": "[`fs.appendFile(path, data[, options], callback)`] openSync()`).",
          "position": 12,
          "originalSentence": "openSync()`)."
        },
        {
          "id": "sc_1696",
          "content": "[`fs.appendFile(path, data[, options], callback)`] The file descriptor will not be closed automatically.",
          "position": 13,
          "originalSentence": "The file descriptor will not be closed automatically."
        },
        {
          "id": "sc_1715",
          "content": "[`fs.chmod(path, mode, callback)`] `path` {string|Buffer|URL} `mode` {string|integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {string|integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_1716",
          "content": "[`fs.chmod(path, mode, callback)`] [Previous: `path` {string|Buffer|URL} `mode` {string|integer}...] Asynchronously changes the permissions of a file.",
          "position": 1,
          "originalSentence": "Asynchronously changes the permissions of a file."
        },
        {
          "id": "sc_1717",
          "content": "[`fs.chmod(path, mode, callback)`] [Previous: Asynchronously changes the permissions of a file....] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_1718",
          "content": "[`fs.chmod(path, mode, callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX chmod(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX chmod(2) documentation for more detail."
        },
        {
          "id": "sc_1738",
          "content": "[File modes] The `mode` argument used in both the `fs.",
          "position": 0,
          "originalSentence": "The `mode` argument used in both the `fs."
        },
        {
          "id": "sc_1739",
          "content": "[File modes] [Previous: The `mode` argument used in both the `fs....] chmod()` and `fs.",
          "position": 1,
          "originalSentence": "chmod()` and `fs."
        },
        {
          "id": "sc_1740",
          "content": "[File modes] chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants:",
          "position": 2,
          "originalSentence": "chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants:"
        },
        {
          "id": "sc_1741",
          "content": "[File modes] [Previous: chmodSync()` methods is a numeric bitmask created ...] An easier method of constructing the `mode` is to use a sequence of three octal digits (e.",
          "position": 3,
          "originalSentence": "An easier method of constructing the `mode` is to use a sequence of three octal digits (e."
        },
        {
          "id": "sc_1742",
          "content": "[File modes] [Previous: An easier method of constructing the `mode` is to ...] The left-most digit (`7` in the example), specifies the permissions for the file owner.",
          "position": 4,
          "originalSentence": "The left-most digit (`7` in the example), specifies the permissions for the file owner."
        },
        {
          "id": "sc_1743",
          "content": "[File modes] [Previous: The left-most digit (`7` in the example), specifie...] The middle digit (`6` in the example), specifies permissions for the group.",
          "position": 5,
          "originalSentence": "The middle digit (`6` in the example), specifies permissions for the group."
        },
        {
          "id": "sc_1744",
          "content": "[File modes] [Previous: The middle digit (`6` in the example), specifies p...] The right-most digit (`5` in the example), specifies the permissions for others.",
          "position": 6,
          "originalSentence": "The right-most digit (`5` in the example), specifies the permissions for others."
        },
        {
          "id": "sc_1745",
          "content": "[File modes] [Previous: The right-most digit (`5` in the example), specifi...] For example, the octal value `0o765` means:",
          "position": 7,
          "originalSentence": "For example, the octal value `0o765` means:"
        },
        {
          "id": "sc_1746",
          "content": "[File modes] [Previous: For example, the octal value `0o765` means:...] The owner may read, write, and execute the file.",
          "position": 8,
          "originalSentence": "The owner may read, write, and execute the file."
        },
        {
          "id": "sc_1747",
          "content": "[File modes] [Previous: The owner may read, write, and execute the file....] The group may read and write the file.",
          "position": 9,
          "originalSentence": "The group may read and write the file."
        },
        {
          "id": "sc_1748",
          "content": "[File modes] [Previous: The group may read and write the file....] Others may read and execute the file.",
          "position": 10,
          "originalSentence": "Others may read and execute the file."
        },
        {
          "id": "sc_1749",
          "content": "[File modes] [Previous: Others may read and execute the file....] When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently.",
          "position": 11,
          "originalSentence": "When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently."
        },
        {
          "id": "sc_1750",
          "content": "[File modes] [Previous: When using raw numbers where file modes are expect...] Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs.",
          "position": 12,
          "originalSentence": "Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs."
        },
        {
          "id": "sc_1751",
          "content": "[File modes] [Previous: Therefore constants like `S_ISVTX`, `S_ISGID`, or ...] constants`.",
          "position": 13,
          "originalSentence": "constants`."
        },
        {
          "id": "sc_1752",
          "content": "[File modes] Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented.",
          "position": 14,
          "originalSentence": "Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented."
        },
        {
          "id": "sc_1772",
          "content": "[`fs.chown(path, uid, gid, callback)`] `path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_1773",
          "content": "[`fs.chown(path, uid, gid, callback)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} `gid` {...] Asynchronously changes owner and group of a file.",
          "position": 1,
          "originalSentence": "Asynchronously changes owner and group of a file."
        },
        {
          "id": "sc_1774",
          "content": "[`fs.chown(path, uid, gid, callback)`] [Previous: Asynchronously changes owner and group of a file....] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_1775",
          "content": "[`fs.chown(path, uid, gid, callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX chown(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX chown(2) documentation for more detail."
        },
        {
          "id": "sc_1786",
          "content": "[`fs.close(fd[, callback])`] `fd` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_1787",
          "content": "[`fs.close(fd[, callback])`] [Previous: `fd` {integer} `callback` {Function} * `err` {Erro...] Closes the file descriptor.",
          "position": 1,
          "originalSentence": "Closes the file descriptor."
        },
        {
          "id": "sc_1788",
          "content": "[`fs.close(fd[, callback])`] [Previous: Closes the file descriptor....] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_1789",
          "content": "[`fs.close(fd[, callback])`] [Previous: No arguments other than a possible exception are g...] Calling `fs.",
          "position": 3,
          "originalSentence": "Calling `fs."
        },
        {
          "id": "sc_1790",
          "content": "[`fs.close(fd[, callback])`] close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
          "position": 4,
          "originalSentence": "close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior."
        },
        {
          "id": "sc_1791",
          "content": "[`fs.close(fd[, callback])`] [Previous: close()` on any file descriptor (`fd`) that is cur...] See the POSIX close(2) documentation for more detail.",
          "position": 5,
          "originalSentence": "See the POSIX close(2) documentation for more detail."
        },
        {
          "id": "sc_1816",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] `src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation.",
          "position": 0,
          "originalSentence": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation."
        },
        {
          "id": "sc_1817",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: `src` {string|Buffer|URL} source filename to copy ...] **Default:** `0`.",
          "position": 1,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "sc_1818",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] `callback` {Function} * `err` {Error}",
          "position": 2,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_1819",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: `callback` {Function} * `err` {Error}...] Asynchronously copies `src` to `dest`.",
          "position": 3,
          "originalSentence": "Asynchronously copies `src` to `dest`."
        },
        {
          "id": "sc_1820",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: Asynchronously copies `src` to `dest`....] By default, `dest` is overwritten if it already exists.",
          "position": 4,
          "originalSentence": "By default, `dest` is overwritten if it already exists."
        },
        {
          "id": "sc_1821",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: By default, `dest` is overwritten if it already ex...] No arguments other than a possible exception are given to the callback function.",
          "position": 5,
          "originalSentence": "No arguments other than a possible exception are given to the callback function."
        },
        {
          "id": "sc_1822",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: No arguments other than a possible exception are g...] js makes no guarantees about the atomicity of the copy operation.",
          "position": 6,
          "originalSentence": "js makes no guarantees about the atomicity of the copy operation."
        },
        {
          "id": "sc_1823",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: js makes no guarantees about the atomicity of the ...] If an error occurs after the destination file has been opened for writing, Node.",
          "position": 7,
          "originalSentence": "If an error occurs after the destination file has been opened for writing, Node."
        },
        {
          "id": "sc_1824",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: If an error occurs after the destination file has ...] js will attempt to remove the destination.",
          "position": 8,
          "originalSentence": "js will attempt to remove the destination."
        },
        {
          "id": "sc_1825",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: js will attempt to remove the destination....] `mode` is an optional integer that specifies the behavior of the copy operation.",
          "position": 9,
          "originalSentence": "`mode` is an optional integer that specifies the behavior of the copy operation."
        },
        {
          "id": "sc_1826",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: `mode` is an optional integer that specifies the b...] It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
          "position": 10,
          "originalSentence": "It is possible to create a mask consisting of the bitwise OR of two or more values (e."
        },
        {
          "id": "sc_1827",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: It is possible to create a mask consisting of the ...] COPYFILE_EXCL | fs.",
          "position": 11,
          "originalSentence": "COPYFILE_EXCL | fs."
        },
        {
          "id": "sc_1828",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] COPYFILE_FICLONE`).",
          "position": 12,
          "originalSentence": "COPYFILE_FICLONE`)."
        },
        {
          "id": "sc_1829",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
          "position": 13,
          "originalSentence": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists."
        },
        {
          "id": "sc_1830",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: COPYFILE_EXCL`: The copy operation will fail if `d...] COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 14,
          "originalSentence": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "sc_1831",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: COPYFILE_FICLONE`: The copy operation will attempt...] If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
          "position": 15,
          "originalSentence": "If the platform does not support copy-on-write, then a fallback copy mechanism is used."
        },
        {
          "id": "sc_1832",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: If the platform does not support copy-on-write, th...] COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 16,
          "originalSentence": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "sc_1833",
          "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: COPYFILE_FICLONE_FORCE`: The copy operation will a...] If the platform does not support copy-on-write, then the operation will fail.",
          "position": 17,
          "originalSentence": "If the platform does not support copy-on-write, then the operation will fail."
        },
        {
          "id": "sc_1880",
          "content": "[`fs.cp(src, dest[, options], callback)`] `src` {string|URL} source path to copy.",
          "position": 0,
          "originalSentence": "`src` {string|URL} source path to copy."
        },
        {
          "id": "sc_1881",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: `src` {string|URL} source path to copy....] `dest` {string|URL} destination path to copy to.",
          "position": 1,
          "originalSentence": "`dest` {string|URL} destination path to copy to."
        },
        {
          "id": "sc_1882",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: `dest` {string|URL} destination path to copy to....] `options` {Object} * `dereference` {boolean} dereference symlinks.",
          "position": 2,
          "originalSentence": "`options` {Object} * `dereference` {boolean} dereference symlinks."
        },
        {
          "id": "sc_1883",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: `options` {Object} * `dereference` {boolean} deref...] **Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1884",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: **Default:** `false`....] * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
          "position": 4,
          "originalSentence": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error."
        },
        {
          "id": "sc_1885",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `errorOnExist` {boolean} when `force` is `false`...] **Default:** `false`.",
          "position": 5,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1886",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: **Default:** `false`....] * `filter` {Function} Function to filter copied files/directories.",
          "position": 6,
          "originalSentence": "* `filter` {Function} Function to filter copied files/directories."
        },
        {
          "id": "sc_1887",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `filter` {Function} Function to filter copied fi...] Return `true` to copy the item, `false` to ignore it.",
          "position": 7,
          "originalSentence": "Return `true` to copy the item, `false` to ignore it."
        },
        {
          "id": "sc_1888",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: Return `true` to copy the item, `false` to ignore ...] When ignoring a directory, all of its contents will be skipped as well.",
          "position": 8,
          "originalSentence": "When ignoring a directory, all of its contents will be skipped as well."
        },
        {
          "id": "sc_1889",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: When ignoring a directory, all of its contents wil...] Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
          "position": 9,
          "originalSentence": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`."
        },
        {
          "id": "sc_1890",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: Can also return a `Promise` that resolves to `true...] * `src` {string} source path to copy.",
          "position": 10,
          "originalSentence": "* `src` {string} source path to copy."
        },
        {
          "id": "sc_1891",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `src` {string} source path to copy....] * `dest` {string} destination path to copy to.",
          "position": 11,
          "originalSentence": "* `dest` {string} destination path to copy to."
        },
        {
          "id": "sc_1892",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `dest` {string} destination path to copy to....] * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
          "position": 12,
          "originalSentence": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value."
        },
        {
          "id": "sc_1893",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * Returns: {boolean|Promise} A value that is coerc...] * `force` {boolean} overwrite existing file or directory.",
          "position": 13,
          "originalSentence": "* `force` {boolean} overwrite existing file or directory."
        },
        {
          "id": "sc_1894",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `force` {boolean} overwrite existing file or dir...] The copy operation will ignore errors if you set this to false and the destination exists.",
          "position": 14,
          "originalSentence": "The copy operation will ignore errors if you set this to false and the destination exists."
        },
        {
          "id": "sc_1895",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: The copy operation will ignore errors if you set t...] Use the `errorOnExist` option to change this behavior.",
          "position": 15,
          "originalSentence": "Use the `errorOnExist` option to change this behavior."
        },
        {
          "id": "sc_1896",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: Use the `errorOnExist` option to change this behav...] **Default:** `true`.",
          "position": 16,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "sc_1897",
          "content": "[`fs.cp(src, dest[, options], callback)`] * `mode` {integer} modifiers for copy operation.",
          "position": 17,
          "originalSentence": "* `mode` {integer} modifiers for copy operation."
        },
        {
          "id": "sc_1898",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `mode` {integer} modifiers for copy operation....] **Default:** `0`.",
          "position": 18,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "sc_1899",
          "content": "[`fs.cp(src, dest[, options], callback)`] See `mode` flag of [`fs.",
          "position": 19,
          "originalSentence": "See `mode` flag of [`fs."
        },
        {
          "id": "sc_1900",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: See `mode` flag of [`fs....] copyFile()`][].",
          "position": 20,
          "originalSentence": "copyFile()`][]."
        },
        {
          "id": "sc_1901",
          "content": "[`fs.cp(src, dest[, options], callback)`] * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
          "position": 21,
          "originalSentence": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved."
        },
        {
          "id": "sc_1902",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `preserveTimestamps` {boolean} When `true` times...] **Default:** `false`.",
          "position": 22,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_1903",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: **Default:** `false`....] * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
          "position": 23,
          "originalSentence": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped."
        },
        {
          "id": "sc_1904",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `recursive` {boolean} copy directories recursive...] **Default:** `false` `callback` {Function} * `err` {Error}",
          "position": 24,
          "originalSentence": "**Default:** `false` `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_1905",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: **Default:** `false` `callback` {Function} * `err`...] Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
          "position": 25,
          "originalSentence": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files."
        },
        {
          "id": "sc_1906",
          "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: Asynchronously copies the entire directory structu...] When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 26,
          "originalSentence": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`."
        },
        {
          "id": "sc_1962",
          "content": "[`fs.createReadStream(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_1963",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] **Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "sc_1964",
          "content": "[`fs.createReadStream(path[, options])`] * `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer}",
          "position": 2,
          "originalSentence": "* `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:** `null` Returns: {fs."
        },
        {
          "id": "sc_1965",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: * `encoding` {string} **Default:** `null` * `fd` {...] ReadStream}",
          "position": 3,
          "originalSentence": "ReadStream}"
        },
        {
          "id": "sc_1966",
          "content": "[`fs.createReadStream(path[, options])`] `options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file.",
          "position": 4,
          "originalSentence": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file."
        },
        {
          "id": "sc_1967",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: `options` can include `start` and `end` values to ...] Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
          "position": 5,
          "originalSentence": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number."
        },
        {
          "id": "sc_1968",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: Both `start` and `end` are inclusive and start cou...] MAX_SAFE_INTEGER`][]] range.",
          "position": 6,
          "originalSentence": "MAX_SAFE_INTEGER`][]] range."
        },
        {
          "id": "sc_1969",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: MAX_SAFE_INTEGER`][]] range....] If `fd` is specified and `start` is omitted or `undefined`, `fs.",
          "position": 7,
          "originalSentence": "If `fd` is specified and `start` is omitted or `undefined`, `fs."
        },
        {
          "id": "sc_1970",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: If `fd` is specified and `start` is omitted or `un...] createReadStream()` reads sequentially from the current file position.",
          "position": 8,
          "originalSentence": "createReadStream()` reads sequentially from the current file position."
        },
        {
          "id": "sc_1971",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: createReadStream()` reads sequentially from the cu...] The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 9,
          "originalSentence": "The `encoding` can be any one of those accepted by {Buffer}."
        },
        {
          "id": "sc_1972",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: The `encoding` can be any one of those accepted by...] If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor.",
          "position": 10,
          "originalSentence": "If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor."
        },
        {
          "id": "sc_1973",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: If `fd` is specified, `ReadStream` will ignore the...] This means that no `'open'` event will be emitted.",
          "position": 11,
          "originalSentence": "This means that no `'open'` event will be emitted."
        },
        {
          "id": "sc_1974",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: This means that no `'open'` event will be emitted....] `fd` should be blocking; non-blocking `fd`s should be passed to {net.",
          "position": 12,
          "originalSentence": "`fd` should be blocking; non-blocking `fd`s should be passed to {net."
        },
        {
          "id": "sc_1975",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: `fd` should be blocking; non-blocking `fd`s should...] If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
          "position": 13,
          "originalSentence": "If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available."
        },
        {
          "id": "sc_1976",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: If `fd` points to a character device that only sup...] This can prevent the process from exiting and the stream from closing naturally.",
          "position": 14,
          "originalSentence": "This can prevent the process from exiting and the stream from closing naturally."
        },
        {
          "id": "sc_1977",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: This can prevent the process from exiting and the ...] By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 15,
          "originalSentence": "By default, the stream will emit a `'close'` event after it has been destroyed."
        },
        {
          "id": "sc_1978",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: By default, the stream will emit a `'close'` event...] Set the `emitClose` option to `false` to change this behavior.",
          "position": 16,
          "originalSentence": "Set the `emitClose` option to `false` to change this behavior."
        },
        {
          "id": "sc_1979",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: Set the `emitClose` option to `false` to change th...] By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`.",
          "position": 17,
          "originalSentence": "By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`."
        },
        {
          "id": "sc_1980",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: By providing the `fs` option, it is possible to ov...] When providing the `fs` option, an override for `read` is required.",
          "position": 18,
          "originalSentence": "When providing the `fs` option, an override for `read` is required."
        },
        {
          "id": "sc_1981",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: When providing the `fs` option, an override for `r...] If no `fd` is provided, an override for `open` is also required.",
          "position": 19,
          "originalSentence": "If no `fd` is provided, an override for `open` is also required."
        },
        {
          "id": "sc_1982",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: If no `fd` is provided, an override for `open` is ...] If `autoClose` is `true`, an override for `close` is also required.",
          "position": 20,
          "originalSentence": "If `autoClose` is `true`, an override for `close` is also required."
        },
        {
          "id": "sc_1983",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: If `autoClose` is `true`, an override for `close` ...] If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 21,
          "originalSentence": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error."
        },
        {
          "id": "sc_1984",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: If `autoClose` is false, then the file descriptor ...] It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 22,
          "originalSentence": "It is the application's responsibility to close it and make sure there's no file descriptor leak."
        },
        {
          "id": "sc_1985",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: It is the application's responsibility to close it...] If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
          "position": 23,
          "originalSentence": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically."
        },
        {
          "id": "sc_1986",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: If `autoClose` is set to true (default behavior), ...] `mode` sets the file mode (permission and sticky bits), but only if the file was created.",
          "position": 24,
          "originalSentence": "`mode` sets the file mode (permission and sticky bits), but only if the file was created."
        },
        {
          "id": "sc_1987",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: `mode` sets the file mode (permission and sticky b...] An example to read the last 10 bytes of a file which is 100 bytes long:",
          "position": 25,
          "originalSentence": "An example to read the last 10 bytes of a file which is 100 bytes long:"
        },
        {
          "id": "sc_1988",
          "content": "[`fs.createReadStream(path[, options])`] [Previous: An example to read the last 10 bytes of a file whi...] If `options` is a string, then it specifies the encoding.",
          "position": 26,
          "originalSentence": "If `options` is a string, then it specifies the encoding."
        },
        {
          "id": "sc_2042",
          "content": "[`fs.createWriteStream(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_2043",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] **Default:** `'w'`.",
          "position": 1,
          "originalSentence": "**Default:** `'w'`."
        },
        {
          "id": "sc_2044",
          "content": "[`fs.createWriteStream(path[, options])`] * `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `fs` {Object|null} **Default:** `null` * `signal`",
          "position": 2,
          "originalSentence": "* `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:** `null` * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it."
        },
        {
          "id": "sc_2045",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: * `encoding` {string} **Default:** `'utf8'` * `fd`...] **Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_2046",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: **Default:** `false`....] Returns: {fs.",
          "position": 4,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_2047",
          "content": "[`fs.createWriteStream(path[, options])`] WriteStream}",
          "position": 5,
          "originalSentence": "WriteStream}"
        },
        {
          "id": "sc_2048",
          "content": "[`fs.createWriteStream(path[, options])`] `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
          "position": 6,
          "originalSentence": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number."
        },
        {
          "id": "sc_2049",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: `options` may also include a `start` option to all...] MAX_SAFE_INTEGER`][]] range.",
          "position": 7,
          "originalSentence": "MAX_SAFE_INTEGER`][]] range."
        },
        {
          "id": "sc_2050",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: MAX_SAFE_INTEGER`][]] range....] Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`.",
          "position": 8,
          "originalSentence": "Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`."
        },
        {
          "id": "sc_2051",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: Modifying a file rather than replacing it may requ...] The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 9,
          "originalSentence": "The `encoding` can be any one of those accepted by {Buffer}."
        },
        {
          "id": "sc_2052",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: The `encoding` can be any one of those accepted by...] If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
          "position": 10,
          "originalSentence": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically."
        },
        {
          "id": "sc_2053",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: If `autoClose` is set to true (default behavior) o...] If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 11,
          "originalSentence": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error."
        },
        {
          "id": "sc_2054",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: If `autoClose` is false, then the file descriptor ...] It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 12,
          "originalSentence": "It is the application's responsibility to close it and make sure there's no file descriptor leak."
        },
        {
          "id": "sc_2055",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: It is the application's responsibility to close it...] By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 13,
          "originalSentence": "By default, the stream will emit a `'close'` event after it has been destroyed."
        },
        {
          "id": "sc_2056",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: By default, the stream will emit a `'close'` event...] Set the `emitClose` option to `false` to change this behavior.",
          "position": 14,
          "originalSentence": "Set the `emitClose` option to `false` to change this behavior."
        },
        {
          "id": "sc_2057",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: Set the `emitClose` option to `false` to change th...] By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`.",
          "position": 15,
          "originalSentence": "By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`."
        },
        {
          "id": "sc_2058",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: By providing the `fs` option it is possible to ove...] Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled.",
          "position": 16,
          "originalSentence": "Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled."
        },
        {
          "id": "sc_2059",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: Overriding `write()` without `writev()` can reduce...] When providing the `fs` option, overrides for at least one of `write` and `writev` are required.",
          "position": 17,
          "originalSentence": "When providing the `fs` option, overrides for at least one of `write` and `writev` are required."
        },
        {
          "id": "sc_2060",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: When providing the `fs` option, overrides for at l...] If no `fd` option is supplied, an override for `open` is also required.",
          "position": 18,
          "originalSentence": "If no `fd` option is supplied, an override for `open` is also required."
        },
        {
          "id": "sc_2061",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: If no `fd` option is supplied, an override for `op...] If `autoClose` is `true`, an override for `close` is also required.",
          "position": 19,
          "originalSentence": "If `autoClose` is `true`, an override for `close` is also required."
        },
        {
          "id": "sc_2062",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: If `autoClose` is `true`, an override for `close` ...] ReadStream}, if `fd` is specified, {fs.",
          "position": 20,
          "originalSentence": "ReadStream}, if `fd` is specified, {fs."
        },
        {
          "id": "sc_2063",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: ReadStream}, if `fd` is specified, {fs....] WriteStream} will ignore the `path` argument and will use the specified file descriptor.",
          "position": 21,
          "originalSentence": "WriteStream} will ignore the `path` argument and will use the specified file descriptor."
        },
        {
          "id": "sc_2064",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: WriteStream} will ignore the `path` argument and w...] This means that no `'open'` event will be emitted.",
          "position": 22,
          "originalSentence": "This means that no `'open'` event will be emitted."
        },
        {
          "id": "sc_2065",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: This means that no `'open'` event will be emitted....] `fd` should be blocking; non-blocking `fd`s should be passed to {net.",
          "position": 23,
          "originalSentence": "`fd` should be blocking; non-blocking `fd`s should be passed to {net."
        },
        {
          "id": "sc_2066",
          "content": "[`fs.createWriteStream(path[, options])`] [Previous: `fd` should be blocking; non-blocking `fd`s should...] If `options` is a string, then it specifies the encoding.",
          "position": 24,
          "originalSentence": "If `options` is a string, then it specifies the encoding."
        },
        {
          "id": "sc_2117",
          "content": "[`fs.exists(path, callback)`] `path` {string|Buffer|URL} `callback` {Function} * `exists` {boolean}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `callback` {Function} * `exists` {boolean}"
        },
        {
          "id": "sc_2118",
          "content": "[`fs.exists(path, callback)`] [Previous: `path` {string|Buffer|URL} `callback` {Function} *...] Test whether or not the element at the given `path` exists by checking with the file system.",
          "position": 1,
          "originalSentence": "Test whether or not the element at the given `path` exists by checking with the file system."
        },
        {
          "id": "sc_2119",
          "content": "[`fs.exists(path, callback)`] [Previous: Test whether or not the element at the given `path...] Then call the `callback` argument with either true or false:",
          "position": 2,
          "originalSentence": "Then call the `callback` argument with either true or false:"
        },
        {
          "id": "sc_2120",
          "content": "[`fs.exists(path, callback)`] [Previous: Then call the `callback` argument with either true...] **The parameters for this callback are not consistent with other Node.",
          "position": 3,
          "originalSentence": "**The parameters for this callback are not consistent with other Node."
        },
        {
          "id": "sc_2121",
          "content": "[`fs.exists(path, callback)`] [Previous: **The parameters for this callback are not consist...] js callbacks.",
          "position": 4,
          "originalSentence": "js callbacks."
        },
        {
          "id": "sc_2122",
          "content": "[`fs.exists(path, callback)`] ** Normally, the first parameter to a Node.",
          "position": 5,
          "originalSentence": "** Normally, the first parameter to a Node."
        },
        {
          "id": "sc_2123",
          "content": "[`fs.exists(path, callback)`] [Previous: ** Normally, the first parameter to a Node....] js callback is an `err` parameter, optionally followed by other parameters.",
          "position": 6,
          "originalSentence": "js callback is an `err` parameter, optionally followed by other parameters."
        },
        {
          "id": "sc_2124",
          "content": "[`fs.exists(path, callback)`] [Previous: js callback is an `err` parameter, optionally foll...] exists()` callback has only one boolean parameter.",
          "position": 7,
          "originalSentence": "exists()` callback has only one boolean parameter."
        },
        {
          "id": "sc_2125",
          "content": "[`fs.exists(path, callback)`] [Previous: exists()` callback has only one boolean parameter....] This is one reason `fs.",
          "position": 8,
          "originalSentence": "This is one reason `fs."
        },
        {
          "id": "sc_2126",
          "content": "[`fs.exists(path, callback)`] [Previous: This is one reason `fs....] access()` is recommended instead of `fs.",
          "position": 9,
          "originalSentence": "access()` is recommended instead of `fs."
        },
        {
          "id": "sc_2127",
          "content": "[`fs.exists(path, callback)`] [Previous: access()` is recommended instead of `fs....] If `path` is a symbolic link, it is followed.",
          "position": 10,
          "originalSentence": "If `path` is a symbolic link, it is followed."
        },
        {
          "id": "sc_2128",
          "content": "[`fs.exists(path, callback)`] [Previous: If `path` is a symbolic link, it is followed....] Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`.",
          "position": 11,
          "originalSentence": "Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`."
        },
        {
          "id": "sc_2129",
          "content": "[`fs.exists(path, callback)`] [Previous: Thus, if `path` exists but points to a non-existen...] exists()` to check for the existence of a file before calling `fs.",
          "position": 12,
          "originalSentence": "exists()` to check for the existence of a file before calling `fs."
        },
        {
          "id": "sc_2130",
          "content": "[`fs.exists(path, callback)`] [Previous: exists()` to check for the existence of a file bef...] open()`, `fs.",
          "position": 13,
          "originalSentence": "open()`, `fs."
        },
        {
          "id": "sc_2131",
          "content": "[`fs.exists(path, callback)`] readFile()`, or `fs.",
          "position": 14,
          "originalSentence": "readFile()`, or `fs."
        },
        {
          "id": "sc_2132",
          "content": "[`fs.exists(path, callback)`] writeFile()` is not recommended.",
          "position": 15,
          "originalSentence": "writeFile()` is not recommended."
        },
        {
          "id": "sc_2133",
          "content": "[`fs.exists(path, callback)`] [Previous: writeFile()` is not recommended....] Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
          "position": 16,
          "originalSentence": "Doing so introduces a race condition, since other processes may change the file's state between the two calls."
        },
        {
          "id": "sc_2134",
          "content": "[`fs.exists(path, callback)`] [Previous: Doing so introduces a race condition, since other ...] Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.",
          "position": 17,
          "originalSentence": "Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist."
        },
        {
          "id": "sc_2135",
          "content": "[`fs.exists(path, callback)`] [Previous: Instead, user code should open/read/write the file...] **write (NOT RECOMMENDED)**",
          "position": 18,
          "originalSentence": "**write (NOT RECOMMENDED)**"
        },
        {
          "id": "sc_2136",
          "content": "[`fs.exists(path, callback)`] [Previous: **write (NOT RECOMMENDED)**...] **write (RECOMMENDED)**",
          "position": 19,
          "originalSentence": "**write (RECOMMENDED)**"
        },
        {
          "id": "sc_2137",
          "content": "[`fs.exists(path, callback)`] [Previous: **write (RECOMMENDED)**...] **read (NOT RECOMMENDED)**",
          "position": 20,
          "originalSentence": "**read (NOT RECOMMENDED)**"
        },
        {
          "id": "sc_2138",
          "content": "[`fs.exists(path, callback)`] [Previous: **read (NOT RECOMMENDED)**...] **read (RECOMMENDED)**",
          "position": 21,
          "originalSentence": "**read (RECOMMENDED)**"
        },
        {
          "id": "sc_2139",
          "content": "[`fs.exists(path, callback)`] [Previous: **read (RECOMMENDED)**...] The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
          "position": 22,
          "originalSentence": "The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any."
        },
        {
          "id": "sc_2140",
          "content": "[`fs.exists(path, callback)`] [Previous: The \"not recommended\" examples above check for exi...] In general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another process.",
          "position": 23,
          "originalSentence": "In general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another process."
        },
        {
          "id": "sc_2169",
          "content": "[`fs.fchmod(fd, mode, callback)`] `fd` {integer} `mode` {string|integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `mode` {string|integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2170",
          "content": "[`fs.fchmod(fd, mode, callback)`] [Previous: `fd` {integer} `mode` {string|integer} `callback` ...] Sets the permissions on the file.",
          "position": 1,
          "originalSentence": "Sets the permissions on the file."
        },
        {
          "id": "sc_2171",
          "content": "[`fs.fchmod(fd, mode, callback)`] [Previous: Sets the permissions on the file....] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2172",
          "content": "[`fs.fchmod(fd, mode, callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX fchmod(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX fchmod(2) documentation for more detail."
        },
        {
          "id": "sc_2181",
          "content": "[`fs.fchown(fd, uid, gid, callback)`] `fd` {integer} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2182",
          "content": "[`fs.fchown(fd, uid, gid, callback)`] [Previous: `fd` {integer} `uid` {integer} `gid` {integer} `ca...] Sets the owner of the file.",
          "position": 1,
          "originalSentence": "Sets the owner of the file."
        },
        {
          "id": "sc_2183",
          "content": "[`fs.fchown(fd, uid, gid, callback)`] [Previous: Sets the owner of the file....] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2184",
          "content": "[`fs.fchown(fd, uid, gid, callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX fchown(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX fchown(2) documentation for more detail."
        },
        {
          "id": "sc_2193",
          "content": "[`fs.fdatasync(fd, callback)`] `fd` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2194",
          "content": "[`fs.fdatasync(fd, callback)`] [Previous: `fd` {integer} `callback` {Function} * `err` {Erro...] Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
          "position": 1,
          "originalSentence": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state."
        },
        {
          "id": "sc_2195",
          "content": "[`fs.fdatasync(fd, callback)`] [Previous: Forces all currently queued I/O operations associa...] Refer to the POSIX fdatasync(2) documentation for details.",
          "position": 2,
          "originalSentence": "Refer to the POSIX fdatasync(2) documentation for details."
        },
        {
          "id": "sc_2196",
          "content": "[`fs.fdatasync(fd, callback)`] [Previous: Refer to the POSIX fdatasync(2) documentation for ...] No arguments other than a possible exception are given to the completion callback.",
          "position": 3,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2208",
          "content": "[`fs.fstat(fd[, options], callback)`] `fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_2209",
          "content": "[`fs.fstat(fd[, options], callback)`] [Previous: `fd` {integer} `options` {Object} * `bigint` {bool...] Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "sc_2210",
          "content": "[`fs.fstat(fd[, options], callback)`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_2211",
          "content": "[`fs.fstat(fd[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error} * `stats` {fs."
        },
        {
          "id": "sc_2212",
          "content": "[`fs.fstat(fd[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `stats` {f...] Invokes the callback with the {fs.",
          "position": 4,
          "originalSentence": "Invokes the callback with the {fs."
        },
        {
          "id": "sc_2213",
          "content": "[`fs.fstat(fd[, options], callback)`] [Previous: Invokes the callback with the {fs....] Stats} for the file descriptor.",
          "position": 5,
          "originalSentence": "Stats} for the file descriptor."
        },
        {
          "id": "sc_2214",
          "content": "[`fs.fstat(fd[, options], callback)`] [Previous: Stats} for the file descriptor....] See the POSIX fstat(2) documentation for more detail.",
          "position": 6,
          "originalSentence": "See the POSIX fstat(2) documentation for more detail."
        },
        {
          "id": "sc_2227",
          "content": "[`fs.fsync(fd, callback)`] `fd` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2228",
          "content": "[`fs.fsync(fd, callback)`] [Previous: `fd` {integer} `callback` {Function} * `err` {Erro...] Request that all data for the open file descriptor is flushed to the storage device.",
          "position": 1,
          "originalSentence": "Request that all data for the open file descriptor is flushed to the storage device."
        },
        {
          "id": "sc_2229",
          "content": "[`fs.fsync(fd, callback)`] [Previous: Request that all data for the open file descriptor...] The specific implementation is operating system and device specific.",
          "position": 2,
          "originalSentence": "The specific implementation is operating system and device specific."
        },
        {
          "id": "sc_2230",
          "content": "[`fs.fsync(fd, callback)`] [Previous: The specific implementation is operating system an...] Refer to the POSIX fsync(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "Refer to the POSIX fsync(2) documentation for more detail."
        },
        {
          "id": "sc_2231",
          "content": "[`fs.fsync(fd, callback)`] [Previous: Refer to the POSIX fsync(2) documentation for more...] No arguments other than a possible exception are given to the completion callback.",
          "position": 4,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2245",
          "content": "[`fs.ftruncate(fd[, len], callback)`] `fd` {integer} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2246",
          "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: `fd` {integer} `len` {integer} **Default:** `0` `c...] Truncates the file descriptor.",
          "position": 1,
          "originalSentence": "Truncates the file descriptor."
        },
        {
          "id": "sc_2247",
          "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: Truncates the file descriptor....] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2248",
          "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX ftruncate(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX ftruncate(2) documentation for more detail."
        },
        {
          "id": "sc_2249",
          "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: See the POSIX ftruncate(2) documentation for more ...] If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
          "position": 4,
          "originalSentence": "If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file."
        },
        {
          "id": "sc_2250",
          "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: If the file referred to by the file descriptor was...] For example, the following program retains only the first four bytes of the file:",
          "position": 5,
          "originalSentence": "For example, the following program retains only the first four bytes of the file:"
        },
        {
          "id": "sc_2251",
          "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: For example, the following program retains only th...] If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
          "position": 6,
          "originalSentence": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):"
        },
        {
          "id": "sc_2252",
          "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: If the file previously was shorter than `len` byte...] If `len` is negative then `0` will be used.",
          "position": 7,
          "originalSentence": "If `len` is negative then `0` will be used."
        },
        {
          "id": "sc_2264",
          "content": "[`fs.futimes(fd, atime, mtime, callback)`] `fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2265",
          "content": "[`fs.futimes(fd, atime, mtime, callback)`] [Previous: `fd` {integer} `atime` {number|string|Date} `mtime...] Change the file system timestamps of the object referenced by the supplied file descriptor.",
          "position": 1,
          "originalSentence": "Change the file system timestamps of the object referenced by the supplied file descriptor."
        },
        {
          "id": "sc_2266",
          "content": "[`fs.futimes(fd, atime, mtime, callback)`] [Previous: Change the file system timestamps of the object re...] utimes()`][].",
          "position": 2,
          "originalSentence": "utimes()`][]."
        },
        {
          "id": "sc_2278",
          "content": "[`fs.glob(pattern[, options], callback)`] `pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
          "position": 0,
          "originalSentence": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory."
        },
        {
          "id": "sc_2279",
          "content": "[`fs.glob(pattern[, options], callback)`] [Previous: `pattern` {string|string\\[]} `options` {Object} * ...] **Default:** `process.",
          "position": 1,
          "originalSentence": "**Default:** `process."
        },
        {
          "id": "sc_2280",
          "content": "[`fs.glob(pattern[, options], callback)`] [Previous: **Default:** `process....] cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
          "position": 2,
          "originalSentence": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded."
        },
        {
          "id": "sc_2281",
          "content": "[`fs.glob(pattern[, options], callback)`] [Previous: cwd()` * `exclude` {Function|string\\[]} Function t...] If a function is provided, return `true` to exclude the item, `false` to include it.",
          "position": 3,
          "originalSentence": "If a function is provided, return `true` to exclude the item, `false` to include it."
        },
        {
          "id": "sc_2282",
          "content": "[`fs.glob(pattern[, options], callback)`] [Previous: If a function is provided, return `true` to exclud...] **Default:** `undefined`.",
          "position": 4,
          "originalSentence": "**Default:** `undefined`."
        },
        {
          "id": "sc_2283",
          "content": "[`fs.glob(pattern[, options], callback)`] [Previous: **Default:** `undefined`....] * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
          "position": 5,
          "originalSentence": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise."
        },
        {
          "id": "sc_2284",
          "content": "[`fs.glob(pattern[, options], callback)`] [Previous: * `withFileTypes` {boolean} `true` if the glob sho...] **Default:** `false`.",
          "position": 6,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_2285",
          "content": "[`fs.glob(pattern[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} Retrieves the files matching the specified pattern.",
          "position": 7,
          "originalSentence": "`callback` {Function} * `err` {Error} Retrieves the files matching the specified pattern."
        },
        {
          "id": "sc_2299",
          "content": "[`fs.lchmod(path, mode, callback)`] `path` {string|Buffer|URL} `mode` {integer} `callback` {Function} * `err` {Error|AggregateError}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer} `callback` {Function} * `err` {Error|AggregateError}"
        },
        {
          "id": "sc_2300",
          "content": "[`fs.lchmod(path, mode, callback)`] [Previous: `path` {string|Buffer|URL} `mode` {integer} `callb...] Changes the permissions on a symbolic link.",
          "position": 1,
          "originalSentence": "Changes the permissions on a symbolic link."
        },
        {
          "id": "sc_2301",
          "content": "[`fs.lchmod(path, mode, callback)`] [Previous: Changes the permissions on a symbolic link....] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2302",
          "content": "[`fs.lchmod(path, mode, callback)`] [Previous: No arguments other than a possible exception are g...] This method is only implemented on macOS.",
          "position": 3,
          "originalSentence": "This method is only implemented on macOS."
        },
        {
          "id": "sc_2303",
          "content": "[`fs.lchmod(path, mode, callback)`] [Previous: This method is only implemented on macOS....] See the POSIX lchmod(2) documentation for more detail.",
          "position": 4,
          "originalSentence": "See the POSIX lchmod(2) documentation for more detail."
        },
        {
          "id": "sc_2313",
          "content": "[`fs.lchown(path, uid, gid, callback)`] `path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2314",
          "content": "[`fs.lchown(path, uid, gid, callback)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} `gid` {...] Set the owner of the symbolic link.",
          "position": 1,
          "originalSentence": "Set the owner of the symbolic link."
        },
        {
          "id": "sc_2315",
          "content": "[`fs.lchown(path, uid, gid, callback)`] [Previous: Set the owner of the symbolic link....] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2316",
          "content": "[`fs.lchown(path, uid, gid, callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX lchown(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX lchown(2) documentation for more detail."
        },
        {
          "id": "sc_2325",
          "content": "[`fs.lutimes(path, atime, mtime, callback)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2326",
          "content": "[`fs.lutimes(path, atime, mtime, callback)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] Changes the access and modification times of a file in the same way as [`fs.",
          "position": 1,
          "originalSentence": "Changes the access and modification times of a file in the same way as [`fs."
        },
        {
          "id": "sc_2327",
          "content": "[`fs.lutimes(path, atime, mtime, callback)`] [Previous: Changes the access and modification times of a fil...] utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.",
          "position": 2,
          "originalSentence": "utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed."
        },
        {
          "id": "sc_2328",
          "content": "[`fs.lutimes(path, atime, mtime, callback)`] [Previous: utimes()`][], with the difference that if the path...] No arguments other than a possible exception are given to the completion callback.",
          "position": 3,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2337",
          "content": "[`fs.link(existingPath, newPath, callback)`] `existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2338",
          "content": "[`fs.link(existingPath, newPath, callback)`] [Previous: `existingPath` {string|Buffer|URL} `newPath` {stri...] Creates a new link from the `existingPath` to the `newPath`.",
          "position": 1,
          "originalSentence": "Creates a new link from the `existingPath` to the `newPath`."
        },
        {
          "id": "sc_2339",
          "content": "[`fs.link(existingPath, newPath, callback)`] [Previous: Creates a new link from the `existingPath` to the ...] See the POSIX link(2) documentation for more detail.",
          "position": 2,
          "originalSentence": "See the POSIX link(2) documentation for more detail."
        },
        {
          "id": "sc_2340",
          "content": "[`fs.link(existingPath, newPath, callback)`] [Previous: See the POSIX link(2) documentation for more detai...] No arguments other than a possible exception are given to the completion callback.",
          "position": 3,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2355",
          "content": "[`fs.lstat(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_2356",
          "content": "[`fs.lstat(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "sc_2357",
          "content": "[`fs.lstat(path[, options], callback)`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_2358",
          "content": "[`fs.lstat(path[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error} * `stats` {fs."
        },
        {
          "id": "sc_2359",
          "content": "[`fs.lstat(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `stats` {f...] Retrieves the {fs.",
          "position": 4,
          "originalSentence": "Retrieves the {fs."
        },
        {
          "id": "sc_2360",
          "content": "[`fs.lstat(path[, options], callback)`] Stats} for the symbolic link referred to by the path.",
          "position": 5,
          "originalSentence": "Stats} for the symbolic link referred to by the path."
        },
        {
          "id": "sc_2361",
          "content": "[`fs.lstat(path[, options], callback)`] [Previous: Stats} for the symbolic link referred to by the pa...] The callback gets two arguments `(err, stats)` where `stats` is a {fs.",
          "position": 6,
          "originalSentence": "The callback gets two arguments `(err, stats)` where `stats` is a {fs."
        },
        {
          "id": "sc_2362",
          "content": "[`fs.lstat(path[, options], callback)`] [Previous: The callback gets two arguments `(err, stats)` whe...] Stats} object.",
          "position": 7,
          "originalSentence": "Stats} object."
        },
        {
          "id": "sc_2363",
          "content": "[`fs.lstat(path[, options], callback)`] `lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to.",
          "position": 8,
          "originalSentence": "`lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to."
        },
        {
          "id": "sc_2364",
          "content": "[`fs.lstat(path[, options], callback)`] [Previous: `lstat()` is identical to `stat()`, except that if...] See the POSIX lstat(2) documentation for more details.",
          "position": 9,
          "originalSentence": "See the POSIX lstat(2) documentation for more details."
        },
        {
          "id": "sc_2389",
          "content": "[`fs.mkdir(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows."
        },
        {
          "id": "sc_2390",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object|integ...] **Default:** `0o777`.",
          "position": 1,
          "originalSentence": "**Default:** `0o777`."
        },
        {
          "id": "sc_2391",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: **Default:** `0o777`....] `callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`.",
          "position": 2,
          "originalSentence": "`callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`."
        },
        {
          "id": "sc_2392",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `path` {st...] Asynchronously creates a directory.",
          "position": 3,
          "originalSentence": "Asynchronously creates a directory."
        },
        {
          "id": "sc_2393",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: Asynchronously creates a directory....] The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`.",
          "position": 4,
          "originalSentence": "The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`."
        },
        {
          "id": "sc_2394",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: The callback is given a possible exception and, if...] `path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created).",
          "position": 5,
          "originalSentence": "`path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created)."
        },
        {
          "id": "sc_2395",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: `path` can still be `undefined` when `recursive` i...] The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)",
          "position": 6,
          "originalSentence": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)"
        },
        {
          "id": "sc_2396",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: The optional `options` argument can be an integer ...] or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
          "position": 7,
          "originalSentence": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created."
        },
        {
          "id": "sc_2397",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: or an object with a `mode` property and a `recursi...] Calling `fs.",
          "position": 8,
          "originalSentence": "Calling `fs."
        },
        {
          "id": "sc_2398",
          "content": "[`fs.mkdir(path[, options], callback)`] mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false.",
          "position": 9,
          "originalSentence": "mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false."
        },
        {
          "id": "sc_2399",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: mkdir()` when `path` is a directory that exists re...] If `recursive` is false and the directory exists, an `EEXIST` error occurs.",
          "position": 10,
          "originalSentence": "If `recursive` is false and the directory exists, an `EEXIST` error occurs."
        },
        {
          "id": "sc_2400",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: If `recursive` is false and the directory exists, ...] On Windows, using `fs.",
          "position": 11,
          "originalSentence": "On Windows, using `fs."
        },
        {
          "id": "sc_2401",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: On Windows, using `fs....] mkdir()` on the root directory even with recursion will result in an error:",
          "position": 12,
          "originalSentence": "mkdir()` on the root directory even with recursion will result in an error:"
        },
        {
          "id": "sc_2402",
          "content": "[`fs.mkdir(path[, options], callback)`] [Previous: mkdir()` on the root directory even with recursion...] See the POSIX mkdir(2) documentation for more details.",
          "position": 13,
          "originalSentence": "See the POSIX mkdir(2) documentation for more details."
        },
        {
          "id": "sc_2426",
          "content": "[`fs.mkdtemp(prefix[, options], callback)`] `prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `directory` {string}",
          "position": 0,
          "originalSentence": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `directory` {string}"
        },
        {
          "id": "sc_2427",
          "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: `prefix` {string|Buffer|URL} `options` {string|Obj...] Creates a unique temporary directory.",
          "position": 1,
          "originalSentence": "Creates a unique temporary directory."
        },
        {
          "id": "sc_2428",
          "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: Creates a unique temporary directory....] Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.",
          "position": 2,
          "originalSentence": "Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory."
        },
        {
          "id": "sc_2429",
          "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: Generates six random characters to be appended beh...] Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
          "position": 3,
          "originalSentence": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`."
        },
        {
          "id": "sc_2430",
          "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: Due to platform inconsistencies, avoid trailing `X...] Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
          "position": 4,
          "originalSentence": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters."
        },
        {
          "id": "sc_2431",
          "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: Some platforms, notably the BSDs, can return more ...] The created directory path is passed as a string to the callback's second parameter.",
          "position": 5,
          "originalSentence": "The created directory path is passed as a string to the callback's second parameter."
        },
        {
          "id": "sc_2432",
          "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: The created directory path is passed as a string t...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 6,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use."
        },
        {
          "id": "sc_2433",
          "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: The optional `options` argument can be a string sp...] mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
          "position": 7,
          "originalSentence": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string."
        },
        {
          "id": "sc_2434",
          "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: mkdtemp()` method will append the six randomly sel...] For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
          "position": 8,
          "originalSentence": "For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path')."
        },
        {
          "id": "sc_2461",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] `path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][]."
        },
        {
          "id": "sc_2462",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: `path` {string|Buffer|URL} `flags` {string|number}...] **Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "sc_2463",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] `mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer}",
          "position": 2,
          "originalSentence": "`mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer}"
        },
        {
          "id": "sc_2464",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: `mode` {string|integer} **Default:** `0o666` (read...] Asynchronous file open.",
          "position": 3,
          "originalSentence": "Asynchronous file open."
        },
        {
          "id": "sc_2465",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: Asynchronous file open....] See the POSIX open(2) documentation for more details.",
          "position": 4,
          "originalSentence": "See the POSIX open(2) documentation for more details."
        },
        {
          "id": "sc_2466",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: See the POSIX open(2) documentation for more detai...] `mode` sets the file mode (permission and sticky bits), but only if the file was created.",
          "position": 5,
          "originalSentence": "`mode` sets the file mode (permission and sticky bits), but only if the file was created."
        },
        {
          "id": "sc_2467",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: `mode` sets the file mode (permission and sticky b...] On Windows, only the write permission can be manipulated; see [`fs.",
          "position": 6,
          "originalSentence": "On Windows, only the write permission can be manipulated; see [`fs."
        },
        {
          "id": "sc_2468",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: On Windows, only the write permission can be manip...] chmod()`][].",
          "position": 7,
          "originalSentence": "chmod()`][]."
        },
        {
          "id": "sc_2469",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] The callback gets two arguments `(err, fd)`.",
          "position": 8,
          "originalSentence": "The callback gets two arguments `(err, fd)`."
        },
        {
          "id": "sc_2470",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: The callback gets two arguments `(err, fd)`....] Some characters (`< > : \" / \\ | ?",
          "position": 9,
          "originalSentence": "Some characters (`< > : \" / \\ | ?"
        },
        {
          "id": "sc_2471",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: Some characters (`< > : \" / \\ | ?...] *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
          "position": 10,
          "originalSentence": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]."
        },
        {
          "id": "sc_2472",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: *`) are reserved under Windows as documented by [N...] Under NTFS, if the filename contains a colon, Node.",
          "position": 11,
          "originalSentence": "Under NTFS, if the filename contains a colon, Node."
        },
        {
          "id": "sc_2473",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: Under NTFS, if the filename contains a colon, Node...] js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
          "position": 12,
          "originalSentence": "js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams]."
        },
        {
          "id": "sc_2474",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: js will open a file system stream, as described by...] Functions based on `fs.",
          "position": 13,
          "originalSentence": "Functions based on `fs."
        },
        {
          "id": "sc_2475",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: Functions based on `fs....] open()` exhibit this behavior as well: `fs.",
          "position": 14,
          "originalSentence": "open()` exhibit this behavior as well: `fs."
        },
        {
          "id": "sc_2476",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: open()` exhibit this behavior as well: `fs....] writeFile()`, `fs.",
          "position": 15,
          "originalSentence": "writeFile()`, `fs."
        },
        {
          "id": "sc_2477",
          "content": "[`fs.open(path[, flags[, mode]], callback)`] readFile()`, etc.",
          "position": 16,
          "originalSentence": "readFile()`, etc."
        },
        {
          "id": "sc_2501",
          "content": "[`fs.openAsBlob(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `type` {string} An optional mime type for the blob.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `type` {string} An optional mime type for the blob."
        },
        {
          "id": "sc_2502",
          "content": "[`fs.openAsBlob(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `t...] Returns: {Promise} Fulfills with a {Blob} upon success.",
          "position": 1,
          "originalSentence": "Returns: {Promise} Fulfills with a {Blob} upon success."
        },
        {
          "id": "sc_2503",
          "content": "[`fs.openAsBlob(path[, options])`] [Previous: Returns: {Promise} Fulfills with a {Blob} upon suc...] Returns a {Blob} whose data is backed by the given file.",
          "position": 2,
          "originalSentence": "Returns a {Blob} whose data is backed by the given file."
        },
        {
          "id": "sc_2504",
          "content": "[`fs.openAsBlob(path[, options])`] [Previous: Returns a {Blob} whose data is backed by the given...] The file must not be modified after the {Blob} is created.",
          "position": 3,
          "originalSentence": "The file must not be modified after the {Blob} is created."
        },
        {
          "id": "sc_2505",
          "content": "[`fs.openAsBlob(path[, options])`] [Previous: The file must not be modified after the {Blob} is ...] Any modifications will cause reading the {Blob} data to fail with a `DOMException` error.",
          "position": 4,
          "originalSentence": "Any modifications will cause reading the {Blob} data to fail with a `DOMException` error."
        },
        {
          "id": "sc_2506",
          "content": "[`fs.openAsBlob(path[, options])`] [Previous: Any modifications will cause reading the {Blob} da...] Synchronous stat operations on the file when the `Blob` is created, and before each read in order to detect whether the file data has been modified on disk.",
          "position": 5,
          "originalSentence": "Synchronous stat operations on the file when the `Blob` is created, and before each read in order to detect whether the file data has been modified on disk."
        },
        {
          "id": "sc_2521",
          "content": "[`fs.opendir(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory."
        },
        {
          "id": "sc_2522",
          "content": "[`fs.opendir(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `e...] Higher values lead to better performance but higher memory usage.",
          "position": 1,
          "originalSentence": "Higher values lead to better performance but higher memory usage."
        },
        {
          "id": "sc_2523",
          "content": "[`fs.opendir(path[, options], callback)`] [Previous: Higher values lead to better performance but highe...] **Default:** `32` * `recursive` {boolean} **Default:** `false` `callback` {Function} * `err` {Error} * `dir` {fs.",
          "position": 2,
          "originalSentence": "**Default:** `32` * `recursive` {boolean} **Default:** `false` `callback` {Function} * `err` {Error} * `dir` {fs."
        },
        {
          "id": "sc_2524",
          "content": "[`fs.opendir(path[, options], callback)`] [Previous: **Default:** `32` * `recursive` {boolean} **Defaul...] Asynchronously open a directory.",
          "position": 3,
          "originalSentence": "Asynchronously open a directory."
        },
        {
          "id": "sc_2525",
          "content": "[`fs.opendir(path[, options], callback)`] [Previous: Asynchronously open a directory....] See the POSIX opendir(3) documentation for more details.",
          "position": 4,
          "originalSentence": "See the POSIX opendir(3) documentation for more details."
        },
        {
          "id": "sc_2526",
          "content": "[`fs.opendir(path[, options], callback)`] [Previous: See the POSIX opendir(3) documentation for more de...] Creates an {fs.",
          "position": 5,
          "originalSentence": "Creates an {fs."
        },
        {
          "id": "sc_2527",
          "content": "[`fs.opendir(path[, options], callback)`] Dir}, which contains all further functions for reading from and cleaning up the directory.",
          "position": 6,
          "originalSentence": "Dir}, which contains all further functions for reading from and cleaning up the directory."
        },
        {
          "id": "sc_2528",
          "content": "[`fs.opendir(path[, options], callback)`] [Previous: Dir}, which contains all further functions for rea...] The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 7,
          "originalSentence": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations."
        },
        {
          "id": "sc_2563",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to."
        },
        {
          "id": "sc_2564",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] `offset` {integer} The position in `buffer` to write the data to.",
          "position": 1,
          "originalSentence": "`offset` {integer} The position in `buffer` to write the data to."
        },
        {
          "id": "sc_2565",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: `offset` {integer} The position in `buffer` to wri...] `length` {integer} The number of bytes to read.",
          "position": 2,
          "originalSentence": "`length` {integer} The number of bytes to read."
        },
        {
          "id": "sc_2566",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: `length` {integer} The number of bytes to read....] `position` {integer|bigint|null} Specifies where to begin reading from in the file.",
          "position": 3,
          "originalSentence": "`position` {integer|bigint|null} Specifies where to begin reading from in the file."
        },
        {
          "id": "sc_2567",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: `position` {integer|bigint|null} Specifies where t...] If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated.",
          "position": 4,
          "originalSentence": "If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated."
        },
        {
          "id": "sc_2568",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If `position` is `null` or `-1 `, data will be rea...] If `position` is a non-negative integer, the file position will be unchanged.",
          "position": 5,
          "originalSentence": "If `position` is a non-negative integer, the file position will be unchanged."
        },
        {
          "id": "sc_2569",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If `position` is a non-negative integer, the file ...] `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
          "position": 6,
          "originalSentence": "`callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}"
        },
        {
          "id": "sc_2570",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: `callback` {Function} * `err` {Error} * `bytesRead...] Read data from the file specified by `fd`.",
          "position": 7,
          "originalSentence": "Read data from the file specified by `fd`."
        },
        {
          "id": "sc_2571",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: Read data from the file specified by `fd`....] The callback is given the three arguments, `(err, bytesRead, buffer)`.",
          "position": 8,
          "originalSentence": "The callback is given the three arguments, `(err, bytesRead, buffer)`."
        },
        {
          "id": "sc_2572",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: The callback is given the three arguments, `(err, ...] If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 9,
          "originalSentence": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero."
        },
        {
          "id": "sc_2573",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If the file is not modified concurrently, the end-...] If this method is invoked as its [`util.",
          "position": 10,
          "originalSentence": "If this method is invoked as its [`util."
        },
        {
          "id": "sc_2574",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If this method is invoked as its [`util....] promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties.",
          "position": 11,
          "originalSentence": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties."
        },
        {
          "id": "sc_2575",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: promisify()`][]ed version, it returns a promise fo...] read()` method reads data from the file specified by the file descriptor (`fd`).",
          "position": 12,
          "originalSentence": "read()` method reads data from the file specified by the file descriptor (`fd`)."
        },
        {
          "id": "sc_2576",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: read()` method reads data from the file specified ...] The `length` argument indicates the maximum number of bytes that Node.",
          "position": 13,
          "originalSentence": "The `length` argument indicates the maximum number of bytes that Node."
        },
        {
          "id": "sc_2577",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: The `length` argument indicates the maximum number...] js will attempt to read from the kernel.",
          "position": 14,
          "originalSentence": "js will attempt to read from the kernel."
        },
        {
          "id": "sc_2578",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: js will attempt to read from the kernel....] However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons.",
          "position": 15,
          "originalSentence": "However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons."
        },
        {
          "id": "sc_2579",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: However, the actual number of bytes read (`bytesRe...] For example:",
          "position": 16,
          "originalSentence": "For example:"
        },
        {
          "id": "sc_2580",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read.",
          "position": 17,
          "originalSentence": "If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read."
        },
        {
          "id": "sc_2581",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If the file is shorter than the specified `length`...] If the file encounters EOF (End of File) before the buffer could be filled, Node.",
          "position": 18,
          "originalSentence": "If the file encounters EOF (End of File) before the buffer could be filled, Node."
        },
        {
          "id": "sc_2582",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If the file encounters EOF (End of File) before th...] js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read, which may be less than the specified `length`.",
          "position": 19,
          "originalSentence": "js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read, which may be less than the specified `length`."
        },
        {
          "id": "sc_2583",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: js will read all available bytes until EOF is enco...] If the file is on a slow network `filesystem` or encounters any other issue during reading, `bytesRead` can be lower than the specified `length`.",
          "position": 20,
          "originalSentence": "If the file is on a slow network `filesystem` or encounters any other issue during reading, `bytesRead` can be lower than the specified `length`."
        },
        {
          "id": "sc_2584",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If the file is on a slow network `filesystem` or e...] Therefore, when using `fs.",
          "position": 21,
          "originalSentence": "Therefore, when using `fs."
        },
        {
          "id": "sc_2585",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: Therefore, when using `fs....] read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file.",
          "position": 22,
          "originalSentence": "read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file."
        },
        {
          "id": "sc_2586",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: read()`, it's important to check the `bytesRead` v...] Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of bytes.",
          "position": 23,
          "originalSentence": "Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of bytes."
        },
        {
          "id": "sc_2587",
          "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: Depending on your application logic, you may need ...] This behavior is similar to the POSIX `preadv2` function.",
          "position": 24,
          "originalSentence": "This behavior is similar to the POSIX `preadv2` function."
        },
        {
          "id": "sc_2619",
          "content": "[`fs.read(fd[, options], callback)`] `fd` {integer} `options` {Object} * `buffer` {Buffer|TypedArray|DataView} **Default:** `Buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `options` {Object} * `buffer` {Buffer|TypedArray|DataView} **Default:** `Buffer."
        },
        {
          "id": "sc_2620",
          "content": "[`fs.read(fd[, options], callback)`] [Previous: `fd` {integer} `options` {Object} * `buffer` {Buff...] alloc(16384)` * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 1,
          "originalSentence": "alloc(16384)` * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "sc_2621",
          "content": "[`fs.read(fd[, options], callback)`] [Previous: alloc(16384)` * `offset` {integer} **Default:** `0...] byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
          "position": 2,
          "originalSentence": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}"
        },
        {
          "id": "sc_2622",
          "content": "[`fs.read(fd[, options], callback)`] [Previous: byteLength - offset` * `position` {integer|bigint|...] Similar to the [`fs.",
          "position": 3,
          "originalSentence": "Similar to the [`fs."
        },
        {
          "id": "sc_2623",
          "content": "[`fs.read(fd[, options], callback)`] read()`][] function, this version takes an optional `options` object.",
          "position": 4,
          "originalSentence": "read()`][] function, this version takes an optional `options` object."
        },
        {
          "id": "sc_2624",
          "content": "[`fs.read(fd[, options], callback)`] [Previous: read()`][] function, this version takes an optiona...] If no `options` object is specified, it will default with the above values.",
          "position": 5,
          "originalSentence": "If no `options` object is specified, it will default with the above values."
        },
        {
          "id": "sc_2637",
          "content": "[`fs.read(fd, buffer[, options], callback)`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to."
        },
        {
          "id": "sc_2638",
          "content": "[`fs.read(fd, buffer[, options], callback)`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 1,
          "originalSentence": "`options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "sc_2639",
          "content": "[`fs.read(fd, buffer[, options], callback)`] [Previous: `options` {Object} * `offset` {integer} **Default:...] byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
          "position": 2,
          "originalSentence": "byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}"
        },
        {
          "id": "sc_2640",
          "content": "[`fs.read(fd, buffer[, options], callback)`] [Previous: byteLength - offset` * `position` {integer|bigint}...] Similar to the [`fs.",
          "position": 3,
          "originalSentence": "Similar to the [`fs."
        },
        {
          "id": "sc_2641",
          "content": "[`fs.read(fd, buffer[, options], callback)`] read()`][] function, this version takes an optional `options` object.",
          "position": 4,
          "originalSentence": "read()`][] function, this version takes an optional `options` object."
        },
        {
          "id": "sc_2642",
          "content": "[`fs.read(fd, buffer[, options], callback)`] [Previous: read()`][] function, this version takes an optiona...] If no `options` object is specified, it will default with the above values.",
          "position": 5,
          "originalSentence": "If no `options` object is specified, it will default with the above values."
        },
        {
          "id": "sc_2662",
          "content": "[`fs.readdir(path[, options], callback)`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively."
        },
        {
          "id": "sc_2663",
          "content": "[`fs.readdir(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] In recursive mode, it will list all files, sub files and directories.",
          "position": 1,
          "originalSentence": "In recursive mode, it will list all files, sub files and directories."
        },
        {
          "id": "sc_2664",
          "content": "[`fs.readdir(path[, options], callback)`] [Previous: In recursive mode, it will list all files, sub fil...] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_2665",
          "content": "[`fs.readdir(path[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs.",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs."
        },
        {
          "id": "sc_2666",
          "content": "[`fs.readdir(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `files` {s...] Reads the contents of a directory.",
          "position": 4,
          "originalSentence": "Reads the contents of a directory."
        },
        {
          "id": "sc_2667",
          "content": "[`fs.readdir(path[, options], callback)`] [Previous: Reads the contents of a directory....] The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.'",
          "position": 5,
          "originalSentence": "The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.'"
        },
        {
          "id": "sc_2668",
          "content": "[`fs.readdir(path[, options], callback)`] [Previous: The callback gets two arguments `(err, files)` whe...] ` and `'..'",
          "position": 6,
          "originalSentence": "` and `'..'"
        },
        {
          "id": "sc_2669",
          "content": "[`fs.readdir(path[, options], callback)`] See the POSIX readdir(3) documentation for more details.",
          "position": 7,
          "originalSentence": "See the POSIX readdir(3) documentation for more details."
        },
        {
          "id": "sc_2670",
          "content": "[`fs.readdir(path[, options], callback)`] [Previous: See the POSIX readdir(3) documentation for more de...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback.",
          "position": 8,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback."
        },
        {
          "id": "sc_2671",
          "content": "[`fs.readdir(path[, options], callback)`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
          "position": 9,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects."
        },
        {
          "id": "sc_2672",
          "content": "[`fs.readdir(path[, options], callback)`] [Previous: If the `encoding` is set to `'buffer'`, the filena...] If `options.",
          "position": 10,
          "originalSentence": "If `options."
        },
        {
          "id": "sc_2673",
          "content": "[`fs.readdir(path[, options], callback)`] withFileTypes` is set to `true`, the `files` array will contain {fs.",
          "position": 11,
          "originalSentence": "withFileTypes` is set to `true`, the `files` array will contain {fs."
        },
        {
          "id": "sc_2674",
          "content": "[`fs.readdir(path[, options], callback)`] [Previous: withFileTypes` is set to `true`, the `files` array...] Dirent} objects.",
          "position": 12,
          "originalSentence": "Dirent} objects."
        },
        {
          "id": "sc_2707",
          "content": "[`fs.readFile(path[, options], callback)`] `path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_2708",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: `path` {string|Buffer|URL|integer} filename or fil...] **Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "sc_2709",
          "content": "[`fs.readFile(path[, options], callback)`] * `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data` {string|Buffer}",
          "position": 2,
          "originalSentence": "* `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data` {string|Buffer}"
        },
        {
          "id": "sc_2710",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: * `signal` {AbortSignal} allows aborting an in-pro...] Asynchronously reads the entire contents of a file.",
          "position": 3,
          "originalSentence": "Asynchronously reads the entire contents of a file."
        },
        {
          "id": "sc_2711",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: Asynchronously reads the entire contents of a file...] The callback is passed two arguments `(err, data)`, where `data` is the contents of the file.",
          "position": 4,
          "originalSentence": "The callback is passed two arguments `(err, data)`, where `data` is the contents of the file."
        },
        {
          "id": "sc_2712",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: The callback is passed two arguments `(err, data)`...] If no encoding is specified, then the raw buffer is returned.",
          "position": 5,
          "originalSentence": "If no encoding is specified, then the raw buffer is returned."
        },
        {
          "id": "sc_2713",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: If no encoding is specified, then the raw buffer i...] If `options` is a string, then it specifies the encoding:",
          "position": 6,
          "originalSentence": "If `options` is a string, then it specifies the encoding:"
        },
        {
          "id": "sc_2714",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: If `options` is a string, then it specifies the en...] When the path is a directory, the behavior of `fs.",
          "position": 7,
          "originalSentence": "When the path is a directory, the behavior of `fs."
        },
        {
          "id": "sc_2715",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: When the path is a directory, the behavior of `fs....] readFile()` and [`fs.",
          "position": 8,
          "originalSentence": "readFile()` and [`fs."
        },
        {
          "id": "sc_2716",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: readFile()` and [`fs....] readFileSync()`][] is platform-specific.",
          "position": 9,
          "originalSentence": "readFileSync()`][] is platform-specific."
        },
        {
          "id": "sc_2717",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: readFileSync()`][] is platform-specific....] On macOS, Linux, and Windows, an error will be returned.",
          "position": 10,
          "originalSentence": "On macOS, Linux, and Windows, an error will be returned."
        },
        {
          "id": "sc_2718",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: On macOS, Linux, and Windows, an error will be ret...] On FreeBSD, a representation of the directory's contents will be returned.",
          "position": 11,
          "originalSentence": "On FreeBSD, a representation of the directory's contents will be returned."
        },
        {
          "id": "sc_2719",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: On FreeBSD, a representation of the directory's co...] It is possible to abort an ongoing request using an `AbortSignal`.",
          "position": 12,
          "originalSentence": "It is possible to abort an ongoing request using an `AbortSignal`."
        },
        {
          "id": "sc_2720",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: It is possible to abort an ongoing request using a...] If a request is aborted the callback is called with an `AbortError`:",
          "position": 13,
          "originalSentence": "If a request is aborted the callback is called with an `AbortError`:"
        },
        {
          "id": "sc_2721",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: If a request is aborted the callback is called wit...] readFile()` function buffers the entire file.",
          "position": 14,
          "originalSentence": "readFile()` function buffers the entire file."
        },
        {
          "id": "sc_2722",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: readFile()` function buffers the entire file....] To minimize memory costs, when possible prefer streaming via `fs.",
          "position": 15,
          "originalSentence": "To minimize memory costs, when possible prefer streaming via `fs."
        },
        {
          "id": "sc_2723",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: To minimize memory costs, when possible prefer str...] createReadStream()`.",
          "position": 16,
          "originalSentence": "createReadStream()`."
        },
        {
          "id": "sc_2724",
          "content": "[`fs.readFile(path[, options], callback)`] Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 17,
          "originalSentence": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs."
        },
        {
          "id": "sc_2725",
          "content": "[`fs.readFile(path[, options], callback)`] [Previous: Aborting an ongoing request does not abort individ...] readFile` performs.",
          "position": 18,
          "originalSentence": "readFile` performs."
        },
        {
          "id": "sc_2750",
          "content": "[File descriptors] Any specified file descriptor has to support reading.",
          "position": 0,
          "originalSentence": "Any specified file descriptor has to support reading."
        },
        {
          "id": "sc_2751",
          "content": "[File descriptors] [Previous: Any specified file descriptor has to support readi...] If a file descriptor is specified as the `path`, it will not be closed automatically.",
          "position": 1,
          "originalSentence": "If a file descriptor is specified as the `path`, it will not be closed automatically."
        },
        {
          "id": "sc_2752",
          "content": "[File descriptors] [Previous: If a file descriptor is specified as the `path`, i...] The reading will begin at the current position.",
          "position": 2,
          "originalSentence": "The reading will begin at the current position."
        },
        {
          "id": "sc_2753",
          "content": "[File descriptors] [Previous: The reading will begin at the current position....] For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs.",
          "position": 3,
          "originalSentence": "For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs."
        },
        {
          "id": "sc_2754",
          "content": "[File descriptors] [Previous: For example, if the file already had `'Hello World...] readFile()` with the same file descriptor, would give `'World'`, rather than `'Hello World'`.",
          "position": 4,
          "originalSentence": "readFile()` with the same file descriptor, would give `'World'`, rather than `'Hello World'`."
        },
        {
          "id": "sc_2771",
          "content": "[Performance Considerations] readFile()` method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk.",
          "position": 0,
          "originalSentence": "readFile()` method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk."
        },
        {
          "id": "sc_2772",
          "content": "[Performance Considerations] [Previous: readFile()` method asynchronously reads the conten...] This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory.",
          "position": 1,
          "originalSentence": "This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory."
        },
        {
          "id": "sc_2773",
          "content": "[Performance Considerations] [Previous: This allows the read operation to have less impact...] The additional read overhead can vary broadly on different systems and depends on the type of file being read.",
          "position": 2,
          "originalSentence": "The additional read overhead can vary broadly on different systems and depends on the type of file being read."
        },
        {
          "id": "sc_2774",
          "content": "[Performance Considerations] [Previous: The additional read overhead can vary broadly on d...] If the file type is not a regular file (a pipe for instance) and Node.",
          "position": 3,
          "originalSentence": "If the file type is not a regular file (a pipe for instance) and Node."
        },
        {
          "id": "sc_2775",
          "content": "[Performance Considerations] [Previous: If the file type is not a regular file (a pipe for...] js is unable to determine an actual file size, each read operation will load on 64 KiB of data.",
          "position": 4,
          "originalSentence": "js is unable to determine an actual file size, each read operation will load on 64 KiB of data."
        },
        {
          "id": "sc_2776",
          "content": "[Performance Considerations] [Previous: js is unable to determine an actual file size, eac...] For regular files, each read will process 512 KiB of data.",
          "position": 5,
          "originalSentence": "For regular files, each read will process 512 KiB of data."
        },
        {
          "id": "sc_2777",
          "content": "[Performance Considerations] [Previous: For regular files, each read will process 512 KiB ...] For applications that require as-fast-as-possible reading of file contents, it is better to use `fs.",
          "position": 6,
          "originalSentence": "For applications that require as-fast-as-possible reading of file contents, it is better to use `fs."
        },
        {
          "id": "sc_2778",
          "content": "[Performance Considerations] [Previous: For applications that require as-fast-as-possible ...] read()` directly and for application code to manage reading the full contents of the file itself.",
          "position": 7,
          "originalSentence": "read()` directly and for application code to manage reading the full contents of the file itself."
        },
        {
          "id": "sc_2779",
          "content": "[Performance Considerations] [Previous: read()` directly and for application code to manag...] js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs.",
          "position": 8,
          "originalSentence": "js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs."
        },
        {
          "id": "sc_2780",
          "content": "[Performance Considerations] [Previous: js GitHub issue [#25741][] provides more informati...] readFile()` for multiple file sizes in different Node.",
          "position": 9,
          "originalSentence": "readFile()` for multiple file sizes in different Node."
        },
        {
          "id": "sc_2781",
          "content": "[Performance Considerations] [Previous: readFile()` for multiple file sizes in different N...] js versions.",
          "position": 10,
          "originalSentence": "js versions."
        },
        {
          "id": "sc_2799",
          "content": "[`fs.readlink(path[, options], callback)`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `linkString` {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `linkString` {string|Buffer}"
        },
        {
          "id": "sc_2800",
          "content": "[`fs.readlink(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Reads the contents of the symbolic link referred to by `path`.",
          "position": 1,
          "originalSentence": "Reads the contents of the symbolic link referred to by `path`."
        },
        {
          "id": "sc_2801",
          "content": "[`fs.readlink(path[, options], callback)`] [Previous: Reads the contents of the symbolic link referred t...] The callback gets two arguments `(err, linkString)`.",
          "position": 2,
          "originalSentence": "The callback gets two arguments `(err, linkString)`."
        },
        {
          "id": "sc_2802",
          "content": "[`fs.readlink(path[, options], callback)`] [Previous: The callback gets two arguments `(err, linkString)...] See the POSIX readlink(2) documentation for more details.",
          "position": 3,
          "originalSentence": "See the POSIX readlink(2) documentation for more details."
        },
        {
          "id": "sc_2803",
          "content": "[`fs.readlink(path[, options], callback)`] [Previous: See the POSIX readlink(2) documentation for more d...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback.",
          "position": 4,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback."
        },
        {
          "id": "sc_2804",
          "content": "[`fs.readlink(path[, options], callback)`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 5,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object."
        },
        {
          "id": "sc_2820",
          "content": "[`fs.readv(fd, buffers[, position], callback)`] `fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffers` {ArrayBufferView\\[]}",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffers` {ArrayBufferView\\[]}"
        },
        {
          "id": "sc_2821",
          "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: `fd` {integer} `buffers` {ArrayBufferView\\[]} `pos...] Read from a file specified by `fd` and write to an array of `ArrayBufferView`s using `readv()`.",
          "position": 1,
          "originalSentence": "Read from a file specified by `fd` and write to an array of `ArrayBufferView`s using `readv()`."
        },
        {
          "id": "sc_2822",
          "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: Read from a file specified by `fd` and write to an...] `position` is the offset from the beginning of the file from where data should be read.",
          "position": 2,
          "originalSentence": "`position` is the offset from the beginning of the file from where data should be read."
        },
        {
          "id": "sc_2823",
          "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: `position` is the offset from the beginning of the...] If `typeof position !",
          "position": 3,
          "originalSentence": "If `typeof position !"
        },
        {
          "id": "sc_2824",
          "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: If `typeof position !...] == 'number'`, the data will be read from the current position.",
          "position": 4,
          "originalSentence": "== 'number'`, the data will be read from the current position."
        },
        {
          "id": "sc_2825",
          "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: == 'number'`, the data will be read from the curre...] The callback will be given three arguments: `err`, `bytesRead`, and `buffers`.",
          "position": 5,
          "originalSentence": "The callback will be given three arguments: `err`, `bytesRead`, and `buffers`."
        },
        {
          "id": "sc_2826",
          "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: The callback will be given three arguments: `err`,...] `bytesRead` is how many bytes were read from the file.",
          "position": 6,
          "originalSentence": "`bytesRead` is how many bytes were read from the file."
        },
        {
          "id": "sc_2827",
          "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: `bytesRead` is how many bytes were read from the f...] If this method is invoked as its [`util.",
          "position": 7,
          "originalSentence": "If this method is invoked as its [`util."
        },
        {
          "id": "sc_2828",
          "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: If this method is invoked as its [`util....] promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffers` properties.",
          "position": 8,
          "originalSentence": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffers` properties."
        },
        {
          "id": "sc_2855",
          "content": "[`fs.realpath(path[, options], callback)`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}"
        },
        {
          "id": "sc_2856",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Asynchronously computes the canonical pathname by resolving `.",
          "position": 1,
          "originalSentence": "Asynchronously computes the canonical pathname by resolving `."
        },
        {
          "id": "sc_2857",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: Asynchronously computes the canonical pathname by ...] `, and symbolic links.",
          "position": 2,
          "originalSentence": "`, and symbolic links."
        },
        {
          "id": "sc_2858",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: `, and symbolic links....] A canonical pathname is not necessarily unique.",
          "position": 3,
          "originalSentence": "A canonical pathname is not necessarily unique."
        },
        {
          "id": "sc_2859",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: A canonical pathname is not necessarily unique....] Hard links and bind mounts can expose a file system entity through many pathnames.",
          "position": 4,
          "originalSentence": "Hard links and bind mounts can expose a file system entity through many pathnames."
        },
        {
          "id": "sc_2860",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: Hard links and bind mounts can expose a file syste...] This function behaves like realpath(3), with some exceptions:",
          "position": 5,
          "originalSentence": "This function behaves like realpath(3), with some exceptions:"
        },
        {
          "id": "sc_2861",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: This function behaves like realpath(3), with some ...] No case conversion is performed on case-insensitive file systems.",
          "position": 6,
          "originalSentence": "No case conversion is performed on case-insensitive file systems."
        },
        {
          "id": "sc_2862",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: No case conversion is performed on case-insensitiv...] The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports.",
          "position": 7,
          "originalSentence": "The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports."
        },
        {
          "id": "sc_2863",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: The maximum number of symbolic links is platform-i...] The `callback` gets two arguments `(err, resolvedPath)`.",
          "position": 8,
          "originalSentence": "The `callback` gets two arguments `(err, resolvedPath)`."
        },
        {
          "id": "sc_2864",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: The `callback` gets two arguments `(err, resolvedP...] May use `process.",
          "position": 9,
          "originalSentence": "May use `process."
        },
        {
          "id": "sc_2865",
          "content": "[`fs.realpath(path[, options], callback)`] cwd` to resolve relative paths.",
          "position": 10,
          "originalSentence": "cwd` to resolve relative paths."
        },
        {
          "id": "sc_2866",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: cwd` to resolve relative paths....] Only paths that can be converted to UTF8 strings are supported.",
          "position": 11,
          "originalSentence": "Only paths that can be converted to UTF8 strings are supported."
        },
        {
          "id": "sc_2867",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: Only paths that can be converted to UTF8 strings a...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
          "position": 12,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback."
        },
        {
          "id": "sc_2868",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 13,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object."
        },
        {
          "id": "sc_2869",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: If the `encoding` is set to `'buffer'`, the path r...] If `path` resolves to a socket or a pipe, the function will return a system dependent name for that object.",
          "position": 14,
          "originalSentence": "If `path` resolves to a socket or a pipe, the function will return a system dependent name for that object."
        },
        {
          "id": "sc_2870",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: If `path` resolves to a socket or a pipe, the func...] A path that does not exist results in an ENOENT error.",
          "position": 15,
          "originalSentence": "A path that does not exist results in an ENOENT error."
        },
        {
          "id": "sc_2871",
          "content": "[`fs.realpath(path[, options], callback)`] [Previous: A path that does not exist results in an ENOENT er...] path` is the absolute file path.",
          "position": 16,
          "originalSentence": "path` is the absolute file path."
        },
        {
          "id": "sc_2898",
          "content": "[`fs.realpath.native(path[, options], callback)`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}"
        },
        {
          "id": "sc_2899",
          "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Asynchronous realpath(3).",
          "position": 1,
          "originalSentence": "Asynchronous realpath(3)."
        },
        {
          "id": "sc_2900",
          "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: Asynchronous realpath(3)....] The `callback` gets two arguments `(err, resolvedPath)`.",
          "position": 2,
          "originalSentence": "The `callback` gets two arguments `(err, resolvedPath)`."
        },
        {
          "id": "sc_2901",
          "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: The `callback` gets two arguments `(err, resolvedP...] Only paths that can be converted to UTF8 strings are supported.",
          "position": 3,
          "originalSentence": "Only paths that can be converted to UTF8 strings are supported."
        },
        {
          "id": "sc_2902",
          "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: Only paths that can be converted to UTF8 strings a...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
          "position": 4,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback."
        },
        {
          "id": "sc_2903",
          "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 5,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object."
        },
        {
          "id": "sc_2904",
          "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: If the `encoding` is set to `'buffer'`, the path r...] On Linux, when Node.",
          "position": 6,
          "originalSentence": "On Linux, when Node."
        },
        {
          "id": "sc_2905",
          "content": "[`fs.realpath.native(path[, options], callback)`] js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
          "position": 7,
          "originalSentence": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work."
        },
        {
          "id": "sc_2906",
          "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: js is linked against musl libc, the procfs file sy...] Glibc does not have this restriction.",
          "position": 8,
          "originalSentence": "Glibc does not have this restriction."
        },
        {
          "id": "sc_2922",
          "content": "[`fs.rename(oldPath, newPath, callback)`] `oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2923",
          "content": "[`fs.rename(oldPath, newPath, callback)`] [Previous: `oldPath` {string|Buffer|URL} `newPath` {string|Bu...] Asynchronously rename file at `oldPath` to the pathname provided as `newPath`.",
          "position": 1,
          "originalSentence": "Asynchronously rename file at `oldPath` to the pathname provided as `newPath`."
        },
        {
          "id": "sc_2924",
          "content": "[`fs.rename(oldPath, newPath, callback)`] [Previous: Asynchronously rename file at `oldPath` to the pat...] In the case that `newPath` already exists, it will be overwritten.",
          "position": 2,
          "originalSentence": "In the case that `newPath` already exists, it will be overwritten."
        },
        {
          "id": "sc_2925",
          "content": "[`fs.rename(oldPath, newPath, callback)`] [Previous: In the case that `newPath` already exists, it will...] If there is a directory at `newPath`, an error will be raised instead.",
          "position": 3,
          "originalSentence": "If there is a directory at `newPath`, an error will be raised instead."
        },
        {
          "id": "sc_2926",
          "content": "[`fs.rename(oldPath, newPath, callback)`] [Previous: If there is a directory at `newPath`, an error wil...] No arguments other than a possible exception are given to the completion callback.",
          "position": 4,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2927",
          "content": "[`fs.rename(oldPath, newPath, callback)`] [Previous: No arguments other than a possible exception are g...] See also: rename(2).",
          "position": 5,
          "originalSentence": "See also: rename(2)."
        },
        {
          "id": "sc_2943",
          "content": "[`fs.rmdir(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed."
        },
        {
          "id": "sc_2944",
          "content": "[`fs.rmdir(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} Ther...] There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
          "position": 1,
          "originalSentence": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed."
        },
        {
          "id": "sc_2945",
          "content": "[`fs.rmdir(path[, options], callback)`] [Previous: There used to be options for `recursive`, `maxBusy...] The `options` argument is still accepted for backwards compatibility but it is not used.",
          "position": 2,
          "originalSentence": "The `options` argument is still accepted for backwards compatibility but it is not used."
        },
        {
          "id": "sc_2946",
          "content": "[`fs.rmdir(path[, options], callback)`] [Previous: The `options` argument is still accepted for backw...] `callback` {Function} * `err` {Error}",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2947",
          "content": "[`fs.rmdir(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error}...] Asynchronous rmdir(2).",
          "position": 4,
          "originalSentence": "Asynchronous rmdir(2)."
        },
        {
          "id": "sc_2948",
          "content": "[`fs.rmdir(path[, options], callback)`] [Previous: Asynchronous rmdir(2)....] No arguments other than a possible exception are given to the completion callback.",
          "position": 5,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_2949",
          "content": "[`fs.rmdir(path[, options], callback)`] [Previous: No arguments other than a possible exception are g...] rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
          "position": 6,
          "originalSentence": "rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX."
        },
        {
          "id": "sc_2950",
          "content": "[`fs.rmdir(path[, options], callback)`] [Previous: rmdir()` on a file (not a directory) results in an...] To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
          "position": 7,
          "originalSentence": "To get a behavior similar to the `rm -rf` Unix command, use [`fs."
        },
        {
          "id": "sc_2951",
          "content": "[`fs.rmdir(path[, options], callback)`] [Previous: To get a behavior similar to the `rm -rf` Unix com...] rm()`][] with options `{ recursive: true, force: true }`.",
          "position": 8,
          "originalSentence": "rm()`][] with options `{ recursive: true, force: true }`."
        },
        {
          "id": "sc_2977",
          "content": "[`fs.rm(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist."
        },
        {
          "id": "sc_2978",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `f...] **Default:** `false`.",
          "position": 1,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_2979",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: **Default:** `false`....] * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
          "position": 2,
          "originalSentence": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node."
        },
        {
          "id": "sc_2980",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, ...] js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
          "position": 3,
          "originalSentence": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try."
        },
        {
          "id": "sc_2981",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: js will retry the operation with a linear backoff ...] This option represents the number of retries.",
          "position": 4,
          "originalSentence": "This option represents the number of retries."
        },
        {
          "id": "sc_2982",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: This option represents the number of retries....] This option is ignored if the `recursive` option is not `true`.",
          "position": 5,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "sc_2983",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `0`.",
          "position": 6,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "sc_2984",
          "content": "[`fs.rm(path[, options], callback)`] * `recursive` {boolean} If `true`, perform a recursive removal.",
          "position": 7,
          "originalSentence": "* `recursive` {boolean} If `true`, perform a recursive removal."
        },
        {
          "id": "sc_2985",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: * `recursive` {boolean} If `true`, perform a recur...] In recursive mode operations are retried on failure.",
          "position": 8,
          "originalSentence": "In recursive mode operations are retried on failure."
        },
        {
          "id": "sc_2986",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: In recursive mode operations are retried on failur...] **Default:** `false`.",
          "position": 9,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_2987",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: **Default:** `false`....] * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
          "position": 10,
          "originalSentence": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries."
        },
        {
          "id": "sc_2988",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: * `retryDelay` {integer} The amount of time in mil...] This option is ignored if the `recursive` option is not `true`.",
          "position": 11,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "sc_2989",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `100`.",
          "position": 12,
          "originalSentence": "**Default:** `100`."
        },
        {
          "id": "sc_2990",
          "content": "[`fs.rm(path[, options], callback)`] `callback` {Function} * `err` {Error}",
          "position": 13,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_2991",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error}...] Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 14,
          "originalSentence": "Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility)."
        },
        {
          "id": "sc_2992",
          "content": "[`fs.rm(path[, options], callback)`] [Previous: Asynchronously removes files and directories (mode...] No arguments other than a possible exception are given to the completion callback.",
          "position": 15,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_3030",
          "content": "[`fs.stat(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_3031",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "sc_3032",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_3033",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error} * `stats` {fs."
        },
        {
          "id": "sc_3034",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `stats` {f...] Asynchronous stat(2).",
          "position": 4,
          "originalSentence": "Asynchronous stat(2)."
        },
        {
          "id": "sc_3035",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: Asynchronous stat(2)....] The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
          "position": 5,
          "originalSentence": "The callback gets two arguments `(err, stats)` where `stats` is an {fs."
        },
        {
          "id": "sc_3036",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: The callback gets two arguments `(err, stats)` whe...] Stats} object.",
          "position": 6,
          "originalSentence": "Stats} object."
        },
        {
          "id": "sc_3037",
          "content": "[`fs.stat(path[, options], callback)`] In case of an error, the `err.",
          "position": 7,
          "originalSentence": "In case of an error, the `err."
        },
        {
          "id": "sc_3038",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: In case of an error, the `err....] code` will be one of [Common System Errors][].",
          "position": 8,
          "originalSentence": "code` will be one of [Common System Errors][]."
        },
        {
          "id": "sc_3039",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: code` will be one of [Common System Errors][]....] stat()`][] follows symbolic links.",
          "position": 9,
          "originalSentence": "stat()`][] follows symbolic links."
        },
        {
          "id": "sc_3040",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: stat()`][] follows symbolic links....] lstat()`][] to look at the links themselves.",
          "position": 10,
          "originalSentence": "lstat()`][] to look at the links themselves."
        },
        {
          "id": "sc_3041",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: lstat()`][] to look at the links themselves....] stat()` to check for the existence of a file before calling `fs.",
          "position": 11,
          "originalSentence": "stat()` to check for the existence of a file before calling `fs."
        },
        {
          "id": "sc_3042",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: stat()` to check for the existence of a file befor...] open()`, `fs.",
          "position": 12,
          "originalSentence": "open()`, `fs."
        },
        {
          "id": "sc_3043",
          "content": "[`fs.stat(path[, options], callback)`] readFile()`, or `fs.",
          "position": 13,
          "originalSentence": "readFile()`, or `fs."
        },
        {
          "id": "sc_3044",
          "content": "[`fs.stat(path[, options], callback)`] writeFile()` is not recommended.",
          "position": 14,
          "originalSentence": "writeFile()` is not recommended."
        },
        {
          "id": "sc_3045",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: writeFile()` is not recommended....] Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.",
          "position": 15,
          "originalSentence": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not available."
        },
        {
          "id": "sc_3046",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: Instead, user code should open/read/write the file...] To check if a file exists without manipulating it afterwards, [`fs.",
          "position": 16,
          "originalSentence": "To check if a file exists without manipulating it afterwards, [`fs."
        },
        {
          "id": "sc_3047",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: To check if a file exists without manipulating it ...] access()`][] is recommended.",
          "position": 17,
          "originalSentence": "access()`][] is recommended."
        },
        {
          "id": "sc_3048",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: access()`][] is recommended....] For example, given the following directory structure:",
          "position": 18,
          "originalSentence": "For example, given the following directory structure:"
        },
        {
          "id": "sc_3049",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: For example, given the following directory structu...] The next program will check for the stats of the given paths:",
          "position": 19,
          "originalSentence": "The next program will check for the stats of the given paths:"
        },
        {
          "id": "sc_3050",
          "content": "[`fs.stat(path[, options], callback)`] [Previous: The next program will check for the stats of the g...] The resulting output will resemble:",
          "position": 20,
          "originalSentence": "The resulting output will resemble:"
        },
        {
          "id": "sc_3082",
          "content": "[`fs.statfs(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_3083",
          "content": "[`fs.statfs(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] StatFs} object should be `bigint`.",
          "position": 1,
          "originalSentence": "StatFs} object should be `bigint`."
        },
        {
          "id": "sc_3084",
          "content": "[`fs.statfs(path[, options], callback)`] [Previous: StatFs} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_3085",
          "content": "[`fs.statfs(path[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error} * `stats` {fs."
        },
        {
          "id": "sc_3086",
          "content": "[`fs.statfs(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `stats` {f...] Asynchronous statfs(2).",
          "position": 4,
          "originalSentence": "Asynchronous statfs(2)."
        },
        {
          "id": "sc_3087",
          "content": "[`fs.statfs(path[, options], callback)`] [Previous: Asynchronous statfs(2)....] Returns information about the mounted file system which contains `path`.",
          "position": 5,
          "originalSentence": "Returns information about the mounted file system which contains `path`."
        },
        {
          "id": "sc_3088",
          "content": "[`fs.statfs(path[, options], callback)`] [Previous: Returns information about the mounted file system ...] The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
          "position": 6,
          "originalSentence": "The callback gets two arguments `(err, stats)` where `stats` is an {fs."
        },
        {
          "id": "sc_3089",
          "content": "[`fs.statfs(path[, options], callback)`] [Previous: The callback gets two arguments `(err, stats)` whe...] StatFs} object.",
          "position": 7,
          "originalSentence": "StatFs} object."
        },
        {
          "id": "sc_3090",
          "content": "[`fs.statfs(path[, options], callback)`] In case of an error, the `err.",
          "position": 8,
          "originalSentence": "In case of an error, the `err."
        },
        {
          "id": "sc_3091",
          "content": "[`fs.statfs(path[, options], callback)`] [Previous: In case of an error, the `err....] code` will be one of [Common System Errors][].",
          "position": 9,
          "originalSentence": "code` will be one of [Common System Errors][]."
        },
        {
          "id": "sc_3116",
          "content": "[`fs.symlink(target, path[, type], callback)`] `target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_3117",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: `target` {string|Buffer|URL} `path` {string|Buffer...] Creates the link called `path` pointing to `target`.",
          "position": 1,
          "originalSentence": "Creates the link called `path` pointing to `target`."
        },
        {
          "id": "sc_3118",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: Creates the link called `path` pointing to `target...] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_3119",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX symlink(2) documentation for more details.",
          "position": 3,
          "originalSentence": "See the POSIX symlink(2) documentation for more details."
        },
        {
          "id": "sc_3120",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: See the POSIX symlink(2) documentation for more de...] The `type` argument is only available on Windows and ignored on other platforms.",
          "position": 4,
          "originalSentence": "The `type` argument is only available on Windows and ignored on other platforms."
        },
        {
          "id": "sc_3121",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: The `type` argument is only available on Windows a...] It can be set to `'dir'`, `'file'`, or `'junction'`.",
          "position": 5,
          "originalSentence": "It can be set to `'dir'`, `'file'`, or `'junction'`."
        },
        {
          "id": "sc_3122",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: It can be set to `'dir'`, `'file'`, or `'junction'...] If the `type` argument is `null`, Node.",
          "position": 6,
          "originalSentence": "If the `type` argument is `null`, Node."
        },
        {
          "id": "sc_3123",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: If the `type` argument is `null`, Node....] js will autodetect `target` type and use `'file'` or `'dir'`.",
          "position": 7,
          "originalSentence": "js will autodetect `target` type and use `'file'` or `'dir'`."
        },
        {
          "id": "sc_3124",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: js will autodetect `target` type and use `'file'` ...] If the `target` does not exist, `'file'` will be used.",
          "position": 8,
          "originalSentence": "If the `target` does not exist, `'file'` will be used."
        },
        {
          "id": "sc_3125",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: If the `target` does not exist, `'file'` will be u...] Windows junction points require the destination path to be absolute.",
          "position": 9,
          "originalSentence": "Windows junction points require the destination path to be absolute."
        },
        {
          "id": "sc_3126",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: Windows junction points require the destination pa...] When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
          "position": 10,
          "originalSentence": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path."
        },
        {
          "id": "sc_3127",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: When using `'junction'`, the `target` argument wil...] Junction points on NTFS volumes can only point to directories.",
          "position": 11,
          "originalSentence": "Junction points on NTFS volumes can only point to directories."
        },
        {
          "id": "sc_3128",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: Junction points on NTFS volumes can only point to ...] Relative targets are relative to the link's parent directory.",
          "position": 12,
          "originalSentence": "Relative targets are relative to the link's parent directory."
        },
        {
          "id": "sc_3129",
          "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: Relative targets are relative to the link's parent...] The above example creates a symbolic link `mewtwo` which points to `mew` in the same directory:",
          "position": 13,
          "originalSentence": "The above example creates a symbolic link `mewtwo` which points to `mew` in the same directory:"
        },
        {
          "id": "sc_3152",
          "content": "[`fs.truncate(path[, len], callback)`] `path` {string|Buffer|URL} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error|AggregateError}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error|AggregateError}"
        },
        {
          "id": "sc_3153",
          "content": "[`fs.truncate(path[, len], callback)`] [Previous: `path` {string|Buffer|URL} `len` {integer} **Defau...] Truncates the file.",
          "position": 1,
          "originalSentence": "Truncates the file."
        },
        {
          "id": "sc_3154",
          "content": "[`fs.truncate(path[, len], callback)`] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_3155",
          "content": "[`fs.truncate(path[, len], callback)`] [Previous: No arguments other than a possible exception are g...] A file descriptor can also be passed as the first argument.",
          "position": 3,
          "originalSentence": "A file descriptor can also be passed as the first argument."
        },
        {
          "id": "sc_3156",
          "content": "[`fs.truncate(path[, len], callback)`] [Previous: A file descriptor can also be passed as the first ...] In this case, `fs.",
          "position": 4,
          "originalSentence": "In this case, `fs."
        },
        {
          "id": "sc_3157",
          "content": "[`fs.truncate(path[, len], callback)`] ftruncate()` is called.",
          "position": 5,
          "originalSentence": "ftruncate()` is called."
        },
        {
          "id": "sc_3158",
          "content": "[`fs.truncate(path[, len], callback)`] [Previous: ftruncate()` is called....] Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
          "position": 6,
          "originalSentence": "Passing a file descriptor is deprecated and may result in an error being thrown in the future."
        },
        {
          "id": "sc_3159",
          "content": "[`fs.truncate(path[, len], callback)`] [Previous: Passing a file descriptor is deprecated and may re...] See the POSIX truncate(2) documentation for more details.",
          "position": 7,
          "originalSentence": "See the POSIX truncate(2) documentation for more details."
        },
        {
          "id": "sc_3175",
          "content": "[`fs.unlink(path, callback)`] `path` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_3176",
          "content": "[`fs.unlink(path, callback)`] [Previous: `path` {string|Buffer|URL} `callback` {Function} *...] Asynchronously removes a file or symbolic link.",
          "position": 1,
          "originalSentence": "Asynchronously removes a file or symbolic link."
        },
        {
          "id": "sc_3177",
          "content": "[`fs.unlink(path, callback)`] [Previous: Asynchronously removes a file or symbolic link....] No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "sc_3178",
          "content": "[`fs.unlink(path, callback)`] [Previous: No arguments other than a possible exception are g...] unlink()` will not work on a directory, empty or otherwise.",
          "position": 3,
          "originalSentence": "unlink()` will not work on a directory, empty or otherwise."
        },
        {
          "id": "sc_3179",
          "content": "[`fs.unlink(path, callback)`] [Previous: unlink()` will not work on a directory, empty or o...] To remove a directory, use [`fs.",
          "position": 4,
          "originalSentence": "To remove a directory, use [`fs."
        },
        {
          "id": "sc_3180",
          "content": "[`fs.unlink(path, callback)`] [Previous: To remove a directory, use [`fs....] rmdir()`][].",
          "position": 5,
          "originalSentence": "rmdir()`][]."
        },
        {
          "id": "sc_3181",
          "content": "[`fs.unlink(path, callback)`] See the POSIX unlink(2) documentation for more details.",
          "position": 6,
          "originalSentence": "See the POSIX unlink(2) documentation for more details."
        },
        {
          "id": "sc_3203",
          "content": "[`fs.unwatchFile(filename[, listener])`] `filename` {string|Buffer|URL} `listener` {Function} Optional, a listener previously attached using `fs.",
          "position": 0,
          "originalSentence": "`filename` {string|Buffer|URL} `listener` {Function} Optional, a listener previously attached using `fs."
        },
        {
          "id": "sc_3204",
          "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: `filename` {string|Buffer|URL} `listener` {Functio...] watchFile()`",
          "position": 1,
          "originalSentence": "watchFile()`"
        },
        {
          "id": "sc_3205",
          "content": "[`fs.unwatchFile(filename[, listener])`] Stop watching for changes on `filename`.",
          "position": 2,
          "originalSentence": "Stop watching for changes on `filename`."
        },
        {
          "id": "sc_3206",
          "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: Stop watching for changes on `filename`....] If `listener` is specified, only that particular listener is removed.",
          "position": 3,
          "originalSentence": "If `listener` is specified, only that particular listener is removed."
        },
        {
          "id": "sc_3207",
          "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: If `listener` is specified, only that particular l...] Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`.",
          "position": 4,
          "originalSentence": "Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`."
        },
        {
          "id": "sc_3208",
          "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: Otherwise, _all_ listeners are removed, effectivel...] Calling `fs.",
          "position": 5,
          "originalSentence": "Calling `fs."
        },
        {
          "id": "sc_3209",
          "content": "[`fs.unwatchFile(filename[, listener])`] unwatchFile()` with a filename that is not being watched is a no-op, not an error.",
          "position": 6,
          "originalSentence": "unwatchFile()` with a filename that is not being watched is a no-op, not an error."
        },
        {
          "id": "sc_3210",
          "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: unwatchFile()` with a filename that is not being w...] Using [`fs.",
          "position": 7,
          "originalSentence": "Using [`fs."
        },
        {
          "id": "sc_3211",
          "content": "[`fs.unwatchFile(filename[, listener])`] watch()`][] is more efficient than `fs.",
          "position": 8,
          "originalSentence": "watch()`][] is more efficient than `fs."
        },
        {
          "id": "sc_3212",
          "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: watch()`][] is more efficient than `fs....] watchFile()` and `fs.",
          "position": 9,
          "originalSentence": "watchFile()` and `fs."
        },
        {
          "id": "sc_3213",
          "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: watchFile()` and `fs....] unwatchFile()`.",
          "position": 10,
          "originalSentence": "unwatchFile()`."
        },
        {
          "id": "sc_3214",
          "content": "[`fs.unwatchFile(filename[, listener])`] watch()` should be used instead of `fs.",
          "position": 11,
          "originalSentence": "watch()` should be used instead of `fs."
        },
        {
          "id": "sc_3215",
          "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: watch()` should be used instead of `fs....] watchFile()` and `fs.",
          "position": 12,
          "originalSentence": "watchFile()` and `fs."
        },
        {
          "id": "sc_3216",
          "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: watchFile()` and `fs....] unwatchFile()` when possible.",
          "position": 13,
          "originalSentence": "unwatchFile()` when possible."
        },
        {
          "id": "sc_3236",
          "content": "[`fs.utimes(path, atime, mtime, callback)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_3237",
          "content": "[`fs.utimes(path, atime, mtime, callback)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] Change the file system timestamps of the object referenced by `path`.",
          "position": 1,
          "originalSentence": "Change the file system timestamps of the object referenced by `path`."
        },
        {
          "id": "sc_3238",
          "content": "[`fs.utimes(path, atime, mtime, callback)`] [Previous: Change the file system timestamps of the object re...] The `atime` and `mtime` arguments follow these rules:",
          "position": 2,
          "originalSentence": "The `atime` and `mtime` arguments follow these rules:"
        },
        {
          "id": "sc_3239",
          "content": "[`fs.utimes(path, atime, mtime, callback)`] [Previous: The `atime` and `mtime` arguments follow these rul...] Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789.",
          "position": 3,
          "originalSentence": "Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789."
        },
        {
          "id": "sc_3240",
          "content": "[`fs.utimes(path, atime, mtime, callback)`] [Previous: Values can be either numbers representing Unix epo...] If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
          "position": 4,
          "originalSentence": "If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown."
        },
        {
          "id": "sc_3267",
          "content": "[`fs.watch(filename[, options][, listener])`] `filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched.",
          "position": 0,
          "originalSentence": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched."
        },
        {
          "id": "sc_3268",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: `filename` {string|Buffer|URL} `options` {string|O...] **Default:** `true`.",
          "position": 1,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "sc_3269",
          "content": "[`fs.watch(filename[, options][, listener])`] * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
          "position": 2,
          "originalSentence": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory."
        },
        {
          "id": "sc_3270",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: * `recursive` {boolean} Indicates whether all subd...] This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
          "position": 3,
          "originalSentence": "This applies when a directory is specified, and only on supported platforms (See [caveats][])."
        },
        {
          "id": "sc_3271",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: This applies when a directory is specified, and on...] **Default:** `false`.",
          "position": 4,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_3272",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: **Default:** `false`....] * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
          "position": 5,
          "originalSentence": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener."
        },
        {
          "id": "sc_3273",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: * `encoding` {string} Specifies the character enco...] **Default:** `'utf8'`.",
          "position": 6,
          "originalSentence": "**Default:** `'utf8'`."
        },
        {
          "id": "sc_3274",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: **Default:** `'utf8'`....] * `signal` {AbortSignal} allows closing the watcher with an AbortSignal.",
          "position": 7,
          "originalSentence": "* `signal` {AbortSignal} allows closing the watcher with an AbortSignal."
        },
        {
          "id": "sc_3275",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: * `signal` {AbortSignal} allows closing the watche...] `listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs.",
          "position": 8,
          "originalSentence": "`listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs."
        },
        {
          "id": "sc_3276",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: `listener` {Function|undefined} **Default:** `unde...] Watch for changes on `filename`, where `filename` is either a file or a directory.",
          "position": 9,
          "originalSentence": "Watch for changes on `filename`, where `filename` is either a file or a directory."
        },
        {
          "id": "sc_3277",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: Watch for changes on `filename`, where `filename` ...] The second argument is optional.",
          "position": 10,
          "originalSentence": "The second argument is optional."
        },
        {
          "id": "sc_3278",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: The second argument is optional....] If `options` is provided as a string, it specifies the `encoding`.",
          "position": 11,
          "originalSentence": "If `options` is provided as a string, it specifies the `encoding`."
        },
        {
          "id": "sc_3279",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: If `options` is provided as a string, it specifies...] Otherwise `options` should be passed as an object.",
          "position": 12,
          "originalSentence": "Otherwise `options` should be passed as an object."
        },
        {
          "id": "sc_3280",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: Otherwise `options` should be passed as an object....] The listener callback gets two arguments `(eventType, filename)`.",
          "position": 13,
          "originalSentence": "The listener callback gets two arguments `(eventType, filename)`."
        },
        {
          "id": "sc_3281",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: The listener callback gets two arguments `(eventTy...] `eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event.",
          "position": 14,
          "originalSentence": "`eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event."
        },
        {
          "id": "sc_3282",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: `eventType` is either `'rename'` or `'change'`, an...] On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory.",
          "position": 15,
          "originalSentence": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory."
        },
        {
          "id": "sc_3283",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: On most platforms, `'rename'` is emitted whenever ...] The listener callback is attached to the `'change'` event fired by {fs.",
          "position": 16,
          "originalSentence": "The listener callback is attached to the `'change'` event fired by {fs."
        },
        {
          "id": "sc_3284",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: The listener callback is attached to the `'change'...] FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`.",
          "position": 17,
          "originalSentence": "FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`."
        },
        {
          "id": "sc_3285",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: FSWatcher}, but it is not the same thing as the `'...] If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs.",
          "position": 18,
          "originalSentence": "If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs."
        },
        {
          "id": "sc_3286",
          "content": "[`fs.watch(filename[, options][, listener])`] [Previous: If a `signal` is passed, aborting the correspondin...] FSWatcher}.",
          "position": 19,
          "originalSentence": "FSWatcher}."
        },
        {
          "id": "sc_3313",
          "content": "[Caveats] watch` API is not 100% consistent across platforms, and is unavailable in some situations.",
          "position": 0,
          "originalSentence": "watch` API is not 100% consistent across platforms, and is unavailable in some situations."
        },
        {
          "id": "sc_3314",
          "content": "[Caveats] [Previous: watch` API is not 100% consistent across platforms...] On Windows, no events will be emitted if the watched directory is moved or renamed.",
          "position": 1,
          "originalSentence": "On Windows, no events will be emitted if the watched directory is moved or renamed."
        },
        {
          "id": "sc_3315",
          "content": "[Caveats] [Previous: On Windows, no events will be emitted if the watch...] An `EPERM` error is reported when the watched directory is deleted.",
          "position": 2,
          "originalSentence": "An `EPERM` error is reported when the watched directory is deleted."
        },
        {
          "id": "sc_3316",
          "content": "[Caveats] [Previous: An `EPERM` error is reported when the watched dire...] watch` API does not provide any protection with respect to malicious actions on the file system.",
          "position": 3,
          "originalSentence": "watch` API does not provide any protection with respect to malicious actions on the file system."
        },
        {
          "id": "sc_3317",
          "content": "[Caveats] [Previous: watch` API does not provide any protection with re...] For example, on Windows it is implemented by monitoring changes in a directory versus specific files.",
          "position": 4,
          "originalSentence": "For example, on Windows it is implemented by monitoring changes in a directory versus specific files."
        },
        {
          "id": "sc_3318",
          "content": "[Caveats] [Previous: For example, on Windows it is implemented by monit...] This allows substitution of a file and fs reporting changes on the new file with the same filename.",
          "position": 5,
          "originalSentence": "This allows substitution of a file and fs reporting changes on the new file with the same filename."
        },
        {
          "id": "sc_3339",
          "content": "[Availability] This feature depends on the underlying operating system providing a way to be notified of file system changes.",
          "position": 0,
          "originalSentence": "This feature depends on the underlying operating system providing a way to be notified of file system changes."
        },
        {
          "id": "sc_3340",
          "content": "[Availability] [Previous: This feature depends on the underlying operating s...] On Linux systems, this uses [`inotify(7)`][].",
          "position": 1,
          "originalSentence": "On Linux systems, this uses [`inotify(7)`][]."
        },
        {
          "id": "sc_3341",
          "content": "[Availability] [Previous: On Linux systems, this uses [`inotify(7)`][]....] On BSD systems, this uses [`kqueue(2)`][].",
          "position": 2,
          "originalSentence": "On BSD systems, this uses [`kqueue(2)`][]."
        },
        {
          "id": "sc_3342",
          "content": "[Availability] [Previous: On BSD systems, this uses [`kqueue(2)`][]....] On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories.",
          "position": 3,
          "originalSentence": "On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories."
        },
        {
          "id": "sc_3343",
          "content": "[Availability] [Previous: On macOS, this uses [`kqueue(2)`][] for files and ...] On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][].",
          "position": 4,
          "originalSentence": "On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][]."
        },
        {
          "id": "sc_3344",
          "content": "[Availability] [Previous: On SunOS systems (including Solaris and SmartOS), ...] On Windows systems, this feature depends on [`ReadDirectoryChangesW`][].",
          "position": 5,
          "originalSentence": "On Windows systems, this feature depends on [`ReadDirectoryChangesW`][]."
        },
        {
          "id": "sc_3345",
          "content": "[Availability] [Previous: On Windows systems, this feature depends on [`Read...] On AIX systems, this feature depends on [`AHAFS`][], which must be enabled.",
          "position": 6,
          "originalSentence": "On AIX systems, this feature depends on [`AHAFS`][], which must be enabled."
        },
        {
          "id": "sc_3346",
          "content": "[Availability] [Previous: On AIX systems, this feature depends on [`AHAFS`][...] On IBM i systems, this feature is not supported.",
          "position": 7,
          "originalSentence": "On IBM i systems, this feature is not supported."
        },
        {
          "id": "sc_3347",
          "content": "[Availability] [Previous: On IBM i systems, this feature is not supported....] If the underlying functionality is not available for some reason, then `fs.",
          "position": 8,
          "originalSentence": "If the underlying functionality is not available for some reason, then `fs."
        },
        {
          "id": "sc_3348",
          "content": "[Availability] [Previous: If the underlying functionality is not available f...] watch()` will not be able to function and may throw an exception.",
          "position": 9,
          "originalSentence": "watch()` will not be able to function and may throw an exception."
        },
        {
          "id": "sc_3349",
          "content": "[Availability] [Previous: watch()` will not be able to function and may thro...] For example, watching files or directories can be unreliable",
          "position": 10,
          "originalSentence": "For example, watching files or directories can be unreliable"
        },
        {
          "id": "sc_3350",
          "content": "[Availability] [Previous: For example, watching files or directories can be ...] and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker.",
          "position": 11,
          "originalSentence": "and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker."
        },
        {
          "id": "sc_3351",
          "content": "[Availability] [Previous: and in some cases impossible, on network file syst...] It is still possible to use `fs.",
          "position": 12,
          "originalSentence": "It is still possible to use `fs."
        },
        {
          "id": "sc_3352",
          "content": "[Availability] [Previous: It is still possible to use `fs....] watchFile()`, which uses stat polling, but this method is slower and less reliable.",
          "position": 13,
          "originalSentence": "watchFile()`, which uses stat polling, but this method is slower and less reliable."
        },
        {
          "id": "sc_3375",
          "content": "[Inodes] On Linux and macOS systems, `fs.",
          "position": 0,
          "originalSentence": "On Linux and macOS systems, `fs."
        },
        {
          "id": "sc_3376",
          "content": "[Inodes] [Previous: On Linux and macOS systems, `fs....] watch()` resolves the path to an [inode][] and watches the inode.",
          "position": 1,
          "originalSentence": "watch()` resolves the path to an [inode][] and watches the inode."
        },
        {
          "id": "sc_3377",
          "content": "[Inodes] [Previous: watch()` resolves the path to an [inode][] and wat...] If the watched path is deleted and recreated, it is assigned a new inode.",
          "position": 2,
          "originalSentence": "If the watched path is deleted and recreated, it is assigned a new inode."
        },
        {
          "id": "sc_3378",
          "content": "[Inodes] [Previous: If the watched path is deleted and recreated, it i...] The watch will emit an event for the delete but will continue watching the _original_ inode.",
          "position": 3,
          "originalSentence": "The watch will emit an event for the delete but will continue watching the _original_ inode."
        },
        {
          "id": "sc_3379",
          "content": "[Inodes] [Previous: The watch will emit an event for the delete but wi...] Events for the new inode will not be emitted.",
          "position": 4,
          "originalSentence": "Events for the new inode will not be emitted."
        },
        {
          "id": "sc_3380",
          "content": "[Inodes] [Previous: Events for the new inode will not be emitted....] This is expected behavior.",
          "position": 5,
          "originalSentence": "This is expected behavior."
        },
        {
          "id": "sc_3381",
          "content": "[Inodes] [Previous: This is expected behavior....] AIX files retain the same inode for the lifetime of a file.",
          "position": 6,
          "originalSentence": "AIX files retain the same inode for the lifetime of a file."
        },
        {
          "id": "sc_3382",
          "content": "[Inodes] [Previous: AIX files retain the same inode for the lifetime o...] Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation).",
          "position": 7,
          "originalSentence": "Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation)."
        },
        {
          "id": "sc_3394",
          "content": "[Filename argument] Providing `filename` argument in the callback is only supported on Linux, macOS, Windows, and AIX.",
          "position": 0,
          "originalSentence": "Providing `filename` argument in the callback is only supported on Linux, macOS, Windows, and AIX."
        },
        {
          "id": "sc_3395",
          "content": "[Filename argument] [Previous: Providing `filename` argument in the callback is o...] Even on supported platforms, `filename` is not always guaranteed to be provided.",
          "position": 1,
          "originalSentence": "Even on supported platforms, `filename` is not always guaranteed to be provided."
        },
        {
          "id": "sc_3396",
          "content": "[Filename argument] [Previous: Even on supported platforms, `filename` is not alw...] Therefore, don't assume that `filename` argument is always provided in the callback, and have some fallback logic if it is `null`.",
          "position": 2,
          "originalSentence": "Therefore, don't assume that `filename` argument is always provided in the callback, and have some fallback logic if it is `null`."
        },
        {
          "id": "sc_3431",
          "content": "[`fs.watchFile(filename[, options], listener)`] `filename` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} **Default:** `false` * `persistent` {boolean} **Default:** `true` * `interval` {integer} **Default:** `5007` `listener` {Function} * `current` {fs.",
          "position": 0,
          "originalSentence": "`filename` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} **Default:** `false` * `persistent` {boolean} **Default:** `true` * `interval` {integer} **Default:** `5007` `listener` {Function} * `current` {fs."
        },
        {
          "id": "sc_3432",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: `filename` {string|Buffer|URL} `options` {Object} ...] Stats} * `previous` {fs.",
          "position": 1,
          "originalSentence": "Stats} * `previous` {fs."
        },
        {
          "id": "sc_3433",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: Stats} * `previous` {fs....] Stats} Returns: {fs.",
          "position": 2,
          "originalSentence": "Stats} Returns: {fs."
        },
        {
          "id": "sc_3434",
          "content": "[`fs.watchFile(filename[, options], listener)`] StatWatcher}",
          "position": 3,
          "originalSentence": "StatWatcher}"
        },
        {
          "id": "sc_3435",
          "content": "[`fs.watchFile(filename[, options], listener)`] Watch for changes on `filename`.",
          "position": 4,
          "originalSentence": "Watch for changes on `filename`."
        },
        {
          "id": "sc_3436",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: Watch for changes on `filename`....] The callback `listener` will be called each time the file is accessed.",
          "position": 5,
          "originalSentence": "The callback `listener` will be called each time the file is accessed."
        },
        {
          "id": "sc_3437",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: The callback `listener` will be called each time t...] The `options` argument may be omitted.",
          "position": 6,
          "originalSentence": "The `options` argument may be omitted."
        },
        {
          "id": "sc_3438",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: The `options` argument may be omitted....] If provided, it should be an object.",
          "position": 7,
          "originalSentence": "If provided, it should be an object."
        },
        {
          "id": "sc_3439",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: If provided, it should be an object....] The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched.",
          "position": 8,
          "originalSentence": "The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched."
        },
        {
          "id": "sc_3440",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: The `options` object may contain a boolean named `...] The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds.",
          "position": 9,
          "originalSentence": "The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds."
        },
        {
          "id": "sc_3441",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: The `options` object may specify an `interval` pro...] The `listener` gets two arguments the current stat object and the previous stat object:",
          "position": 10,
          "originalSentence": "The `listener` gets two arguments the current stat object and the previous stat object:"
        },
        {
          "id": "sc_3442",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: The `listener` gets two arguments the current stat...] These stat objects are instances of `fs.",
          "position": 11,
          "originalSentence": "These stat objects are instances of `fs."
        },
        {
          "id": "sc_3443",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: These stat objects are instances of `fs....] If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s.",
          "position": 12,
          "originalSentence": "If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s."
        },
        {
          "id": "sc_3444",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: If the `bigint` option is `true`, the numeric valu...] To be notified when the file was modified, not just accessed, it is necessary to compare `curr.",
          "position": 13,
          "originalSentence": "To be notified when the file was modified, not just accessed, it is necessary to compare `curr."
        },
        {
          "id": "sc_3445",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: To be notified when the file was modified, not jus...] mtimeMs` and `prev.",
          "position": 14,
          "originalSentence": "mtimeMs` and `prev."
        },
        {
          "id": "sc_3446",
          "content": "[`fs.watchFile(filename[, options], listener)`] When an `fs.",
          "position": 15,
          "originalSentence": "When an `fs."
        },
        {
          "id": "sc_3447",
          "content": "[`fs.watchFile(filename[, options], listener)`] watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch).",
          "position": 16,
          "originalSentence": "watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch)."
        },
        {
          "id": "sc_3448",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: watchFile` operation results in an `ENOENT` error,...] If the file is created later on, the listener will be called again, with the latest stat objects.",
          "position": 17,
          "originalSentence": "If the file is created later on, the listener will be called again, with the latest stat objects."
        },
        {
          "id": "sc_3449",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: If the file is created later on, the listener will...] This is a change in functionality since v0.",
          "position": 18,
          "originalSentence": "This is a change in functionality since v0."
        },
        {
          "id": "sc_3450",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: This is a change in functionality since v0....] Using [`fs.",
          "position": 19,
          "originalSentence": "Using [`fs."
        },
        {
          "id": "sc_3451",
          "content": "[`fs.watchFile(filename[, options], listener)`] watch()`][] is more efficient than `fs.",
          "position": 20,
          "originalSentence": "watch()`][] is more efficient than `fs."
        },
        {
          "id": "sc_3452",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: watch()`][] is more efficient than `fs....] watchFile` and `fs.",
          "position": 21,
          "originalSentence": "watchFile` and `fs."
        },
        {
          "id": "sc_3453",
          "content": "[`fs.watchFile(filename[, options], listener)`] unwatchFile`.",
          "position": 22,
          "originalSentence": "unwatchFile`."
        },
        {
          "id": "sc_3454",
          "content": "[`fs.watchFile(filename[, options], listener)`] watch` should be used instead of `fs.",
          "position": 23,
          "originalSentence": "watch` should be used instead of `fs."
        },
        {
          "id": "sc_3455",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: watch` should be used instead of `fs....] watchFile` and `fs.",
          "position": 24,
          "originalSentence": "watchFile` and `fs."
        },
        {
          "id": "sc_3456",
          "content": "[`fs.watchFile(filename[, options], listener)`] unwatchFile` when possible.",
          "position": 25,
          "originalSentence": "unwatchFile` when possible."
        },
        {
          "id": "sc_3457",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: unwatchFile` when possible....] When a file being watched by `fs.",
          "position": 26,
          "originalSentence": "When a file being watched by `fs."
        },
        {
          "id": "sc_3458",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: When a file being watched by `fs....] watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance).",
          "position": 27,
          "originalSentence": "watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance)."
        },
        {
          "id": "sc_3459",
          "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: watchFile()` disappears and reappears, then the co...] This happens when:",
          "position": 28,
          "originalSentence": "This happens when:"
        },
        {
          "id": "sc_3460",
          "content": "[`fs.watchFile(filename[, options], listener)`] the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name",
          "position": 29,
          "originalSentence": "the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name"
        },
        {
          "id": "sc_3508",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer."
        },
        {
          "id": "sc_3509",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}",
          "position": 1,
          "originalSentence": "byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}"
        },
        {
          "id": "sc_3510",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: byteLength - offset` `position` {integer|null} **D...] Write `buffer` to the file specified by `fd`.",
          "position": 2,
          "originalSentence": "Write `buffer` to the file specified by `fd`."
        },
        {
          "id": "sc_3511",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: Write `buffer` to the file specified by `fd`....] `offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write.",
          "position": 3,
          "originalSentence": "`offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write."
        },
        {
          "id": "sc_3512",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: `offset` determines the part of the buffer to be w...] `position` refers to the offset from the beginning of the file where this data should be written.",
          "position": 4,
          "originalSentence": "`position` refers to the offset from the beginning of the file where this data should be written."
        },
        {
          "id": "sc_3513",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: `position` refers to the offset from the beginning...] If `typeof position !",
          "position": 5,
          "originalSentence": "If `typeof position !"
        },
        {
          "id": "sc_3514",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: If `typeof position !...] == 'number'`, the data will be written at the current position.",
          "position": 6,
          "originalSentence": "== 'number'`, the data will be written at the current position."
        },
        {
          "id": "sc_3515",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: == 'number'`, the data will be written at the curr...] See pwrite(2).",
          "position": 7,
          "originalSentence": "See pwrite(2)."
        },
        {
          "id": "sc_3516",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`.",
          "position": 8,
          "originalSentence": "The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`."
        },
        {
          "id": "sc_3517",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: The callback will be given three arguments `(err, ...] If this method is invoked as its [`util.",
          "position": 9,
          "originalSentence": "If this method is invoked as its [`util."
        },
        {
          "id": "sc_3518",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: If this method is invoked as its [`util....] promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties.",
          "position": 10,
          "originalSentence": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties."
        },
        {
          "id": "sc_3519",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: promisify()`][]ed version, it returns a promise fo...] It is unsafe to use `fs.",
          "position": 11,
          "originalSentence": "It is unsafe to use `fs."
        },
        {
          "id": "sc_3520",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: It is unsafe to use `fs....] write()` multiple times on the same file without waiting for the callback.",
          "position": 12,
          "originalSentence": "write()` multiple times on the same file without waiting for the callback."
        },
        {
          "id": "sc_3521",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: write()` multiple times on the same file without w...] For this scenario, [`fs.",
          "position": 13,
          "originalSentence": "For this scenario, [`fs."
        },
        {
          "id": "sc_3522",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: For this scenario, [`fs....] createWriteStream()`][] is recommended.",
          "position": 14,
          "originalSentence": "createWriteStream()`][] is recommended."
        },
        {
          "id": "sc_3523",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: createWriteStream()`][] is recommended....] On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 15,
          "originalSentence": "On Linux, positional writes don't work when the file is opened in append mode."
        },
        {
          "id": "sc_3524",
          "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: On Linux, positional writes don't work when the fi...] The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 16,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "sc_3548",
          "content": "[`fs.write(fd, buffer[, options], callback)`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "sc_3549",
          "content": "[`fs.write(fd, buffer[, options], callback)`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] byteLength - offset` * `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}",
          "position": 1,
          "originalSentence": "byteLength - offset` * `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}"
        },
        {
          "id": "sc_3550",
          "content": "[`fs.write(fd, buffer[, options], callback)`] [Previous: byteLength - offset` * `position` {integer|null} *...] Write `buffer` to the file specified by `fd`.",
          "position": 2,
          "originalSentence": "Write `buffer` to the file specified by `fd`."
        },
        {
          "id": "sc_3551",
          "content": "[`fs.write(fd, buffer[, options], callback)`] [Previous: Write `buffer` to the file specified by `fd`....] Similar to the above `fs.",
          "position": 3,
          "originalSentence": "Similar to the above `fs."
        },
        {
          "id": "sc_3552",
          "content": "[`fs.write(fd, buffer[, options], callback)`] [Previous: Similar to the above `fs....] write` function, this version takes an optional `options` object.",
          "position": 4,
          "originalSentence": "write` function, this version takes an optional `options` object."
        },
        {
          "id": "sc_3553",
          "content": "[`fs.write(fd, buffer[, options], callback)`] [Previous: write` function, this version takes an optional `o...] If no `options` object is specified, it will default with the above values.",
          "position": 5,
          "originalSentence": "If no `options` object is specified, it will default with the above values."
        },
        {
          "id": "sc_3583",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] `fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `written` {integer} * `string` {string}",
          "position": 0,
          "originalSentence": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `written` {integer} * `string` {string}"
        },
        {
          "id": "sc_3584",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: `fd` {integer} `string` {string} `position` {integ...] Write `string` to the file specified by `fd`.",
          "position": 1,
          "originalSentence": "Write `string` to the file specified by `fd`."
        },
        {
          "id": "sc_3585",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: Write `string` to the file specified by `fd`....] If `string` is not a string, an exception is thrown.",
          "position": 2,
          "originalSentence": "If `string` is not a string, an exception is thrown."
        },
        {
          "id": "sc_3586",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: If `string` is not a string, an exception is throw...] `position` refers to the offset from the beginning of the file where this data should be written.",
          "position": 3,
          "originalSentence": "`position` refers to the offset from the beginning of the file where this data should be written."
        },
        {
          "id": "sc_3587",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: `position` refers to the offset from the beginning...] If `typeof position !",
          "position": 4,
          "originalSentence": "If `typeof position !"
        },
        {
          "id": "sc_3588",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: If `typeof position !...] == 'number'` the data will be written at the current position.",
          "position": 5,
          "originalSentence": "== 'number'` the data will be written at the current position."
        },
        {
          "id": "sc_3589",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: == 'number'` the data will be written at the curre...] See pwrite(2).",
          "position": 6,
          "originalSentence": "See pwrite(2)."
        },
        {
          "id": "sc_3590",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] `encoding` is the expected string encoding.",
          "position": 7,
          "originalSentence": "`encoding` is the expected string encoding."
        },
        {
          "id": "sc_3591",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: `encoding` is the expected string encoding....] The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written.",
          "position": 8,
          "originalSentence": "The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written."
        },
        {
          "id": "sc_3592",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: The callback will receive the arguments `(err, wri...] Bytes written is not necessarily the same as string characters written.",
          "position": 9,
          "originalSentence": "Bytes written is not necessarily the same as string characters written."
        },
        {
          "id": "sc_3593",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: Bytes written is not necessarily the same as strin...] See [`Buffer.",
          "position": 10,
          "originalSentence": "See [`Buffer."
        },
        {
          "id": "sc_3594",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] byteLength`][].",
          "position": 11,
          "originalSentence": "byteLength`][]."
        },
        {
          "id": "sc_3595",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] It is unsafe to use `fs.",
          "position": 12,
          "originalSentence": "It is unsafe to use `fs."
        },
        {
          "id": "sc_3596",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: It is unsafe to use `fs....] write()` multiple times on the same file without waiting for the callback.",
          "position": 13,
          "originalSentence": "write()` multiple times on the same file without waiting for the callback."
        },
        {
          "id": "sc_3597",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: write()` multiple times on the same file without w...] For this scenario, [`fs.",
          "position": 14,
          "originalSentence": "For this scenario, [`fs."
        },
        {
          "id": "sc_3598",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: For this scenario, [`fs....] createWriteStream()`][] is recommended.",
          "position": 15,
          "originalSentence": "createWriteStream()`][] is recommended."
        },
        {
          "id": "sc_3599",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: createWriteStream()`][] is recommended....] On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 16,
          "originalSentence": "On Linux, positional writes don't work when the file is opened in append mode."
        },
        {
          "id": "sc_3600",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: On Linux, positional writes don't work when the fi...] The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 17,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "sc_3601",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: The kernel ignores the position argument and alway...] On Windows, if the file descriptor is connected to the console (e.",
          "position": 18,
          "originalSentence": "On Windows, if the file descriptor is connected to the console (e."
        },
        {
          "id": "sc_3602",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: On Windows, if the file descriptor is connected to...] `fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used.",
          "position": 19,
          "originalSentence": "`fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used."
        },
        {
          "id": "sc_3603",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: `fd == 1` or `stdout`) a string containing non-ASC...] It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command.",
          "position": 20,
          "originalSentence": "It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command."
        },
        {
          "id": "sc_3604",
          "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: It is possible to configure the console to render ...] See the [chcp][] docs for more details.",
          "position": 21,
          "originalSentence": "See the [chcp][] docs for more details."
        },
        {
          "id": "sc_3657",
          "content": "[`fs.writeFile(file, data[, options], callback)`] `file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_3658",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: `file` {string|Buffer|URL|integer} filename or fil...] **Default:** `'w'`.",
          "position": 1,
          "originalSentence": "**Default:** `'w'`."
        },
        {
          "id": "sc_3659",
          "content": "[`fs.writeFile(file, data[, options], callback)`] * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs."
        },
        {
          "id": "sc_3660",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: * `flush` {boolean} If all data is successfully wr...] fsync()` is used to flush the data.",
          "position": 3,
          "originalSentence": "fsync()` is used to flush the data."
        },
        {
          "id": "sc_3661",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: fsync()` is used to flush the data....] **Default:** `false`.",
          "position": 4,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_3662",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: **Default:** `false`....] * `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError}",
          "position": 5,
          "originalSentence": "* `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError}"
        },
        {
          "id": "sc_3663",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: * `signal` {AbortSignal} allows aborting an in-pro...] When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists.",
          "position": 6,
          "originalSentence": "When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists."
        },
        {
          "id": "sc_3664",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: When `file` is a filename, asynchronously writes d...] `data` can be a string or a buffer.",
          "position": 7,
          "originalSentence": "`data` can be a string or a buffer."
        },
        {
          "id": "sc_3665",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: `data` can be a string or a buffer....] When `file` is a file descriptor, the behavior is similar to calling `fs.",
          "position": 8,
          "originalSentence": "When `file` is a file descriptor, the behavior is similar to calling `fs."
        },
        {
          "id": "sc_3666",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: When `file` is a file descriptor, the behavior is ...] write()` directly (which is recommended).",
          "position": 9,
          "originalSentence": "write()` directly (which is recommended)."
        },
        {
          "id": "sc_3667",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: write()` directly (which is recommended)....] See the notes below on using a file descriptor.",
          "position": 10,
          "originalSentence": "See the notes below on using a file descriptor."
        },
        {
          "id": "sc_3668",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: See the notes below on using a file descriptor....] The `encoding` option is ignored if `data` is a buffer.",
          "position": 11,
          "originalSentence": "The `encoding` option is ignored if `data` is a buffer."
        },
        {
          "id": "sc_3669",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: The `encoding` option is ignored if `data` is a bu...] The `mode` option only affects the newly created file.",
          "position": 12,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "sc_3670",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
          "position": 13,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "sc_3671",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: open()`][] for more details....] If `options` is a string, then it specifies the encoding:",
          "position": 14,
          "originalSentence": "If `options` is a string, then it specifies the encoding:"
        },
        {
          "id": "sc_3672",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: If `options` is a string, then it specifies the en...] It is unsafe to use `fs.",
          "position": 15,
          "originalSentence": "It is unsafe to use `fs."
        },
        {
          "id": "sc_3673",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: It is unsafe to use `fs....] writeFile()` multiple times on the same file without waiting for the callback.",
          "position": 16,
          "originalSentence": "writeFile()` multiple times on the same file without waiting for the callback."
        },
        {
          "id": "sc_3674",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: writeFile()` multiple times on the same file witho...] For this scenario, [`fs.",
          "position": 17,
          "originalSentence": "For this scenario, [`fs."
        },
        {
          "id": "sc_3675",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: For this scenario, [`fs....] createWriteStream()`][] is recommended.",
          "position": 18,
          "originalSentence": "createWriteStream()`][] is recommended."
        },
        {
          "id": "sc_3676",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: createWriteStream()`][] is recommended....] Similarly to `fs.",
          "position": 19,
          "originalSentence": "Similarly to `fs."
        },
        {
          "id": "sc_3677",
          "content": "[`fs.writeFile(file, data[, options], callback)`] readFile` - `fs.",
          "position": 20,
          "originalSentence": "readFile` - `fs."
        },
        {
          "id": "sc_3678",
          "content": "[`fs.writeFile(file, data[, options], callback)`] writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
          "position": 21,
          "originalSentence": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it."
        },
        {
          "id": "sc_3679",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: writeFile` is a convenience method that performs m...] For performance sensitive code consider using [`fs.",
          "position": 22,
          "originalSentence": "For performance sensitive code consider using [`fs."
        },
        {
          "id": "sc_3680",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: For performance sensitive code consider using [`fs...] createWriteStream()`][].",
          "position": 23,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "sc_3681",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: createWriteStream()`][]....] It is possible to use an {AbortSignal} to cancel an `fs.",
          "position": 24,
          "originalSentence": "It is possible to use an {AbortSignal} to cancel an `fs."
        },
        {
          "id": "sc_3682",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: It is possible to use an {AbortSignal} to cancel a...] writeFile()`.",
          "position": 25,
          "originalSentence": "writeFile()`."
        },
        {
          "id": "sc_3683",
          "content": "[`fs.writeFile(file, data[, options], callback)`] Cancelation is \"best effort\", and some amount of data is likely still to be written.",
          "position": 26,
          "originalSentence": "Cancelation is \"best effort\", and some amount of data is likely still to be written."
        },
        {
          "id": "sc_3684",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: Cancelation is \"best effort\", and some amount of d...] Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 27,
          "originalSentence": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs."
        },
        {
          "id": "sc_3685",
          "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: Aborting an ongoing request does not abort individ...] writeFile` performs.",
          "position": 28,
          "originalSentence": "writeFile` performs."
        },
        {
          "id": "sc_3729",
          "content": "[Using `fs.writeFile()` with file descriptors] When `file` is a file descriptor, the behavior is almost identical to directly calling `fs.",
          "position": 0,
          "originalSentence": "When `file` is a file descriptor, the behavior is almost identical to directly calling `fs."
        },
        {
          "id": "sc_3730",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: When `file` is a file descriptor, the behavior is ...] write()` like:",
          "position": 1,
          "originalSentence": "write()` like:"
        },
        {
          "id": "sc_3731",
          "content": "[Using `fs.writeFile()` with file descriptors] The difference from directly calling `fs.",
          "position": 2,
          "originalSentence": "The difference from directly calling `fs."
        },
        {
          "id": "sc_3732",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: The difference from directly calling `fs....] write()` is that under some unusual conditions, `fs.",
          "position": 3,
          "originalSentence": "write()` is that under some unusual conditions, `fs."
        },
        {
          "id": "sc_3733",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: write()` is that under some unusual conditions, `f...] write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs.",
          "position": 4,
          "originalSentence": "write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs."
        },
        {
          "id": "sc_3734",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: write()` might write only part of the buffer and n...] writeFile()` retries until the data is entirely written (or an error occurs).",
          "position": 5,
          "originalSentence": "writeFile()` retries until the data is entirely written (or an error occurs)."
        },
        {
          "id": "sc_3735",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: writeFile()` retries until the data is entirely wr...] The implications of this are a common source of confusion.",
          "position": 6,
          "originalSentence": "The implications of this are a common source of confusion."
        },
        {
          "id": "sc_3736",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: The implications of this are a common source of co...] In the file descriptor case, the file is not replaced!",
          "position": 7,
          "originalSentence": "In the file descriptor case, the file is not replaced!"
        },
        {
          "id": "sc_3737",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: In the file descriptor case, the file is not repla...] The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.",
          "position": 8,
          "originalSentence": "The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data."
        },
        {
          "id": "sc_3738",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: The data is not necessarily written to the beginni...] For example, if `fs.",
          "position": 9,
          "originalSentence": "For example, if `fs."
        },
        {
          "id": "sc_3739",
          "content": "[Using `fs.writeFile()` with file descriptors] writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'`",
          "position": 10,
          "originalSentence": "writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'`"
        },
        {
          "id": "sc_3740",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: writeFile()` is called twice in a row, first to wr...] and might contain some of the file's original data (depending on the size of the original file",
          "position": 11,
          "originalSentence": "and might contain some of the file's original data (depending on the size of the original file"
        },
        {
          "id": "sc_3741",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: and might contain some of the file's original data...] and the position of the file descriptor).",
          "position": 12,
          "originalSentence": "and the position of the file descriptor)."
        },
        {
          "id": "sc_3742",
          "content": "[Using `fs.writeFile()` with file descriptors] [Previous: and the position of the file descriptor)....] If a file name had been used instead of a descriptor, the file would be guaranteed to contain only `', World'`.",
          "position": 13,
          "originalSentence": "If a file name had been used instead of a descriptor, the file would be guaranteed to contain only `', World'`."
        },
        {
          "id": "sc_3772",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] `fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffers` {ArrayBufferView\\[]}",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffers` {ArrayBufferView\\[]}"
        },
        {
          "id": "sc_3773",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: `fd` {integer} `buffers` {ArrayBufferView\\[]} `pos...] Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`.",
          "position": 1,
          "originalSentence": "Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`."
        },
        {
          "id": "sc_3774",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: Write an array of `ArrayBufferView`s to the file s...] `position` is the offset from the beginning of the file where this data should be written.",
          "position": 2,
          "originalSentence": "`position` is the offset from the beginning of the file where this data should be written."
        },
        {
          "id": "sc_3775",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: `position` is the offset from the beginning of the...] If `typeof position !",
          "position": 3,
          "originalSentence": "If `typeof position !"
        },
        {
          "id": "sc_3776",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: If `typeof position !...] == 'number'`, the data will be written at the current position.",
          "position": 4,
          "originalSentence": "== 'number'`, the data will be written at the current position."
        },
        {
          "id": "sc_3777",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: == 'number'`, the data will be written at the curr...] The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`.",
          "position": 5,
          "originalSentence": "The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`."
        },
        {
          "id": "sc_3778",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: The callback will be given three arguments: `err`,...] `bytesWritten` is how many bytes were written from `buffers`.",
          "position": 6,
          "originalSentence": "`bytesWritten` is how many bytes were written from `buffers`."
        },
        {
          "id": "sc_3779",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: `bytesWritten` is how many bytes were written from...] If this method is [`util.",
          "position": 7,
          "originalSentence": "If this method is [`util."
        },
        {
          "id": "sc_3780",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: If this method is [`util....] promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties.",
          "position": 8,
          "originalSentence": "promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties."
        },
        {
          "id": "sc_3781",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: promisify()`][]ed, it returns a promise for an `Ob...] It is unsafe to use `fs.",
          "position": 9,
          "originalSentence": "It is unsafe to use `fs."
        },
        {
          "id": "sc_3782",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: It is unsafe to use `fs....] writev()` multiple times on the same file without waiting for the callback.",
          "position": 10,
          "originalSentence": "writev()` multiple times on the same file without waiting for the callback."
        },
        {
          "id": "sc_3783",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: writev()` multiple times on the same file without ...] For this scenario, use [`fs.",
          "position": 11,
          "originalSentence": "For this scenario, use [`fs."
        },
        {
          "id": "sc_3784",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: For this scenario, use [`fs....] createWriteStream()`][].",
          "position": 12,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "sc_3785",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: createWriteStream()`][]....] On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 13,
          "originalSentence": "On Linux, positional writes don't work when the file is opened in append mode."
        },
        {
          "id": "sc_3786",
          "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: On Linux, positional writes don't work when the fi...] The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 14,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "sc_3802",
          "content": "[Synchronous API] The synchronous APIs perform all operations synchronously, blocking the event loop until the operation completes or fails.",
          "position": 0,
          "originalSentence": "The synchronous APIs perform all operations synchronously, blocking the event loop until the operation completes or fails."
        },
        {
          "id": "sc_3814",
          "content": "[`fs.accessSync(path[, mode])`] `path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs."
        },
        {
          "id": "sc_3815",
          "content": "[`fs.accessSync(path[, mode])`] [Previous: `path` {string|Buffer|URL} `mode` {integer} **Defa...] Synchronously tests a user's permissions for the file or directory specified by `path`.",
          "position": 1,
          "originalSentence": "Synchronously tests a user's permissions for the file or directory specified by `path`."
        },
        {
          "id": "sc_3816",
          "content": "[`fs.accessSync(path[, mode])`] [Previous: Synchronously tests a user's permissions for the f...] The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
          "position": 2,
          "originalSentence": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed."
        },
        {
          "id": "sc_3817",
          "content": "[`fs.accessSync(path[, mode])`] [Previous: The `mode` argument is an optional integer that sp...] `mode` should be either the value `fs.",
          "position": 3,
          "originalSentence": "`mode` should be either the value `fs."
        },
        {
          "id": "sc_3818",
          "content": "[`fs.accessSync(path[, mode])`] [Previous: `mode` should be either the value `fs....] F_OK` or a mask consisting of the bitwise OR of any of `fs.",
          "position": 4,
          "originalSentence": "F_OK` or a mask consisting of the bitwise OR of any of `fs."
        },
        {
          "id": "sc_3819",
          "content": "[`fs.accessSync(path[, mode])`] [Previous: F_OK` or a mask consisting of the bitwise OR of an...] R_OK`, `fs.",
          "position": 5,
          "originalSentence": "R_OK`, `fs."
        },
        {
          "id": "sc_3820",
          "content": "[`fs.accessSync(path[, mode])`] W_OK`, and `fs.",
          "position": 6,
          "originalSentence": "W_OK`, and `fs."
        },
        {
          "id": "sc_3821",
          "content": "[`fs.accessSync(path[, mode])`] Check [File access constants][] for possible values of `mode`.",
          "position": 7,
          "originalSentence": "Check [File access constants][] for possible values of `mode`."
        },
        {
          "id": "sc_3822",
          "content": "[`fs.accessSync(path[, mode])`] [Previous: Check [File access constants][] for possible value...] If any of the accessibility checks fail, an `Error` will be thrown.",
          "position": 8,
          "originalSentence": "If any of the accessibility checks fail, an `Error` will be thrown."
        },
        {
          "id": "sc_3823",
          "content": "[`fs.accessSync(path[, mode])`] [Previous: If any of the accessibility checks fail, an `Error...] Otherwise, the method will return `undefined`.",
          "position": 9,
          "originalSentence": "Otherwise, the method will return `undefined`."
        },
        {
          "id": "sc_3847",
          "content": "[`fs.appendFileSync(path, data[, options])`] `path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_3848",
          "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: `path` {string|Buffer|URL|number} filename or file...] **Default:** `'a'`.",
          "position": 1,
          "originalSentence": "**Default:** `'a'`."
        },
        {
          "id": "sc_3849",
          "content": "[`fs.appendFileSync(path, data[, options])`] * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it."
        },
        {
          "id": "sc_3850",
          "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: * `flush` {boolean} If `true`, the underlying file...] **Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_3851",
          "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: **Default:** `false`....] Synchronously append data to a file, creating the file if it does not yet exist.",
          "position": 4,
          "originalSentence": "Synchronously append data to a file, creating the file if it does not yet exist."
        },
        {
          "id": "sc_3852",
          "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: Synchronously append data to a file, creating the ...] `data` can be a string or a {Buffer}.",
          "position": 5,
          "originalSentence": "`data` can be a string or a {Buffer}."
        },
        {
          "id": "sc_3853",
          "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: `data` can be a string or a {Buffer}....] The `mode` option only affects the newly created file.",
          "position": 6,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "sc_3854",
          "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
          "position": 7,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "sc_3855",
          "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: open()`][] for more details....] If `options` is a string, then it specifies the encoding:",
          "position": 8,
          "originalSentence": "If `options` is a string, then it specifies the encoding:"
        },
        {
          "id": "sc_3856",
          "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: If `options` is a string, then it specifies the en...] The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
          "position": 9,
          "originalSentence": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs."
        },
        {
          "id": "sc_3857",
          "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: The `path` may be specified as a numeric file desc...] open()` or `fs.",
          "position": 10,
          "originalSentence": "open()` or `fs."
        },
        {
          "id": "sc_3858",
          "content": "[`fs.appendFileSync(path, data[, options])`] openSync()`).",
          "position": 11,
          "originalSentence": "openSync()`)."
        },
        {
          "id": "sc_3859",
          "content": "[`fs.appendFileSync(path, data[, options])`] The file descriptor will not be closed automatically.",
          "position": 12,
          "originalSentence": "The file descriptor will not be closed automatically."
        },
        {
          "id": "sc_3877",
          "content": "[`fs.chmodSync(path, mode)`] `path` {string|Buffer|URL} `mode` {string|integer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {string|integer}"
        },
        {
          "id": "sc_3878",
          "content": "[`fs.chmodSync(path, mode)`] [Previous: `path` {string|Buffer|URL} `mode` {string|integer}...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_3879",
          "content": "[`fs.chmodSync(path, mode)`] [Previous: For detailed information, see the documentation of...] chmod()`][].",
          "position": 2,
          "originalSentence": "chmod()`][]."
        },
        {
          "id": "sc_3880",
          "content": "[`fs.chmodSync(path, mode)`] See the POSIX chmod(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX chmod(2) documentation for more detail."
        },
        {
          "id": "sc_3891",
          "content": "[`fs.chownSync(path, uid, gid)`] `path` {string|Buffer|URL} `uid` {integer} `gid` {integer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer}"
        },
        {
          "id": "sc_3892",
          "content": "[`fs.chownSync(path, uid, gid)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} `gid` {...] Synchronously changes owner and group of a file.",
          "position": 1,
          "originalSentence": "Synchronously changes owner and group of a file."
        },
        {
          "id": "sc_3893",
          "content": "[`fs.chownSync(path, uid, gid)`] [Previous: Synchronously changes owner and group of a file....] Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_3894",
          "content": "[`fs.chownSync(path, uid, gid)`] This is the synchronous version of [`fs.",
          "position": 3,
          "originalSentence": "This is the synchronous version of [`fs."
        },
        {
          "id": "sc_3895",
          "content": "[`fs.chownSync(path, uid, gid)`] [Previous: This is the synchronous version of [`fs....] chown()`][].",
          "position": 4,
          "originalSentence": "chown()`][]."
        },
        {
          "id": "sc_3896",
          "content": "[`fs.chownSync(path, uid, gid)`] See the POSIX chown(2) documentation for more detail.",
          "position": 5,
          "originalSentence": "See the POSIX chown(2) documentation for more detail."
        },
        {
          "id": "sc_3909",
          "content": "[`fs.closeSync(fd)`] `fd` {integer}",
          "position": 0,
          "originalSentence": "`fd` {integer}"
        },
        {
          "id": "sc_3910",
          "content": "[`fs.closeSync(fd)`] Closes the file descriptor.",
          "position": 1,
          "originalSentence": "Closes the file descriptor."
        },
        {
          "id": "sc_3911",
          "content": "[`fs.closeSync(fd)`] [Previous: Closes the file descriptor....] Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_3912",
          "content": "[`fs.closeSync(fd)`] Calling `fs.",
          "position": 3,
          "originalSentence": "Calling `fs."
        },
        {
          "id": "sc_3913",
          "content": "[`fs.closeSync(fd)`] closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
          "position": 4,
          "originalSentence": "closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior."
        },
        {
          "id": "sc_3914",
          "content": "[`fs.closeSync(fd)`] [Previous: closeSync()` on any file descriptor (`fd`) that is...] See the POSIX close(2) documentation for more detail.",
          "position": 5,
          "originalSentence": "See the POSIX close(2) documentation for more detail."
        },
        {
          "id": "sc_3938",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] `src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation.",
          "position": 0,
          "originalSentence": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation."
        },
        {
          "id": "sc_3939",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: `src` {string|Buffer|URL} source filename to copy ...] **Default:** `0`.",
          "position": 1,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "sc_3940",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] Synchronously copies `src` to `dest`.",
          "position": 2,
          "originalSentence": "Synchronously copies `src` to `dest`."
        },
        {
          "id": "sc_3941",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: Synchronously copies `src` to `dest`....] By default, `dest` is overwritten if it already exists.",
          "position": 3,
          "originalSentence": "By default, `dest` is overwritten if it already exists."
        },
        {
          "id": "sc_3942",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: By default, `dest` is overwritten if it already ex...] Returns `undefined`.",
          "position": 4,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_3943",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] js makes no guarantees about the atomicity of the copy operation.",
          "position": 5,
          "originalSentence": "js makes no guarantees about the atomicity of the copy operation."
        },
        {
          "id": "sc_3944",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: js makes no guarantees about the atomicity of the ...] If an error occurs after the destination file has been opened for writing, Node.",
          "position": 6,
          "originalSentence": "If an error occurs after the destination file has been opened for writing, Node."
        },
        {
          "id": "sc_3945",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: If an error occurs after the destination file has ...] js will attempt to remove the destination.",
          "position": 7,
          "originalSentence": "js will attempt to remove the destination."
        },
        {
          "id": "sc_3946",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: js will attempt to remove the destination....] `mode` is an optional integer that specifies the behavior of the copy operation.",
          "position": 8,
          "originalSentence": "`mode` is an optional integer that specifies the behavior of the copy operation."
        },
        {
          "id": "sc_3947",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: `mode` is an optional integer that specifies the b...] It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
          "position": 9,
          "originalSentence": "It is possible to create a mask consisting of the bitwise OR of two or more values (e."
        },
        {
          "id": "sc_3948",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: It is possible to create a mask consisting of the ...] COPYFILE_EXCL | fs.",
          "position": 10,
          "originalSentence": "COPYFILE_EXCL | fs."
        },
        {
          "id": "sc_3949",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] COPYFILE_FICLONE`).",
          "position": 11,
          "originalSentence": "COPYFILE_FICLONE`)."
        },
        {
          "id": "sc_3950",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
          "position": 12,
          "originalSentence": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists."
        },
        {
          "id": "sc_3951",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: COPYFILE_EXCL`: The copy operation will fail if `d...] COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 13,
          "originalSentence": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "sc_3952",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: COPYFILE_FICLONE`: The copy operation will attempt...] If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
          "position": 14,
          "originalSentence": "If the platform does not support copy-on-write, then a fallback copy mechanism is used."
        },
        {
          "id": "sc_3953",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: If the platform does not support copy-on-write, th...] COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 15,
          "originalSentence": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "sc_3954",
          "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: COPYFILE_FICLONE_FORCE`: The copy operation will a...] If the platform does not support copy-on-write, then the operation will fail.",
          "position": 16,
          "originalSentence": "If the platform does not support copy-on-write, then the operation will fail."
        },
        {
          "id": "sc_3999",
          "content": "[`fs.cpSync(src, dest[, options])`] `src` {string|URL} source path to copy.",
          "position": 0,
          "originalSentence": "`src` {string|URL} source path to copy."
        },
        {
          "id": "sc_4000",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: `src` {string|URL} source path to copy....] `dest` {string|URL} destination path to copy to.",
          "position": 1,
          "originalSentence": "`dest` {string|URL} destination path to copy to."
        },
        {
          "id": "sc_4001",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: `dest` {string|URL} destination path to copy to....] `options` {Object} * `dereference` {boolean} dereference symlinks.",
          "position": 2,
          "originalSentence": "`options` {Object} * `dereference` {boolean} dereference symlinks."
        },
        {
          "id": "sc_4002",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: `options` {Object} * `dereference` {boolean} deref...] **Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4003",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: **Default:** `false`....] * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
          "position": 4,
          "originalSentence": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error."
        },
        {
          "id": "sc_4004",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `errorOnExist` {boolean} when `force` is `false`...] **Default:** `false`.",
          "position": 5,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4005",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: **Default:** `false`....] * `filter` {Function} Function to filter copied files/directories.",
          "position": 6,
          "originalSentence": "* `filter` {Function} Function to filter copied files/directories."
        },
        {
          "id": "sc_4006",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `filter` {Function} Function to filter copied fi...] Return `true` to copy the item, `false` to ignore it.",
          "position": 7,
          "originalSentence": "Return `true` to copy the item, `false` to ignore it."
        },
        {
          "id": "sc_4007",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: Return `true` to copy the item, `false` to ignore ...] When ignoring a directory, all of its contents will be skipped as well.",
          "position": 8,
          "originalSentence": "When ignoring a directory, all of its contents will be skipped as well."
        },
        {
          "id": "sc_4008",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: When ignoring a directory, all of its contents wil...] **Default:** `undefined` * `src` {string} source path to copy.",
          "position": 9,
          "originalSentence": "**Default:** `undefined` * `src` {string} source path to copy."
        },
        {
          "id": "sc_4009",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: **Default:** `undefined` * `src` {string} source p...] * `dest` {string} destination path to copy to.",
          "position": 10,
          "originalSentence": "* `dest` {string} destination path to copy to."
        },
        {
          "id": "sc_4010",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `dest` {string} destination path to copy to....] * Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`.",
          "position": 11,
          "originalSentence": "* Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`."
        },
        {
          "id": "sc_4011",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * Returns: {boolean} Any non-`Promise` value that ...] * `force` {boolean} overwrite existing file or directory.",
          "position": 12,
          "originalSentence": "* `force` {boolean} overwrite existing file or directory."
        },
        {
          "id": "sc_4012",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `force` {boolean} overwrite existing file or dir...] The copy operation will ignore errors if you set this to false and the destination exists.",
          "position": 13,
          "originalSentence": "The copy operation will ignore errors if you set this to false and the destination exists."
        },
        {
          "id": "sc_4013",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: The copy operation will ignore errors if you set t...] Use the `errorOnExist` option to change this behavior.",
          "position": 14,
          "originalSentence": "Use the `errorOnExist` option to change this behavior."
        },
        {
          "id": "sc_4014",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: Use the `errorOnExist` option to change this behav...] **Default:** `true`.",
          "position": 15,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "sc_4015",
          "content": "[`fs.cpSync(src, dest[, options])`] * `mode` {integer} modifiers for copy operation.",
          "position": 16,
          "originalSentence": "* `mode` {integer} modifiers for copy operation."
        },
        {
          "id": "sc_4016",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `mode` {integer} modifiers for copy operation....] **Default:** `0`.",
          "position": 17,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "sc_4017",
          "content": "[`fs.cpSync(src, dest[, options])`] See `mode` flag of [`fs.",
          "position": 18,
          "originalSentence": "See `mode` flag of [`fs."
        },
        {
          "id": "sc_4018",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: See `mode` flag of [`fs....] copyFileSync()`][].",
          "position": 19,
          "originalSentence": "copyFileSync()`][]."
        },
        {
          "id": "sc_4019",
          "content": "[`fs.cpSync(src, dest[, options])`] * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
          "position": 20,
          "originalSentence": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved."
        },
        {
          "id": "sc_4020",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `preserveTimestamps` {boolean} When `true` times...] **Default:** `false`.",
          "position": 21,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4021",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: **Default:** `false`....] * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
          "position": 22,
          "originalSentence": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped."
        },
        {
          "id": "sc_4022",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `recursive` {boolean} copy directories recursive...] **Default:** `false`",
          "position": 23,
          "originalSentence": "**Default:** `false`"
        },
        {
          "id": "sc_4023",
          "content": "[`fs.cpSync(src, dest[, options])`] Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
          "position": 24,
          "originalSentence": "Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files."
        },
        {
          "id": "sc_4024",
          "content": "[`fs.cpSync(src, dest[, options])`] [Previous: Synchronously copies the entire directory structur...] When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 25,
          "originalSentence": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`."
        },
        {
          "id": "sc_4061",
          "content": "[`fs.existsSync(path)`] `path` {string|Buffer|URL} Returns: {boolean}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} Returns: {boolean}"
        },
        {
          "id": "sc_4062",
          "content": "[`fs.existsSync(path)`] [Previous: `path` {string|Buffer|URL} Returns: {boolean}...] Returns `true` if the path exists, `false` otherwise.",
          "position": 1,
          "originalSentence": "Returns `true` if the path exists, `false` otherwise."
        },
        {
          "id": "sc_4063",
          "content": "[`fs.existsSync(path)`] [Previous: Returns `true` if the path exists, `false` otherwi...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4064",
          "content": "[`fs.existsSync(path)`] [Previous: For detailed information, see the documentation of...] exists()`][].",
          "position": 3,
          "originalSentence": "exists()`][]."
        },
        {
          "id": "sc_4065",
          "content": "[`fs.existsSync(path)`] exists()` is deprecated, but `fs.",
          "position": 4,
          "originalSentence": "exists()` is deprecated, but `fs."
        },
        {
          "id": "sc_4066",
          "content": "[`fs.existsSync(path)`] [Previous: exists()` is deprecated, but `fs....] existsSync()` is not.",
          "position": 5,
          "originalSentence": "existsSync()` is not."
        },
        {
          "id": "sc_4067",
          "content": "[`fs.existsSync(path)`] [Previous: existsSync()` is not....] The `callback` parameter to `fs.",
          "position": 6,
          "originalSentence": "The `callback` parameter to `fs."
        },
        {
          "id": "sc_4068",
          "content": "[`fs.existsSync(path)`] [Previous: The `callback` parameter to `fs....] exists()` accepts parameters that are inconsistent with other Node.",
          "position": 7,
          "originalSentence": "exists()` accepts parameters that are inconsistent with other Node."
        },
        {
          "id": "sc_4069",
          "content": "[`fs.existsSync(path)`] [Previous: exists()` accepts parameters that are inconsistent...] js callbacks.",
          "position": 8,
          "originalSentence": "js callbacks."
        },
        {
          "id": "sc_4070",
          "content": "[`fs.existsSync(path)`] existsSync()` does not use a callback.",
          "position": 9,
          "originalSentence": "existsSync()` does not use a callback."
        },
        {
          "id": "sc_4084",
          "content": "[`fs.fchmodSync(fd, mode)`] `fd` {integer} `mode` {string|integer}",
          "position": 0,
          "originalSentence": "`fd` {integer} `mode` {string|integer}"
        },
        {
          "id": "sc_4085",
          "content": "[`fs.fchmodSync(fd, mode)`] [Previous: `fd` {integer} `mode` {string|integer}...] Sets the permissions on the file.",
          "position": 1,
          "originalSentence": "Sets the permissions on the file."
        },
        {
          "id": "sc_4086",
          "content": "[`fs.fchmodSync(fd, mode)`] [Previous: Sets the permissions on the file....] Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4087",
          "content": "[`fs.fchmodSync(fd, mode)`] See the POSIX fchmod(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX fchmod(2) documentation for more detail."
        },
        {
          "id": "sc_4097",
          "content": "[`fs.fchownSync(fd, uid, gid)`] `fd` {integer} `uid` {integer} The file's new owner's user id.",
          "position": 0,
          "originalSentence": "`fd` {integer} `uid` {integer} The file's new owner's user id."
        },
        {
          "id": "sc_4098",
          "content": "[`fs.fchownSync(fd, uid, gid)`] [Previous: `fd` {integer} `uid` {integer} The file's new owne...] `gid` {integer} The file's new group's group id.",
          "position": 1,
          "originalSentence": "`gid` {integer} The file's new group's group id."
        },
        {
          "id": "sc_4099",
          "content": "[`fs.fchownSync(fd, uid, gid)`] [Previous: `gid` {integer} The file's new group's group id....] Sets the owner of the file.",
          "position": 2,
          "originalSentence": "Sets the owner of the file."
        },
        {
          "id": "sc_4100",
          "content": "[`fs.fchownSync(fd, uid, gid)`] [Previous: Sets the owner of the file....] Returns `undefined`.",
          "position": 3,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4101",
          "content": "[`fs.fchownSync(fd, uid, gid)`] See the POSIX fchown(2) documentation for more detail.",
          "position": 4,
          "originalSentence": "See the POSIX fchown(2) documentation for more detail."
        },
        {
          "id": "sc_4111",
          "content": "[`fs.fdatasyncSync(fd)`] `fd` {integer}",
          "position": 0,
          "originalSentence": "`fd` {integer}"
        },
        {
          "id": "sc_4112",
          "content": "[`fs.fdatasyncSync(fd)`] Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
          "position": 1,
          "originalSentence": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state."
        },
        {
          "id": "sc_4113",
          "content": "[`fs.fdatasyncSync(fd)`] [Previous: Forces all currently queued I/O operations associa...] Refer to the POSIX fdatasync(2) documentation for details.",
          "position": 2,
          "originalSentence": "Refer to the POSIX fdatasync(2) documentation for details."
        },
        {
          "id": "sc_4114",
          "content": "[`fs.fdatasyncSync(fd)`] [Previous: Refer to the POSIX fdatasync(2) documentation for ...] Returns `undefined`.",
          "position": 3,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4126",
          "content": "[`fs.fstatSync(fd[, options])`] `fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_4127",
          "content": "[`fs.fstatSync(fd[, options])`] [Previous: `fd` {integer} `options` {Object} * `bigint` {bool...] Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "sc_4128",
          "content": "[`fs.fstatSync(fd[, options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4129",
          "content": "[`fs.fstatSync(fd[, options])`] [Previous: **Default:** `false`....] Returns: {fs.",
          "position": 3,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_4130",
          "content": "[`fs.fstatSync(fd[, options])`] Retrieves the {fs.",
          "position": 4,
          "originalSentence": "Retrieves the {fs."
        },
        {
          "id": "sc_4131",
          "content": "[`fs.fstatSync(fd[, options])`] Stats} for the file descriptor.",
          "position": 5,
          "originalSentence": "Stats} for the file descriptor."
        },
        {
          "id": "sc_4132",
          "content": "[`fs.fstatSync(fd[, options])`] [Previous: Stats} for the file descriptor....] See the POSIX fstat(2) documentation for more detail.",
          "position": 6,
          "originalSentence": "See the POSIX fstat(2) documentation for more detail."
        },
        {
          "id": "sc_4145",
          "content": "[`fs.fsyncSync(fd)`] `fd` {integer}",
          "position": 0,
          "originalSentence": "`fd` {integer}"
        },
        {
          "id": "sc_4146",
          "content": "[`fs.fsyncSync(fd)`] Request that all data for the open file descriptor is flushed to the storage device.",
          "position": 1,
          "originalSentence": "Request that all data for the open file descriptor is flushed to the storage device."
        },
        {
          "id": "sc_4147",
          "content": "[`fs.fsyncSync(fd)`] [Previous: Request that all data for the open file descriptor...] The specific implementation is operating system and device specific.",
          "position": 2,
          "originalSentence": "The specific implementation is operating system and device specific."
        },
        {
          "id": "sc_4148",
          "content": "[`fs.fsyncSync(fd)`] [Previous: The specific implementation is operating system an...] Refer to the POSIX fsync(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "Refer to the POSIX fsync(2) documentation for more detail."
        },
        {
          "id": "sc_4149",
          "content": "[`fs.fsyncSync(fd)`] [Previous: Refer to the POSIX fsync(2) documentation for more...] Returns `undefined`.",
          "position": 4,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4160",
          "content": "[`fs.ftruncateSync(fd[, len])`] `fd` {integer} `len` {integer} **Default:** `0`",
          "position": 0,
          "originalSentence": "`fd` {integer} `len` {integer} **Default:** `0`"
        },
        {
          "id": "sc_4161",
          "content": "[`fs.ftruncateSync(fd[, len])`] [Previous: `fd` {integer} `len` {integer} **Default:** `0`...] Truncates the file descriptor.",
          "position": 1,
          "originalSentence": "Truncates the file descriptor."
        },
        {
          "id": "sc_4162",
          "content": "[`fs.ftruncateSync(fd[, len])`] [Previous: Truncates the file descriptor....] Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4163",
          "content": "[`fs.ftruncateSync(fd[, len])`] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 3,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4164",
          "content": "[`fs.ftruncateSync(fd[, len])`] [Previous: For detailed information, see the documentation of...] ftruncate()`][].",
          "position": 4,
          "originalSentence": "ftruncate()`][]."
        },
        {
          "id": "sc_4173",
          "content": "[`fs.futimesSync(fd, atime, mtime)`] `fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date}",
          "position": 0,
          "originalSentence": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date}"
        },
        {
          "id": "sc_4174",
          "content": "[`fs.futimesSync(fd, atime, mtime)`] [Previous: `fd` {integer} `atime` {number|string|Date} `mtime...] Synchronous version of [`fs.",
          "position": 1,
          "originalSentence": "Synchronous version of [`fs."
        },
        {
          "id": "sc_4175",
          "content": "[`fs.futimesSync(fd, atime, mtime)`] [Previous: Synchronous version of [`fs....] futimes()`][].",
          "position": 2,
          "originalSentence": "futimes()`][]."
        },
        {
          "id": "sc_4176",
          "content": "[`fs.futimesSync(fd, atime, mtime)`] Returns `undefined`.",
          "position": 3,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4189",
          "content": "[`fs.globSync(pattern[, options])`] `pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
          "position": 0,
          "originalSentence": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory."
        },
        {
          "id": "sc_4190",
          "content": "[`fs.globSync(pattern[, options])`] [Previous: `pattern` {string|string\\[]} `options` {Object} * ...] **Default:** `process.",
          "position": 1,
          "originalSentence": "**Default:** `process."
        },
        {
          "id": "sc_4191",
          "content": "[`fs.globSync(pattern[, options])`] [Previous: **Default:** `process....] cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
          "position": 2,
          "originalSentence": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded."
        },
        {
          "id": "sc_4192",
          "content": "[`fs.globSync(pattern[, options])`] [Previous: cwd()` * `exclude` {Function|string\\[]} Function t...] If a function is provided, return `true` to exclude the item, `false` to include it.",
          "position": 3,
          "originalSentence": "If a function is provided, return `true` to exclude the item, `false` to include it."
        },
        {
          "id": "sc_4193",
          "content": "[`fs.globSync(pattern[, options])`] [Previous: If a function is provided, return `true` to exclud...] **Default:** `undefined`.",
          "position": 4,
          "originalSentence": "**Default:** `undefined`."
        },
        {
          "id": "sc_4194",
          "content": "[`fs.globSync(pattern[, options])`] [Previous: **Default:** `undefined`....] * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
          "position": 5,
          "originalSentence": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise."
        },
        {
          "id": "sc_4195",
          "content": "[`fs.globSync(pattern[, options])`] [Previous: * `withFileTypes` {boolean} `true` if the glob sho...] **Default:** `false`.",
          "position": 6,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4196",
          "content": "[`fs.globSync(pattern[, options])`] [Previous: **Default:** `false`....] Returns: {string\\[]} paths of files that match the pattern.",
          "position": 7,
          "originalSentence": "Returns: {string\\[]} paths of files that match the pattern."
        },
        {
          "id": "sc_4210",
          "content": "[`fs.lchmodSync(path, mode)`] `path` {string|Buffer|URL} `mode` {integer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer}"
        },
        {
          "id": "sc_4211",
          "content": "[`fs.lchmodSync(path, mode)`] [Previous: `path` {string|Buffer|URL} `mode` {integer}...] Changes the permissions on a symbolic link.",
          "position": 1,
          "originalSentence": "Changes the permissions on a symbolic link."
        },
        {
          "id": "sc_4212",
          "content": "[`fs.lchmodSync(path, mode)`] [Previous: Changes the permissions on a symbolic link....] Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4213",
          "content": "[`fs.lchmodSync(path, mode)`] This method is only implemented on macOS.",
          "position": 3,
          "originalSentence": "This method is only implemented on macOS."
        },
        {
          "id": "sc_4214",
          "content": "[`fs.lchmodSync(path, mode)`] [Previous: This method is only implemented on macOS....] See the POSIX lchmod(2) documentation for more detail.",
          "position": 4,
          "originalSentence": "See the POSIX lchmod(2) documentation for more detail."
        },
        {
          "id": "sc_4225",
          "content": "[`fs.lchownSync(path, uid, gid)`] `path` {string|Buffer|URL} `uid` {integer} The file's new owner's user id.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} The file's new owner's user id."
        },
        {
          "id": "sc_4226",
          "content": "[`fs.lchownSync(path, uid, gid)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} The fil...] `gid` {integer} The file's new group's group id.",
          "position": 1,
          "originalSentence": "`gid` {integer} The file's new group's group id."
        },
        {
          "id": "sc_4227",
          "content": "[`fs.lchownSync(path, uid, gid)`] [Previous: `gid` {integer} The file's new group's group id....] Set the owner for the path.",
          "position": 2,
          "originalSentence": "Set the owner for the path."
        },
        {
          "id": "sc_4228",
          "content": "[`fs.lchownSync(path, uid, gid)`] [Previous: Set the owner for the path....] Returns `undefined`.",
          "position": 3,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4229",
          "content": "[`fs.lchownSync(path, uid, gid)`] See the POSIX lchown(2) documentation for more details.",
          "position": 4,
          "originalSentence": "See the POSIX lchown(2) documentation for more details."
        },
        {
          "id": "sc_4240",
          "content": "[`fs.lutimesSync(path, atime, mtime)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date}"
        },
        {
          "id": "sc_4241",
          "content": "[`fs.lutimesSync(path, atime, mtime)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] Change the file system timestamps of the symbolic link referenced by `path`.",
          "position": 1,
          "originalSentence": "Change the file system timestamps of the symbolic link referenced by `path`."
        },
        {
          "id": "sc_4242",
          "content": "[`fs.lutimesSync(path, atime, mtime)`] [Previous: Change the file system timestamps of the symbolic ...] Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails.",
          "position": 2,
          "originalSentence": "Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails."
        },
        {
          "id": "sc_4243",
          "content": "[`fs.lutimesSync(path, atime, mtime)`] [Previous: Returns `undefined`, or throws an exception when p...] This is the synchronous version of [`fs.",
          "position": 3,
          "originalSentence": "This is the synchronous version of [`fs."
        },
        {
          "id": "sc_4244",
          "content": "[`fs.lutimesSync(path, atime, mtime)`] [Previous: This is the synchronous version of [`fs....] lutimes()`][].",
          "position": 4,
          "originalSentence": "lutimes()`][]."
        },
        {
          "id": "sc_4254",
          "content": "[`fs.linkSync(existingPath, newPath)`] `existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}",
          "position": 0,
          "originalSentence": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}"
        },
        {
          "id": "sc_4255",
          "content": "[`fs.linkSync(existingPath, newPath)`] [Previous: `existingPath` {string|Buffer|URL} `newPath` {stri...] Creates a new link from the `existingPath` to the `newPath`.",
          "position": 1,
          "originalSentence": "Creates a new link from the `existingPath` to the `newPath`."
        },
        {
          "id": "sc_4256",
          "content": "[`fs.linkSync(existingPath, newPath)`] [Previous: Creates a new link from the `existingPath` to the ...] See the POSIX link(2) documentation for more detail.",
          "position": 2,
          "originalSentence": "See the POSIX link(2) documentation for more detail."
        },
        {
          "id": "sc_4257",
          "content": "[`fs.linkSync(existingPath, newPath)`] [Previous: See the POSIX link(2) documentation for more detai...] Returns `undefined`.",
          "position": 3,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4271",
          "content": "[`fs.lstatSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_4272",
          "content": "[`fs.lstatSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "sc_4273",
          "content": "[`fs.lstatSync(path[, options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4274",
          "content": "[`fs.lstatSync(path[, options])`] [Previous: **Default:** `false`....] * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
          "position": 3,
          "originalSentence": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`."
        },
        {
          "id": "sc_4275",
          "content": "[`fs.lstatSync(path[, options])`] [Previous: * `throwIfNoEntry` {boolean} Whether an exception ...] **Default:** `true`.",
          "position": 4,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "sc_4276",
          "content": "[`fs.lstatSync(path[, options])`] Returns: {fs.",
          "position": 5,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_4277",
          "content": "[`fs.lstatSync(path[, options])`] Retrieves the {fs.",
          "position": 6,
          "originalSentence": "Retrieves the {fs."
        },
        {
          "id": "sc_4278",
          "content": "[`fs.lstatSync(path[, options])`] Stats} for the symbolic link referred to by `path`.",
          "position": 7,
          "originalSentence": "Stats} for the symbolic link referred to by `path`."
        },
        {
          "id": "sc_4279",
          "content": "[`fs.lstatSync(path[, options])`] [Previous: Stats} for the symbolic link referred to by `path`...] See the POSIX lstat(2) documentation for more details.",
          "position": 8,
          "originalSentence": "See the POSIX lstat(2) documentation for more details."
        },
        {
          "id": "sc_4297",
          "content": "[`fs.mkdirSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows."
        },
        {
          "id": "sc_4298",
          "content": "[`fs.mkdirSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object|integ...] **Default:** `0o777`.",
          "position": 1,
          "originalSentence": "**Default:** `0o777`."
        },
        {
          "id": "sc_4299",
          "content": "[`fs.mkdirSync(path[, options])`] [Previous: **Default:** `0o777`....] Returns: {string|undefined}",
          "position": 2,
          "originalSentence": "Returns: {string|undefined}"
        },
        {
          "id": "sc_4300",
          "content": "[`fs.mkdirSync(path[, options])`] [Previous: Returns: {string|undefined}...] Synchronously creates a directory.",
          "position": 3,
          "originalSentence": "Synchronously creates a directory."
        },
        {
          "id": "sc_4301",
          "content": "[`fs.mkdirSync(path[, options])`] [Previous: Synchronously creates a directory....] Returns `undefined`, or if `recursive` is `true`, the first directory path created.",
          "position": 4,
          "originalSentence": "Returns `undefined`, or if `recursive` is `true`, the first directory path created."
        },
        {
          "id": "sc_4302",
          "content": "[`fs.mkdirSync(path[, options])`] [Previous: Returns `undefined`, or if `recursive` is `true`, ...] This is the synchronous version of [`fs.",
          "position": 5,
          "originalSentence": "This is the synchronous version of [`fs."
        },
        {
          "id": "sc_4303",
          "content": "[`fs.mkdirSync(path[, options])`] [Previous: This is the synchronous version of [`fs....] mkdir()`][].",
          "position": 6,
          "originalSentence": "mkdir()`][]."
        },
        {
          "id": "sc_4304",
          "content": "[`fs.mkdirSync(path[, options])`] See the POSIX mkdir(2) documentation for more details.",
          "position": 7,
          "originalSentence": "See the POSIX mkdir(2) documentation for more details."
        },
        {
          "id": "sc_4318",
          "content": "[`fs.mkdtempSync(prefix[, options])`] `prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string}",
          "position": 0,
          "originalSentence": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string}"
        },
        {
          "id": "sc_4319",
          "content": "[`fs.mkdtempSync(prefix[, options])`] [Previous: `prefix` {string|Buffer|URL} `options` {string|Obj...] Returns the created directory path.",
          "position": 1,
          "originalSentence": "Returns the created directory path."
        },
        {
          "id": "sc_4320",
          "content": "[`fs.mkdtempSync(prefix[, options])`] [Previous: Returns the created directory path....] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4321",
          "content": "[`fs.mkdtempSync(prefix[, options])`] [Previous: For detailed information, see the documentation of...] mkdtemp()`][].",
          "position": 3,
          "originalSentence": "mkdtemp()`][]."
        },
        {
          "id": "sc_4322",
          "content": "[`fs.mkdtempSync(prefix[, options])`] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 4,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use."
        },
        {
          "id": "sc_4340",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] `prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Object} A disposable object: * `path` {string} The path of the created directory.",
          "position": 0,
          "originalSentence": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Object} A disposable object: * `path` {string} The path of the created directory."
        },
        {
          "id": "sc_4341",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: `prefix` {string|Buffer|URL} `options` {string|Obj...] * `remove` {Function} A function which removes the created directory.",
          "position": 1,
          "originalSentence": "* `remove` {Function} A function which removes the created directory."
        },
        {
          "id": "sc_4342",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: * `remove` {Function} A function which removes the...] * `[Symbol.",
          "position": 2,
          "originalSentence": "* `[Symbol."
        },
        {
          "id": "sc_4343",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] dispose]` {Function} The same as `remove`.",
          "position": 3,
          "originalSentence": "dispose]` {Function} The same as `remove`."
        },
        {
          "id": "sc_4344",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: dispose]` {Function} The same as `remove`....] Returns a disposable object whose `path` property holds the created directory path.",
          "position": 4,
          "originalSentence": "Returns a disposable object whose `path` property holds the created directory path."
        },
        {
          "id": "sc_4345",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: Returns a disposable object whose `path` property ...] When the object is disposed, the directory and its contents will be removed if it still exists.",
          "position": 5,
          "originalSentence": "When the object is disposed, the directory and its contents will be removed if it still exists."
        },
        {
          "id": "sc_4346",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: When the object is disposed, the directory and its...] If the directory cannot be deleted, disposal will throw an error.",
          "position": 6,
          "originalSentence": "If the directory cannot be deleted, disposal will throw an error."
        },
        {
          "id": "sc_4347",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: If the directory cannot be deleted, disposal will ...] The object has a `remove()` method which will perform the same task.",
          "position": 7,
          "originalSentence": "The object has a `remove()` method which will perform the same task."
        },
        {
          "id": "sc_4348",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: The object has a `remove()` method which will perf...] For detailed information, see the documentation of [`fs.",
          "position": 8,
          "originalSentence": "For detailed information, see the documentation of [`fs."
        },
        {
          "id": "sc_4349",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: For detailed information, see the documentation of...] mkdtemp()`][].",
          "position": 9,
          "originalSentence": "mkdtemp()`][]."
        },
        {
          "id": "sc_4350",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] There is no callback-based version of this API because it is designed for use with the `using` syntax.",
          "position": 10,
          "originalSentence": "There is no callback-based version of this API because it is designed for use with the `using` syntax."
        },
        {
          "id": "sc_4351",
          "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: There is no callback-based version of this API bec...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 11,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use."
        },
        {
          "id": "sc_4372",
          "content": "[`fs.opendirSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory."
        },
        {
          "id": "sc_4373",
          "content": "[`fs.opendirSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `e...] Higher values lead to better performance but higher memory usage.",
          "position": 1,
          "originalSentence": "Higher values lead to better performance but higher memory usage."
        },
        {
          "id": "sc_4374",
          "content": "[`fs.opendirSync(path[, options])`] [Previous: Higher values lead to better performance but highe...] **Default:** `32` * `recursive` {boolean} **Default:** `false` Returns: {fs.",
          "position": 2,
          "originalSentence": "**Default:** `32` * `recursive` {boolean} **Default:** `false` Returns: {fs."
        },
        {
          "id": "sc_4375",
          "content": "[`fs.opendirSync(path[, options])`] [Previous: **Default:** `32` * `recursive` {boolean} **Defaul...] Synchronously open a directory.",
          "position": 3,
          "originalSentence": "Synchronously open a directory."
        },
        {
          "id": "sc_4376",
          "content": "[`fs.opendirSync(path[, options])`] [Previous: Synchronously open a directory....] See opendir(3).",
          "position": 4,
          "originalSentence": "See opendir(3)."
        },
        {
          "id": "sc_4377",
          "content": "[`fs.opendirSync(path[, options])`] Creates an {fs.",
          "position": 5,
          "originalSentence": "Creates an {fs."
        },
        {
          "id": "sc_4378",
          "content": "[`fs.opendirSync(path[, options])`] Dir}, which contains all further functions for reading from and cleaning up the directory.",
          "position": 6,
          "originalSentence": "Dir}, which contains all further functions for reading from and cleaning up the directory."
        },
        {
          "id": "sc_4379",
          "content": "[`fs.opendirSync(path[, options])`] [Previous: Dir}, which contains all further functions for rea...] The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 7,
          "originalSentence": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations."
        },
        {
          "id": "sc_4394",
          "content": "[`fs.openSync(path[, flags[, mode]])`] `path` {string|Buffer|URL} `flags` {string|number} **Default:** `'r'`.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `flags` {string|number} **Default:** `'r'`."
        },
        {
          "id": "sc_4395",
          "content": "[`fs.openSync(path[, flags[, mode]])`] [Previous: `path` {string|Buffer|URL} `flags` {string|number}...] See [support of file system `flags`][].",
          "position": 1,
          "originalSentence": "See [support of file system `flags`][]."
        },
        {
          "id": "sc_4396",
          "content": "[`fs.openSync(path[, flags[, mode]])`] [Previous: See [support of file system `flags`][]....] `mode` {string|integer} **Default:** `0o666` Returns: {number}",
          "position": 2,
          "originalSentence": "`mode` {string|integer} **Default:** `0o666` Returns: {number}"
        },
        {
          "id": "sc_4397",
          "content": "[`fs.openSync(path[, flags[, mode]])`] [Previous: `mode` {string|integer} **Default:** `0o666` Retur...] Returns an integer representing the file descriptor.",
          "position": 3,
          "originalSentence": "Returns an integer representing the file descriptor."
        },
        {
          "id": "sc_4398",
          "content": "[`fs.openSync(path[, flags[, mode]])`] [Previous: Returns an integer representing the file descripto...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 4,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4399",
          "content": "[`fs.openSync(path[, flags[, mode]])`] [Previous: For detailed information, see the documentation of...] open()`][].",
          "position": 5,
          "originalSentence": "open()`][]."
        },
        {
          "id": "sc_4417",
          "content": "[`fs.readdirSync(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively."
        },
        {
          "id": "sc_4418",
          "content": "[`fs.readdirSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] In recursive mode, it will list all files, sub files, and directories.",
          "position": 1,
          "originalSentence": "In recursive mode, it will list all files, sub files, and directories."
        },
        {
          "id": "sc_4419",
          "content": "[`fs.readdirSync(path[, options])`] [Previous: In recursive mode, it will list all files, sub fil...] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4420",
          "content": "[`fs.readdirSync(path[, options])`] [Previous: **Default:** `false`....] Returns: {string\\[]|Buffer\\[]|fs.",
          "position": 3,
          "originalSentence": "Returns: {string\\[]|Buffer\\[]|fs."
        },
        {
          "id": "sc_4421",
          "content": "[`fs.readdirSync(path[, options])`] [Previous: Returns: {string\\[]|Buffer\\[]|fs....] Reads the contents of the directory.",
          "position": 4,
          "originalSentence": "Reads the contents of the directory."
        },
        {
          "id": "sc_4422",
          "content": "[`fs.readdirSync(path[, options])`] [Previous: Reads the contents of the directory....] See the POSIX readdir(3) documentation for more details.",
          "position": 5,
          "originalSentence": "See the POSIX readdir(3) documentation for more details."
        },
        {
          "id": "sc_4423",
          "content": "[`fs.readdirSync(path[, options])`] [Previous: See the POSIX readdir(3) documentation for more de...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned.",
          "position": 6,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned."
        },
        {
          "id": "sc_4424",
          "content": "[`fs.readdirSync(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
          "position": 7,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects."
        },
        {
          "id": "sc_4425",
          "content": "[`fs.readdirSync(path[, options])`] [Previous: If the `encoding` is set to `'buffer'`, the filena...] If `options.",
          "position": 8,
          "originalSentence": "If `options."
        },
        {
          "id": "sc_4426",
          "content": "[`fs.readdirSync(path[, options])`] withFileTypes` is set to `true`, the result will contain {fs.",
          "position": 9,
          "originalSentence": "withFileTypes` is set to `true`, the result will contain {fs."
        },
        {
          "id": "sc_4427",
          "content": "[`fs.readdirSync(path[, options])`] [Previous: withFileTypes` is set to `true`, the result will c...] Dirent} objects.",
          "position": 10,
          "originalSentence": "Dirent} objects."
        },
        {
          "id": "sc_4450",
          "content": "[`fs.readFileSync(path[, options])`] `path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_4451",
          "content": "[`fs.readFileSync(path[, options])`] [Previous: `path` {string|Buffer|URL|integer} filename or fil...] **Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "sc_4452",
          "content": "[`fs.readFileSync(path[, options])`] Returns: {string|Buffer}",
          "position": 2,
          "originalSentence": "Returns: {string|Buffer}"
        },
        {
          "id": "sc_4453",
          "content": "[`fs.readFileSync(path[, options])`] [Previous: Returns: {string|Buffer}...] Returns the contents of the `path`.",
          "position": 3,
          "originalSentence": "Returns the contents of the `path`."
        },
        {
          "id": "sc_4454",
          "content": "[`fs.readFileSync(path[, options])`] [Previous: Returns the contents of the `path`....] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 4,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4455",
          "content": "[`fs.readFileSync(path[, options])`] [Previous: For detailed information, see the documentation of...] readFile()`][].",
          "position": 5,
          "originalSentence": "readFile()`][]."
        },
        {
          "id": "sc_4456",
          "content": "[`fs.readFileSync(path[, options])`] If the `encoding` option is specified then this function returns a string.",
          "position": 6,
          "originalSentence": "If the `encoding` option is specified then this function returns a string."
        },
        {
          "id": "sc_4457",
          "content": "[`fs.readFileSync(path[, options])`] [Previous: If the `encoding` option is specified then this fu...] Otherwise it returns a buffer.",
          "position": 7,
          "originalSentence": "Otherwise it returns a buffer."
        },
        {
          "id": "sc_4458",
          "content": "[`fs.readFileSync(path[, options])`] [Previous: Otherwise it returns a buffer....] Similar to [`fs.",
          "position": 8,
          "originalSentence": "Similar to [`fs."
        },
        {
          "id": "sc_4459",
          "content": "[`fs.readFileSync(path[, options])`] readFile()`][], when the path is a directory, the behavior of `fs.",
          "position": 9,
          "originalSentence": "readFile()`][], when the path is a directory, the behavior of `fs."
        },
        {
          "id": "sc_4460",
          "content": "[`fs.readFileSync(path[, options])`] [Previous: readFile()`][], when the path is a directory, the ...] readFileSync()` is platform-specific.",
          "position": 10,
          "originalSentence": "readFileSync()` is platform-specific."
        },
        {
          "id": "sc_4477",
          "content": "[`fs.readlinkSync(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}"
        },
        {
          "id": "sc_4478",
          "content": "[`fs.readlinkSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Returns the symbolic link's string value.",
          "position": 1,
          "originalSentence": "Returns the symbolic link's string value."
        },
        {
          "id": "sc_4479",
          "content": "[`fs.readlinkSync(path[, options])`] [Previous: Returns the symbolic link's string value....] See the POSIX readlink(2) documentation for more details.",
          "position": 2,
          "originalSentence": "See the POSIX readlink(2) documentation for more details."
        },
        {
          "id": "sc_4480",
          "content": "[`fs.readlinkSync(path[, options])`] [Previous: See the POSIX readlink(2) documentation for more d...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
          "position": 3,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned."
        },
        {
          "id": "sc_4481",
          "content": "[`fs.readlinkSync(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 4,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object."
        },
        {
          "id": "sc_4491",
          "content": "[`fs.readSync(fd, buffer, offset, length[, position])`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} `length` {integer} `position` {integer|bigint|null} **Default:** `null` Returns: {number}",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} `length` {integer} `position` {integer|bigint|null} **Default:** `null` Returns: {number}"
        },
        {
          "id": "sc_4492",
          "content": "[`fs.readSync(fd, buffer, offset, length[, position])`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] Returns the number of `bytesRead`.",
          "position": 1,
          "originalSentence": "Returns the number of `bytesRead`."
        },
        {
          "id": "sc_4493",
          "content": "[`fs.readSync(fd, buffer, offset, length[, position])`] [Previous: Returns the number of `bytesRead`....] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4494",
          "content": "[`fs.readSync(fd, buffer, offset, length[, position])`] [Previous: For detailed information, see the documentation of...] read()`][].",
          "position": 3,
          "originalSentence": "read()`][]."
        },
        {
          "id": "sc_4507",
          "content": "[`fs.readSync(fd, buffer[, options])`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "sc_4508",
          "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` Returns: {number}",
          "position": 1,
          "originalSentence": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` Returns: {number}"
        },
        {
          "id": "sc_4509",
          "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: byteLength - offset` * `position` {integer|bigint|...] Returns the number of `bytesRead`.",
          "position": 2,
          "originalSentence": "Returns the number of `bytesRead`."
        },
        {
          "id": "sc_4510",
          "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: Returns the number of `bytesRead`....] Similar to the above `fs.",
          "position": 3,
          "originalSentence": "Similar to the above `fs."
        },
        {
          "id": "sc_4511",
          "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: Similar to the above `fs....] readSync` function, this version takes an optional `options` object.",
          "position": 4,
          "originalSentence": "readSync` function, this version takes an optional `options` object."
        },
        {
          "id": "sc_4512",
          "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: readSync` function, this version takes an optional...] If no `options` object is specified, it will default with the above values.",
          "position": 5,
          "originalSentence": "If no `options` object is specified, it will default with the above values."
        },
        {
          "id": "sc_4513",
          "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: If no `options` object is specified, it will defau...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 6,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4514",
          "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: For detailed information, see the documentation of...] read()`][].",
          "position": 7,
          "originalSentence": "read()`][]."
        },
        {
          "id": "sc_4526",
          "content": "[`fs.readvSync(fd, buffers[, position])`] `fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes read.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes read."
        },
        {
          "id": "sc_4527",
          "content": "[`fs.readvSync(fd, buffers[, position])`] [Previous: `fd` {integer} `buffers` {ArrayBufferView\\[]} `pos...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4528",
          "content": "[`fs.readvSync(fd, buffers[, position])`] [Previous: For detailed information, see the documentation of...] readv()`][].",
          "position": 2,
          "originalSentence": "readv()`][]."
        },
        {
          "id": "sc_4536",
          "content": "[`fs.realpathSync(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}"
        },
        {
          "id": "sc_4537",
          "content": "[`fs.realpathSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Returns the resolved pathname.",
          "position": 1,
          "originalSentence": "Returns the resolved pathname."
        },
        {
          "id": "sc_4538",
          "content": "[`fs.realpathSync(path[, options])`] [Previous: Returns the resolved pathname....] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4539",
          "content": "[`fs.realpathSync(path[, options])`] [Previous: For detailed information, see the documentation of...] realpath()`][].",
          "position": 3,
          "originalSentence": "realpath()`][]."
        },
        {
          "id": "sc_4552",
          "content": "[`fs.realpathSync.native(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}"
        },
        {
          "id": "sc_4553",
          "content": "[`fs.realpathSync.native(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Synchronous realpath(3).",
          "position": 1,
          "originalSentence": "Synchronous realpath(3)."
        },
        {
          "id": "sc_4554",
          "content": "[`fs.realpathSync.native(path[, options])`] [Previous: Synchronous realpath(3)....] Only paths that can be converted to UTF8 strings are supported.",
          "position": 2,
          "originalSentence": "Only paths that can be converted to UTF8 strings are supported."
        },
        {
          "id": "sc_4555",
          "content": "[`fs.realpathSync.native(path[, options])`] [Previous: Only paths that can be converted to UTF8 strings a...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned.",
          "position": 3,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned."
        },
        {
          "id": "sc_4556",
          "content": "[`fs.realpathSync.native(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 4,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object."
        },
        {
          "id": "sc_4557",
          "content": "[`fs.realpathSync.native(path[, options])`] [Previous: If the `encoding` is set to `'buffer'`, the path r...] On Linux, when Node.",
          "position": 5,
          "originalSentence": "On Linux, when Node."
        },
        {
          "id": "sc_4558",
          "content": "[`fs.realpathSync.native(path[, options])`] js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
          "position": 6,
          "originalSentence": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work."
        },
        {
          "id": "sc_4559",
          "content": "[`fs.realpathSync.native(path[, options])`] [Previous: js is linked against musl libc, the procfs file sy...] Glibc does not have this restriction.",
          "position": 7,
          "originalSentence": "Glibc does not have this restriction."
        },
        {
          "id": "sc_4572",
          "content": "[`fs.renameSync(oldPath, newPath)`] `oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}",
          "position": 0,
          "originalSentence": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}"
        },
        {
          "id": "sc_4573",
          "content": "[`fs.renameSync(oldPath, newPath)`] [Previous: `oldPath` {string|Buffer|URL} `newPath` {string|Bu...] Renames the file from `oldPath` to `newPath`.",
          "position": 1,
          "originalSentence": "Renames the file from `oldPath` to `newPath`."
        },
        {
          "id": "sc_4574",
          "content": "[`fs.renameSync(oldPath, newPath)`] [Previous: Renames the file from `oldPath` to `newPath`....] Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4575",
          "content": "[`fs.renameSync(oldPath, newPath)`] See the POSIX rename(2) documentation for more details.",
          "position": 3,
          "originalSentence": "See the POSIX rename(2) documentation for more details."
        },
        {
          "id": "sc_4588",
          "content": "[`fs.rmdirSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed."
        },
        {
          "id": "sc_4589",
          "content": "[`fs.rmdirSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} Ther...] There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
          "position": 1,
          "originalSentence": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed."
        },
        {
          "id": "sc_4590",
          "content": "[`fs.rmdirSync(path[, options])`] [Previous: There used to be options for `recursive`, `maxBusy...] The `options` argument is still accepted for backwards compatibility but it is not used.",
          "position": 2,
          "originalSentence": "The `options` argument is still accepted for backwards compatibility but it is not used."
        },
        {
          "id": "sc_4591",
          "content": "[`fs.rmdirSync(path[, options])`] [Previous: The `options` argument is still accepted for backw...] Synchronous rmdir(2).",
          "position": 3,
          "originalSentence": "Synchronous rmdir(2)."
        },
        {
          "id": "sc_4592",
          "content": "[`fs.rmdirSync(path[, options])`] [Previous: Synchronous rmdir(2)....] Returns `undefined`.",
          "position": 4,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4593",
          "content": "[`fs.rmdirSync(path[, options])`] rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
          "position": 5,
          "originalSentence": "rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX."
        },
        {
          "id": "sc_4594",
          "content": "[`fs.rmdirSync(path[, options])`] [Previous: rmdirSync()` on a file (not a directory) results i...] To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
          "position": 6,
          "originalSentence": "To get a behavior similar to the `rm -rf` Unix command, use [`fs."
        },
        {
          "id": "sc_4595",
          "content": "[`fs.rmdirSync(path[, options])`] [Previous: To get a behavior similar to the `rm -rf` Unix com...] rmSync()`][] with options `{ recursive: true, force: true }`.",
          "position": 7,
          "originalSentence": "rmSync()`][] with options `{ recursive: true, force: true }`."
        },
        {
          "id": "sc_4619",
          "content": "[`fs.rmSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist."
        },
        {
          "id": "sc_4620",
          "content": "[`fs.rmSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `f...] **Default:** `false`.",
          "position": 1,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4621",
          "content": "[`fs.rmSync(path[, options])`] [Previous: **Default:** `false`....] * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
          "position": 2,
          "originalSentence": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node."
        },
        {
          "id": "sc_4622",
          "content": "[`fs.rmSync(path[, options])`] [Previous: * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, ...] js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
          "position": 3,
          "originalSentence": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try."
        },
        {
          "id": "sc_4623",
          "content": "[`fs.rmSync(path[, options])`] [Previous: js will retry the operation with a linear backoff ...] This option represents the number of retries.",
          "position": 4,
          "originalSentence": "This option represents the number of retries."
        },
        {
          "id": "sc_4624",
          "content": "[`fs.rmSync(path[, options])`] [Previous: This option represents the number of retries....] This option is ignored if the `recursive` option is not `true`.",
          "position": 5,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "sc_4625",
          "content": "[`fs.rmSync(path[, options])`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `0`.",
          "position": 6,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "sc_4626",
          "content": "[`fs.rmSync(path[, options])`] * `recursive` {boolean} If `true`, perform a recursive directory removal.",
          "position": 7,
          "originalSentence": "* `recursive` {boolean} If `true`, perform a recursive directory removal."
        },
        {
          "id": "sc_4627",
          "content": "[`fs.rmSync(path[, options])`] [Previous: * `recursive` {boolean} If `true`, perform a recur...] In recursive mode operations are retried on failure.",
          "position": 8,
          "originalSentence": "In recursive mode operations are retried on failure."
        },
        {
          "id": "sc_4628",
          "content": "[`fs.rmSync(path[, options])`] [Previous: In recursive mode operations are retried on failur...] **Default:** `false`.",
          "position": 9,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4629",
          "content": "[`fs.rmSync(path[, options])`] [Previous: **Default:** `false`....] * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
          "position": 10,
          "originalSentence": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries."
        },
        {
          "id": "sc_4630",
          "content": "[`fs.rmSync(path[, options])`] [Previous: * `retryDelay` {integer} The amount of time in mil...] This option is ignored if the `recursive` option is not `true`.",
          "position": 11,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "sc_4631",
          "content": "[`fs.rmSync(path[, options])`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `100`.",
          "position": 12,
          "originalSentence": "**Default:** `100`."
        },
        {
          "id": "sc_4632",
          "content": "[`fs.rmSync(path[, options])`] Synchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 13,
          "originalSentence": "Synchronously removes files and directories (modeled on the standard POSIX `rm` utility)."
        },
        {
          "id": "sc_4633",
          "content": "[`fs.rmSync(path[, options])`] [Previous: Synchronously removes files and directories (model...] Returns `undefined`.",
          "position": 14,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4657",
          "content": "[`fs.statSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_4658",
          "content": "[`fs.statSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "sc_4659",
          "content": "[`fs.statSync(path[, options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4660",
          "content": "[`fs.statSync(path[, options])`] [Previous: **Default:** `false`....] * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
          "position": 3,
          "originalSentence": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`."
        },
        {
          "id": "sc_4661",
          "content": "[`fs.statSync(path[, options])`] [Previous: * `throwIfNoEntry` {boolean} Whether an exception ...] **Default:** `true`.",
          "position": 4,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "sc_4662",
          "content": "[`fs.statSync(path[, options])`] Returns: {fs.",
          "position": 5,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_4663",
          "content": "[`fs.statSync(path[, options])`] Retrieves the {fs.",
          "position": 6,
          "originalSentence": "Retrieves the {fs."
        },
        {
          "id": "sc_4664",
          "content": "[`fs.statSync(path[, options])`] Stats} for the path.",
          "position": 7,
          "originalSentence": "Stats} for the path."
        },
        {
          "id": "sc_4681",
          "content": "[`fs.statfsSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "sc_4682",
          "content": "[`fs.statfsSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] StatFs} object should be `bigint`.",
          "position": 1,
          "originalSentence": "StatFs} object should be `bigint`."
        },
        {
          "id": "sc_4683",
          "content": "[`fs.statfsSync(path[, options])`] [Previous: StatFs} object should be `bigint`....] **Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "sc_4684",
          "content": "[`fs.statfsSync(path[, options])`] [Previous: **Default:** `false`....] Returns: {fs.",
          "position": 3,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_4685",
          "content": "[`fs.statfsSync(path[, options])`] Synchronous statfs(2).",
          "position": 4,
          "originalSentence": "Synchronous statfs(2)."
        },
        {
          "id": "sc_4686",
          "content": "[`fs.statfsSync(path[, options])`] [Previous: Synchronous statfs(2)....] Returns information about the mounted file system which contains `path`.",
          "position": 5,
          "originalSentence": "Returns information about the mounted file system which contains `path`."
        },
        {
          "id": "sc_4687",
          "content": "[`fs.statfsSync(path[, options])`] [Previous: Returns information about the mounted file system ...] In case of an error, the `err.",
          "position": 6,
          "originalSentence": "In case of an error, the `err."
        },
        {
          "id": "sc_4688",
          "content": "[`fs.statfsSync(path[, options])`] [Previous: In case of an error, the `err....] code` will be one of [Common System Errors][].",
          "position": 7,
          "originalSentence": "code` will be one of [Common System Errors][]."
        },
        {
          "id": "sc_4700",
          "content": "[`fs.symlinkSync(target, path[, type])`] `target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: `undefined`.",
          "position": 0,
          "originalSentence": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: `undefined`."
        },
        {
          "id": "sc_4701",
          "content": "[`fs.symlinkSync(target, path[, type])`] [Previous: `target` {string|Buffer|URL} `path` {string|Buffer...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4702",
          "content": "[`fs.symlinkSync(target, path[, type])`] [Previous: For detailed information, see the documentation of...] symlink()`][].",
          "position": 2,
          "originalSentence": "symlink()`][]."
        },
        {
          "id": "sc_4713",
          "content": "[`fs.truncateSync(path[, len])`] `path` {string|Buffer|URL} `len` {integer} **Default:** `0`",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0`"
        },
        {
          "id": "sc_4714",
          "content": "[`fs.truncateSync(path[, len])`] [Previous: `path` {string|Buffer|URL} `len` {integer} **Defau...] Truncates the file.",
          "position": 1,
          "originalSentence": "Truncates the file."
        },
        {
          "id": "sc_4715",
          "content": "[`fs.truncateSync(path[, len])`] Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4716",
          "content": "[`fs.truncateSync(path[, len])`] A file descriptor can also be passed as the first argument.",
          "position": 3,
          "originalSentence": "A file descriptor can also be passed as the first argument."
        },
        {
          "id": "sc_4717",
          "content": "[`fs.truncateSync(path[, len])`] [Previous: A file descriptor can also be passed as the first ...] In this case, `fs.",
          "position": 4,
          "originalSentence": "In this case, `fs."
        },
        {
          "id": "sc_4718",
          "content": "[`fs.truncateSync(path[, len])`] ftruncateSync()` is called.",
          "position": 5,
          "originalSentence": "ftruncateSync()` is called."
        },
        {
          "id": "sc_4719",
          "content": "[`fs.truncateSync(path[, len])`] [Previous: ftruncateSync()` is called....] Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
          "position": 6,
          "originalSentence": "Passing a file descriptor is deprecated and may result in an error being thrown in the future."
        },
        {
          "id": "sc_4729",
          "content": "[`fs.unlinkSync(path)`] `path` {string|Buffer|URL}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL}"
        },
        {
          "id": "sc_4730",
          "content": "[`fs.unlinkSync(path)`] [Previous: `path` {string|Buffer|URL}...] Synchronous unlink(2).",
          "position": 1,
          "originalSentence": "Synchronous unlink(2)."
        },
        {
          "id": "sc_4731",
          "content": "[`fs.unlinkSync(path)`] [Previous: Synchronous unlink(2)....] Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "sc_4738",
          "content": "[`fs.utimesSync(path, atime, mtime)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: `undefined`.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: `undefined`."
        },
        {
          "id": "sc_4739",
          "content": "[`fs.utimesSync(path, atime, mtime)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4740",
          "content": "[`fs.utimesSync(path, atime, mtime)`] [Previous: For detailed information, see the documentation of...] utimes()`][].",
          "position": 2,
          "originalSentence": "utimes()`][]."
        },
        {
          "id": "sc_4753",
          "content": "[`fs.writeFileSync(file, data[, options])`] `file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "sc_4754",
          "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: `file` {string|Buffer|URL|integer} filename or fil...] **Default:** `'w'`.",
          "position": 1,
          "originalSentence": "**Default:** `'w'`."
        },
        {
          "id": "sc_4755",
          "content": "[`fs.writeFileSync(file, data[, options])`] * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs."
        },
        {
          "id": "sc_4756",
          "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: * `flush` {boolean} If all data is successfully wr...] fsyncSync()` is used to flush the data.",
          "position": 3,
          "originalSentence": "fsyncSync()` is used to flush the data."
        },
        {
          "id": "sc_4757",
          "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: fsyncSync()` is used to flush the data....] Returns: `undefined`.",
          "position": 4,
          "originalSentence": "Returns: `undefined`."
        },
        {
          "id": "sc_4758",
          "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: Returns: `undefined`....] The `mode` option only affects the newly created file.",
          "position": 5,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "sc_4759",
          "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
          "position": 6,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "sc_4760",
          "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: open()`][] for more details....] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 7,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4761",
          "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: For detailed information, see the documentation of...] writeFile()`][].",
          "position": 8,
          "originalSentence": "writeFile()`][]."
        },
        {
          "id": "sc_4775",
          "content": "[`fs.writeSync(fd, buffer, offset[, length[, position]])`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer."
        },
        {
          "id": "sc_4776",
          "content": "[`fs.writeSync(fd, buffer, offset[, length[, position]])`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
          "position": 1,
          "originalSentence": "byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written."
        },
        {
          "id": "sc_4777",
          "content": "[`fs.writeSync(fd, buffer, offset[, length[, position]])`] [Previous: byteLength - offset` `position` {integer|null} **D...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4778",
          "content": "[`fs.writeSync(fd, buffer, offset[, length[, position]])`] [Previous: For detailed information, see the documentation of...] write(fd, buffer...)",
          "position": 3,
          "originalSentence": "write(fd, buffer...)"
        },
        {
          "id": "sc_4787",
          "content": "[`fs.writeSync(fd, buffer[, options])`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "sc_4788",
          "content": "[`fs.writeSync(fd, buffer[, options])`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
          "position": 1,
          "originalSentence": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written."
        },
        {
          "id": "sc_4789",
          "content": "[`fs.writeSync(fd, buffer[, options])`] [Previous: byteLength - offset` * `position` {integer|null} *...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4790",
          "content": "[`fs.writeSync(fd, buffer[, options])`] [Previous: For detailed information, see the documentation of...] write(fd, buffer...)",
          "position": 3,
          "originalSentence": "write(fd, buffer...)"
        },
        {
          "id": "sc_4798",
          "content": "[`fs.writeSync(fd, string[, position[, encoding]])`] `fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` Returns: {number} The number of bytes written.",
          "position": 0,
          "originalSentence": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` Returns: {number} The number of bytes written."
        },
        {
          "id": "sc_4799",
          "content": "[`fs.writeSync(fd, string[, position[, encoding]])`] [Previous: `fd` {integer} `string` {string} `position` {integ...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4800",
          "content": "[`fs.writeSync(fd, string[, position[, encoding]])`] [Previous: For detailed information, see the documentation of...] write(fd, string...)",
          "position": 2,
          "originalSentence": "write(fd, string...)"
        },
        {
          "id": "sc_4807",
          "content": "[`fs.writevSync(fd, buffers[, position])`] `fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written."
        },
        {
          "id": "sc_4808",
          "content": "[`fs.writevSync(fd, buffers[, position])`] [Previous: `fd` {integer} `buffers` {ArrayBufferView\\[]} `pos...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "sc_4809",
          "content": "[`fs.writevSync(fd, buffers[, position])`] [Previous: For detailed information, see the documentation of...] writev()`][].",
          "position": 2,
          "originalSentence": "writev()`][]."
        },
        {
          "id": "sc_4813",
          "content": "[Common Objects] The common objects are shared by all of the file system API variants (promise, callback, and synchronous).",
          "position": 0,
          "originalSentence": "The common objects are shared by all of the file system API variants (promise, callback, and synchronous)."
        },
        {
          "id": "sc_4822",
          "content": "[Class: `fs.Dir`] A class representing a directory stream.",
          "position": 0,
          "originalSentence": "A class representing a directory stream."
        },
        {
          "id": "sc_4823",
          "content": "[Class: `fs.Dir`] [Previous: A class representing a directory stream....] Created by [`fs.",
          "position": 1,
          "originalSentence": "Created by [`fs."
        },
        {
          "id": "sc_4824",
          "content": "[Class: `fs.Dir`] opendir()`][], [`fs.",
          "position": 2,
          "originalSentence": "opendir()`][], [`fs."
        },
        {
          "id": "sc_4825",
          "content": "[Class: `fs.Dir`] opendirSync()`][], or [`fsPromises.",
          "position": 3,
          "originalSentence": "opendirSync()`][], or [`fsPromises."
        },
        {
          "id": "sc_4826",
          "content": "[Class: `fs.Dir`] [Previous: opendirSync()`][], or [`fsPromises....] opendir()`][].",
          "position": 4,
          "originalSentence": "opendir()`][]."
        },
        {
          "id": "sc_4827",
          "content": "[Class: `fs.Dir`] When using the async iterator, the {fs.",
          "position": 5,
          "originalSentence": "When using the async iterator, the {fs."
        },
        {
          "id": "sc_4828",
          "content": "[Class: `fs.Dir`] [Previous: When using the async iterator, the {fs....] Dir} object will be automatically closed after the iterator exits.",
          "position": 6,
          "originalSentence": "Dir} object will be automatically closed after the iterator exits."
        },
        {
          "id": "sc_4840",
          "content": "[`dir.close()`] Returns: {Promise}",
          "position": 0,
          "originalSentence": "Returns: {Promise}"
        },
        {
          "id": "sc_4841",
          "content": "[`dir.close()`] Asynchronously close the directory's underlying resource handle.",
          "position": 1,
          "originalSentence": "Asynchronously close the directory's underlying resource handle."
        },
        {
          "id": "sc_4842",
          "content": "[`dir.close()`] [Previous: Asynchronously close the directory's underlying re...] Subsequent reads will result in errors.",
          "position": 2,
          "originalSentence": "Subsequent reads will result in errors."
        },
        {
          "id": "sc_4843",
          "content": "[`dir.close()`] [Previous: Subsequent reads will result in errors....] A promise is returned that will be fulfilled after the resource has been closed.",
          "position": 3,
          "originalSentence": "A promise is returned that will be fulfilled after the resource has been closed."
        },
        {
          "id": "sc_4852",
          "content": "[`dir.close(callback)`] `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_4853",
          "content": "[`dir.close(callback)`] [Previous: `callback` {Function} * `err` {Error}...] Asynchronously close the directory's underlying resource handle.",
          "position": 1,
          "originalSentence": "Asynchronously close the directory's underlying resource handle."
        },
        {
          "id": "sc_4854",
          "content": "[`dir.close(callback)`] [Previous: Asynchronously close the directory's underlying re...] Subsequent reads will result in errors.",
          "position": 2,
          "originalSentence": "Subsequent reads will result in errors."
        },
        {
          "id": "sc_4855",
          "content": "[`dir.close(callback)`] [Previous: Subsequent reads will result in errors....] The `callback` will be called after the resource handle has been closed.",
          "position": 3,
          "originalSentence": "The `callback` will be called after the resource handle has been closed."
        },
        {
          "id": "sc_4861",
          "content": "[`dir.closeSync()`] Synchronously close the directory's underlying resource handle.",
          "position": 0,
          "originalSentence": "Synchronously close the directory's underlying resource handle."
        },
        {
          "id": "sc_4862",
          "content": "[`dir.closeSync()`] [Previous: Synchronously close the directory's underlying res...] Subsequent reads will result in errors.",
          "position": 1,
          "originalSentence": "Subsequent reads will result in errors."
        },
        {
          "id": "sc_4869",
          "content": "[`dir.path`] Type: {string}",
          "position": 0,
          "originalSentence": "Type: {string}"
        },
        {
          "id": "sc_4870",
          "content": "[`dir.path`] The read-only path of this directory as was provided to [`fs.",
          "position": 1,
          "originalSentence": "The read-only path of this directory as was provided to [`fs."
        },
        {
          "id": "sc_4871",
          "content": "[`dir.path`] [Previous: The read-only path of this directory as was provid...] opendir()`][], [`fs.",
          "position": 2,
          "originalSentence": "opendir()`][], [`fs."
        },
        {
          "id": "sc_4872",
          "content": "[`dir.path`] opendirSync()`][], or [`fsPromises.",
          "position": 3,
          "originalSentence": "opendirSync()`][], or [`fsPromises."
        },
        {
          "id": "sc_4873",
          "content": "[`dir.path`] [Previous: opendirSync()`][], or [`fsPromises....] opendir()`][].",
          "position": 4,
          "originalSentence": "opendir()`][]."
        },
        {
          "id": "sc_4886",
          "content": "[`dir.read()`] Returns: {Promise} Fulfills with a {fs.",
          "position": 0,
          "originalSentence": "Returns: {Promise} Fulfills with a {fs."
        },
        {
          "id": "sc_4887",
          "content": "[`dir.read()`] [Previous: Returns: {Promise} Fulfills with a {fs....] Dirent|null}",
          "position": 1,
          "originalSentence": "Dirent|null}"
        },
        {
          "id": "sc_4888",
          "content": "[`dir.read()`] Asynchronously read the next directory entry via readdir(3) as an {fs.",
          "position": 2,
          "originalSentence": "Asynchronously read the next directory entry via readdir(3) as an {fs."
        },
        {
          "id": "sc_4889",
          "content": "[`dir.read()`] [Previous: Asynchronously read the next directory entry via r...] A promise is returned that will be fulfilled with an {fs.",
          "position": 3,
          "originalSentence": "A promise is returned that will be fulfilled with an {fs."
        },
        {
          "id": "sc_4890",
          "content": "[`dir.read()`] [Previous: A promise is returned that will be fulfilled with ...] Dirent}, or `null` if there are no more directory entries to read.",
          "position": 4,
          "originalSentence": "Dirent}, or `null` if there are no more directory entries to read."
        },
        {
          "id": "sc_4891",
          "content": "[`dir.read()`] [Previous: Dirent}, or `null` if there are no more directory ...] Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 5,
          "originalSentence": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms."
        },
        {
          "id": "sc_4892",
          "content": "[`dir.read()`] [Previous: Directory entries returned by this function are in...] Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 6,
          "originalSentence": "Entries added or removed while iterating over the directory might not be included in the iteration results."
        },
        {
          "id": "sc_4907",
          "content": "[`dir.read(callback)`] `callback` {Function} * `err` {Error} * `dirent` {fs.",
          "position": 0,
          "originalSentence": "`callback` {Function} * `err` {Error} * `dirent` {fs."
        },
        {
          "id": "sc_4908",
          "content": "[`dir.read(callback)`] [Previous: `callback` {Function} * `err` {Error} * `dirent` {...] Dirent|null}",
          "position": 1,
          "originalSentence": "Dirent|null}"
        },
        {
          "id": "sc_4909",
          "content": "[`dir.read(callback)`] Asynchronously read the next directory entry via readdir(3) as an {fs.",
          "position": 2,
          "originalSentence": "Asynchronously read the next directory entry via readdir(3) as an {fs."
        },
        {
          "id": "sc_4910",
          "content": "[`dir.read(callback)`] [Previous: Asynchronously read the next directory entry via r...] After the read is completed, the `callback` will be called with an {fs.",
          "position": 3,
          "originalSentence": "After the read is completed, the `callback` will be called with an {fs."
        },
        {
          "id": "sc_4911",
          "content": "[`dir.read(callback)`] [Previous: After the read is completed, the `callback` will b...] Dirent}, or `null` if there are no more directory entries to read.",
          "position": 4,
          "originalSentence": "Dirent}, or `null` if there are no more directory entries to read."
        },
        {
          "id": "sc_4912",
          "content": "[`dir.read(callback)`] [Previous: Dirent}, or `null` if there are no more directory ...] Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 5,
          "originalSentence": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms."
        },
        {
          "id": "sc_4913",
          "content": "[`dir.read(callback)`] [Previous: Directory entries returned by this function are in...] Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 6,
          "originalSentence": "Entries added or removed while iterating over the directory might not be included in the iteration results."
        },
        {
          "id": "sc_4928",
          "content": "[`dir.readSync()`] Returns: {fs.",
          "position": 0,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_4929",
          "content": "[`dir.readSync()`] Dirent|null}",
          "position": 1,
          "originalSentence": "Dirent|null}"
        },
        {
          "id": "sc_4930",
          "content": "[`dir.readSync()`] Synchronously read the next directory entry as an {fs.",
          "position": 2,
          "originalSentence": "Synchronously read the next directory entry as an {fs."
        },
        {
          "id": "sc_4931",
          "content": "[`dir.readSync()`] [Previous: Synchronously read the next directory entry as an ...] See the POSIX readdir(3) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX readdir(3) documentation for more detail."
        },
        {
          "id": "sc_4932",
          "content": "[`dir.readSync()`] [Previous: See the POSIX readdir(3) documentation for more de...] If there are no more directory entries to read, `null` will be returned.",
          "position": 4,
          "originalSentence": "If there are no more directory entries to read, `null` will be returned."
        },
        {
          "id": "sc_4933",
          "content": "[`dir.readSync()`] [Previous: If there are no more directory entries to read, `n...] Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 5,
          "originalSentence": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms."
        },
        {
          "id": "sc_4934",
          "content": "[`dir.readSync()`] [Previous: Directory entries returned by this function are in...] Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 6,
          "originalSentence": "Entries added or removed while iterating over the directory might not be included in the iteration results."
        },
        {
          "id": "sc_4951",
          "content": "[`dir[Symbol.asyncIterator]()`] Returns: {AsyncIterator} An AsyncIterator of {fs.",
          "position": 0,
          "originalSentence": "Returns: {AsyncIterator} An AsyncIterator of {fs."
        },
        {
          "id": "sc_4952",
          "content": "[`dir[Symbol.asyncIterator]()`] [Previous: Returns: {AsyncIterator} An AsyncIterator of {fs....] Asynchronously iterates over the directory until all entries have been read.",
          "position": 1,
          "originalSentence": "Asynchronously iterates over the directory until all entries have been read."
        },
        {
          "id": "sc_4953",
          "content": "[`dir[Symbol.asyncIterator]()`] [Previous: Asynchronously iterates over the directory until a...] Refer to the POSIX readdir(3) documentation for more detail.",
          "position": 2,
          "originalSentence": "Refer to the POSIX readdir(3) documentation for more detail."
        },
        {
          "id": "sc_4954",
          "content": "[`dir[Symbol.asyncIterator]()`] [Previous: Refer to the POSIX readdir(3) documentation for mo...] Entries returned by the async iterator are always an {fs.",
          "position": 3,
          "originalSentence": "Entries returned by the async iterator are always an {fs."
        },
        {
          "id": "sc_4955",
          "content": "[`dir[Symbol.asyncIterator]()`] [Previous: Entries returned by the async iterator are always ...] The `null` case from `dir.",
          "position": 4,
          "originalSentence": "The `null` case from `dir."
        },
        {
          "id": "sc_4956",
          "content": "[`dir[Symbol.asyncIterator]()`] [Previous: The `null` case from `dir....] read()` is handled internally.",
          "position": 5,
          "originalSentence": "read()` is handled internally."
        },
        {
          "id": "sc_4957",
          "content": "[`dir[Symbol.asyncIterator]()`] [Previous: read()` is handled internally....] Dir} for an example.",
          "position": 6,
          "originalSentence": "Dir} for an example."
        },
        {
          "id": "sc_4958",
          "content": "[`dir[Symbol.asyncIterator]()`] Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 7,
          "originalSentence": "Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms."
        },
        {
          "id": "sc_4959",
          "content": "[`dir[Symbol.asyncIterator]()`] [Previous: Directory entries returned by this iterator are in...] Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 8,
          "originalSentence": "Entries added or removed while iterating over the directory might not be included in the iteration results."
        },
        {
          "id": "sc_4970",
          "content": "[`dir[Symbol.asyncDispose]()`] Calls `dir.",
          "position": 0,
          "originalSentence": "Calls `dir."
        },
        {
          "id": "sc_4971",
          "content": "[`dir[Symbol.asyncDispose]()`] close()` if the directory handle is open, and returns a promise that fulfills when disposal is complete.",
          "position": 1,
          "originalSentence": "close()` if the directory handle is open, and returns a promise that fulfills when disposal is complete."
        },
        {
          "id": "sc_4975",
          "content": "[`dir[Symbol.dispose]()`] Calls `dir.",
          "position": 0,
          "originalSentence": "Calls `dir."
        },
        {
          "id": "sc_4976",
          "content": "[`dir[Symbol.dispose]()`] closeSync()` if the directory handle is open, and returns `undefined`.",
          "position": 1,
          "originalSentence": "closeSync()` if the directory handle is open, and returns `undefined`."
        },
        {
          "id": "sc_4985",
          "content": "[Class: `fs.Dirent`] A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an {fs.",
          "position": 0,
          "originalSentence": "A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an {fs."
        },
        {
          "id": "sc_4986",
          "content": "[Class: `fs.Dirent`] [Previous: A representation of a directory entry, which can b...] The directory entry is a combination of the file name and file type pairs.",
          "position": 1,
          "originalSentence": "The directory entry is a combination of the file name and file type pairs."
        },
        {
          "id": "sc_4987",
          "content": "[Class: `fs.Dirent`] [Previous: The directory entry is a combination of the file n...] Additionally, when [`fs.",
          "position": 2,
          "originalSentence": "Additionally, when [`fs."
        },
        {
          "id": "sc_4988",
          "content": "[Class: `fs.Dirent`] [Previous: Additionally, when [`fs....] readdir()`][] or [`fs.",
          "position": 3,
          "originalSentence": "readdir()`][] or [`fs."
        },
        {
          "id": "sc_4989",
          "content": "[Class: `fs.Dirent`] [Previous: readdir()`][] or [`fs....] readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs.",
          "position": 4,
          "originalSentence": "readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs."
        },
        {
          "id": "sc_4990",
          "content": "[Class: `fs.Dirent`] [Previous: readdirSync()`][] is called with the `withFileType...] Dirent} objects, rather than strings or {Buffer}s.",
          "position": 5,
          "originalSentence": "Dirent} objects, rather than strings or {Buffer}s."
        },
        {
          "id": "sc_4999",
          "content": "[`dirent.isBlockDevice()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5000",
          "content": "[`dirent.isBlockDevice()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5001",
          "content": "[`dirent.isBlockDevice()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a block device.",
          "position": 2,
          "originalSentence": "Dirent} object describes a block device."
        },
        {
          "id": "sc_5007",
          "content": "[`dirent.isCharacterDevice()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5008",
          "content": "[`dirent.isCharacterDevice()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5009",
          "content": "[`dirent.isCharacterDevice()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a character device.",
          "position": 2,
          "originalSentence": "Dirent} object describes a character device."
        },
        {
          "id": "sc_5015",
          "content": "[`dirent.isDirectory()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5016",
          "content": "[`dirent.isDirectory()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5017",
          "content": "[`dirent.isDirectory()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a file system directory.",
          "position": 2,
          "originalSentence": "Dirent} object describes a file system directory."
        },
        {
          "id": "sc_5023",
          "content": "[`dirent.isFIFO()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5024",
          "content": "[`dirent.isFIFO()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5025",
          "content": "[`dirent.isFIFO()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a first-in-first-out (FIFO) pipe.",
          "position": 2,
          "originalSentence": "Dirent} object describes a first-in-first-out (FIFO) pipe."
        },
        {
          "id": "sc_5031",
          "content": "[`dirent.isFile()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5032",
          "content": "[`dirent.isFile()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5033",
          "content": "[`dirent.isFile()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a regular file.",
          "position": 2,
          "originalSentence": "Dirent} object describes a regular file."
        },
        {
          "id": "sc_5039",
          "content": "[`dirent.isSocket()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5040",
          "content": "[`dirent.isSocket()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5041",
          "content": "[`dirent.isSocket()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a socket.",
          "position": 2,
          "originalSentence": "Dirent} object describes a socket."
        },
        {
          "id": "sc_5047",
          "content": "[`dirent.isSymbolicLink()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5048",
          "content": "[`dirent.isSymbolicLink()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5049",
          "content": "[`dirent.isSymbolicLink()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a symbolic link.",
          "position": 2,
          "originalSentence": "Dirent} object describes a symbolic link."
        },
        {
          "id": "sc_5060",
          "content": "[`dirent.name`] Type: {string|Buffer}",
          "position": 0,
          "originalSentence": "Type: {string|Buffer}"
        },
        {
          "id": "sc_5061",
          "content": "[`dirent.name`] [Previous: Type: {string|Buffer}...] The file name that this {fs.",
          "position": 1,
          "originalSentence": "The file name that this {fs."
        },
        {
          "id": "sc_5062",
          "content": "[`dirent.name`] [Previous: The file name that this {fs....] Dirent} object refers to.",
          "position": 2,
          "originalSentence": "Dirent} object refers to."
        },
        {
          "id": "sc_5063",
          "content": "[`dirent.name`] [Previous: Dirent} object refers to....] The type of this value is determined by the `options.",
          "position": 3,
          "originalSentence": "The type of this value is determined by the `options."
        },
        {
          "id": "sc_5064",
          "content": "[`dirent.name`] [Previous: The type of this value is determined by the `optio...] encoding` passed to [`fs.",
          "position": 4,
          "originalSentence": "encoding` passed to [`fs."
        },
        {
          "id": "sc_5065",
          "content": "[`dirent.name`] [Previous: encoding` passed to [`fs....] readdir()`][] or [`fs.",
          "position": 5,
          "originalSentence": "readdir()`][] or [`fs."
        },
        {
          "id": "sc_5066",
          "content": "[`dirent.name`] [Previous: readdir()`][] or [`fs....] readdirSync()`][].",
          "position": 6,
          "originalSentence": "readdirSync()`][]."
        },
        {
          "id": "sc_5076",
          "content": "[`dirent.parentPath`] Type: {string}",
          "position": 0,
          "originalSentence": "Type: {string}"
        },
        {
          "id": "sc_5077",
          "content": "[`dirent.parentPath`] The path to the parent directory of the file this {fs.",
          "position": 1,
          "originalSentence": "The path to the parent directory of the file this {fs."
        },
        {
          "id": "sc_5078",
          "content": "[`dirent.parentPath`] [Previous: The path to the parent directory of the file this ...] Dirent} object refers to.",
          "position": 2,
          "originalSentence": "Dirent} object refers to."
        },
        {
          "id": "sc_5087",
          "content": "[Class: `fs.FSWatcher`] Extends {EventEmitter}",
          "position": 0,
          "originalSentence": "Extends {EventEmitter}"
        },
        {
          "id": "sc_5088",
          "content": "[Class: `fs.FSWatcher`] [Previous: Extends {EventEmitter}...] A successful call to [`fs.",
          "position": 1,
          "originalSentence": "A successful call to [`fs."
        },
        {
          "id": "sc_5089",
          "content": "[Class: `fs.FSWatcher`] [Previous: A successful call to [`fs....] watch()`][] method will return a new {fs.",
          "position": 2,
          "originalSentence": "watch()`][] method will return a new {fs."
        },
        {
          "id": "sc_5090",
          "content": "[Class: `fs.FSWatcher`] [Previous: watch()`][] method will return a new {fs....] FSWatcher} object.",
          "position": 3,
          "originalSentence": "FSWatcher} object."
        },
        {
          "id": "sc_5091",
          "content": "[Class: `fs.FSWatcher`] FSWatcher} objects emit a `'change'` event whenever a specific watched file is modified.",
          "position": 4,
          "originalSentence": "FSWatcher} objects emit a `'change'` event whenever a specific watched file is modified."
        },
        {
          "id": "sc_5104",
          "content": "[Event: `'change'`] `eventType` {string} The type of change event that has occurred `filename` {string|Buffer} The filename that changed (if relevant/available)",
          "position": 0,
          "originalSentence": "`eventType` {string} The type of change event that has occurred `filename` {string|Buffer} The filename that changed (if relevant/available)"
        },
        {
          "id": "sc_5105",
          "content": "[Event: `'change'`] [Previous: `eventType` {string} The type of change event that...] Emitted when something changes in a watched directory or file.",
          "position": 1,
          "originalSentence": "Emitted when something changes in a watched directory or file."
        },
        {
          "id": "sc_5106",
          "content": "[Event: `'change'`] [Previous: Emitted when something changes in a watched direct...] See more details in [`fs.",
          "position": 2,
          "originalSentence": "See more details in [`fs."
        },
        {
          "id": "sc_5107",
          "content": "[Event: `'change'`] [Previous: See more details in [`fs....] watch()`][].",
          "position": 3,
          "originalSentence": "watch()`][]."
        },
        {
          "id": "sc_5108",
          "content": "[Event: `'change'`] The `filename` argument may not be provided depending on operating system support.",
          "position": 4,
          "originalSentence": "The `filename` argument may not be provided depending on operating system support."
        },
        {
          "id": "sc_5109",
          "content": "[Event: `'change'`] [Previous: The `filename` argument may not be provided depend...] If `filename` is provided, it will be provided as a {Buffer} if `fs.",
          "position": 5,
          "originalSentence": "If `filename` is provided, it will be provided as a {Buffer} if `fs."
        },
        {
          "id": "sc_5110",
          "content": "[Event: `'change'`] [Previous: If `filename` is provided, it will be provided as ...] watch()` is called with its `encoding` option set to `'buffer'`, otherwise `filename` will be a UTF-8 string.",
          "position": 6,
          "originalSentence": "watch()` is called with its `encoding` option set to `'buffer'`, otherwise `filename` will be a UTF-8 string."
        },
        {
          "id": "sc_5120",
          "content": "[Event: `'close'`] Emitted when the watcher stops watching for changes.",
          "position": 0,
          "originalSentence": "Emitted when the watcher stops watching for changes."
        },
        {
          "id": "sc_5121",
          "content": "[Event: `'close'`] [Previous: Emitted when the watcher stops watching for change...] The closed {fs.",
          "position": 1,
          "originalSentence": "The closed {fs."
        },
        {
          "id": "sc_5122",
          "content": "[Event: `'close'`] FSWatcher} object is no longer usable in the event handler.",
          "position": 2,
          "originalSentence": "FSWatcher} object is no longer usable in the event handler."
        },
        {
          "id": "sc_5130",
          "content": "[Event: `'error'`] `error` {Error}",
          "position": 0,
          "originalSentence": "`error` {Error}"
        },
        {
          "id": "sc_5131",
          "content": "[Event: `'error'`] Emitted when an error occurs while watching the file.",
          "position": 1,
          "originalSentence": "Emitted when an error occurs while watching the file."
        },
        {
          "id": "sc_5132",
          "content": "[Event: `'error'`] [Previous: Emitted when an error occurs while watching the fi...] The errored {fs.",
          "position": 2,
          "originalSentence": "The errored {fs."
        },
        {
          "id": "sc_5133",
          "content": "[Event: `'error'`] FSWatcher} object is no longer usable in the event handler.",
          "position": 3,
          "originalSentence": "FSWatcher} object is no longer usable in the event handler."
        },
        {
          "id": "sc_5141",
          "content": "[`watcher.close()`] Stop watching for changes on the given {fs.",
          "position": 0,
          "originalSentence": "Stop watching for changes on the given {fs."
        },
        {
          "id": "sc_5142",
          "content": "[`watcher.close()`] [Previous: Stop watching for changes on the given {fs....] FSWatcher}.",
          "position": 1,
          "originalSentence": "FSWatcher}."
        },
        {
          "id": "sc_5143",
          "content": "[`watcher.close()`] Once stopped, the {fs.",
          "position": 2,
          "originalSentence": "Once stopped, the {fs."
        },
        {
          "id": "sc_5144",
          "content": "[`watcher.close()`] [Previous: Once stopped, the {fs....] FSWatcher} object is no longer usable.",
          "position": 3,
          "originalSentence": "FSWatcher} object is no longer usable."
        },
        {
          "id": "sc_5159",
          "content": "[`watcher.ref()`] Returns: {fs.",
          "position": 0,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_5160",
          "content": "[`watcher.ref()`] When called, requests that the Node.",
          "position": 1,
          "originalSentence": "When called, requests that the Node."
        },
        {
          "id": "sc_5161",
          "content": "[`watcher.ref()`] [Previous: When called, requests that the Node....] js event loop _not_ exit so long as the {fs.",
          "position": 2,
          "originalSentence": "js event loop _not_ exit so long as the {fs."
        },
        {
          "id": "sc_5162",
          "content": "[`watcher.ref()`] [Previous: js event loop _not_ exit so long as the {fs....] FSWatcher} is active.",
          "position": 3,
          "originalSentence": "FSWatcher} is active."
        },
        {
          "id": "sc_5163",
          "content": "[`watcher.ref()`] [Previous: FSWatcher} is active....] Calling `watcher.",
          "position": 4,
          "originalSentence": "Calling `watcher."
        },
        {
          "id": "sc_5164",
          "content": "[`watcher.ref()`] ref()` multiple times will have no effect.",
          "position": 5,
          "originalSentence": "ref()` multiple times will have no effect."
        },
        {
          "id": "sc_5165",
          "content": "[`watcher.ref()`] [Previous: ref()` multiple times will have no effect....] By default, all {fs.",
          "position": 6,
          "originalSentence": "By default, all {fs."
        },
        {
          "id": "sc_5166",
          "content": "[`watcher.ref()`] FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
          "position": 7,
          "originalSentence": "FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher."
        },
        {
          "id": "sc_5167",
          "content": "[`watcher.ref()`] [Previous: FSWatcher} objects are \"ref'ed\", making it normall...] ref()` unless `watcher.",
          "position": 8,
          "originalSentence": "ref()` unless `watcher."
        },
        {
          "id": "sc_5168",
          "content": "[`watcher.ref()`] [Previous: ref()` unless `watcher....] unref()` had been called previously.",
          "position": 9,
          "originalSentence": "unref()` had been called previously."
        },
        {
          "id": "sc_5187",
          "content": "[`watcher.unref()`] Returns: {fs.",
          "position": 0,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_5188",
          "content": "[`watcher.unref()`] When called, the active {fs.",
          "position": 1,
          "originalSentence": "When called, the active {fs."
        },
        {
          "id": "sc_5189",
          "content": "[`watcher.unref()`] [Previous: When called, the active {fs....] FSWatcher} object will not require the Node.",
          "position": 2,
          "originalSentence": "FSWatcher} object will not require the Node."
        },
        {
          "id": "sc_5190",
          "content": "[`watcher.unref()`] [Previous: FSWatcher} object will not require the Node....] js event loop to remain active.",
          "position": 3,
          "originalSentence": "js event loop to remain active."
        },
        {
          "id": "sc_5191",
          "content": "[`watcher.unref()`] [Previous: js event loop to remain active....] If there is no other activity keeping the event loop running, the process may exit before the {fs.",
          "position": 4,
          "originalSentence": "If there is no other activity keeping the event loop running, the process may exit before the {fs."
        },
        {
          "id": "sc_5192",
          "content": "[`watcher.unref()`] [Previous: If there is no other activity keeping the event lo...] FSWatcher} object's callback is invoked.",
          "position": 5,
          "originalSentence": "FSWatcher} object's callback is invoked."
        },
        {
          "id": "sc_5193",
          "content": "[`watcher.unref()`] [Previous: FSWatcher} object's callback is invoked....] Calling `watcher.",
          "position": 6,
          "originalSentence": "Calling `watcher."
        },
        {
          "id": "sc_5194",
          "content": "[`watcher.unref()`] unref()` multiple times will have no effect.",
          "position": 7,
          "originalSentence": "unref()` multiple times will have no effect."
        },
        {
          "id": "sc_5206",
          "content": "[Class: `fs.StatWatcher`] Extends {EventEmitter}",
          "position": 0,
          "originalSentence": "Extends {EventEmitter}"
        },
        {
          "id": "sc_5207",
          "content": "[Class: `fs.StatWatcher`] [Previous: Extends {EventEmitter}...] A successful call to `fs.",
          "position": 1,
          "originalSentence": "A successful call to `fs."
        },
        {
          "id": "sc_5208",
          "content": "[Class: `fs.StatWatcher`] [Previous: A successful call to `fs....] watchFile()` method will return a new {fs.",
          "position": 2,
          "originalSentence": "watchFile()` method will return a new {fs."
        },
        {
          "id": "sc_5209",
          "content": "[Class: `fs.StatWatcher`] [Previous: watchFile()` method will return a new {fs....] StatWatcher} object.",
          "position": 3,
          "originalSentence": "StatWatcher} object."
        },
        {
          "id": "sc_5225",
          "content": "[`watcher.ref()`] Returns: {fs.",
          "position": 0,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_5226",
          "content": "[`watcher.ref()`] StatWatcher}",
          "position": 1,
          "originalSentence": "StatWatcher}"
        },
        {
          "id": "sc_5227",
          "content": "[`watcher.ref()`] When called, requests that the Node.",
          "position": 2,
          "originalSentence": "When called, requests that the Node."
        },
        {
          "id": "sc_5228",
          "content": "[`watcher.ref()`] [Previous: When called, requests that the Node....] js event loop _not_ exit so long as the {fs.",
          "position": 3,
          "originalSentence": "js event loop _not_ exit so long as the {fs."
        },
        {
          "id": "sc_5229",
          "content": "[`watcher.ref()`] [Previous: js event loop _not_ exit so long as the {fs....] StatWatcher} is active.",
          "position": 4,
          "originalSentence": "StatWatcher} is active."
        },
        {
          "id": "sc_5230",
          "content": "[`watcher.ref()`] [Previous: StatWatcher} is active....] Calling `watcher.",
          "position": 5,
          "originalSentence": "Calling `watcher."
        },
        {
          "id": "sc_5231",
          "content": "[`watcher.ref()`] ref()` multiple times will have no effect.",
          "position": 6,
          "originalSentence": "ref()` multiple times will have no effect."
        },
        {
          "id": "sc_5232",
          "content": "[`watcher.ref()`] [Previous: ref()` multiple times will have no effect....] By default, all {fs.",
          "position": 7,
          "originalSentence": "By default, all {fs."
        },
        {
          "id": "sc_5233",
          "content": "[`watcher.ref()`] StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
          "position": 8,
          "originalSentence": "StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher."
        },
        {
          "id": "sc_5234",
          "content": "[`watcher.ref()`] [Previous: StatWatcher} objects are \"ref'ed\", making it norma...] ref()` unless `watcher.",
          "position": 9,
          "originalSentence": "ref()` unless `watcher."
        },
        {
          "id": "sc_5235",
          "content": "[`watcher.ref()`] [Previous: ref()` unless `watcher....] unref()` had been called previously.",
          "position": 10,
          "originalSentence": "unref()` had been called previously."
        },
        {
          "id": "sc_5256",
          "content": "[`watcher.unref()`] Returns: {fs.",
          "position": 0,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "sc_5257",
          "content": "[`watcher.unref()`] StatWatcher}",
          "position": 1,
          "originalSentence": "StatWatcher}"
        },
        {
          "id": "sc_5258",
          "content": "[`watcher.unref()`] When called, the active {fs.",
          "position": 2,
          "originalSentence": "When called, the active {fs."
        },
        {
          "id": "sc_5259",
          "content": "[`watcher.unref()`] [Previous: When called, the active {fs....] StatWatcher} object will not require the Node.",
          "position": 3,
          "originalSentence": "StatWatcher} object will not require the Node."
        },
        {
          "id": "sc_5260",
          "content": "[`watcher.unref()`] [Previous: StatWatcher} object will not require the Node....] js event loop to remain active.",
          "position": 4,
          "originalSentence": "js event loop to remain active."
        },
        {
          "id": "sc_5261",
          "content": "[`watcher.unref()`] [Previous: js event loop to remain active....] If there is no other activity keeping the event loop running, the process may exit before the {fs.",
          "position": 5,
          "originalSentence": "If there is no other activity keeping the event loop running, the process may exit before the {fs."
        },
        {
          "id": "sc_5262",
          "content": "[`watcher.unref()`] [Previous: If there is no other activity keeping the event lo...] StatWatcher} object's callback is invoked.",
          "position": 6,
          "originalSentence": "StatWatcher} object's callback is invoked."
        },
        {
          "id": "sc_5263",
          "content": "[`watcher.unref()`] [Previous: StatWatcher} object's callback is invoked....] Calling `watcher.",
          "position": 7,
          "originalSentence": "Calling `watcher."
        },
        {
          "id": "sc_5264",
          "content": "[`watcher.unref()`] unref()` multiple times will have no effect.",
          "position": 8,
          "originalSentence": "unref()` multiple times will have no effect."
        },
        {
          "id": "sc_5277",
          "content": "[Class: `fs.ReadStream`] Extends: {stream.",
          "position": 0,
          "originalSentence": "Extends: {stream."
        },
        {
          "id": "sc_5278",
          "content": "[Class: `fs.ReadStream`] Instances of {fs.",
          "position": 1,
          "originalSentence": "Instances of {fs."
        },
        {
          "id": "sc_5279",
          "content": "[Class: `fs.ReadStream`] ReadStream} are created and returned using the [`fs.",
          "position": 2,
          "originalSentence": "ReadStream} are created and returned using the [`fs."
        },
        {
          "id": "sc_5280",
          "content": "[Class: `fs.ReadStream`] [Previous: ReadStream} are created and returned using the [`f...] createReadStream()`][] function.",
          "position": 3,
          "originalSentence": "createReadStream()`][] function."
        },
        {
          "id": "sc_5286",
          "content": "[Event: `'close'`] Emitted when the {fs.",
          "position": 0,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "sc_5287",
          "content": "[Event: `'close'`] [Previous: Emitted when the {fs....] ReadStream}'s underlying file descriptor has been closed.",
          "position": 1,
          "originalSentence": "ReadStream}'s underlying file descriptor has been closed."
        },
        {
          "id": "sc_5293",
          "content": "[Event: `'open'`] `fd` {integer} Integer file descriptor used by the {fs.",
          "position": 0,
          "originalSentence": "`fd` {integer} Integer file descriptor used by the {fs."
        },
        {
          "id": "sc_5294",
          "content": "[Event: `'open'`] [Previous: `fd` {integer} Integer file descriptor used by the...] ReadStream}.",
          "position": 1,
          "originalSentence": "ReadStream}."
        },
        {
          "id": "sc_5295",
          "content": "[Event: `'open'`] Emitted when the {fs.",
          "position": 2,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "sc_5296",
          "content": "[Event: `'open'`] [Previous: Emitted when the {fs....] ReadStream}'s file descriptor has been opened.",
          "position": 3,
          "originalSentence": "ReadStream}'s file descriptor has been opened."
        },
        {
          "id": "sc_5303",
          "content": "[Event: `'ready'`] Emitted when the {fs.",
          "position": 0,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "sc_5304",
          "content": "[Event: `'ready'`] [Previous: Emitted when the {fs....] ReadStream} is ready to be used.",
          "position": 1,
          "originalSentence": "ReadStream} is ready to be used."
        },
        {
          "id": "sc_5305",
          "content": "[Event: `'ready'`] [Previous: ReadStream} is ready to be used....] Fires immediately after `'open'`.",
          "position": 2,
          "originalSentence": "Fires immediately after `'open'`."
        },
        {
          "id": "sc_5310",
          "content": "[`readStream.bytesRead`] Type: {number}",
          "position": 0,
          "originalSentence": "Type: {number}"
        },
        {
          "id": "sc_5311",
          "content": "[`readStream.bytesRead`] The number of bytes that have been read so far.",
          "position": 1,
          "originalSentence": "The number of bytes that have been read so far."
        },
        {
          "id": "sc_5323",
          "content": "[`readStream.path`] Type: {string|Buffer}",
          "position": 0,
          "originalSentence": "Type: {string|Buffer}"
        },
        {
          "id": "sc_5324",
          "content": "[`readStream.path`] [Previous: Type: {string|Buffer}...] The path to the file the stream is reading from as specified in the first argument to `fs.",
          "position": 1,
          "originalSentence": "The path to the file the stream is reading from as specified in the first argument to `fs."
        },
        {
          "id": "sc_5325",
          "content": "[`readStream.path`] [Previous: The path to the file the stream is reading from as...] createReadStream()`.",
          "position": 2,
          "originalSentence": "createReadStream()`."
        },
        {
          "id": "sc_5326",
          "content": "[`readStream.path`] If `path` is passed as a string, then `readStream.",
          "position": 3,
          "originalSentence": "If `path` is passed as a string, then `readStream."
        },
        {
          "id": "sc_5327",
          "content": "[`readStream.path`] [Previous: If `path` is passed as a string, then `readStream....] path` will be a string.",
          "position": 4,
          "originalSentence": "path` will be a string."
        },
        {
          "id": "sc_5328",
          "content": "[`readStream.path`] [Previous: path` will be a string....] If `path` is passed as a {Buffer}, then `readStream.",
          "position": 5,
          "originalSentence": "If `path` is passed as a {Buffer}, then `readStream."
        },
        {
          "id": "sc_5329",
          "content": "[`readStream.path`] [Previous: If `path` is passed as a {Buffer}, then `readStrea...] path` will be a {Buffer}.",
          "position": 6,
          "originalSentence": "path` will be a {Buffer}."
        },
        {
          "id": "sc_5330",
          "content": "[`readStream.path`] [Previous: path` will be a {Buffer}....] If `fd` is specified, then `readStream.",
          "position": 7,
          "originalSentence": "If `fd` is specified, then `readStream."
        },
        {
          "id": "sc_5331",
          "content": "[`readStream.path`] [Previous: If `fd` is specified, then `readStream....] path` will be `undefined`.",
          "position": 8,
          "originalSentence": "path` will be `undefined`."
        },
        {
          "id": "sc_5344",
          "content": "[`readStream.pending`] Type: {boolean}",
          "position": 0,
          "originalSentence": "Type: {boolean}"
        },
        {
          "id": "sc_5345",
          "content": "[`readStream.pending`] This property is `true` if the underlying file has not been opened yet, i.",
          "position": 1,
          "originalSentence": "This property is `true` if the underlying file has not been opened yet, i."
        },
        {
          "id": "sc_5346",
          "content": "[`readStream.pending`] [Previous: This property is `true` if the underlying file has...] before the `'ready'` event is emitted.",
          "position": 2,
          "originalSentence": "before the `'ready'` event is emitted."
        },
        {
          "id": "sc_5359",
          "content": "[Class: `fs.Stats`] Stats} object provides information about a file.",
          "position": 0,
          "originalSentence": "Stats} object provides information about a file."
        },
        {
          "id": "sc_5360",
          "content": "[Class: `fs.Stats`] [Previous: Stats} object provides information about a file....] Objects returned from [`fs.",
          "position": 1,
          "originalSentence": "Objects returned from [`fs."
        },
        {
          "id": "sc_5361",
          "content": "[Class: `fs.Stats`] [Previous: Objects returned from [`fs....] stat()`][], [`fs.",
          "position": 2,
          "originalSentence": "stat()`][], [`fs."
        },
        {
          "id": "sc_5362",
          "content": "[Class: `fs.Stats`] lstat()`][], [`fs.",
          "position": 3,
          "originalSentence": "lstat()`][], [`fs."
        },
        {
          "id": "sc_5363",
          "content": "[Class: `fs.Stats`] fstat()`][], and their synchronous counterparts are of this type.",
          "position": 4,
          "originalSentence": "fstat()`][], and their synchronous counterparts are of this type."
        },
        {
          "id": "sc_5364",
          "content": "[Class: `fs.Stats`] [Previous: fstat()`][], and their synchronous counterparts ar...] If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`",
          "position": 5,
          "originalSentence": "If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`"
        },
        {
          "id": "sc_5365",
          "content": "[Class: `fs.Stats`] [Previous: If `bigint` in the `options` passed to those metho...] and the object will contain additional nanosecond-precision properties suffixed with `Ns`.",
          "position": 6,
          "originalSentence": "and the object will contain additional nanosecond-precision properties suffixed with `Ns`."
        },
        {
          "id": "sc_5366",
          "content": "[Class: `fs.Stats`] [Previous: and the object will contain additional nanosecond-...] `Stat` objects are not to be created directly using the `new` keyword.",
          "position": 7,
          "originalSentence": "`Stat` objects are not to be created directly using the `new` keyword."
        },
        {
          "id": "sc_5367",
          "content": "[Class: `fs.Stats`] [Previous: `Stat` objects are not to be created directly usin...] `bigint` version:",
          "position": 8,
          "originalSentence": "`bigint` version:"
        },
        {
          "id": "sc_5379",
          "content": "[`stats.isBlockDevice()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5380",
          "content": "[`stats.isBlockDevice()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5381",
          "content": "[`stats.isBlockDevice()`] [Previous: Returns `true` if the {fs....] Stats} object describes a block device.",
          "position": 2,
          "originalSentence": "Stats} object describes a block device."
        },
        {
          "id": "sc_5387",
          "content": "[`stats.isCharacterDevice()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5388",
          "content": "[`stats.isCharacterDevice()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5389",
          "content": "[`stats.isCharacterDevice()`] [Previous: Returns `true` if the {fs....] Stats} object describes a character device.",
          "position": 2,
          "originalSentence": "Stats} object describes a character device."
        },
        {
          "id": "sc_5401",
          "content": "[`stats.isDirectory()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5402",
          "content": "[`stats.isDirectory()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5403",
          "content": "[`stats.isDirectory()`] [Previous: Returns `true` if the {fs....] Stats} object describes a file system directory.",
          "position": 2,
          "originalSentence": "Stats} object describes a file system directory."
        },
        {
          "id": "sc_5404",
          "content": "[`stats.isDirectory()`] [Previous: Stats} object describes a file system directory....] If the {fs.",
          "position": 3,
          "originalSentence": "If the {fs."
        },
        {
          "id": "sc_5405",
          "content": "[`stats.isDirectory()`] Stats} object was obtained from calling [`fs.",
          "position": 4,
          "originalSentence": "Stats} object was obtained from calling [`fs."
        },
        {
          "id": "sc_5406",
          "content": "[`stats.isDirectory()`] [Previous: Stats} object was obtained from calling [`fs....] lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`.",
          "position": 5,
          "originalSentence": "lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`."
        },
        {
          "id": "sc_5407",
          "content": "[`stats.isDirectory()`] [Previous: lstat()`][] on a symbolic link which resolves to a...] This is because [`fs.",
          "position": 6,
          "originalSentence": "This is because [`fs."
        },
        {
          "id": "sc_5408",
          "content": "[`stats.isDirectory()`] [Previous: This is because [`fs....] lstat()`][] returns information about a symbolic link itself and not the path it resolves to.",
          "position": 7,
          "originalSentence": "lstat()`][] returns information about a symbolic link itself and not the path it resolves to."
        },
        {
          "id": "sc_5419",
          "content": "[`stats.isFIFO()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5420",
          "content": "[`stats.isFIFO()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5421",
          "content": "[`stats.isFIFO()`] [Previous: Returns `true` if the {fs....] Stats} object describes a first-in-first-out (FIFO) pipe.",
          "position": 2,
          "originalSentence": "Stats} object describes a first-in-first-out (FIFO) pipe."
        },
        {
          "id": "sc_5427",
          "content": "[`stats.isFile()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5428",
          "content": "[`stats.isFile()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5429",
          "content": "[`stats.isFile()`] [Previous: Returns `true` if the {fs....] Stats} object describes a regular file.",
          "position": 2,
          "originalSentence": "Stats} object describes a regular file."
        },
        {
          "id": "sc_5435",
          "content": "[`stats.isSocket()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5436",
          "content": "[`stats.isSocket()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5437",
          "content": "[`stats.isSocket()`] [Previous: Returns `true` if the {fs....] Stats} object describes a socket.",
          "position": 2,
          "originalSentence": "Stats} object describes a socket."
        },
        {
          "id": "sc_5445",
          "content": "[`stats.isSymbolicLink()`] Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "sc_5446",
          "content": "[`stats.isSymbolicLink()`] Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "sc_5447",
          "content": "[`stats.isSymbolicLink()`] [Previous: Returns `true` if the {fs....] Stats} object describes a symbolic link.",
          "position": 2,
          "originalSentence": "Stats} object describes a symbolic link."
        },
        {
          "id": "sc_5448",
          "content": "[`stats.isSymbolicLink()`] [Previous: Stats} object describes a symbolic link....] This method is only valid when using [`fs.",
          "position": 3,
          "originalSentence": "This method is only valid when using [`fs."
        },
        {
          "id": "sc_5449",
          "content": "[`stats.isSymbolicLink()`] [Previous: This method is only valid when using [`fs....] lstat()`][].",
          "position": 4,
          "originalSentence": "lstat()`][]."
        },
        {
          "id": "sc_5456",
          "content": "[`stats.dev`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5457",
          "content": "[`stats.dev`] [Previous: Type: {number|bigint}...] The numeric identifier of the device containing the file.",
          "position": 1,
          "originalSentence": "The numeric identifier of the device containing the file."
        },
        {
          "id": "sc_5461",
          "content": "[`stats.ino`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5462",
          "content": "[`stats.ino`] [Previous: Type: {number|bigint}...] The file system specific \"Inode\" number for the file.",
          "position": 1,
          "originalSentence": "The file system specific \"Inode\" number for the file."
        },
        {
          "id": "sc_5466",
          "content": "[`stats.mode`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5467",
          "content": "[`stats.mode`] [Previous: Type: {number|bigint}...] A bit-field describing the file type and mode.",
          "position": 1,
          "originalSentence": "A bit-field describing the file type and mode."
        },
        {
          "id": "sc_5471",
          "content": "[`stats.nlink`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5472",
          "content": "[`stats.nlink`] [Previous: Type: {number|bigint}...] The number of hard-links that exist for the file.",
          "position": 1,
          "originalSentence": "The number of hard-links that exist for the file."
        },
        {
          "id": "sc_5476",
          "content": "[`stats.uid`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5477",
          "content": "[`stats.uid`] [Previous: Type: {number|bigint}...] The numeric user identifier of the user that owns the file (POSIX).",
          "position": 1,
          "originalSentence": "The numeric user identifier of the user that owns the file (POSIX)."
        },
        {
          "id": "sc_5481",
          "content": "[`stats.gid`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5482",
          "content": "[`stats.gid`] [Previous: Type: {number|bigint}...] The numeric group identifier of the group that owns the file (POSIX).",
          "position": 1,
          "originalSentence": "The numeric group identifier of the group that owns the file (POSIX)."
        },
        {
          "id": "sc_5486",
          "content": "[`stats.rdev`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5487",
          "content": "[`stats.rdev`] [Previous: Type: {number|bigint}...] A numeric device identifier if the file represents a device.",
          "position": 1,
          "originalSentence": "A numeric device identifier if the file represents a device."
        },
        {
          "id": "sc_5493",
          "content": "[`stats.size`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5494",
          "content": "[`stats.size`] [Previous: Type: {number|bigint}...] The size of the file in bytes.",
          "position": 1,
          "originalSentence": "The size of the file in bytes."
        },
        {
          "id": "sc_5495",
          "content": "[`stats.size`] [Previous: The size of the file in bytes....] If the underlying file system does not support getting the size of the file, this will be `0`.",
          "position": 2,
          "originalSentence": "If the underlying file system does not support getting the size of the file, this will be `0`."
        },
        {
          "id": "sc_5500",
          "content": "[`stats.blksize`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5501",
          "content": "[`stats.blksize`] [Previous: Type: {number|bigint}...] The file system block size for i/o operations.",
          "position": 1,
          "originalSentence": "The file system block size for i/o operations."
        },
        {
          "id": "sc_5505",
          "content": "[`stats.blocks`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5506",
          "content": "[`stats.blocks`] [Previous: Type: {number|bigint}...] The number of blocks allocated for this file.",
          "position": 1,
          "originalSentence": "The number of blocks allocated for this file."
        },
        {
          "id": "sc_5510",
          "content": "[`stats.atimeMs`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5511",
          "content": "[`stats.atimeMs`] [Previous: Type: {number|bigint}...] The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch."
        },
        {
          "id": "sc_5515",
          "content": "[`stats.mtimeMs`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5516",
          "content": "[`stats.mtimeMs`] [Previous: Type: {number|bigint}...] The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch."
        },
        {
          "id": "sc_5520",
          "content": "[`stats.ctimeMs`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5521",
          "content": "[`stats.ctimeMs`] [Previous: Type: {number|bigint}...] The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch."
        },
        {
          "id": "sc_5525",
          "content": "[`stats.birthtimeMs`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5526",
          "content": "[`stats.birthtimeMs`] [Previous: Type: {number|bigint}...] The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.",
          "position": 1,
          "originalSentence": "The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch."
        },
        {
          "id": "sc_5532",
          "content": "[`stats.atimeNs`] Type: {bigint}",
          "position": 0,
          "originalSentence": "Type: {bigint}"
        },
        {
          "id": "sc_5533",
          "content": "[`stats.atimeNs`] Only present when `bigint: true` is passed into the method that generates the object.",
          "position": 1,
          "originalSentence": "Only present when `bigint: true` is passed into the method that generates the object."
        },
        {
          "id": "sc_5534",
          "content": "[`stats.atimeNs`] [Previous: Only present when `bigint: true` is passed into th...] The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch.",
          "position": 2,
          "originalSentence": "The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch."
        },
        {
          "id": "sc_5541",
          "content": "[`stats.mtimeNs`] Type: {bigint}",
          "position": 0,
          "originalSentence": "Type: {bigint}"
        },
        {
          "id": "sc_5542",
          "content": "[`stats.mtimeNs`] Only present when `bigint: true` is passed into the method that generates the object.",
          "position": 1,
          "originalSentence": "Only present when `bigint: true` is passed into the method that generates the object."
        },
        {
          "id": "sc_5543",
          "content": "[`stats.mtimeNs`] [Previous: Only present when `bigint: true` is passed into th...] The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch.",
          "position": 2,
          "originalSentence": "The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch."
        },
        {
          "id": "sc_5550",
          "content": "[`stats.ctimeNs`] Type: {bigint}",
          "position": 0,
          "originalSentence": "Type: {bigint}"
        },
        {
          "id": "sc_5551",
          "content": "[`stats.ctimeNs`] Only present when `bigint: true` is passed into the method that generates the object.",
          "position": 1,
          "originalSentence": "Only present when `bigint: true` is passed into the method that generates the object."
        },
        {
          "id": "sc_5552",
          "content": "[`stats.ctimeNs`] [Previous: Only present when `bigint: true` is passed into th...] The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch.",
          "position": 2,
          "originalSentence": "The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch."
        },
        {
          "id": "sc_5559",
          "content": "[`stats.birthtimeNs`] Type: {bigint}",
          "position": 0,
          "originalSentence": "Type: {bigint}"
        },
        {
          "id": "sc_5560",
          "content": "[`stats.birthtimeNs`] Only present when `bigint: true` is passed into the method that generates the object.",
          "position": 1,
          "originalSentence": "Only present when `bigint: true` is passed into the method that generates the object."
        },
        {
          "id": "sc_5561",
          "content": "[`stats.birthtimeNs`] [Previous: Only present when `bigint: true` is passed into th...] The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch.",
          "position": 2,
          "originalSentence": "The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch."
        },
        {
          "id": "sc_5566",
          "content": "[`stats.atime`] Type: {Date}",
          "position": 0,
          "originalSentence": "Type: {Date}"
        },
        {
          "id": "sc_5567",
          "content": "[`stats.atime`] The timestamp indicating the last time this file was accessed.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time this file was accessed."
        },
        {
          "id": "sc_5571",
          "content": "[`stats.mtime`] Type: {Date}",
          "position": 0,
          "originalSentence": "Type: {Date}"
        },
        {
          "id": "sc_5572",
          "content": "[`stats.mtime`] The timestamp indicating the last time this file was modified.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time this file was modified."
        },
        {
          "id": "sc_5576",
          "content": "[`stats.ctime`] Type: {Date}",
          "position": 0,
          "originalSentence": "Type: {Date}"
        },
        {
          "id": "sc_5577",
          "content": "[`stats.ctime`] The timestamp indicating the last time the file status was changed.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time the file status was changed."
        },
        {
          "id": "sc_5581",
          "content": "[`stats.birthtime`] Type: {Date}",
          "position": 0,
          "originalSentence": "Type: {Date}"
        },
        {
          "id": "sc_5582",
          "content": "[`stats.birthtime`] The timestamp indicating the creation time of this file.",
          "position": 1,
          "originalSentence": "The timestamp indicating the creation time of this file."
        },
        {
          "id": "sc_5610",
          "content": "[Stat time values] The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs` properties are numeric values that hold the corresponding times in milliseconds.",
          "position": 0,
          "originalSentence": "The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs` properties are numeric values that hold the corresponding times in milliseconds."
        },
        {
          "id": "sc_5611",
          "content": "[Stat time values] [Previous: The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs`...] Their precision is platform specific.",
          "position": 1,
          "originalSentence": "Their precision is platform specific."
        },
        {
          "id": "sc_5612",
          "content": "[Stat time values] [Previous: Their precision is platform specific....] When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number].",
          "position": 2,
          "originalSentence": "When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number]."
        },
        {
          "id": "sc_5613",
          "content": "[Stat time values] [Previous: When `bigint: true` is passed into the method that...] The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds.",
          "position": 3,
          "originalSentence": "The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds."
        },
        {
          "id": "sc_5614",
          "content": "[Stat time values] [Previous: The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs`...] They are only present when `bigint: true` is passed into the method that generates the object.",
          "position": 4,
          "originalSentence": "They are only present when `bigint: true` is passed into the method that generates the object."
        },
        {
          "id": "sc_5615",
          "content": "[Stat time values] [Previous: They are only present when `bigint: true` is passe...] Their precision is platform specific.",
          "position": 5,
          "originalSentence": "Their precision is platform specific."
        },
        {
          "id": "sc_5616",
          "content": "[Stat time values] [Previous: Their precision is platform specific....] `atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times.",
          "position": 6,
          "originalSentence": "`atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times."
        },
        {
          "id": "sc_5617",
          "content": "[Stat time values] [Previous: `atime`, `mtime`, `ctime`, and `birthtime` are [`D...] The `Date` and number values are not connected.",
          "position": 7,
          "originalSentence": "The `Date` and number values are not connected."
        },
        {
          "id": "sc_5618",
          "content": "[Stat time values] [Previous: The `Date` and number values are not connected....] Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation.",
          "position": 8,
          "originalSentence": "Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation."
        },
        {
          "id": "sc_5619",
          "content": "[Stat time values] [Previous: Assigning a new number value, or mutating the `Dat...] The times in the stat object have the following semantics:",
          "position": 9,
          "originalSentence": "The times in the stat object have the following semantics:"
        },
        {
          "id": "sc_5620",
          "content": "[Stat time values] [Previous: The times in the stat object have the following se...] `atime` \"Access Time\": Time when file data last accessed.",
          "position": 10,
          "originalSentence": "`atime` \"Access Time\": Time when file data last accessed."
        },
        {
          "id": "sc_5621",
          "content": "[Stat time values] [Previous: `atime` \"Access Time\": Time when file data last ac...] Changed by the mknod(2), utimes(2), and read(2) system calls.",
          "position": 11,
          "originalSentence": "Changed by the mknod(2), utimes(2), and read(2) system calls."
        },
        {
          "id": "sc_5622",
          "content": "[Stat time values] [Previous: Changed by the mknod(2), utimes(2), and read(2) sy...] `mtime` \"Modified Time\": Time when file data last modified.",
          "position": 12,
          "originalSentence": "`mtime` \"Modified Time\": Time when file data last modified."
        },
        {
          "id": "sc_5623",
          "content": "[Stat time values] [Previous: `mtime` \"Modified Time\": Time when file data last ...] Changed by the mknod(2), utimes(2), and write(2) system calls.",
          "position": 13,
          "originalSentence": "Changed by the mknod(2), utimes(2), and write(2) system calls."
        },
        {
          "id": "sc_5624",
          "content": "[Stat time values] [Previous: Changed by the mknod(2), utimes(2), and write(2) s...] `ctime` \"Change Time\": Time when file status was last changed (inode data modification).",
          "position": 14,
          "originalSentence": "`ctime` \"Change Time\": Time when file status was last changed (inode data modification)."
        },
        {
          "id": "sc_5625",
          "content": "[Stat time values] [Previous: `ctime` \"Change Time\": Time when file status was l...] Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls.",
          "position": 15,
          "originalSentence": "Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls."
        },
        {
          "id": "sc_5626",
          "content": "[Stat time values] [Previous: Changed by the chmod(2), chown(2), link(2), mknod(...] `birthtime` \"Birth Time\": Time of file creation.",
          "position": 16,
          "originalSentence": "`birthtime` \"Birth Time\": Time of file creation."
        },
        {
          "id": "sc_5627",
          "content": "[Stat time values] [Previous: `birthtime` \"Birth Time\": Time of file creation....] Set once when the file is created.",
          "position": 17,
          "originalSentence": "Set once when the file is created."
        },
        {
          "id": "sc_5628",
          "content": "[Stat time values] [Previous: Set once when the file is created....] On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`).",
          "position": 18,
          "originalSentence": "On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`)."
        },
        {
          "id": "sc_5629",
          "content": "[Stat time values] [Previous: On file systems where birthtime is not available, ...] This value may be greater than `atime` or `mtime` in this case.",
          "position": 19,
          "originalSentence": "This value may be greater than `atime` or `mtime` in this case."
        },
        {
          "id": "sc_5630",
          "content": "[Stat time values] [Previous: This value may be greater than `atime` or `mtime` ...] On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime` using the utimes(2) system call.",
          "position": 20,
          "originalSentence": "On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime` using the utimes(2) system call."
        },
        {
          "id": "sc_5631",
          "content": "[Stat time values] [Previous: On Darwin and other FreeBSD variants, also set if ...] Prior to Node.",
          "position": 21,
          "originalSentence": "Prior to Node."
        },
        {
          "id": "sc_5632",
          "content": "[Stat time values] js 0.12, the `ctime` held the `birthtime` on Windows systems.",
          "position": 22,
          "originalSentence": "js 0.12, the `ctime` held the `birthtime` on Windows systems."
        },
        {
          "id": "sc_5633",
          "content": "[Stat time values] [Previous: js 0.12, the `ctime` held the `birthtime` on Windo...] As of 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
          "position": 23,
          "originalSentence": "As of 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was."
        },
        {
          "id": "sc_5663",
          "content": "[Class: `fs.StatFs`] Provides information about a mounted file system.",
          "position": 0,
          "originalSentence": "Provides information about a mounted file system."
        },
        {
          "id": "sc_5664",
          "content": "[Class: `fs.StatFs`] [Previous: Provides information about a mounted file system....] Objects returned from [`fs.",
          "position": 1,
          "originalSentence": "Objects returned from [`fs."
        },
        {
          "id": "sc_5665",
          "content": "[Class: `fs.StatFs`] [Previous: Objects returned from [`fs....] statfs()`][] and its synchronous counterpart are of this type.",
          "position": 2,
          "originalSentence": "statfs()`][] and its synchronous counterpart are of this type."
        },
        {
          "id": "sc_5666",
          "content": "[Class: `fs.StatFs`] [Previous: statfs()`][] and its synchronous counterpart are o...] If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`.",
          "position": 3,
          "originalSentence": "If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`."
        },
        {
          "id": "sc_5667",
          "content": "[Class: `fs.StatFs`] [Previous: If `bigint` in the `options` passed to those metho...] `bigint` version:",
          "position": 4,
          "originalSentence": "`bigint` version:"
        },
        {
          "id": "sc_5674",
          "content": "[`statfs.bavail`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5675",
          "content": "[`statfs.bavail`] [Previous: Type: {number|bigint}...] Free blocks available to unprivileged users.",
          "position": 1,
          "originalSentence": "Free blocks available to unprivileged users."
        },
        {
          "id": "sc_5679",
          "content": "[`statfs.bfree`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5680",
          "content": "[`statfs.bfree`] [Previous: Type: {number|bigint}...] Free blocks in file system.",
          "position": 1,
          "originalSentence": "Free blocks in file system."
        },
        {
          "id": "sc_5684",
          "content": "[`statfs.blocks`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5685",
          "content": "[`statfs.blocks`] [Previous: Type: {number|bigint}...] Total data blocks in file system.",
          "position": 1,
          "originalSentence": "Total data blocks in file system."
        },
        {
          "id": "sc_5689",
          "content": "[`statfs.bsize`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5690",
          "content": "[`statfs.bsize`] [Previous: Type: {number|bigint}...] Optimal transfer block size.",
          "position": 1,
          "originalSentence": "Optimal transfer block size."
        },
        {
          "id": "sc_5694",
          "content": "[`statfs.ffree`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5695",
          "content": "[`statfs.ffree`] [Previous: Type: {number|bigint}...] Free file nodes in file system.",
          "position": 1,
          "originalSentence": "Free file nodes in file system."
        },
        {
          "id": "sc_5699",
          "content": "[`statfs.files`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5700",
          "content": "[`statfs.files`] [Previous: Type: {number|bigint}...] Total file nodes in file system.",
          "position": 1,
          "originalSentence": "Total file nodes in file system."
        },
        {
          "id": "sc_5704",
          "content": "[`statfs.type`] Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "sc_5705",
          "content": "[`statfs.type`] [Previous: Type: {number|bigint}...] Type of file system.",
          "position": 1,
          "originalSentence": "Type of file system."
        },
        {
          "id": "sc_5710",
          "content": "[Class: `fs.Utf8Stream`] An optimized UTF-8 stream writer that allows for flushing all the internal buffering on demand.",
          "position": 0,
          "originalSentence": "An optimized UTF-8 stream writer that allows for flushing all the internal buffering on demand."
        },
        {
          "id": "sc_5711",
          "content": "[Class: `fs.Utf8Stream`] [Previous: An optimized UTF-8 stream writer that allows for f...] It handles `EAGAIN` errors correctly, allowing for customization, for example, by dropping content if the disk is busy.",
          "position": 1,
          "originalSentence": "It handles `EAGAIN` errors correctly, allowing for customization, for example, by dropping content if the disk is busy."
        },
        {
          "id": "sc_5714",
          "content": "[Event: `'close'`] The `'close'` event is emitted when the stream is fully closed.",
          "position": 0,
          "originalSentence": "The `'close'` event is emitted when the stream is fully closed."
        },
        {
          "id": "sc_5716",
          "content": "[Event: `'drain'`] The `'drain'` event is emitted when the internal buffer has drained sufficiently to allow continued writing.",
          "position": 0,
          "originalSentence": "The `'drain'` event is emitted when the internal buffer has drained sufficiently to allow continued writing."
        },
        {
          "id": "sc_5720",
          "content": "[Event: `'drop'`] The `'drop'` event is emitted when to maximal length is reached and that data will not be written.",
          "position": 0,
          "originalSentence": "The `'drop'` event is emitted when to maximal length is reached and that data will not be written."
        },
        {
          "id": "sc_5721",
          "content": "[Event: `'drop'`] [Previous: The `'drop'` event is emitted when to maximal leng...] The data that was dropped is passed as the first argument to the event handle.",
          "position": 1,
          "originalSentence": "The data that was dropped is passed as the first argument to the event handle."
        },
        {
          "id": "sc_5724",
          "content": "[Event: `'error'`] The `'error'` event is emitted when an error occurs.",
          "position": 0,
          "originalSentence": "The `'error'` event is emitted when an error occurs."
        },
        {
          "id": "sc_5726",
          "content": "[Event: `'finish'`] The `'finish'` event is emitted when the stream has been ended and all data has been flushed to the underlying file.",
          "position": 0,
          "originalSentence": "The `'finish'` event is emitted when the stream has been ended and all data has been flushed to the underlying file."
        },
        {
          "id": "sc_5728",
          "content": "[Event: `'ready'`] The `'ready'` event is emitted when the stream is ready to accept writes.",
          "position": 0,
          "originalSentence": "The `'ready'` event is emitted when the stream is ready to accept writes."
        },
        {
          "id": "sc_5732",
          "content": "[Event: `'write'`] The `'write'` event is emitted when a write operation has completed.",
          "position": 0,
          "originalSentence": "The `'write'` event is emitted when a write operation has completed."
        },
        {
          "id": "sc_5733",
          "content": "[Event: `'write'`] [Previous: The `'write'` event is emitted when a write operat...] The number of bytes written is passed as the first argument to the event handler.",
          "position": 1,
          "originalSentence": "The number of bytes written is passed as the first argument to the event handler."
        },
        {
          "id": "sc_5760",
          "content": "[`new fs.Utf8Stream([options])`] `options` {Object} * `append`: {boolean} Appends writes to dest file instead of truncating it.",
          "position": 0,
          "originalSentence": "`options` {Object} * `append`: {boolean} Appends writes to dest file instead of truncating it."
        },
        {
          "id": "sc_5761",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: `options` {Object} * `append`: {boolean} Appends w...] **Default**: `true`.",
          "position": 1,
          "originalSentence": "**Default**: `true`."
        },
        {
          "id": "sc_5762",
          "content": "[`new fs.Utf8Stream([options])`] * `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`.",
          "position": 2,
          "originalSentence": "* `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`."
        },
        {
          "id": "sc_5763",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `contentMode`: {string} Which type of data you c...] **Default**: `'utf8'`.",
          "position": 3,
          "originalSentence": "**Default**: `'utf8'`."
        },
        {
          "id": "sc_5764",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: **Default**: `'utf8'`....] * `dest`: {string} A path to a file to be written to (mode controlled by the append option).",
          "position": 4,
          "originalSentence": "* `dest`: {string} A path to a file to be written to (mode controlled by the append option)."
        },
        {
          "id": "sc_5765",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `dest`: {string} A path to a file to be written ...] * `fd`: {number} A file descriptor, something that is returned by `fs.",
          "position": 5,
          "originalSentence": "* `fd`: {number} A file descriptor, something that is returned by `fs."
        },
        {
          "id": "sc_5766",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `fd`: {number} A file descriptor, something that...] open()` or `fs.",
          "position": 6,
          "originalSentence": "open()` or `fs."
        },
        {
          "id": "sc_5767",
          "content": "[`new fs.Utf8Stream([options])`] openSync()`.",
          "position": 7,
          "originalSentence": "openSync()`."
        },
        {
          "id": "sc_5768",
          "content": "[`new fs.Utf8Stream([options])`] * `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream.",
          "position": 8,
          "originalSentence": "* `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream."
        },
        {
          "id": "sc_5769",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `fs`: {Object} An object that has the same API a...] * `fsync`: {boolean} Perform a `fs.",
          "position": 9,
          "originalSentence": "* `fsync`: {boolean} Perform a `fs."
        },
        {
          "id": "sc_5770",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `fsync`: {boolean} Perform a `fs....] fsyncSync()` every time a write is completed.",
          "position": 10,
          "originalSentence": "fsyncSync()` every time a write is completed."
        },
        {
          "id": "sc_5771",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: fsyncSync()` every time a write is completed....] * `maxLength`: {number} The maximum length of the internal buffer.",
          "position": 11,
          "originalSentence": "* `maxLength`: {number} The maximum length of the internal buffer."
        },
        {
          "id": "sc_5772",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `maxLength`: {number} The maximum length of the ...] If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**: `16384` *",
          "position": 12,
          "originalSentence": "If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**: `16384` * `minLength`: {number} The minimum length of the internal buffer that is required to be full before flushing."
        },
        {
          "id": "sc_5773",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: If a write operation would cause the buffer to exc...] * `mkdir`: {boolean} Ensure directory for `dest` file exists when true.",
          "position": 13,
          "originalSentence": "* `mkdir`: {boolean} Ensure directory for `dest` file exists when true."
        },
        {
          "id": "sc_5774",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `mkdir`: {boolean} Ensure directory for `dest` f...] **Default**: `false`.",
          "position": 14,
          "originalSentence": "**Default**: `false`."
        },
        {
          "id": "sc_5775",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: **Default**: `false`....] * `mode`: {number|string} Specify the creating file mode (see `fs.",
          "position": 15,
          "originalSentence": "* `mode`: {number|string} Specify the creating file mode (see `fs."
        },
        {
          "id": "sc_5776",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `mode`: {number|string} Specify the creating fil...] * `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds.",
          "position": 16,
          "originalSentence": "* `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds."
        },
        {
          "id": "sc_5777",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `periodicFlush`: {number} Calls flush every `per...] * `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error.",
          "position": 17,
          "originalSentence": "* `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error."
        },
        {
          "id": "sc_5778",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `retryEAGAIN` {Function} A function that will be...] If the return value is `true` the operation will be retried, otherwise it will bubble the error.",
          "position": 18,
          "originalSentence": "If the return value is `true` the operation will be retried, otherwise it will bubble the error."
        },
        {
          "id": "sc_5779",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: If the return value is `true` the operation will b...] The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the buffer that was written",
          "position": 19,
          "originalSentence": "The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the buffer that was written"
        },
        {
          "id": "sc_5780",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: The `err` is the error that caused this function t...] and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write.",
          "position": 20,
          "originalSentence": "and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write."
        },
        {
          "id": "sc_5781",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: and `remainingBufferLen` is the length of the rema...] * `err` {any} An error or `null`.",
          "position": 21,
          "originalSentence": "* `err` {any} An error or `null`."
        },
        {
          "id": "sc_5782",
          "content": "[`new fs.Utf8Stream([options])`] [Previous: * `err` {any} An error or `null`....] * `writeBufferLen` {number} * `remainingBufferLen`: {number} * `sync`: {boolean} Perform writes synchronously.",
          "position": 22,
          "originalSentence": "* `writeBufferLen` {number} * `remainingBufferLen`: {number} * `sync`: {boolean} Perform writes synchronously."
        },
        {
          "id": "sc_5806",
          "content": "[`utf8Stream.append`] {boolean} Whether the stream is appending to the file or truncating it.",
          "position": 0,
          "originalSentence": "{boolean} Whether the stream is appending to the file or truncating it."
        },
        {
          "id": "sc_5810",
          "content": "[`utf8Stream.contentMode`] {string} The type of data that can be written to the stream.",
          "position": 0,
          "originalSentence": "{string} The type of data that can be written to the stream."
        },
        {
          "id": "sc_5811",
          "content": "[`utf8Stream.contentMode`] [Previous: {string} The type of data that can be written to t...] Supported values are `'utf8'` or `'buffer'`.",
          "position": 1,
          "originalSentence": "Supported values are `'utf8'` or `'buffer'`."
        },
        {
          "id": "sc_5812",
          "content": "[`utf8Stream.contentMode`] [Previous: Supported values are `'utf8'` or `'buffer'`....] **Default**: `'utf8'`.",
          "position": 2,
          "originalSentence": "**Default**: `'utf8'`."
        },
        {
          "id": "sc_5816",
          "content": "[`utf8Stream.destroy()`] Close the stream immediately, without flushing the internal buffer.",
          "position": 0,
          "originalSentence": "Close the stream immediately, without flushing the internal buffer."
        },
        {
          "id": "sc_5818",
          "content": "[`utf8Stream.end()`] Close the stream gracefully, flushing the internal buffer before closing.",
          "position": 0,
          "originalSentence": "Close the stream gracefully, flushing the internal buffer before closing."
        },
        {
          "id": "sc_5820",
          "content": "[`utf8Stream.fd`] {number} The file descriptor that is being written to.",
          "position": 0,
          "originalSentence": "{number} The file descriptor that is being written to."
        },
        {
          "id": "sc_5822",
          "content": "[`utf8Stream.file`] {string} The file that is being written to.",
          "position": 0,
          "originalSentence": "{string} The file that is being written to."
        },
        {
          "id": "sc_5827",
          "content": "[`utf8Stream.flush(callback)`] `callback` {Function} * `err` {Error|null} An error if the flush failed, otherwise `null`.",
          "position": 0,
          "originalSentence": "`callback` {Function} * `err` {Error|null} An error if the flush failed, otherwise `null`."
        },
        {
          "id": "sc_5828",
          "content": "[`utf8Stream.flush(callback)`] [Previous: `callback` {Function} * `err` {Error|null} An erro...] Writes the current buffer to the file if a write was not in progress.",
          "position": 1,
          "originalSentence": "Writes the current buffer to the file if a write was not in progress."
        },
        {
          "id": "sc_5829",
          "content": "[`utf8Stream.flush(callback)`] [Previous: Writes the current buffer to the file if a write w...] Do nothing if `minLength` is zero or if it is already writing.",
          "position": 2,
          "originalSentence": "Do nothing if `minLength` is zero or if it is already writing."
        },
        {
          "id": "sc_5834",
          "content": "[`utf8Stream.flushSync()`] Flushes the buffered data synchronously.",
          "position": 0,
          "originalSentence": "Flushes the buffered data synchronously."
        },
        {
          "id": "sc_5835",
          "content": "[`utf8Stream.flushSync()`] [Previous: Flushes the buffered data synchronously....] This is a costly operation.",
          "position": 1,
          "originalSentence": "This is a costly operation."
        },
        {
          "id": "sc_5839",
          "content": "[`utf8Stream.fsync`] {boolean} Whether the stream is performing a `fs.",
          "position": 0,
          "originalSentence": "{boolean} Whether the stream is performing a `fs."
        },
        {
          "id": "sc_5840",
          "content": "[`utf8Stream.fsync`] [Previous: {boolean} Whether the stream is performing a `fs....] fsyncSync()` after every write operation.",
          "position": 1,
          "originalSentence": "fsyncSync()` after every write operation."
        },
        {
          "id": "sc_5845",
          "content": "[`utf8Stream.maxLength`] {number} The maximum length of the internal buffer.",
          "position": 0,
          "originalSentence": "{number} The maximum length of the internal buffer."
        },
        {
          "id": "sc_5846",
          "content": "[`utf8Stream.maxLength`] [Previous: {number} The maximum length of the internal buffer...] If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data.",
          "position": 1,
          "originalSentence": "If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data."
        },
        {
          "id": "sc_5849",
          "content": "[`utf8Stream.minLength`] {number} The minimum length of the internal buffer that is required to be full before flushing.",
          "position": 0,
          "originalSentence": "{number} The minimum length of the internal buffer that is required to be full before flushing."
        },
        {
          "id": "sc_5854",
          "content": "[`utf8Stream.mkdir`] {boolean} Whether the stream should ensure that the directory for the `dest` file exists.",
          "position": 0,
          "originalSentence": "{boolean} Whether the stream should ensure that the directory for the `dest` file exists."
        },
        {
          "id": "sc_5855",
          "content": "[`utf8Stream.mkdir`] [Previous: {boolean} Whether the stream should ensure that th...] If `true`, it will create the directory if it does not exist.",
          "position": 1,
          "originalSentence": "If `true`, it will create the directory if it does not exist."
        },
        {
          "id": "sc_5856",
          "content": "[`utf8Stream.mkdir`] [Previous: If `true`, it will create the directory if it does...] **Default**: `false`.",
          "position": 2,
          "originalSentence": "**Default**: `false`."
        },
        {
          "id": "sc_5860",
          "content": "[`utf8Stream.mode`] {number|string} The mode of the file that is being written to.",
          "position": 0,
          "originalSentence": "{number|string} The mode of the file that is being written to."
        },
        {
          "id": "sc_5863",
          "content": "[`utf8Stream.periodicFlush`] {number} The number of milliseconds between flushes.",
          "position": 0,
          "originalSentence": "{number} The number of milliseconds between flushes."
        },
        {
          "id": "sc_5864",
          "content": "[`utf8Stream.periodicFlush`] [Previous: {number} The number of milliseconds between flushe...] If set to `0`, no periodic flushes will be performed.",
          "position": 1,
          "originalSentence": "If set to `0`, no periodic flushes will be performed."
        },
        {
          "id": "sc_5869",
          "content": "[`utf8Stream.reopen(file)`] `file`: {string|Buffer|URL} A path to a file to be written to (mode controlled by the append option).",
          "position": 0,
          "originalSentence": "`file`: {string|Buffer|URL} A path to a file to be written to (mode controlled by the append option)."
        },
        {
          "id": "sc_5870",
          "content": "[`utf8Stream.reopen(file)`] [Previous: `file`: {string|Buffer|URL} A path to a file to be...] Reopen the file in place, useful for log rotation.",
          "position": 1,
          "originalSentence": "Reopen the file in place, useful for log rotation."
        },
        {
          "id": "sc_5873",
          "content": "[`utf8Stream.sync`] {boolean} Whether the stream is writing synchronously or asynchronously.",
          "position": 0,
          "originalSentence": "{boolean} Whether the stream is writing synchronously or asynchronously."
        },
        {
          "id": "sc_5880",
          "content": "[`utf8Stream.write(data)`] `data` {string|Buffer} The data to write.",
          "position": 0,
          "originalSentence": "`data` {string|Buffer} The data to write."
        },
        {
          "id": "sc_5881",
          "content": "[`utf8Stream.write(data)`] [Previous: `data` {string|Buffer} The data to write....] Returns {boolean}",
          "position": 1,
          "originalSentence": "Returns {boolean}"
        },
        {
          "id": "sc_5882",
          "content": "[`utf8Stream.write(data)`] When the `options.",
          "position": 2,
          "originalSentence": "When the `options."
        },
        {
          "id": "sc_5883",
          "content": "[`utf8Stream.write(data)`] contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string.",
          "position": 3,
          "originalSentence": "contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string."
        },
        {
          "id": "sc_5884",
          "content": "[`utf8Stream.write(data)`] [Previous: contentMode` is set to `'utf8'` when the stream is...] If the `contentMode` is set to `'buffer'`, the `data` argument must be a {Buffer}.",
          "position": 4,
          "originalSentence": "If the `contentMode` is set to `'buffer'`, the `data` argument must be a {Buffer}."
        },
        {
          "id": "sc_5890",
          "content": "[`utf8Stream.writing`] {boolean} Whether the stream is currently writing data to the file.",
          "position": 0,
          "originalSentence": "{boolean} Whether the stream is currently writing data to the file."
        },
        {
          "id": "sc_5893",
          "content": "[`utf8Stream[Symbol.dispose]()`] Calls `utf8Stream.",
          "position": 0,
          "originalSentence": "Calls `utf8Stream."
        },
        {
          "id": "sc_5894",
          "content": "[`utf8Stream[Symbol.dispose]()`] destroy()`.",
          "position": 1,
          "originalSentence": "destroy()`."
        },
        {
          "id": "sc_5900",
          "content": "[Class: `fs.WriteStream`] Extends {stream.",
          "position": 0,
          "originalSentence": "Extends {stream."
        },
        {
          "id": "sc_5901",
          "content": "[Class: `fs.WriteStream`] Instances of {fs.",
          "position": 1,
          "originalSentence": "Instances of {fs."
        },
        {
          "id": "sc_5902",
          "content": "[Class: `fs.WriteStream`] WriteStream} are created and returned using the [`fs.",
          "position": 2,
          "originalSentence": "WriteStream} are created and returned using the [`fs."
        },
        {
          "id": "sc_5903",
          "content": "[Class: `fs.WriteStream`] [Previous: WriteStream} are created and returned using the [`...] createWriteStream()`][] function.",
          "position": 3,
          "originalSentence": "createWriteStream()`][] function."
        },
        {
          "id": "sc_5909",
          "content": "[Event: `'close'`] Emitted when the {fs.",
          "position": 0,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "sc_5910",
          "content": "[Event: `'close'`] [Previous: Emitted when the {fs....] WriteStream}'s underlying file descriptor has been closed.",
          "position": 1,
          "originalSentence": "WriteStream}'s underlying file descriptor has been closed."
        },
        {
          "id": "sc_5916",
          "content": "[Event: `'open'`] `fd` {integer} Integer file descriptor used by the {fs.",
          "position": 0,
          "originalSentence": "`fd` {integer} Integer file descriptor used by the {fs."
        },
        {
          "id": "sc_5917",
          "content": "[Event: `'open'`] [Previous: `fd` {integer} Integer file descriptor used by the...] WriteStream}.",
          "position": 1,
          "originalSentence": "WriteStream}."
        },
        {
          "id": "sc_5918",
          "content": "[Event: `'open'`] Emitted when the {fs.",
          "position": 2,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "sc_5919",
          "content": "[Event: `'open'`] [Previous: Emitted when the {fs....] WriteStream}'s file is opened.",
          "position": 3,
          "originalSentence": "WriteStream}'s file is opened."
        },
        {
          "id": "sc_5926",
          "content": "[Event: `'ready'`] Emitted when the {fs.",
          "position": 0,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "sc_5927",
          "content": "[Event: `'ready'`] [Previous: Emitted when the {fs....] WriteStream} is ready to be used.",
          "position": 1,
          "originalSentence": "WriteStream} is ready to be used."
        },
        {
          "id": "sc_5928",
          "content": "[Event: `'ready'`] [Previous: WriteStream} is ready to be used....] Fires immediately after `'open'`.",
          "position": 2,
          "originalSentence": "Fires immediately after `'open'`."
        },
        {
          "id": "sc_5933",
          "content": "[`writeStream.bytesWritten`] The number of bytes written so far.",
          "position": 0,
          "originalSentence": "The number of bytes written so far."
        },
        {
          "id": "sc_5934",
          "content": "[`writeStream.bytesWritten`] [Previous: The number of bytes written so far....] Does not include data that is still queued for writing.",
          "position": 1,
          "originalSentence": "Does not include data that is still queued for writing."
        },
        {
          "id": "sc_5939",
          "content": "[`writeStream.close([callback])`] `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "sc_5940",
          "content": "[`writeStream.close([callback])`] [Previous: `callback` {Function} * `err` {Error}...] Closes `writeStream`.",
          "position": 1,
          "originalSentence": "Closes `writeStream`."
        },
        {
          "id": "sc_5941",
          "content": "[`writeStream.close([callback])`] [Previous: Closes `writeStream`....] Optionally accepts a callback that will be executed once the `writeStream` is closed.",
          "position": 2,
          "originalSentence": "Optionally accepts a callback that will be executed once the `writeStream` is closed."
        },
        {
          "id": "sc_5951",
          "content": "[`writeStream.path`] The path to the file the stream is writing to as specified in the first argument to [`fs.",
          "position": 0,
          "originalSentence": "The path to the file the stream is writing to as specified in the first argument to [`fs."
        },
        {
          "id": "sc_5952",
          "content": "[`writeStream.path`] [Previous: The path to the file the stream is writing to as s...] createWriteStream()`][].",
          "position": 1,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "sc_5953",
          "content": "[`writeStream.path`] [Previous: createWriteStream()`][]....] If `path` is passed as a string, then `writeStream.",
          "position": 2,
          "originalSentence": "If `path` is passed as a string, then `writeStream."
        },
        {
          "id": "sc_5954",
          "content": "[`writeStream.path`] [Previous: If `path` is passed as a string, then `writeStream...] path` will be a string.",
          "position": 3,
          "originalSentence": "path` will be a string."
        },
        {
          "id": "sc_5955",
          "content": "[`writeStream.path`] [Previous: path` will be a string....] If `path` is passed as a {Buffer}, then `writeStream.",
          "position": 4,
          "originalSentence": "If `path` is passed as a {Buffer}, then `writeStream."
        },
        {
          "id": "sc_5956",
          "content": "[`writeStream.path`] [Previous: If `path` is passed as a {Buffer}, then `writeStre...] path` will be a {Buffer}.",
          "position": 5,
          "originalSentence": "path` will be a {Buffer}."
        },
        {
          "id": "sc_5966",
          "content": "[`writeStream.pending`] Type: {boolean}",
          "position": 0,
          "originalSentence": "Type: {boolean}"
        },
        {
          "id": "sc_5967",
          "content": "[`writeStream.pending`] This property is `true` if the underlying file has not been opened yet, i.",
          "position": 1,
          "originalSentence": "This property is `true` if the underlying file has not been opened yet, i."
        },
        {
          "id": "sc_5968",
          "content": "[`writeStream.pending`] [Previous: This property is `true` if the underlying file has...] before the `'ready'` event is emitted.",
          "position": 2,
          "originalSentence": "before the `'ready'` event is emitted."
        },
        {
          "id": "sc_5973",
          "content": "[`fs.constants`] Type: {Object}",
          "position": 0,
          "originalSentence": "Type: {Object}"
        },
        {
          "id": "sc_5974",
          "content": "[`fs.constants`] Returns an object containing commonly used constants for file system operations.",
          "position": 1,
          "originalSentence": "Returns an object containing commonly used constants for file system operations."
        },
        {
          "id": "sc_5983",
          "content": "[FS constants] The following constants are exported by `fs.",
          "position": 0,
          "originalSentence": "The following constants are exported by `fs."
        },
        {
          "id": "sc_5984",
          "content": "[FS constants] [Previous: The following constants are exported by `fs....] constants` and `fsPromises.",
          "position": 1,
          "originalSentence": "constants` and `fsPromises."
        },
        {
          "id": "sc_5985",
          "content": "[FS constants] [Previous: constants` and `fsPromises....] constants`.",
          "position": 2,
          "originalSentence": "constants`."
        },
        {
          "id": "sc_5986",
          "content": "[FS constants] Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available.",
          "position": 3,
          "originalSentence": "Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available."
        },
        {
          "id": "sc_5987",
          "content": "[FS constants] [Previous: Not every constant will be available on every oper...] For portable applications it is recommended to check for their presence before use.",
          "position": 4,
          "originalSentence": "For portable applications it is recommended to check for their presence before use."
        },
        {
          "id": "sc_5988",
          "content": "[FS constants] [Previous: For portable applications it is recommended to che...] To use more than one constant, use the bitwise OR `|` operator.",
          "position": 5,
          "originalSentence": "To use more than one constant, use the bitwise OR `|` operator."
        },
        {
          "id": "sc_6000",
          "content": "[File access constants] The following constants are meant for use as the `mode` parameter passed to [`fsPromises.",
          "position": 0,
          "originalSentence": "The following constants are meant for use as the `mode` parameter passed to [`fsPromises."
        },
        {
          "id": "sc_6001",
          "content": "[File access constants] [Previous: The following constants are meant for use as the `...] access()`][], [`fs.",
          "position": 1,
          "originalSentence": "access()`][], [`fs."
        },
        {
          "id": "sc_6002",
          "content": "[File access constants] access()`][], and [`fs.",
          "position": 2,
          "originalSentence": "access()`][], and [`fs."
        },
        {
          "id": "sc_6003",
          "content": "[File access constants] [Previous: access()`][], and [`fs....] accessSync()`][].",
          "position": 3,
          "originalSentence": "accessSync()`][]."
        },
        {
          "id": "sc_6004",
          "content": "[File access constants] The definitions are also available on Windows.",
          "position": 4,
          "originalSentence": "The definitions are also available on Windows."
        },
        {
          "id": "sc_6012",
          "content": "[File copy constants] The following constants are meant for use with [`fs.",
          "position": 0,
          "originalSentence": "The following constants are meant for use with [`fs."
        },
        {
          "id": "sc_6013",
          "content": "[File copy constants] [Previous: The following constants are meant for use with [`f...] copyFile()`][].",
          "position": 1,
          "originalSentence": "copyFile()`][]."
        },
        {
          "id": "sc_6014",
          "content": "[File copy constants] The definitions are also available on Windows.",
          "position": 2,
          "originalSentence": "The definitions are also available on Windows."
        },
        {
          "id": "sc_6020",
          "content": "[File open constants] The following constants are meant for use with `fs.",
          "position": 0,
          "originalSentence": "The following constants are meant for use with `fs."
        },
        {
          "id": "sc_6021",
          "content": "[File open constants] [Previous: The following constants are meant for use with `fs...] On Windows, only `O_APPEND`, `O_CREAT`, `O_EXCL`, `O_RDONLY`, `O_RDWR`, `O_TRUNC`, `O_WRONLY`, and `UV_FS_O_FILEMAP` are available.",
          "position": 1,
          "originalSentence": "On Windows, only `O_APPEND`, `O_CREAT`, `O_EXCL`, `O_RDONLY`, `O_RDWR`, `O_TRUNC`, `O_WRONLY`, and `UV_FS_O_FILEMAP` are available."
        },
        {
          "id": "sc_6027",
          "content": "[File type constants] The following constants are meant for use with the {fs.",
          "position": 0,
          "originalSentence": "The following constants are meant for use with the {fs."
        },
        {
          "id": "sc_6028",
          "content": "[File type constants] [Previous: The following constants are meant for use with the...] Stats} object's `mode` property for determining a file's type.",
          "position": 1,
          "originalSentence": "Stats} object's `mode` property for determining a file's type."
        },
        {
          "id": "sc_6029",
          "content": "[File type constants] [Previous: Stats} object's `mode` property for determining a ...] On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`, are available.",
          "position": 2,
          "originalSentence": "On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`, are available."
        },
        {
          "id": "sc_6036",
          "content": "[File mode constants] The following constants are meant for use with the {fs.",
          "position": 0,
          "originalSentence": "The following constants are meant for use with the {fs."
        },
        {
          "id": "sc_6037",
          "content": "[File mode constants] [Previous: The following constants are meant for use with the...] Stats} object's `mode` property for determining the access permissions for a file.",
          "position": 1,
          "originalSentence": "Stats} object's `mode` property for determining the access permissions for a file."
        },
        {
          "id": "sc_6038",
          "content": "[File mode constants] [Previous: Stats} object's `mode` property for determining th...] On Windows, only `S_IRUSR` and `S_IWUSR` are available.",
          "position": 2,
          "originalSentence": "On Windows, only `S_IRUSR` and `S_IWUSR` are available."
        },
        {
          "id": "sc_6050",
          "content": "[Ordering of callback and promise-based operations] Because they are executed asynchronously by the underlying thread pool, there is no guaranteed ordering when using either the callback or promise-based methods.",
          "position": 0,
          "originalSentence": "Because they are executed asynchronously by the underlying thread pool, there is no guaranteed ordering when using either the callback or promise-based methods."
        },
        {
          "id": "sc_6051",
          "content": "[Ordering of callback and promise-based operations] [Previous: Because they are executed asynchronously by the un...] For example, the following is prone to error because the `fs.",
          "position": 1,
          "originalSentence": "For example, the following is prone to error because the `fs."
        },
        {
          "id": "sc_6052",
          "content": "[Ordering of callback and promise-based operations] [Previous: For example, the following is prone to error becau...] stat()` operation might complete before the `fs.",
          "position": 2,
          "originalSentence": "stat()` operation might complete before the `fs."
        },
        {
          "id": "sc_6053",
          "content": "[Ordering of callback and promise-based operations] [Previous: stat()` operation might complete before the `fs....] rename()` operation:",
          "position": 3,
          "originalSentence": "rename()` operation:"
        },
        {
          "id": "sc_6054",
          "content": "[Ordering of callback and promise-based operations] It is important to correctly order the operations by awaiting the results of one before invoking the other:",
          "position": 4,
          "originalSentence": "It is important to correctly order the operations by awaiting the results of one before invoking the other:"
        },
        {
          "id": "sc_6055",
          "content": "[Ordering of callback and promise-based operations] [Previous: It is important to correctly order the operations ...] Or, when using the callback APIs, move the `fs.",
          "position": 5,
          "originalSentence": "Or, when using the callback APIs, move the `fs."
        },
        {
          "id": "sc_6056",
          "content": "[Ordering of callback and promise-based operations] [Previous: Or, when using the callback APIs, move the `fs....] stat()` call into the callback of the `fs.",
          "position": 6,
          "originalSentence": "stat()` call into the callback of the `fs."
        },
        {
          "id": "sc_6057",
          "content": "[Ordering of callback and promise-based operations] [Previous: stat()` call into the callback of the `fs....] rename()` operation:",
          "position": 7,
          "originalSentence": "rename()` operation:"
        },
        {
          "id": "sc_6067",
          "content": "[File paths] Most `fs` operations accept file paths that may be specified in the form of a string, a {Buffer}, or a {URL} object using the `file:` protocol.",
          "position": 0,
          "originalSentence": "Most `fs` operations accept file paths that may be specified in the form of a string, a {Buffer}, or a {URL} object using the `file:` protocol."
        },
        {
          "id": "sc_6073",
          "content": "[String paths] String paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename.",
          "position": 0,
          "originalSentence": "String paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename."
        },
        {
          "id": "sc_6074",
          "content": "[String paths] [Previous: String paths are interpreted as UTF-8 character se...] Relative paths will be resolved relative to the current working directory as determined by calling `process.",
          "position": 1,
          "originalSentence": "Relative paths will be resolved relative to the current working directory as determined by calling `process."
        },
        {
          "id": "sc_6075",
          "content": "[String paths] [Previous: Relative paths will be resolved relative to the cu...] Example using an absolute path on POSIX:",
          "position": 2,
          "originalSentence": "Example using an absolute path on POSIX:"
        },
        {
          "id": "sc_6076",
          "content": "[String paths] [Previous: Example using an absolute path on POSIX:...] Example using a relative path on POSIX (relative to `process.",
          "position": 3,
          "originalSentence": "Example using a relative path on POSIX (relative to `process."
        },
        {
          "id": "sc_6083",
          "content": "[File URL paths] For most `node:fs` module functions, the `path` or `filename` argument may be passed as a {URL} object using the `file:` protocol.",
          "position": 0,
          "originalSentence": "For most `node:fs` module functions, the `path` or `filename` argument may be passed as a {URL} object using the `file:` protocol."
        },
        {
          "id": "sc_6084",
          "content": "[File URL paths] [Previous: For most `node:fs` module functions, the `path` or...] `file:` URLs are always absolute paths.",
          "position": 1,
          "originalSentence": "`file:` URLs are always absolute paths."
        },
        {
          "id": "sc_6094",
          "content": "[Platform-specific considerations] On Windows, `file:` {URL}s with a host name convert to UNC paths, while `file:` {URL}s with drive letters convert to local absolute paths.",
          "position": 0,
          "originalSentence": "On Windows, `file:` {URL}s with a host name convert to UNC paths, while `file:` {URL}s with drive letters convert to local absolute paths."
        },
        {
          "id": "sc_6095",
          "content": "[Platform-specific considerations] [Previous: On Windows, `file:` {URL}s with a host name conver...] `file:` {URL}s with no host name and no drive letter will result in an error:",
          "position": 1,
          "originalSentence": "`file:` {URL}s with no host name and no drive letter will result in an error:"
        },
        {
          "id": "sc_6096",
          "content": "[Platform-specific considerations] [Previous: `file:` {URL}s with no host name and no drive lett...] `file:` {URL}s with drive letters must use `:` as a separator just after the drive letter.",
          "position": 2,
          "originalSentence": "`file:` {URL}s with drive letters must use `:` as a separator just after the drive letter."
        },
        {
          "id": "sc_6097",
          "content": "[Platform-specific considerations] [Previous: `file:` {URL}s with drive letters must use `:` as ...] Using another separator will result in an error.",
          "position": 3,
          "originalSentence": "Using another separator will result in an error."
        },
        {
          "id": "sc_6098",
          "content": "[Platform-specific considerations] [Previous: Using another separator will result in an error....] On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error:",
          "position": 4,
          "originalSentence": "On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error:"
        },
        {
          "id": "sc_6099",
          "content": "[Platform-specific considerations] [Previous: On all other platforms, `file:` {URL}s with a host...] A `file:` {URL} having encoded slash characters will result in an error on all platforms:",
          "position": 5,
          "originalSentence": "A `file:` {URL} having encoded slash characters will result in an error on all platforms:"
        },
        {
          "id": "sc_6100",
          "content": "[Platform-specific considerations] [Previous: A `file:` {URL} having encoded slash characters wi...] On Windows, `file:` {URL}s having encoded backslash will result in an error:",
          "position": 6,
          "originalSentence": "On Windows, `file:` {URL}s having encoded backslash will result in an error:"
        },
        {
          "id": "sc_6112",
          "content": "[Buffer paths] Paths specified using a {Buffer} are useful primarily on certain POSIX operating systems that treat file paths as opaque byte sequences.",
          "position": 0,
          "originalSentence": "Paths specified using a {Buffer} are useful primarily on certain POSIX operating systems that treat file paths as opaque byte sequences."
        },
        {
          "id": "sc_6113",
          "content": "[Buffer paths] [Previous: Paths specified using a {Buffer} are useful primar...] On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings.",
          "position": 1,
          "originalSentence": "On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings."
        },
        {
          "id": "sc_6114",
          "content": "[Buffer paths] [Previous: On such systems, it is possible for a single file ...] As with string paths, {Buffer} paths may be relative or absolute:",
          "position": 2,
          "originalSentence": "As with string paths, {Buffer} paths may be relative or absolute:"
        },
        {
          "id": "sc_6115",
          "content": "[Buffer paths] [Previous: As with string paths, {Buffer} paths may be relati...] Example using an absolute path on POSIX:",
          "position": 3,
          "originalSentence": "Example using an absolute path on POSIX:"
        },
        {
          "id": "sc_6127",
          "content": "[Per-drive working directories on Windows] On Windows, Node.",
          "position": 0,
          "originalSentence": "On Windows, Node."
        },
        {
          "id": "sc_6128",
          "content": "[Per-drive working directories on Windows] js follows the concept of per-drive working directory.",
          "position": 1,
          "originalSentence": "js follows the concept of per-drive working directory."
        },
        {
          "id": "sc_6129",
          "content": "[Per-drive working directories on Windows] [Previous: js follows the concept of per-drive working direct...] This behavior can be observed when using a drive path without a backslash.",
          "position": 2,
          "originalSentence": "This behavior can be observed when using a drive path without a backslash."
        },
        {
          "id": "sc_6130",
          "content": "[Per-drive working directories on Windows] [Previous: This behavior can be observed when using a drive p...] For example `fs.",
          "position": 3,
          "originalSentence": "For example `fs."
        },
        {
          "id": "sc_6131",
          "content": "[Per-drive working directories on Windows] readdirSync('C:\\\\')` can potentially return a different result than `fs.",
          "position": 4,
          "originalSentence": "readdirSync('C:\\\\')` can potentially return a different result than `fs."
        },
        {
          "id": "sc_6132",
          "content": "[Per-drive working directories on Windows] [Previous: readdirSync('C:\\\\')` can potentially return a diff...] readdirSync('C:')`.",
          "position": 5,
          "originalSentence": "readdirSync('C:')`."
        },
        {
          "id": "sc_6133",
          "content": "[Per-drive working directories on Windows] For more information, see [this MSDN page][MSDN-Rel-Path].",
          "position": 6,
          "originalSentence": "For more information, see [this MSDN page][MSDN-Rel-Path]."
        },
        {
          "id": "sc_6156",
          "content": "[File descriptors] On POSIX systems, for every process, the kernel maintains a table of currently open files and resources.",
          "position": 0,
          "originalSentence": "On POSIX systems, for every process, the kernel maintains a table of currently open files and resources."
        },
        {
          "id": "sc_6157",
          "content": "[File descriptors] [Previous: On POSIX systems, for every process, the kernel ma...] Each open file is assigned a simple numeric identifier called a _file descriptor_.",
          "position": 1,
          "originalSentence": "Each open file is assigned a simple numeric identifier called a _file descriptor_."
        },
        {
          "id": "sc_6158",
          "content": "[File descriptors] [Previous: Each open file is assigned a simple numeric identi...] At the system-level, all file system operations use these file descriptors to identify and track each specific file.",
          "position": 2,
          "originalSentence": "At the system-level, all file system operations use these file descriptors to identify and track each specific file."
        },
        {
          "id": "sc_6159",
          "content": "[File descriptors] [Previous: At the system-level, all file system operations us...] Windows systems use a different but conceptually similar mechanism for tracking resources.",
          "position": 3,
          "originalSentence": "Windows systems use a different but conceptually similar mechanism for tracking resources."
        },
        {
          "id": "sc_6160",
          "content": "[File descriptors] [Previous: Windows systems use a different but conceptually s...] To simplify things for users, Node.",
          "position": 4,
          "originalSentence": "To simplify things for users, Node."
        },
        {
          "id": "sc_6161",
          "content": "[File descriptors] [Previous: To simplify things for users, Node....] js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor.",
          "position": 5,
          "originalSentence": "js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor."
        },
        {
          "id": "sc_6162",
          "content": "[File descriptors] [Previous: js abstracts away the differences between operatin...] The callback-based `fs.",
          "position": 6,
          "originalSentence": "The callback-based `fs."
        },
        {
          "id": "sc_6163",
          "content": "[File descriptors] [Previous: The callback-based `fs....] open()`, and synchronous `fs.",
          "position": 7,
          "originalSentence": "open()`, and synchronous `fs."
        },
        {
          "id": "sc_6164",
          "content": "[File descriptors] [Previous: open()`, and synchronous `fs....] openSync()` methods open a file and allocate a new file descriptor.",
          "position": 8,
          "originalSentence": "openSync()` methods open a file and allocate a new file descriptor."
        },
        {
          "id": "sc_6165",
          "content": "[File descriptors] [Previous: openSync()` methods open a file and allocate a new...] Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file.",
          "position": 9,
          "originalSentence": "Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file."
        },
        {
          "id": "sc_6166",
          "content": "[File descriptors] [Previous: Once allocated, the file descriptor may be used to...] Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed.",
          "position": 10,
          "originalSentence": "Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed."
        },
        {
          "id": "sc_6167",
          "content": "[File descriptors] [Previous: Operating systems limit the number of file descrip...] Failure to do so will result in a memory leak that will eventually cause an application to crash.",
          "position": 11,
          "originalSentence": "Failure to do so will result in a memory leak that will eventually cause an application to crash."
        },
        {
          "id": "sc_6168",
          "content": "[File descriptors] [Previous: Failure to do so will result in a memory leak that...] The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor.",
          "position": 12,
          "originalSentence": "The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor."
        },
        {
          "id": "sc_6169",
          "content": "[File descriptors] [Previous: The promise-based APIs use a {FileHandle} object i...] These objects are better managed by the system to ensure that resources are not leaked.",
          "position": 13,
          "originalSentence": "These objects are better managed by the system to ensure that resources are not leaked."
        },
        {
          "id": "sc_6170",
          "content": "[File descriptors] [Previous: These objects are better managed by the system to ...] However, it is still required that they are closed when operations are completed:",
          "position": 14,
          "originalSentence": "However, it is still required that they are closed when operations are completed:"
        },
        {
          "id": "sc_6190",
          "content": "[Threadpool usage] All callback and promise-based file system APIs (with the exception of `fs.",
          "position": 0,
          "originalSentence": "All callback and promise-based file system APIs (with the exception of `fs."
        },
        {
          "id": "sc_6191",
          "content": "[Threadpool usage] [Previous: All callback and promise-based file system APIs (w...] FSWatcher()`) use libuv's threadpool.",
          "position": 1,
          "originalSentence": "FSWatcher()`) use libuv's threadpool."
        },
        {
          "id": "sc_6192",
          "content": "[Threadpool usage] [Previous: FSWatcher()`) use libuv's threadpool....] This can have surprising and negative performance implications for some applications.",
          "position": 2,
          "originalSentence": "This can have surprising and negative performance implications for some applications."
        },
        {
          "id": "sc_6193",
          "content": "[Threadpool usage] [Previous: This can have surprising and negative performance ...] See the [`UV_THREADPOOL_SIZE`][] documentation for more information.",
          "position": 3,
          "originalSentence": "See the [`UV_THREADPOOL_SIZE`][] documentation for more information."
        },
        {
          "id": "sc_6253",
          "content": "[File system flags] The following flags are available wherever the `flag` option takes a string.",
          "position": 0,
          "originalSentence": "The following flags are available wherever the `flag` option takes a string."
        },
        {
          "id": "sc_6254",
          "content": "[File system flags] [Previous: The following flags are available wherever the `fl...] `'a'`: Open file for appending.",
          "position": 1,
          "originalSentence": "`'a'`: Open file for appending."
        },
        {
          "id": "sc_6255",
          "content": "[File system flags] [Previous: `'a'`: Open file for appending....] The file is created if it does not exist.",
          "position": 2,
          "originalSentence": "The file is created if it does not exist."
        },
        {
          "id": "sc_6256",
          "content": "[File system flags] [Previous: The file is created if it does not exist....] `'ax'`: Like `'a'` but fails if the path exists.",
          "position": 3,
          "originalSentence": "`'ax'`: Like `'a'` but fails if the path exists."
        },
        {
          "id": "sc_6257",
          "content": "[File system flags] [Previous: `'ax'`: Like `'a'` but fails if the path exists....] `'a+'`: Open file for reading and appending.",
          "position": 4,
          "originalSentence": "`'a+'`: Open file for reading and appending."
        },
        {
          "id": "sc_6258",
          "content": "[File system flags] [Previous: `'a+'`: Open file for reading and appending....] The file is created if it does not exist.",
          "position": 5,
          "originalSentence": "The file is created if it does not exist."
        },
        {
          "id": "sc_6259",
          "content": "[File system flags] [Previous: The file is created if it does not exist....] `'ax+'`: Like `'a+'` but fails if the path exists.",
          "position": 6,
          "originalSentence": "`'ax+'`: Like `'a+'` but fails if the path exists."
        },
        {
          "id": "sc_6260",
          "content": "[File system flags] [Previous: `'ax+'`: Like `'a+'` but fails if the path exists....] `'as'`: Open file for appending in synchronous mode.",
          "position": 7,
          "originalSentence": "`'as'`: Open file for appending in synchronous mode."
        },
        {
          "id": "sc_6261",
          "content": "[File system flags] [Previous: `'as'`: Open file for appending in synchronous mod...] The file is created if it does not exist.",
          "position": 8,
          "originalSentence": "The file is created if it does not exist."
        },
        {
          "id": "sc_6262",
          "content": "[File system flags] [Previous: The file is created if it does not exist....] `'as+'`: Open file for reading and appending in synchronous mode.",
          "position": 9,
          "originalSentence": "`'as+'`: Open file for reading and appending in synchronous mode."
        },
        {
          "id": "sc_6263",
          "content": "[File system flags] [Previous: `'as+'`: Open file for reading and appending in sy...] The file is created if it does not exist.",
          "position": 10,
          "originalSentence": "The file is created if it does not exist."
        },
        {
          "id": "sc_6264",
          "content": "[File system flags] [Previous: The file is created if it does not exist....] `'r'`: Open file for reading.",
          "position": 11,
          "originalSentence": "`'r'`: Open file for reading."
        },
        {
          "id": "sc_6265",
          "content": "[File system flags] [Previous: `'r'`: Open file for reading....] An exception occurs if the file does not exist.",
          "position": 12,
          "originalSentence": "An exception occurs if the file does not exist."
        },
        {
          "id": "sc_6266",
          "content": "[File system flags] [Previous: An exception occurs if the file does not exist....] `'rs'`: Open file for reading in synchronous mode.",
          "position": 13,
          "originalSentence": "`'rs'`: Open file for reading in synchronous mode."
        },
        {
          "id": "sc_6267",
          "content": "[File system flags] [Previous: `'rs'`: Open file for reading in synchronous mode....] An exception occurs if the file does not exist.",
          "position": 14,
          "originalSentence": "An exception occurs if the file does not exist."
        },
        {
          "id": "sc_6268",
          "content": "[File system flags] [Previous: An exception occurs if the file does not exist....] `'r+'`: Open file for reading and writing.",
          "position": 15,
          "originalSentence": "`'r+'`: Open file for reading and writing."
        },
        {
          "id": "sc_6269",
          "content": "[File system flags] [Previous: `'r+'`: Open file for reading and writing....] An exception occurs if the file does not exist.",
          "position": 16,
          "originalSentence": "An exception occurs if the file does not exist."
        },
        {
          "id": "sc_6270",
          "content": "[File system flags] [Previous: An exception occurs if the file does not exist....] `'rs+'`: Open file for reading and writing in synchronous mode.",
          "position": 17,
          "originalSentence": "`'rs+'`: Open file for reading and writing in synchronous mode."
        },
        {
          "id": "sc_6271",
          "content": "[File system flags] [Previous: `'rs+'`: Open file for reading and writing in sync...] Instructs the operating system to bypass the local file system cache.",
          "position": 18,
          "originalSentence": "Instructs the operating system to bypass the local file system cache."
        },
        {
          "id": "sc_6272",
          "content": "[File system flags] [Previous: Instructs the operating system to bypass the local...] This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache.",
          "position": 19,
          "originalSentence": "This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache."
        },
        {
          "id": "sc_6273",
          "content": "[File system flags] [Previous: This is primarily useful for opening files on NFS ...] It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.",
          "position": 20,
          "originalSentence": "It has a very real impact on I/O performance so using this flag is not recommended unless it is needed."
        },
        {
          "id": "sc_6274",
          "content": "[File system flags] [Previous: It has a very real impact on I/O performance so us...] This doesn't turn `fs.",
          "position": 21,
          "originalSentence": "This doesn't turn `fs."
        },
        {
          "id": "sc_6275",
          "content": "[File system flags] [Previous: This doesn't turn `fs....] open()` or `fsPromises.",
          "position": 22,
          "originalSentence": "open()` or `fsPromises."
        },
        {
          "id": "sc_6276",
          "content": "[File system flags] [Previous: open()` or `fsPromises....] open()` into a synchronous blocking call.",
          "position": 23,
          "originalSentence": "open()` into a synchronous blocking call."
        },
        {
          "id": "sc_6277",
          "content": "[File system flags] [Previous: open()` into a synchronous blocking call....] If synchronous operation is desired, something like `fs.",
          "position": 24,
          "originalSentence": "If synchronous operation is desired, something like `fs."
        },
        {
          "id": "sc_6278",
          "content": "[File system flags] [Previous: If synchronous operation is desired, something lik...] openSync()` should be used.",
          "position": 25,
          "originalSentence": "openSync()` should be used."
        },
        {
          "id": "sc_6279",
          "content": "[File system flags] [Previous: openSync()` should be used....] `'w'`: Open file for writing.",
          "position": 26,
          "originalSentence": "`'w'`: Open file for writing."
        },
        {
          "id": "sc_6280",
          "content": "[File system flags] [Previous: `'w'`: Open file for writing....] The file is created (if it does not exist) or truncated (if it exists).",
          "position": 27,
          "originalSentence": "The file is created (if it does not exist) or truncated (if it exists)."
        },
        {
          "id": "sc_6281",
          "content": "[File system flags] [Previous: The file is created (if it does not exist) or trun...] `'wx'`: Like `'w'` but fails if the path exists.",
          "position": 28,
          "originalSentence": "`'wx'`: Like `'w'` but fails if the path exists."
        },
        {
          "id": "sc_6282",
          "content": "[File system flags] [Previous: `'wx'`: Like `'w'` but fails if the path exists....] `'w+'`: Open file for reading and writing.",
          "position": 29,
          "originalSentence": "`'w+'`: Open file for reading and writing."
        },
        {
          "id": "sc_6283",
          "content": "[File system flags] [Previous: `'w+'`: Open file for reading and writing....] The file is created (if it does not exist) or truncated (if it exists).",
          "position": 30,
          "originalSentence": "The file is created (if it does not exist) or truncated (if it exists)."
        },
        {
          "id": "sc_6284",
          "content": "[File system flags] [Previous: The file is created (if it does not exist) or trun...] `'wx+'`: Like `'w+'` but fails if the path exists.",
          "position": 31,
          "originalSentence": "`'wx+'`: Like `'w+'` but fails if the path exists."
        },
        {
          "id": "sc_6285",
          "content": "[File system flags] [Previous: `'wx+'`: Like `'w+'` but fails if the path exists....] `flag` can also be a number as documented by open(2); commonly used constants are available from `fs.",
          "position": 32,
          "originalSentence": "`flag` can also be a number as documented by open(2); commonly used constants are available from `fs."
        },
        {
          "id": "sc_6286",
          "content": "[File system flags] [Previous: `flag` can also be a number as documented by open(...] constants`.",
          "position": 33,
          "originalSentence": "constants`."
        },
        {
          "id": "sc_6287",
          "content": "[File system flags] On Windows, flags are translated to their equivalent ones where applicable, e.",
          "position": 34,
          "originalSentence": "On Windows, flags are translated to their equivalent ones where applicable, e."
        },
        {
          "id": "sc_6288",
          "content": "[File system flags] [Previous: On Windows, flags are translated to their equivale...] `O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`.",
          "position": 35,
          "originalSentence": "`O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`."
        },
        {
          "id": "sc_6289",
          "content": "[File system flags] [Previous: `O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_C...] The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists.",
          "position": 36,
          "originalSentence": "The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists."
        },
        {
          "id": "sc_6290",
          "content": "[File system flags] [Previous: The exclusive flag `'x'` (`O_EXCL` flag in open(2)...] On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist.",
          "position": 37,
          "originalSentence": "On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist."
        },
        {
          "id": "sc_6291",
          "content": "[File system flags] [Previous: On POSIX, if the path is a symbolic link, using `O...] The exclusive flag might not work with network file systems.",
          "position": 38,
          "originalSentence": "The exclusive flag might not work with network file systems."
        },
        {
          "id": "sc_6292",
          "content": "[File system flags] [Previous: The exclusive flag might not work with network fil...] On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 39,
          "originalSentence": "On Linux, positional writes don't work when the file is opened in append mode."
        },
        {
          "id": "sc_6293",
          "content": "[File system flags] [Previous: On Linux, positional writes don't work when the fi...] The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 40,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "sc_6294",
          "content": "[File system flags] [Previous: The kernel ignores the position argument and alway...] Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`.",
          "position": 41,
          "originalSentence": "Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`."
        },
        {
          "id": "sc_6295",
          "content": "[File system flags] [Previous: Modifying a file rather than replacing it may requ...] The behavior of some flags are platform-specific.",
          "position": 42,
          "originalSentence": "The behavior of some flags are platform-specific."
        },
        {
          "id": "sc_6296",
          "content": "[File system flags] [Previous: The behavior of some flags are platform-specific....] As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error.",
          "position": 43,
          "originalSentence": "As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error."
        },
        {
          "id": "sc_6297",
          "content": "[File system flags] [Previous: As such, opening a directory on macOS and Linux wi...] In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned.",
          "position": 44,
          "originalSentence": "In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned."
        },
        {
          "id": "sc_6298",
          "content": "[File system flags] [Previous: In contrast, on Windows and FreeBSD, a file descri...] On Windows, opening an existing hidden file using the `'w'` flag (either through `fs.",
          "position": 45,
          "originalSentence": "On Windows, opening an existing hidden file using the `'w'` flag (either through `fs."
        },
        {
          "id": "sc_6299",
          "content": "[File system flags] [Previous: On Windows, opening an existing hidden file using ...] open()`, `fs.",
          "position": 46,
          "originalSentence": "open()`, `fs."
        },
        {
          "id": "sc_6300",
          "content": "[File system flags] writeFile()`, or `fsPromises.",
          "position": 47,
          "originalSentence": "writeFile()`, or `fsPromises."
        },
        {
          "id": "sc_6301",
          "content": "[File system flags] [Previous: writeFile()`, or `fsPromises....] open()`) will fail with `EPERM`.",
          "position": 48,
          "originalSentence": "open()`) will fail with `EPERM`."
        },
        {
          "id": "sc_6302",
          "content": "[File system flags] [Previous: open()`) will fail with `EPERM`....] Existing hidden files can be opened for writing with the `'r+'` flag.",
          "position": 49,
          "originalSentence": "Existing hidden files can be opened for writing with the `'r+'` flag."
        },
        {
          "id": "sc_6303",
          "content": "[File system flags] [Previous: Existing hidden files can be opened for writing wi...] A call to `fs.",
          "position": 50,
          "originalSentence": "A call to `fs."
        },
        {
          "id": "sc_6304",
          "content": "[File system flags] ftruncate()` or `filehandle.",
          "position": 51,
          "originalSentence": "ftruncate()` or `filehandle."
        },
        {
          "id": "sc_6305",
          "content": "[File system flags] [Previous: ftruncate()` or `filehandle....] truncate()` can be used to reset the file contents.",
          "position": 52,
          "originalSentence": "truncate()` can be used to reset the file contents."
        }
      ]
    },
    "paragraph": {
      "count": 0,
      "chunks": []
    },
    "sentence": {
      "count": 2143,
      "chunks": [
        {
          "id": "s_8",
          "content": "The `node:fs` module enables interacting with the file system in a way modeled on standard POSIX functions.",
          "position": 0,
          "originalSentence": "The `node:fs` module enables interacting with the file system in a way modeled on standard POSIX functions."
        },
        {
          "id": "s_9",
          "content": "To use the promise-based APIs:",
          "position": 1,
          "originalSentence": "To use the promise-based APIs:"
        },
        {
          "id": "s_10",
          "content": "To use the callback and sync APIs:",
          "position": 2,
          "originalSentence": "To use the callback and sync APIs:"
        },
        {
          "id": "s_11",
          "content": "All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).",
          "position": 3,
          "originalSentence": "All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM)."
        },
        {
          "id": "s_13",
          "content": "Promise-based operations return a promise that is fulfilled when the asynchronous operation is complete.",
          "position": 0,
          "originalSentence": "Promise-based operations return a promise that is fulfilled when the asynchronous operation is complete."
        },
        {
          "id": "s_22",
          "content": "The callback form takes a completion callback function as its last argument and invokes the operation asynchronously.",
          "position": 0,
          "originalSentence": "The callback form takes a completion callback function as its last argument and invokes the operation asynchronously."
        },
        {
          "id": "s_23",
          "content": "The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception.",
          "position": 1,
          "originalSentence": "The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception."
        },
        {
          "id": "s_24",
          "content": "If the operation is completed successfully, then the first argument is `null` or `undefined`.",
          "position": 2,
          "originalSentence": "If the operation is completed successfully, then the first argument is `null` or `undefined`."
        },
        {
          "id": "s_25",
          "content": "The callback-based versions of the `node:fs` module APIs are preferable over the use of the promise APIs when maximal performance (both in terms of execution time and memory allocation) is required.",
          "position": 3,
          "originalSentence": "The callback-based versions of the `node:fs` module APIs are preferable over the use of the promise APIs when maximal performance (both in terms of execution time and memory allocation) is required."
        },
        {
          "id": "s_34",
          "content": "The synchronous APIs block the Node.",
          "position": 0,
          "originalSentence": "The synchronous APIs block the Node."
        },
        {
          "id": "s_35",
          "content": "js event loop and further JavaScript execution until the operation is complete.",
          "position": 1,
          "originalSentence": "js event loop and further JavaScript execution until the operation is complete."
        },
        {
          "id": "s_36",
          "content": "Exceptions are thrown immediately and can be handled using `tryâ€¦",
          "position": 2,
          "originalSentence": "Exceptions are thrown immediately and can be handled using `tryâ€¦"
        },
        {
          "id": "s_37",
          "content": "catch`, or can be allowed to bubble up.",
          "position": 3,
          "originalSentence": "catch`, or can be allowed to bubble up."
        },
        {
          "id": "s_48",
          "content": "The `fs/promises` API provides asynchronous file system methods that return promises.",
          "position": 0,
          "originalSentence": "The `fs/promises` API provides asynchronous file system methods that return promises."
        },
        {
          "id": "s_49",
          "content": "The promise APIs use the underlying Node.",
          "position": 1,
          "originalSentence": "The promise APIs use the underlying Node."
        },
        {
          "id": "s_50",
          "content": "js threadpool to perform file system operations off the event loop thread.",
          "position": 2,
          "originalSentence": "js threadpool to perform file system operations off the event loop thread."
        },
        {
          "id": "s_51",
          "content": "These operations are not synchronized or threadsafe.",
          "position": 3,
          "originalSentence": "These operations are not synchronized or threadsafe."
        },
        {
          "id": "s_52",
          "content": "Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
          "position": 4,
          "originalSentence": "Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur."
        },
        {
          "id": "s_71",
          "content": "A {FileHandle} object is an object wrapper for a numeric file descriptor.",
          "position": 0,
          "originalSentence": "A {FileHandle} object is an object wrapper for a numeric file descriptor."
        },
        {
          "id": "s_72",
          "content": "Instances of the {FileHandle} object are created by the `fsPromises.",
          "position": 1,
          "originalSentence": "Instances of the {FileHandle} object are created by the `fsPromises."
        },
        {
          "id": "s_73",
          "content": "open()` method.",
          "position": 2,
          "originalSentence": "open()` method."
        },
        {
          "id": "s_74",
          "content": "All {FileHandle} objects are {EventEmitter}s.",
          "position": 3,
          "originalSentence": "All {FileHandle} objects are {EventEmitter}s."
        },
        {
          "id": "s_75",
          "content": "If a {FileHandle} is not closed using the `filehandle.",
          "position": 4,
          "originalSentence": "If a {FileHandle} is not closed using the `filehandle."
        },
        {
          "id": "s_76",
          "content": "close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks.",
          "position": 5,
          "originalSentence": "close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks."
        },
        {
          "id": "s_77",
          "content": "Please do not rely on this behavior because it can be unreliable and the file may not be closed.",
          "position": 6,
          "originalSentence": "Please do not rely on this behavior because it can be unreliable and the file may not be closed."
        },
        {
          "id": "s_78",
          "content": "Instead, always explicitly close {FileHandle}s.",
          "position": 7,
          "originalSentence": "Instead, always explicitly close {FileHandle}s."
        },
        {
          "id": "s_79",
          "content": "js may change this behavior in the future.",
          "position": 8,
          "originalSentence": "js may change this behavior in the future."
        },
        {
          "id": "s_81",
          "content": "The `'close'` event is emitted when the {FileHandle} has been closed and can no longer be used.",
          "position": 0,
          "originalSentence": "The `'close'` event is emitted when the {FileHandle} has been closed and can no longer be used."
        },
        {
          "id": "s_98",
          "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile.",
          "position": 0,
          "originalSentence": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile."
        },
        {
          "id": "s_99",
          "content": "**Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 1,
          "originalSentence": "**Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_100",
          "content": "Alias of [`filehandle.",
          "position": 2,
          "originalSentence": "Alias of [`filehandle."
        },
        {
          "id": "s_101",
          "content": "writeFile()`][].",
          "position": 3,
          "originalSentence": "writeFile()`][]."
        },
        {
          "id": "s_102",
          "content": "When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises.",
          "position": 4,
          "originalSentence": "When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises."
        },
        {
          "id": "s_103",
          "content": "open()`][].",
          "position": 5,
          "originalSentence": "open()`][]."
        },
        {
          "id": "s_104",
          "content": "Therefore, this is equivalent to [`filehandle.",
          "position": 6,
          "originalSentence": "Therefore, this is equivalent to [`filehandle."
        },
        {
          "id": "s_105",
          "content": "writeFile()`][].",
          "position": 7,
          "originalSentence": "writeFile()`][]."
        },
        {
          "id": "s_114",
          "content": "`mode` {integer} the file mode bit mask.",
          "position": 0,
          "originalSentence": "`mode` {integer} the file mode bit mask."
        },
        {
          "id": "s_115",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 1,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_116",
          "content": "Modifies the permissions on the file.",
          "position": 2,
          "originalSentence": "Modifies the permissions on the file."
        },
        {
          "id": "s_117",
          "content": "See chmod(2).",
          "position": 3,
          "originalSentence": "See chmod(2)."
        },
        {
          "id": "s_128",
          "content": "`uid` {integer} The file's new owner's user id.",
          "position": 0,
          "originalSentence": "`uid` {integer} The file's new owner's user id."
        },
        {
          "id": "s_129",
          "content": "`gid` {integer} The file's new group's group id.",
          "position": 1,
          "originalSentence": "`gid` {integer} The file's new group's group id."
        },
        {
          "id": "s_130",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 2,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_131",
          "content": "Changes the ownership of the file.",
          "position": 3,
          "originalSentence": "Changes the ownership of the file."
        },
        {
          "id": "s_132",
          "content": "A wrapper for chown(2).",
          "position": 4,
          "originalSentence": "A wrapper for chown(2)."
        },
        {
          "id": "s_137",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_138",
          "content": "Closes the file handle after waiting for any pending operation on the handle to complete.",
          "position": 1,
          "originalSentence": "Closes the file handle after waiting for any pending operation on the handle to complete."
        },
        {
          "id": "s_172",
          "content": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `signal` {AbortSignal|undefined} **Default:** `undefined` Returns: {fs.",
          "position": 0,
          "originalSentence": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `signal` {AbortSignal|undefined} **Default:** `undefined` Returns: {fs."
        },
        {
          "id": "s_173",
          "content": "ReadStream}",
          "position": 1,
          "originalSentence": "ReadStream}"
        },
        {
          "id": "s_174",
          "content": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file.",
          "position": 2,
          "originalSentence": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file."
        },
        {
          "id": "s_175",
          "content": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
          "position": 3,
          "originalSentence": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number."
        },
        {
          "id": "s_176",
          "content": "MAX_SAFE_INTEGER`][]] range.",
          "position": 4,
          "originalSentence": "MAX_SAFE_INTEGER`][]] range."
        },
        {
          "id": "s_177",
          "content": "If `start` is omitted or `undefined`, `filehandle.",
          "position": 5,
          "originalSentence": "If `start` is omitted or `undefined`, `filehandle."
        },
        {
          "id": "s_178",
          "content": "createReadStream()` reads sequentially from the current file position.",
          "position": 6,
          "originalSentence": "createReadStream()` reads sequentially from the current file position."
        },
        {
          "id": "s_179",
          "content": "The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 7,
          "originalSentence": "The `encoding` can be any one of those accepted by {Buffer}."
        },
        {
          "id": "s_180",
          "content": "If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
          "position": 8,
          "originalSentence": "If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available."
        },
        {
          "id": "s_181",
          "content": "This can prevent the process from exiting and the stream from closing naturally.",
          "position": 9,
          "originalSentence": "This can prevent the process from exiting and the stream from closing naturally."
        },
        {
          "id": "s_182",
          "content": "By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 10,
          "originalSentence": "By default, the stream will emit a `'close'` event after it has been destroyed."
        },
        {
          "id": "s_183",
          "content": "Set the `emitClose` option to `false` to change this behavior.",
          "position": 11,
          "originalSentence": "Set the `emitClose` option to `false` to change this behavior."
        },
        {
          "id": "s_184",
          "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 12,
          "originalSentence": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error."
        },
        {
          "id": "s_185",
          "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 13,
          "originalSentence": "It is the application's responsibility to close it and make sure there's no file descriptor leak."
        },
        {
          "id": "s_186",
          "content": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
          "position": 14,
          "originalSentence": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically."
        },
        {
          "id": "s_187",
          "content": "An example to read the last 10 bytes of a file which is 100 bytes long:",
          "position": 15,
          "originalSentence": "An example to read the last 10 bytes of a file which is 100 bytes long:"
        },
        {
          "id": "s_214",
          "content": "`options` {Object} * `encoding` {string} **Default:** `'utf8'` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
          "position": 0,
          "originalSentence": "`options` {Object} * `encoding` {string} **Default:** `'utf8'` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it."
        },
        {
          "id": "s_215",
          "content": "**Default:** `false`.",
          "position": 1,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_216",
          "content": "Returns: {fs.",
          "position": 2,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_217",
          "content": "WriteStream}",
          "position": 3,
          "originalSentence": "WriteStream}"
        },
        {
          "id": "s_218",
          "content": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
          "position": 4,
          "originalSentence": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number."
        },
        {
          "id": "s_219",
          "content": "MAX_SAFE_INTEGER`][]] range.",
          "position": 5,
          "originalSentence": "MAX_SAFE_INTEGER`][]] range."
        },
        {
          "id": "s_220",
          "content": "Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`.",
          "position": 6,
          "originalSentence": "Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`."
        },
        {
          "id": "s_221",
          "content": "The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 7,
          "originalSentence": "The `encoding` can be any one of those accepted by {Buffer}."
        },
        {
          "id": "s_222",
          "content": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
          "position": 8,
          "originalSentence": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically."
        },
        {
          "id": "s_223",
          "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 9,
          "originalSentence": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error."
        },
        {
          "id": "s_224",
          "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 10,
          "originalSentence": "It is the application's responsibility to close it and make sure there's no file descriptor leak."
        },
        {
          "id": "s_225",
          "content": "By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 11,
          "originalSentence": "By default, the stream will emit a `'close'` event after it has been destroyed."
        },
        {
          "id": "s_226",
          "content": "Set the `emitClose` option to `false` to change this behavior.",
          "position": 12,
          "originalSentence": "Set the `emitClose` option to `false` to change this behavior."
        },
        {
          "id": "s_237",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_238",
          "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
          "position": 1,
          "originalSentence": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state."
        },
        {
          "id": "s_239",
          "content": "Refer to the POSIX fdatasync(2) documentation for details.",
          "position": 2,
          "originalSentence": "Refer to the POSIX fdatasync(2) documentation for details."
        },
        {
          "id": "s_240",
          "content": "Unlike `filehandle.",
          "position": 3,
          "originalSentence": "Unlike `filehandle."
        },
        {
          "id": "s_241",
          "content": "sync` this method does not flush modified metadata.",
          "position": 4,
          "originalSentence": "sync` this method does not flush modified metadata."
        },
        {
          "id": "s_243",
          "content": "Type: {number} The numeric file descriptor managed by the {FileHandle} object.",
          "position": 0,
          "originalSentence": "Type: {number} The numeric file descriptor managed by the {FileHandle} object."
        },
        {
          "id": "s_264",
          "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
          "position": 0,
          "originalSentence": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read."
        },
        {
          "id": "s_265",
          "content": "`offset` {integer} The location in the buffer at which to start filling.",
          "position": 1,
          "originalSentence": "`offset` {integer} The location in the buffer at which to start filling."
        },
        {
          "id": "s_266",
          "content": "**Default:** `0` `length` {integer} The number of bytes to read.",
          "position": 2,
          "originalSentence": "**Default:** `0` `length` {integer} The number of bytes to read."
        },
        {
          "id": "s_267",
          "content": "**Default:** `buffer.",
          "position": 3,
          "originalSentence": "**Default:** `buffer."
        },
        {
          "id": "s_268",
          "content": "byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file.",
          "position": 4,
          "originalSentence": "byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file."
        },
        {
          "id": "s_269",
          "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
          "position": 5,
          "originalSentence": "If `null` or `-1`, data will be read from the current file position, and the position will be updated."
        },
        {
          "id": "s_270",
          "content": "If `position` is a non-negative integer, the current file position will remain unchanged.",
          "position": 6,
          "originalSentence": "If `position` is a non-negative integer, the current file position will remain unchanged."
        },
        {
          "id": "s_271",
          "content": "**Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument.",
          "position": 7,
          "originalSentence": "**Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument."
        },
        {
          "id": "s_272",
          "content": "Reads data from the file and stores that in the given buffer.",
          "position": 8,
          "originalSentence": "Reads data from the file and stores that in the given buffer."
        },
        {
          "id": "s_273",
          "content": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 9,
          "originalSentence": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero."
        },
        {
          "id": "s_296",
          "content": "`options` {Object} * `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
          "position": 0,
          "originalSentence": "`options` {Object} * `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read."
        },
        {
          "id": "s_297",
          "content": "**Default:** `Buffer.",
          "position": 1,
          "originalSentence": "**Default:** `Buffer."
        },
        {
          "id": "s_298",
          "content": "alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling.",
          "position": 2,
          "originalSentence": "alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling."
        },
        {
          "id": "s_299",
          "content": "**Default:** `0` * `length` {integer} The number of bytes to read.",
          "position": 3,
          "originalSentence": "**Default:** `0` * `length` {integer} The number of bytes to read."
        },
        {
          "id": "s_300",
          "content": "**Default:** `buffer.",
          "position": 4,
          "originalSentence": "**Default:** `buffer."
        },
        {
          "id": "s_301",
          "content": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
          "position": 5,
          "originalSentence": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file."
        },
        {
          "id": "s_302",
          "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
          "position": 6,
          "originalSentence": "If `null` or `-1`, data will be read from the current file position, and the position will be updated."
        },
        {
          "id": "s_303",
          "content": "If `position` is a non-negative integer, the current file position will remain unchanged.",
          "position": 7,
          "originalSentence": "If `position` is a non-negative integer, the current file position will remain unchanged."
        },
        {
          "id": "s_304",
          "content": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument.",
          "position": 8,
          "originalSentence": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument."
        },
        {
          "id": "s_305",
          "content": "Reads data from the file and stores that in the given buffer.",
          "position": 9,
          "originalSentence": "Reads data from the file and stores that in the given buffer."
        },
        {
          "id": "s_306",
          "content": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 10,
          "originalSentence": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero."
        },
        {
          "id": "s_327",
          "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
          "position": 0,
          "originalSentence": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read."
        },
        {
          "id": "s_328",
          "content": "`options` {Object} * `offset` {integer} The location in the buffer at which to start filling.",
          "position": 1,
          "originalSentence": "`options` {Object} * `offset` {integer} The location in the buffer at which to start filling."
        },
        {
          "id": "s_329",
          "content": "**Default:** `0` * `length` {integer} The number of bytes to read.",
          "position": 2,
          "originalSentence": "**Default:** `0` * `length` {integer} The number of bytes to read."
        },
        {
          "id": "s_330",
          "content": "**Default:** `buffer.",
          "position": 3,
          "originalSentence": "**Default:** `buffer."
        },
        {
          "id": "s_331",
          "content": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
          "position": 4,
          "originalSentence": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file."
        },
        {
          "id": "s_332",
          "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
          "position": 5,
          "originalSentence": "If `null` or `-1`, data will be read from the current file position, and the position will be updated."
        },
        {
          "id": "s_333",
          "content": "If `position` is a non-negative integer, the current file position will remain unchanged.",
          "position": 6,
          "originalSentence": "If `position` is a non-negative integer, the current file position will remain unchanged."
        },
        {
          "id": "s_334",
          "content": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument.",
          "position": 7,
          "originalSentence": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument."
        },
        {
          "id": "s_335",
          "content": "Reads data from the file and stores that in the given buffer.",
          "position": 8,
          "originalSentence": "Reads data from the file and stores that in the given buffer."
        },
        {
          "id": "s_336",
          "content": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 9,
          "originalSentence": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero."
        },
        {
          "id": "s_351",
          "content": "`options` {Object} * `autoClose` {boolean} When true, causes the {FileHandle} to be closed when the stream is closed.",
          "position": 0,
          "originalSentence": "`options` {Object} * `autoClose` {boolean} When true, causes the {FileHandle} to be closed when the stream is closed."
        },
        {
          "id": "s_352",
          "content": "**Default:** `false` Returns: {ReadableStream}",
          "position": 1,
          "originalSentence": "**Default:** `false` Returns: {ReadableStream}"
        },
        {
          "id": "s_353",
          "content": "Returns a byte-oriented `ReadableStream` that may be used to read the file's contents.",
          "position": 2,
          "originalSentence": "Returns a byte-oriented `ReadableStream` that may be used to read the file's contents."
        },
        {
          "id": "s_354",
          "content": "An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing.",
          "position": 3,
          "originalSentence": "An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing."
        },
        {
          "id": "s_355",
          "content": "While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically.",
          "position": 4,
          "originalSentence": "While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically."
        },
        {
          "id": "s_356",
          "content": "User code must still call the `fileHandle.",
          "position": 5,
          "originalSentence": "User code must still call the `fileHandle."
        },
        {
          "id": "s_357",
          "content": "close()` method unless the `autoClose` option is set to `true`.",
          "position": 6,
          "originalSentence": "close()` method unless the `autoClose` option is set to `true`."
        },
        {
          "id": "s_380",
          "content": "`options` {Object|string} * `encoding` {string|null} **Default:** `null` * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills upon a successful read with the contents of the file.",
          "position": 0,
          "originalSentence": "`options` {Object|string} * `encoding` {string|null} **Default:** `null` * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills upon a successful read with the contents of the file."
        },
        {
          "id": "s_381",
          "content": "If no encoding is specified (using `options.",
          "position": 1,
          "originalSentence": "If no encoding is specified (using `options."
        },
        {
          "id": "s_382",
          "content": "encoding`), the data is returned as a {Buffer} object.",
          "position": 2,
          "originalSentence": "encoding`), the data is returned as a {Buffer} object."
        },
        {
          "id": "s_383",
          "content": "Otherwise, the data will be a string.",
          "position": 3,
          "originalSentence": "Otherwise, the data will be a string."
        },
        {
          "id": "s_384",
          "content": "Asynchronously reads the entire contents of a file.",
          "position": 4,
          "originalSentence": "Asynchronously reads the entire contents of a file."
        },
        {
          "id": "s_385",
          "content": "If `options` is a string, then it specifies the `encoding`.",
          "position": 5,
          "originalSentence": "If `options` is a string, then it specifies the `encoding`."
        },
        {
          "id": "s_386",
          "content": "The {FileHandle} has to support reading.",
          "position": 6,
          "originalSentence": "The {FileHandle} has to support reading."
        },
        {
          "id": "s_387",
          "content": "If one or more `filehandle.",
          "position": 7,
          "originalSentence": "If one or more `filehandle."
        },
        {
          "id": "s_388",
          "content": "read()` calls are made on a file handle and then a `filehandle.",
          "position": 8,
          "originalSentence": "read()` calls are made on a file handle and then a `filehandle."
        },
        {
          "id": "s_389",
          "content": "readFile()` call is made, the data will be read from the current position till the end of the file.",
          "position": 9,
          "originalSentence": "readFile()` call is made, the data will be read from the current position till the end of the file."
        },
        {
          "id": "s_390",
          "content": "It doesn't always read from the beginning of the file.",
          "position": 10,
          "originalSentence": "It doesn't always read from the beginning of the file."
        },
        {
          "id": "s_401",
          "content": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` Returns: {readline.",
          "position": 0,
          "originalSentence": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` Returns: {readline."
        },
        {
          "id": "s_402",
          "content": "InterfaceConstructor}",
          "position": 1,
          "originalSentence": "InterfaceConstructor}"
        },
        {
          "id": "s_403",
          "content": "Convenience method to create a `readline` interface and stream over the file.",
          "position": 2,
          "originalSentence": "Convenience method to create a `readline` interface and stream over the file."
        },
        {
          "id": "s_404",
          "content": "See [`filehandle.",
          "position": 3,
          "originalSentence": "See [`filehandle."
        },
        {
          "id": "s_405",
          "content": "createReadStream()`][] for the options.",
          "position": 4,
          "originalSentence": "createReadStream()`][] for the options."
        },
        {
          "id": "s_414",
          "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data should be read from.",
          "position": 0,
          "originalSentence": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data should be read from."
        },
        {
          "id": "s_415",
          "content": "If `position` is not a `number`, the data will be read from the current position.",
          "position": 1,
          "originalSentence": "If `position` is not a `number`, the data will be read from the current position."
        },
        {
          "id": "s_416",
          "content": "**Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead` {integer} the number of bytes read * `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing a reference to the `buffers` input.",
          "position": 2,
          "originalSentence": "**Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead` {integer} the number of bytes read * `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing a reference to the `buffers` input."
        },
        {
          "id": "s_417",
          "content": "Read from a file and write to an array of {ArrayBufferView}s",
          "position": 3,
          "originalSentence": "Read from a file and write to an array of {ArrayBufferView}s"
        },
        {
          "id": "s_428",
          "content": "`options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_429",
          "content": "Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "s_430",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_431",
          "content": "Returns: {Promise} Fulfills with an {fs.",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with an {fs."
        },
        {
          "id": "s_432",
          "content": "Stats} for the file.",
          "position": 4,
          "originalSentence": "Stats} for the file."
        },
        {
          "id": "s_441",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_442",
          "content": "Request that all data for the open file descriptor is flushed to the storage device.",
          "position": 1,
          "originalSentence": "Request that all data for the open file descriptor is flushed to the storage device."
        },
        {
          "id": "s_443",
          "content": "The specific implementation is operating system and device specific.",
          "position": 2,
          "originalSentence": "The specific implementation is operating system and device specific."
        },
        {
          "id": "s_444",
          "content": "Refer to the POSIX fsync(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "Refer to the POSIX fsync(2) documentation for more detail."
        },
        {
          "id": "s_457",
          "content": "`len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_458",
          "content": "Truncates the file.",
          "position": 1,
          "originalSentence": "Truncates the file."
        },
        {
          "id": "s_459",
          "content": "If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
          "position": 2,
          "originalSentence": "If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file."
        },
        {
          "id": "s_460",
          "content": "The following example retains only the first four bytes of the file:",
          "position": 3,
          "originalSentence": "The following example retains only the first four bytes of the file:"
        },
        {
          "id": "s_461",
          "content": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
          "position": 4,
          "originalSentence": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):"
        },
        {
          "id": "s_462",
          "content": "If `len` is negative then `0` will be used.",
          "position": 5,
          "originalSentence": "If `len` is negative then `0` will be used."
        },
        {
          "id": "s_467",
          "content": "`atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise}",
          "position": 0,
          "originalSentence": "`atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise}"
        },
        {
          "id": "s_468",
          "content": "Change the file system timestamps of the object referenced by the {FileHandle} then fulfills the promise with no arguments upon success.",
          "position": 1,
          "originalSentence": "Change the file system timestamps of the object referenced by the {FileHandle} then fulfills the promise with no arguments upon success."
        },
        {
          "id": "s_501",
          "content": "`buffer` {Buffer|TypedArray|DataView} `offset` {integer} The start position from within `buffer` where the data to write begins.",
          "position": 0,
          "originalSentence": "`buffer` {Buffer|TypedArray|DataView} `offset` {integer} The start position from within `buffer` where the data to write begins."
        },
        {
          "id": "s_502",
          "content": "`length` {integer} The number of bytes from `buffer` to write.",
          "position": 1,
          "originalSentence": "`length` {integer} The number of bytes from `buffer` to write."
        },
        {
          "id": "s_503",
          "content": "**Default:** `buffer.",
          "position": 2,
          "originalSentence": "**Default:** `buffer."
        },
        {
          "id": "s_504",
          "content": "byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written.",
          "position": 3,
          "originalSentence": "byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written."
        },
        {
          "id": "s_505",
          "content": "If `position` is not a `number`, the data will be written at the current position.",
          "position": 4,
          "originalSentence": "If `position` is not a `number`, the data will be written at the current position."
        },
        {
          "id": "s_506",
          "content": "See the POSIX pwrite(2) documentation for more detail.",
          "position": 5,
          "originalSentence": "See the POSIX pwrite(2) documentation for more detail."
        },
        {
          "id": "s_507",
          "content": "**Default:** `null` Returns: {Promise}",
          "position": 6,
          "originalSentence": "**Default:** `null` Returns: {Promise}"
        },
        {
          "id": "s_508",
          "content": "Write `buffer` to the file.",
          "position": 7,
          "originalSentence": "Write `buffer` to the file."
        },
        {
          "id": "s_509",
          "content": "The promise is fulfilled with an object containing two properties:",
          "position": 8,
          "originalSentence": "The promise is fulfilled with an object containing two properties:"
        },
        {
          "id": "s_510",
          "content": "`bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written.",
          "position": 9,
          "originalSentence": "`bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written."
        },
        {
          "id": "s_511",
          "content": "It is unsafe to use `filehandle.",
          "position": 10,
          "originalSentence": "It is unsafe to use `filehandle."
        },
        {
          "id": "s_512",
          "content": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 11,
          "originalSentence": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected)."
        },
        {
          "id": "s_513",
          "content": "For this scenario, use [`filehandle.",
          "position": 12,
          "originalSentence": "For this scenario, use [`filehandle."
        },
        {
          "id": "s_514",
          "content": "createWriteStream()`][].",
          "position": 13,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "s_515",
          "content": "On Linux, positional writes do not work when the file is opened in append mode.",
          "position": 14,
          "originalSentence": "On Linux, positional writes do not work when the file is opened in append mode."
        },
        {
          "id": "s_516",
          "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 15,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "s_529",
          "content": "`buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "s_530",
          "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {Promise}",
          "position": 1,
          "originalSentence": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {Promise}"
        },
        {
          "id": "s_531",
          "content": "Write `buffer` to the file.",
          "position": 2,
          "originalSentence": "Write `buffer` to the file."
        },
        {
          "id": "s_532",
          "content": "Similar to the above `filehandle.",
          "position": 3,
          "originalSentence": "Similar to the above `filehandle."
        },
        {
          "id": "s_533",
          "content": "write` function, this version takes an optional `options` object.",
          "position": 4,
          "originalSentence": "write` function, this version takes an optional `options` object."
        },
        {
          "id": "s_534",
          "content": "If no `options` object is specified, it will default with the above values.",
          "position": 5,
          "originalSentence": "If no `options` object is specified, it will default with the above values."
        },
        {
          "id": "s_565",
          "content": "`string` {string} `position` {integer|null} The offset from the beginning of the file where the data from `string` should be written.",
          "position": 0,
          "originalSentence": "`string` {string} `position` {integer|null} The offset from the beginning of the file where the data from `string` should be written."
        },
        {
          "id": "s_566",
          "content": "If `position` is not a `number` the data will be written at the current position.",
          "position": 1,
          "originalSentence": "If `position` is not a `number` the data will be written at the current position."
        },
        {
          "id": "s_567",
          "content": "See the POSIX pwrite(2) documentation for more detail.",
          "position": 2,
          "originalSentence": "See the POSIX pwrite(2) documentation for more detail."
        },
        {
          "id": "s_568",
          "content": "**Default:** `null` `encoding` {string} The expected string encoding.",
          "position": 3,
          "originalSentence": "**Default:** `null` `encoding` {string} The expected string encoding."
        },
        {
          "id": "s_569",
          "content": "**Default:** `'utf8'` Returns: {Promise}",
          "position": 4,
          "originalSentence": "**Default:** `'utf8'` Returns: {Promise}"
        },
        {
          "id": "s_570",
          "content": "Write `string` to the file.",
          "position": 5,
          "originalSentence": "Write `string` to the file."
        },
        {
          "id": "s_571",
          "content": "If `string` is not a string, the promise is rejected with an error.",
          "position": 6,
          "originalSentence": "If `string` is not a string, the promise is rejected with an error."
        },
        {
          "id": "s_572",
          "content": "The promise is fulfilled with an object containing two properties:",
          "position": 7,
          "originalSentence": "The promise is fulfilled with an object containing two properties:"
        },
        {
          "id": "s_573",
          "content": "`bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written.",
          "position": 8,
          "originalSentence": "`bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written."
        },
        {
          "id": "s_574",
          "content": "It is unsafe to use `filehandle.",
          "position": 9,
          "originalSentence": "It is unsafe to use `filehandle."
        },
        {
          "id": "s_575",
          "content": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 10,
          "originalSentence": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected)."
        },
        {
          "id": "s_576",
          "content": "For this scenario, use [`filehandle.",
          "position": 11,
          "originalSentence": "For this scenario, use [`filehandle."
        },
        {
          "id": "s_577",
          "content": "createWriteStream()`][].",
          "position": 12,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "s_578",
          "content": "On Linux, positional writes do not work when the file is opened in append mode.",
          "position": 13,
          "originalSentence": "On Linux, positional writes do not work when the file is opened in append mode."
        },
        {
          "id": "s_579",
          "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 14,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "s_608",
          "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} The expected character encoding when `data` is a string.",
          "position": 0,
          "originalSentence": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} The expected character encoding when `data` is a string."
        },
        {
          "id": "s_609",
          "content": "**Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile.",
          "position": 1,
          "originalSentence": "**Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile."
        },
        {
          "id": "s_610",
          "content": "**Default:** `undefined` Returns: {Promise}",
          "position": 2,
          "originalSentence": "**Default:** `undefined` Returns: {Promise}"
        },
        {
          "id": "s_611",
          "content": "Asynchronously writes data to a file, replacing the file if it already exists.",
          "position": 3,
          "originalSentence": "Asynchronously writes data to a file, replacing the file if it already exists."
        },
        {
          "id": "s_612",
          "content": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
          "position": 4,
          "originalSentence": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object."
        },
        {
          "id": "s_613",
          "content": "The promise is fulfilled with no arguments upon success.",
          "position": 5,
          "originalSentence": "The promise is fulfilled with no arguments upon success."
        },
        {
          "id": "s_614",
          "content": "If `options` is a string, then it specifies the `encoding`.",
          "position": 6,
          "originalSentence": "If `options` is a string, then it specifies the `encoding`."
        },
        {
          "id": "s_615",
          "content": "The {FileHandle} has to support writing.",
          "position": 7,
          "originalSentence": "The {FileHandle} has to support writing."
        },
        {
          "id": "s_616",
          "content": "It is unsafe to use `filehandle.",
          "position": 8,
          "originalSentence": "It is unsafe to use `filehandle."
        },
        {
          "id": "s_617",
          "content": "writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 9,
          "originalSentence": "writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected)."
        },
        {
          "id": "s_618",
          "content": "If one or more `filehandle.",
          "position": 10,
          "originalSentence": "If one or more `filehandle."
        },
        {
          "id": "s_619",
          "content": "write()` calls are made on a file handle and then a `filehandle.",
          "position": 11,
          "originalSentence": "write()` calls are made on a file handle and then a `filehandle."
        },
        {
          "id": "s_620",
          "content": "writeFile()` call is made, the data will be written from the current position till the end of the file.",
          "position": 12,
          "originalSentence": "writeFile()` call is made, the data will be written from the current position till the end of the file."
        },
        {
          "id": "s_621",
          "content": "It doesn't always write from the beginning of the file.",
          "position": 13,
          "originalSentence": "It doesn't always write from the beginning of the file."
        },
        {
          "id": "s_640",
          "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data from `buffers` should be written.",
          "position": 0,
          "originalSentence": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data from `buffers` should be written."
        },
        {
          "id": "s_641",
          "content": "If `position` is not a `number`, the data will be written at the current position.",
          "position": 1,
          "originalSentence": "If `position` is not a `number`, the data will be written at the current position."
        },
        {
          "id": "s_642",
          "content": "**Default:** `null` Returns: {Promise}",
          "position": 2,
          "originalSentence": "**Default:** `null` Returns: {Promise}"
        },
        {
          "id": "s_643",
          "content": "Write an array of {ArrayBufferView}s to the file.",
          "position": 3,
          "originalSentence": "Write an array of {ArrayBufferView}s to the file."
        },
        {
          "id": "s_644",
          "content": "The promise is fulfilled with an object containing a two properties:",
          "position": 4,
          "originalSentence": "The promise is fulfilled with an object containing a two properties:"
        },
        {
          "id": "s_645",
          "content": "`bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input.",
          "position": 5,
          "originalSentence": "`bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input."
        },
        {
          "id": "s_646",
          "content": "It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
          "position": 6,
          "originalSentence": "It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected)."
        },
        {
          "id": "s_647",
          "content": "On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 7,
          "originalSentence": "On Linux, positional writes don't work when the file is opened in append mode."
        },
        {
          "id": "s_648",
          "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 8,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "s_652",
          "content": "Calls `filehandle.",
          "position": 0,
          "originalSentence": "Calls `filehandle."
        },
        {
          "id": "s_653",
          "content": "close()` and returns a promise that fulfills when the filehandle is closed.",
          "position": 1,
          "originalSentence": "close()` and returns a promise that fulfills when the filehandle is closed."
        },
        {
          "id": "s_688",
          "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs."
        },
        {
          "id": "s_689",
          "content": "F_OK` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 1,
          "originalSentence": "F_OK` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_690",
          "content": "Tests a user's permissions for the file or directory specified by `path`.",
          "position": 2,
          "originalSentence": "Tests a user's permissions for the file or directory specified by `path`."
        },
        {
          "id": "s_691",
          "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
          "position": 3,
          "originalSentence": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed."
        },
        {
          "id": "s_692",
          "content": "`mode` should be either the value `fs.",
          "position": 4,
          "originalSentence": "`mode` should be either the value `fs."
        },
        {
          "id": "s_693",
          "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs.",
          "position": 5,
          "originalSentence": "F_OK` or a mask consisting of the bitwise OR of any of `fs."
        },
        {
          "id": "s_694",
          "content": "R_OK`, `fs.",
          "position": 6,
          "originalSentence": "R_OK`, `fs."
        },
        {
          "id": "s_695",
          "content": "W_OK`, and `fs.",
          "position": 7,
          "originalSentence": "W_OK`, and `fs."
        },
        {
          "id": "s_696",
          "content": "Check [File access constants][] for possible values of `mode`.",
          "position": 8,
          "originalSentence": "Check [File access constants][] for possible values of `mode`."
        },
        {
          "id": "s_697",
          "content": "If the accessibility check is successful, the promise is fulfilled with no value.",
          "position": 9,
          "originalSentence": "If the accessibility check is successful, the promise is fulfilled with no value."
        },
        {
          "id": "s_698",
          "content": "If any of the accessibility checks fail, the promise is rejected with an {Error} object.",
          "position": 10,
          "originalSentence": "If any of the accessibility checks fail, the promise is rejected with an {Error} object."
        },
        {
          "id": "s_699",
          "content": "The following example checks if the file `/etc/passwd` can be read and written by the current process.",
          "position": 11,
          "originalSentence": "The following example checks if the file `/etc/passwd` can be read and written by the current process."
        },
        {
          "id": "s_700",
          "content": "Using `fsPromises.",
          "position": 12,
          "originalSentence": "Using `fsPromises."
        },
        {
          "id": "s_701",
          "content": "access()` to check for the accessibility of a file before calling `fsPromises.",
          "position": 13,
          "originalSentence": "access()` to check for the accessibility of a file before calling `fsPromises."
        },
        {
          "id": "s_702",
          "content": "open()` is not recommended.",
          "position": 14,
          "originalSentence": "open()` is not recommended."
        },
        {
          "id": "s_703",
          "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
          "position": 15,
          "originalSentence": "Doing so introduces a race condition, since other processes may change the file's state between the two calls."
        },
        {
          "id": "s_704",
          "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
          "position": 16,
          "originalSentence": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible."
        },
        {
          "id": "s_727",
          "content": "`path` {string|Buffer|URL|FileHandle} filename or {FileHandle} `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|FileHandle} filename or {FileHandle} `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_728",
          "content": "**Default:** `'a'`.",
          "position": 1,
          "originalSentence": "**Default:** `'a'`."
        },
        {
          "id": "s_729",
          "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it."
        },
        {
          "id": "s_730",
          "content": "**Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_731",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 4,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_732",
          "content": "Asynchronously append data to a file, creating the file if it does not yet exist.",
          "position": 5,
          "originalSentence": "Asynchronously append data to a file, creating the file if it does not yet exist."
        },
        {
          "id": "s_733",
          "content": "`data` can be a string or a {Buffer}.",
          "position": 6,
          "originalSentence": "`data` can be a string or a {Buffer}."
        },
        {
          "id": "s_734",
          "content": "If `options` is a string, then it specifies the `encoding`.",
          "position": 7,
          "originalSentence": "If `options` is a string, then it specifies the `encoding`."
        },
        {
          "id": "s_735",
          "content": "The `mode` option only affects the newly created file.",
          "position": 8,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "s_736",
          "content": "open()`][] for more details.",
          "position": 9,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "s_737",
          "content": "The `path` may be specified as a {FileHandle} that has been opened for appending (using `fsPromises.",
          "position": 10,
          "originalSentence": "The `path` may be specified as a {FileHandle} that has been opened for appending (using `fsPromises."
        },
        {
          "id": "s_741",
          "content": "`path` {string|Buffer|URL} `mode` {string|integer} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {string|integer} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_742",
          "content": "Changes the permissions of a file.",
          "position": 1,
          "originalSentence": "Changes the permissions of a file."
        },
        {
          "id": "s_746",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_747",
          "content": "Changes the ownership of a file.",
          "position": 1,
          "originalSentence": "Changes the ownership of a file."
        },
        {
          "id": "s_776",
          "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} Optional modifiers that specify the behavior of the copy operation.",
          "position": 0,
          "originalSentence": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} Optional modifiers that specify the behavior of the copy operation."
        },
        {
          "id": "s_777",
          "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
          "position": 1,
          "originalSentence": "It is possible to create a mask consisting of the bitwise OR of two or more values (e."
        },
        {
          "id": "s_778",
          "content": "COPYFILE_EXCL | fs.",
          "position": 2,
          "originalSentence": "COPYFILE_EXCL | fs."
        },
        {
          "id": "s_779",
          "content": "COPYFILE_FICLONE`) **Default:** `0`.",
          "position": 3,
          "originalSentence": "COPYFILE_FICLONE`) **Default:** `0`."
        },
        {
          "id": "s_780",
          "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
          "position": 4,
          "originalSentence": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists."
        },
        {
          "id": "s_781",
          "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 5,
          "originalSentence": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "s_782",
          "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
          "position": 6,
          "originalSentence": "If the platform does not support copy-on-write, then a fallback copy mechanism is used."
        },
        {
          "id": "s_783",
          "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 7,
          "originalSentence": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "s_784",
          "content": "If the platform does not support copy-on-write, then the operation will fail.",
          "position": 8,
          "originalSentence": "If the platform does not support copy-on-write, then the operation will fail."
        },
        {
          "id": "s_785",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 9,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_786",
          "content": "Asynchronously copies `src` to `dest`.",
          "position": 10,
          "originalSentence": "Asynchronously copies `src` to `dest`."
        },
        {
          "id": "s_787",
          "content": "By default, `dest` is overwritten if it already exists.",
          "position": 11,
          "originalSentence": "By default, `dest` is overwritten if it already exists."
        },
        {
          "id": "s_788",
          "content": "No guarantees are made about the atomicity of the copy operation.",
          "position": 12,
          "originalSentence": "No guarantees are made about the atomicity of the copy operation."
        },
        {
          "id": "s_789",
          "content": "If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination.",
          "position": 13,
          "originalSentence": "If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination."
        },
        {
          "id": "s_845",
          "content": "`src` {string|URL} source path to copy.",
          "position": 0,
          "originalSentence": "`src` {string|URL} source path to copy."
        },
        {
          "id": "s_846",
          "content": "`dest` {string|URL} destination path to copy to.",
          "position": 1,
          "originalSentence": "`dest` {string|URL} destination path to copy to."
        },
        {
          "id": "s_847",
          "content": "`options` {Object} * `dereference` {boolean} dereference symlinks.",
          "position": 2,
          "originalSentence": "`options` {Object} * `dereference` {boolean} dereference symlinks."
        },
        {
          "id": "s_848",
          "content": "**Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_849",
          "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
          "position": 4,
          "originalSentence": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error."
        },
        {
          "id": "s_850",
          "content": "**Default:** `false`.",
          "position": 5,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_851",
          "content": "* `filter` {Function} Function to filter copied files/directories.",
          "position": 6,
          "originalSentence": "* `filter` {Function} Function to filter copied files/directories."
        },
        {
          "id": "s_852",
          "content": "Return `true` to copy the item, `false` to ignore it.",
          "position": 7,
          "originalSentence": "Return `true` to copy the item, `false` to ignore it."
        },
        {
          "id": "s_853",
          "content": "When ignoring a directory, all of its contents will be skipped as well.",
          "position": 8,
          "originalSentence": "When ignoring a directory, all of its contents will be skipped as well."
        },
        {
          "id": "s_854",
          "content": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
          "position": 9,
          "originalSentence": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`."
        },
        {
          "id": "s_855",
          "content": "* `src` {string} source path to copy.",
          "position": 10,
          "originalSentence": "* `src` {string} source path to copy."
        },
        {
          "id": "s_856",
          "content": "* `dest` {string} destination path to copy to.",
          "position": 11,
          "originalSentence": "* `dest` {string} destination path to copy to."
        },
        {
          "id": "s_857",
          "content": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
          "position": 12,
          "originalSentence": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value."
        },
        {
          "id": "s_858",
          "content": "* `force` {boolean} overwrite existing file or directory.",
          "position": 13,
          "originalSentence": "* `force` {boolean} overwrite existing file or directory."
        },
        {
          "id": "s_859",
          "content": "The copy operation will ignore errors if you set this to false and the destination exists.",
          "position": 14,
          "originalSentence": "The copy operation will ignore errors if you set this to false and the destination exists."
        },
        {
          "id": "s_860",
          "content": "Use the `errorOnExist` option to change this behavior.",
          "position": 15,
          "originalSentence": "Use the `errorOnExist` option to change this behavior."
        },
        {
          "id": "s_861",
          "content": "**Default:** `true`.",
          "position": 16,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "s_862",
          "content": "* `mode` {integer} modifiers for copy operation.",
          "position": 17,
          "originalSentence": "* `mode` {integer} modifiers for copy operation."
        },
        {
          "id": "s_863",
          "content": "**Default:** `0`.",
          "position": 18,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "s_864",
          "content": "See `mode` flag of [`fsPromises.",
          "position": 19,
          "originalSentence": "See `mode` flag of [`fsPromises."
        },
        {
          "id": "s_865",
          "content": "copyFile()`][].",
          "position": 20,
          "originalSentence": "copyFile()`][]."
        },
        {
          "id": "s_866",
          "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
          "position": 21,
          "originalSentence": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved."
        },
        {
          "id": "s_867",
          "content": "**Default:** `false`.",
          "position": 22,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_868",
          "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
          "position": 23,
          "originalSentence": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped."
        },
        {
          "id": "s_869",
          "content": "**Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 24,
          "originalSentence": "**Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_870",
          "content": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
          "position": 25,
          "originalSentence": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files."
        },
        {
          "id": "s_871",
          "content": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 26,
          "originalSentence": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`."
        },
        {
          "id": "s_894",
          "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
          "position": 0,
          "originalSentence": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory."
        },
        {
          "id": "s_895",
          "content": "**Default:** `process.",
          "position": 1,
          "originalSentence": "**Default:** `process."
        },
        {
          "id": "s_896",
          "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
          "position": 2,
          "originalSentence": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded."
        },
        {
          "id": "s_897",
          "content": "If a function is provided, return `true` to exclude the item, `false` to include it.",
          "position": 3,
          "originalSentence": "If a function is provided, return `true` to exclude the item, `false` to include it."
        },
        {
          "id": "s_898",
          "content": "**Default:** `undefined`.",
          "position": 4,
          "originalSentence": "**Default:** `undefined`."
        },
        {
          "id": "s_899",
          "content": "If a string array is provided, each string should be a glob pattern that specifies paths to exclude.",
          "position": 5,
          "originalSentence": "If a string array is provided, each string should be a glob pattern that specifies paths to exclude."
        },
        {
          "id": "s_900",
          "content": "Note: Negation patterns (e.",
          "position": 6,
          "originalSentence": "Note: Negation patterns (e."
        },
        {
          "id": "s_901",
          "content": "js') are not supported.",
          "position": 7,
          "originalSentence": "js') are not supported."
        },
        {
          "id": "s_902",
          "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
          "position": 8,
          "originalSentence": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise."
        },
        {
          "id": "s_903",
          "content": "**Default:** `false`.",
          "position": 9,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_904",
          "content": "Returns: {AsyncIterator} An AsyncIterator that yields the paths of files that match the pattern.",
          "position": 10,
          "originalSentence": "Returns: {AsyncIterator} An AsyncIterator that yields the paths of files that match the pattern."
        },
        {
          "id": "s_911",
          "content": "`path` {string|Buffer|URL} `mode` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_912",
          "content": "Changes the permissions on a symbolic link.",
          "position": 1,
          "originalSentence": "Changes the permissions on a symbolic link."
        },
        {
          "id": "s_913",
          "content": "This method is only implemented on macOS.",
          "position": 2,
          "originalSentence": "This method is only implemented on macOS."
        },
        {
          "id": "s_918",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_919",
          "content": "Changes the ownership on a symbolic link.",
          "position": 1,
          "originalSentence": "Changes the ownership on a symbolic link."
        },
        {
          "id": "s_926",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_927",
          "content": "Changes the access and modification times of a file in the same way as [`fsPromises.",
          "position": 1,
          "originalSentence": "Changes the access and modification times of a file in the same way as [`fsPromises."
        },
        {
          "id": "s_928",
          "content": "utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.",
          "position": 2,
          "originalSentence": "utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed."
        },
        {
          "id": "s_935",
          "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_936",
          "content": "Creates a new link from the `existingPath` to the `newPath`.",
          "position": 1,
          "originalSentence": "Creates a new link from the `existingPath` to the `newPath`."
        },
        {
          "id": "s_937",
          "content": "See the POSIX link(2) documentation for more detail.",
          "position": 2,
          "originalSentence": "See the POSIX link(2) documentation for more detail."
        },
        {
          "id": "s_954",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_955",
          "content": "Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "s_956",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_957",
          "content": "Returns: {Promise} Fulfills with the {fs.",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with the {fs."
        },
        {
          "id": "s_958",
          "content": "Stats} object for the given symbolic link `path`.",
          "position": 4,
          "originalSentence": "Stats} object for the given symbolic link `path`."
        },
        {
          "id": "s_959",
          "content": "Equivalent to [`fsPromises.",
          "position": 5,
          "originalSentence": "Equivalent to [`fsPromises."
        },
        {
          "id": "s_960",
          "content": "stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to.",
          "position": 6,
          "originalSentence": "stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to."
        },
        {
          "id": "s_961",
          "content": "Refer to the POSIX lstat(2) document for more detail.",
          "position": 7,
          "originalSentence": "Refer to the POSIX lstat(2) document for more detail."
        },
        {
          "id": "s_978",
          "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows."
        },
        {
          "id": "s_979",
          "content": "**Default:** `0o777`.",
          "position": 1,
          "originalSentence": "**Default:** `0o777`."
        },
        {
          "id": "s_980",
          "content": "Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`.",
          "position": 2,
          "originalSentence": "Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`."
        },
        {
          "id": "s_981",
          "content": "Asynchronously creates a directory.",
          "position": 3,
          "originalSentence": "Asynchronously creates a directory."
        },
        {
          "id": "s_982",
          "content": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)",
          "position": 4,
          "originalSentence": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)"
        },
        {
          "id": "s_983",
          "content": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
          "position": 5,
          "originalSentence": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created."
        },
        {
          "id": "s_984",
          "content": "Calling `fsPromises.",
          "position": 6,
          "originalSentence": "Calling `fsPromises."
        },
        {
          "id": "s_985",
          "content": "mkdir()` when `path` is a directory that exists results in a rejection only when `recursive` is false.",
          "position": 7,
          "originalSentence": "mkdir()` when `path` is a directory that exists results in a rejection only when `recursive` is false."
        },
        {
          "id": "s_1004",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a string containing the file system path of the newly created temporary directory.",
          "position": 0,
          "originalSentence": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a string containing the file system path of the newly created temporary directory."
        },
        {
          "id": "s_1005",
          "content": "Creates a unique temporary directory.",
          "position": 1,
          "originalSentence": "Creates a unique temporary directory."
        },
        {
          "id": "s_1006",
          "content": "A unique directory name is generated by appending six random characters to the end of the provided `prefix`.",
          "position": 2,
          "originalSentence": "A unique directory name is generated by appending six random characters to the end of the provided `prefix`."
        },
        {
          "id": "s_1007",
          "content": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
          "position": 3,
          "originalSentence": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`."
        },
        {
          "id": "s_1008",
          "content": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
          "position": 4,
          "originalSentence": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters."
        },
        {
          "id": "s_1009",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 5,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use."
        },
        {
          "id": "s_1010",
          "content": "The `fsPromises.",
          "position": 6,
          "originalSentence": "The `fsPromises."
        },
        {
          "id": "s_1011",
          "content": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
          "position": 7,
          "originalSentence": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string."
        },
        {
          "id": "s_1012",
          "content": "For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
          "position": 8,
          "originalSentence": "For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path')."
        },
        {
          "id": "s_1039",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a Promise for an async-disposable Object: * `path` {string} The path of the created directory.",
          "position": 0,
          "originalSentence": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a Promise for an async-disposable Object: * `path` {string} The path of the created directory."
        },
        {
          "id": "s_1040",
          "content": "* `remove` {AsyncFunction} A function which removes the created directory.",
          "position": 1,
          "originalSentence": "* `remove` {AsyncFunction} A function which removes the created directory."
        },
        {
          "id": "s_1041",
          "content": "* `[Symbol.",
          "position": 2,
          "originalSentence": "* `[Symbol."
        },
        {
          "id": "s_1042",
          "content": "asyncDispose]` {AsyncFunction} The same as `remove`.",
          "position": 3,
          "originalSentence": "asyncDispose]` {AsyncFunction} The same as `remove`."
        },
        {
          "id": "s_1043",
          "content": "The resulting Promise holds an async-disposable object whose `path` property holds the created directory path.",
          "position": 4,
          "originalSentence": "The resulting Promise holds an async-disposable object whose `path` property holds the created directory path."
        },
        {
          "id": "s_1044",
          "content": "When the object is disposed, the directory and its contents will be removed asynchronously if it still exists.",
          "position": 5,
          "originalSentence": "When the object is disposed, the directory and its contents will be removed asynchronously if it still exists."
        },
        {
          "id": "s_1045",
          "content": "If the directory cannot be deleted, disposal will throw an error.",
          "position": 6,
          "originalSentence": "If the directory cannot be deleted, disposal will throw an error."
        },
        {
          "id": "s_1046",
          "content": "The object has an async `remove()` method which will perform the same task.",
          "position": 7,
          "originalSentence": "The object has an async `remove()` method which will perform the same task."
        },
        {
          "id": "s_1047",
          "content": "Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises.",
          "position": 8,
          "originalSentence": "Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises."
        },
        {
          "id": "s_1048",
          "content": "mkdtempDisposable('prefix')`.",
          "position": 9,
          "originalSentence": "mkdtempDisposable('prefix')`."
        },
        {
          "id": "s_1049",
          "content": "For detailed information, see the documentation of [`fsPromises.",
          "position": 10,
          "originalSentence": "For detailed information, see the documentation of [`fsPromises."
        },
        {
          "id": "s_1050",
          "content": "mkdtemp()`][].",
          "position": 11,
          "originalSentence": "mkdtemp()`][]."
        },
        {
          "id": "s_1051",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 12,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use."
        },
        {
          "id": "s_1072",
          "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][]."
        },
        {
          "id": "s_1073",
          "content": "**Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "s_1074",
          "content": "`mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created.",
          "position": 2,
          "originalSentence": "`mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created."
        },
        {
          "id": "s_1075",
          "content": "**Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object.",
          "position": 3,
          "originalSentence": "**Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object."
        },
        {
          "id": "s_1076",
          "content": "Opens a {FileHandle}.",
          "position": 4,
          "originalSentence": "Opens a {FileHandle}."
        },
        {
          "id": "s_1077",
          "content": "Refer to the POSIX open(2) documentation for more detail.",
          "position": 5,
          "originalSentence": "Refer to the POSIX open(2) documentation for more detail."
        },
        {
          "id": "s_1078",
          "content": "Some characters (`< > : \" / \\ | ?",
          "position": 6,
          "originalSentence": "Some characters (`< > : \" / \\ | ?"
        },
        {
          "id": "s_1079",
          "content": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
          "position": 7,
          "originalSentence": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]."
        },
        {
          "id": "s_1080",
          "content": "Under NTFS, if the filename contains a colon, Node.",
          "position": 8,
          "originalSentence": "Under NTFS, if the filename contains a colon, Node."
        },
        {
          "id": "s_1081",
          "content": "js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
          "position": 9,
          "originalSentence": "js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams]."
        },
        {
          "id": "s_1106",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory."
        },
        {
          "id": "s_1107",
          "content": "Higher values lead to better performance but higher memory usage.",
          "position": 1,
          "originalSentence": "Higher values lead to better performance but higher memory usage."
        },
        {
          "id": "s_1108",
          "content": "**Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable} containing all sub files and directories.",
          "position": 2,
          "originalSentence": "**Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable} containing all sub files and directories."
        },
        {
          "id": "s_1109",
          "content": "**Default:** `false` Returns: {Promise} Fulfills with an {fs.",
          "position": 3,
          "originalSentence": "**Default:** `false` Returns: {Promise} Fulfills with an {fs."
        },
        {
          "id": "s_1110",
          "content": "Asynchronously open a directory for iterative scanning.",
          "position": 4,
          "originalSentence": "Asynchronously open a directory for iterative scanning."
        },
        {
          "id": "s_1111",
          "content": "See the POSIX opendir(3) documentation for more detail.",
          "position": 5,
          "originalSentence": "See the POSIX opendir(3) documentation for more detail."
        },
        {
          "id": "s_1112",
          "content": "Creates an {fs.",
          "position": 6,
          "originalSentence": "Creates an {fs."
        },
        {
          "id": "s_1113",
          "content": "Dir}, which contains all further functions for reading from and cleaning up the directory.",
          "position": 7,
          "originalSentence": "Dir}, which contains all further functions for reading from and cleaning up the directory."
        },
        {
          "id": "s_1114",
          "content": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 8,
          "originalSentence": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations."
        },
        {
          "id": "s_1115",
          "content": "Example using async iteration:",
          "position": 9,
          "originalSentence": "Example using async iteration:"
        },
        {
          "id": "s_1116",
          "content": "When using the async iterator, the {fs.",
          "position": 10,
          "originalSentence": "When using the async iterator, the {fs."
        },
        {
          "id": "s_1117",
          "content": "Dir} object will be automatically closed after the iterator exits.",
          "position": 11,
          "originalSentence": "Dir} object will be automatically closed after the iterator exits."
        },
        {
          "id": "s_1140",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively."
        },
        {
          "id": "s_1141",
          "content": "In recursive mode, it will list all files, sub files, and directories.",
          "position": 1,
          "originalSentence": "In recursive mode, it will list all files, sub files, and directories."
        },
        {
          "id": "s_1142",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1143",
          "content": "Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.'",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.'"
        },
        {
          "id": "s_1144",
          "content": "` and `'..'",
          "position": 4,
          "originalSentence": "` and `'..'"
        },
        {
          "id": "s_1145",
          "content": "Reads the contents of a directory.",
          "position": 5,
          "originalSentence": "Reads the contents of a directory."
        },
        {
          "id": "s_1146",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames.",
          "position": 6,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames."
        },
        {
          "id": "s_1147",
          "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
          "position": 7,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects."
        },
        {
          "id": "s_1148",
          "content": "If `options.",
          "position": 8,
          "originalSentence": "If `options."
        },
        {
          "id": "s_1149",
          "content": "withFileTypes` is set to `true`, the returned array will contain {fs.",
          "position": 9,
          "originalSentence": "withFileTypes` is set to `true`, the returned array will contain {fs."
        },
        {
          "id": "s_1150",
          "content": "Dirent} objects.",
          "position": 10,
          "originalSentence": "Dirent} objects."
        },
        {
          "id": "s_1189",
          "content": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_1190",
          "content": "**Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "s_1191",
          "content": "* `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file.",
          "position": 2,
          "originalSentence": "* `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file."
        },
        {
          "id": "s_1192",
          "content": "Asynchronously reads the entire contents of a file.",
          "position": 3,
          "originalSentence": "Asynchronously reads the entire contents of a file."
        },
        {
          "id": "s_1193",
          "content": "If no encoding is specified (using `options.",
          "position": 4,
          "originalSentence": "If no encoding is specified (using `options."
        },
        {
          "id": "s_1194",
          "content": "encoding`), the data is returned as a {Buffer} object.",
          "position": 5,
          "originalSentence": "encoding`), the data is returned as a {Buffer} object."
        },
        {
          "id": "s_1195",
          "content": "Otherwise, the data will be a string.",
          "position": 6,
          "originalSentence": "Otherwise, the data will be a string."
        },
        {
          "id": "s_1196",
          "content": "If `options` is a string, then it specifies the encoding.",
          "position": 7,
          "originalSentence": "If `options` is a string, then it specifies the encoding."
        },
        {
          "id": "s_1197",
          "content": "When the `path` is a directory, the behavior of `fsPromises.",
          "position": 8,
          "originalSentence": "When the `path` is a directory, the behavior of `fsPromises."
        },
        {
          "id": "s_1198",
          "content": "readFile()` is platform-specific.",
          "position": 9,
          "originalSentence": "readFile()` is platform-specific."
        },
        {
          "id": "s_1199",
          "content": "On macOS, Linux, and Windows, the promise will be rejected with an error.",
          "position": 10,
          "originalSentence": "On macOS, Linux, and Windows, the promise will be rejected with an error."
        },
        {
          "id": "s_1200",
          "content": "On FreeBSD, a representation of the directory's contents will be returned.",
          "position": 11,
          "originalSentence": "On FreeBSD, a representation of the directory's contents will be returned."
        },
        {
          "id": "s_1201",
          "content": "An example of reading a `package.",
          "position": 12,
          "originalSentence": "An example of reading a `package."
        },
        {
          "id": "s_1202",
          "content": "json` file located in the same directory of the running code:",
          "position": 13,
          "originalSentence": "json` file located in the same directory of the running code:"
        },
        {
          "id": "s_1203",
          "content": "It is possible to abort an ongoing `readFile` using an {AbortSignal}.",
          "position": 14,
          "originalSentence": "It is possible to abort an ongoing `readFile` using an {AbortSignal}."
        },
        {
          "id": "s_1204",
          "content": "If a request is aborted the promise returned is rejected with an `AbortError`:",
          "position": 15,
          "originalSentence": "If a request is aborted the promise returned is rejected with an `AbortError`:"
        },
        {
          "id": "s_1205",
          "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 16,
          "originalSentence": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs."
        },
        {
          "id": "s_1206",
          "content": "readFile` performs.",
          "position": 17,
          "originalSentence": "readFile` performs."
        },
        {
          "id": "s_1207",
          "content": "Any specified {FileHandle} has to support reading.",
          "position": 18,
          "originalSentence": "Any specified {FileHandle} has to support reading."
        },
        {
          "id": "s_1220",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the `linkString` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the `linkString` upon success."
        },
        {
          "id": "s_1221",
          "content": "Reads the contents of the symbolic link referred to by `path`.",
          "position": 1,
          "originalSentence": "Reads the contents of the symbolic link referred to by `path`."
        },
        {
          "id": "s_1222",
          "content": "See the POSIX readlink(2) documentation for more detail.",
          "position": 2,
          "originalSentence": "See the POSIX readlink(2) documentation for more detail."
        },
        {
          "id": "s_1223",
          "content": "The promise is fulfilled with the `linkString` upon success.",
          "position": 3,
          "originalSentence": "The promise is fulfilled with the `linkString` upon success."
        },
        {
          "id": "s_1224",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
          "position": 4,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned."
        },
        {
          "id": "s_1225",
          "content": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 5,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object."
        },
        {
          "id": "s_1244",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the resolved path upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the resolved path upon success."
        },
        {
          "id": "s_1245",
          "content": "Determines the actual location of `path` using the same semantics as the `fs.",
          "position": 1,
          "originalSentence": "Determines the actual location of `path` using the same semantics as the `fs."
        },
        {
          "id": "s_1246",
          "content": "native()` function.",
          "position": 2,
          "originalSentence": "native()` function."
        },
        {
          "id": "s_1247",
          "content": "Only paths that can be converted to UTF8 strings are supported.",
          "position": 3,
          "originalSentence": "Only paths that can be converted to UTF8 strings are supported."
        },
        {
          "id": "s_1248",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path.",
          "position": 4,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path."
        },
        {
          "id": "s_1249",
          "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 5,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object."
        },
        {
          "id": "s_1250",
          "content": "On Linux, when Node.",
          "position": 6,
          "originalSentence": "On Linux, when Node."
        },
        {
          "id": "s_1251",
          "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
          "position": 7,
          "originalSentence": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work."
        },
        {
          "id": "s_1252",
          "content": "Glibc does not have this restriction.",
          "position": 8,
          "originalSentence": "Glibc does not have this restriction."
        },
        {
          "id": "s_1256",
          "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_1257",
          "content": "Renames `oldPath` to `newPath`.",
          "position": 1,
          "originalSentence": "Renames `oldPath` to `newPath`."
        },
        {
          "id": "s_1276",
          "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed."
        },
        {
          "id": "s_1277",
          "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
          "position": 1,
          "originalSentence": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed."
        },
        {
          "id": "s_1278",
          "content": "The `options` argument is still accepted for backwards compatibility but it is not used.",
          "position": 2,
          "originalSentence": "The `options` argument is still accepted for backwards compatibility but it is not used."
        },
        {
          "id": "s_1279",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_1280",
          "content": "Removes the directory identified by `path`.",
          "position": 4,
          "originalSentence": "Removes the directory identified by `path`."
        },
        {
          "id": "s_1281",
          "content": "Using `fsPromises.",
          "position": 5,
          "originalSentence": "Using `fsPromises."
        },
        {
          "id": "s_1282",
          "content": "rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
          "position": 6,
          "originalSentence": "rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX."
        },
        {
          "id": "s_1283",
          "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises.",
          "position": 7,
          "originalSentence": "To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises."
        },
        {
          "id": "s_1284",
          "content": "rm()`][] with options `{ recursive: true, force: true }`.",
          "position": 8,
          "originalSentence": "rm()`][] with options `{ recursive: true, force: true }`."
        },
        {
          "id": "s_1315",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist."
        },
        {
          "id": "s_1316",
          "content": "**Default:** `false`.",
          "position": 1,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1317",
          "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
          "position": 2,
          "originalSentence": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node."
        },
        {
          "id": "s_1318",
          "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
          "position": 3,
          "originalSentence": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try."
        },
        {
          "id": "s_1319",
          "content": "This option represents the number of retries.",
          "position": 4,
          "originalSentence": "This option represents the number of retries."
        },
        {
          "id": "s_1320",
          "content": "This option is ignored if the `recursive` option is not `true`.",
          "position": 5,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "s_1321",
          "content": "**Default:** `0`.",
          "position": 6,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "s_1322",
          "content": "* `recursive` {boolean} If `true`, perform a recursive directory removal.",
          "position": 7,
          "originalSentence": "* `recursive` {boolean} If `true`, perform a recursive directory removal."
        },
        {
          "id": "s_1323",
          "content": "In recursive mode operations are retried on failure.",
          "position": 8,
          "originalSentence": "In recursive mode operations are retried on failure."
        },
        {
          "id": "s_1324",
          "content": "**Default:** `false`.",
          "position": 9,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1325",
          "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
          "position": 10,
          "originalSentence": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries."
        },
        {
          "id": "s_1326",
          "content": "This option is ignored if the `recursive` option is not `true`.",
          "position": 11,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "s_1327",
          "content": "**Default:** `100`.",
          "position": 12,
          "originalSentence": "**Default:** `100`."
        },
        {
          "id": "s_1328",
          "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 13,
          "originalSentence": "Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_1329",
          "content": "Removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 14,
          "originalSentence": "Removes files and directories (modeled on the standard POSIX `rm` utility)."
        },
        {
          "id": "s_1340",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_1341",
          "content": "Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "s_1342",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1343",
          "content": "Returns: {Promise} Fulfills with the {fs.",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with the {fs."
        },
        {
          "id": "s_1344",
          "content": "Stats} object for the given `path`.",
          "position": 4,
          "originalSentence": "Stats} object for the given `path`."
        },
        {
          "id": "s_1355",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_1356",
          "content": "StatFs} object should be `bigint`.",
          "position": 1,
          "originalSentence": "StatFs} object should be `bigint`."
        },
        {
          "id": "s_1357",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1358",
          "content": "Returns: {Promise} Fulfills with the {fs.",
          "position": 3,
          "originalSentence": "Returns: {Promise} Fulfills with the {fs."
        },
        {
          "id": "s_1359",
          "content": "StatFs} object for the given `path`.",
          "position": 4,
          "originalSentence": "StatFs} object for the given `path`."
        },
        {
          "id": "s_1378",
          "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_1379",
          "content": "Creates a symbolic link.",
          "position": 1,
          "originalSentence": "Creates a symbolic link."
        },
        {
          "id": "s_1380",
          "content": "The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`.",
          "position": 2,
          "originalSentence": "The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`."
        },
        {
          "id": "s_1381",
          "content": "If the `type` argument is `null`, Node.",
          "position": 3,
          "originalSentence": "If the `type` argument is `null`, Node."
        },
        {
          "id": "s_1382",
          "content": "js will autodetect `target` type and use `'file'` or `'dir'`.",
          "position": 4,
          "originalSentence": "js will autodetect `target` type and use `'file'` or `'dir'`."
        },
        {
          "id": "s_1383",
          "content": "If the `target` does not exist, `'file'` will be used.",
          "position": 5,
          "originalSentence": "If the `target` does not exist, `'file'` will be used."
        },
        {
          "id": "s_1384",
          "content": "Windows junction points require the destination path to be absolute.",
          "position": 6,
          "originalSentence": "Windows junction points require the destination path to be absolute."
        },
        {
          "id": "s_1385",
          "content": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
          "position": 7,
          "originalSentence": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path."
        },
        {
          "id": "s_1386",
          "content": "Junction points on NTFS volumes can only point to directories.",
          "position": 8,
          "originalSentence": "Junction points on NTFS volumes can only point to directories."
        },
        {
          "id": "s_1391",
          "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_1392",
          "content": "Truncates (shortens or extends the length) of the content at `path` to `len` bytes.",
          "position": 1,
          "originalSentence": "Truncates (shortens or extends the length) of the content at `path` to `len` bytes."
        },
        {
          "id": "s_1401",
          "content": "`path` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_1402",
          "content": "If `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers.",
          "position": 1,
          "originalSentence": "If `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers."
        },
        {
          "id": "s_1403",
          "content": "If the `path` refers to a file path that is not a symbolic link, the file is deleted.",
          "position": 2,
          "originalSentence": "If the `path` refers to a file path that is not a symbolic link, the file is deleted."
        },
        {
          "id": "s_1404",
          "content": "See the POSIX unlink(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX unlink(2) documentation for more detail."
        },
        {
          "id": "s_1415",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_1416",
          "content": "Change the file system timestamps of the object referenced by `path`.",
          "position": 1,
          "originalSentence": "Change the file system timestamps of the object referenced by `path`."
        },
        {
          "id": "s_1417",
          "content": "The `atime` and `mtime` arguments follow these rules:",
          "position": 2,
          "originalSentence": "The `atime` and `mtime` arguments follow these rules:"
        },
        {
          "id": "s_1418",
          "content": "Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789.",
          "position": 3,
          "originalSentence": "Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789."
        },
        {
          "id": "s_1419",
          "content": "If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
          "position": 4,
          "originalSentence": "If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown."
        },
        {
          "id": "s_1457",
          "content": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched.",
          "position": 0,
          "originalSentence": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched."
        },
        {
          "id": "s_1458",
          "content": "**Default:** `true`.",
          "position": 1,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "s_1459",
          "content": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
          "position": 2,
          "originalSentence": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory."
        },
        {
          "id": "s_1460",
          "content": "This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
          "position": 3,
          "originalSentence": "This applies when a directory is specified, and only on supported platforms (See [caveats][])."
        },
        {
          "id": "s_1461",
          "content": "**Default:** `false`.",
          "position": 4,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1462",
          "content": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
          "position": 5,
          "originalSentence": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener."
        },
        {
          "id": "s_1463",
          "content": "**Default:** `'utf8'`.",
          "position": 6,
          "originalSentence": "**Default:** `'utf8'`."
        },
        {
          "id": "s_1464",
          "content": "* `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop.",
          "position": 7,
          "originalSentence": "* `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop."
        },
        {
          "id": "s_1465",
          "content": "* `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned.",
          "position": 8,
          "originalSentence": "* `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned."
        },
        {
          "id": "s_1466",
          "content": "**Default:** `2048`.",
          "position": 9,
          "originalSentence": "**Default:** `2048`."
        },
        {
          "id": "s_1467",
          "content": "* `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows.",
          "position": 10,
          "originalSentence": "* `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows."
        },
        {
          "id": "s_1468",
          "content": "`'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception.",
          "position": 11,
          "originalSentence": "`'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception."
        },
        {
          "id": "s_1469",
          "content": "**Default:** `'ignore'`.",
          "position": 12,
          "originalSentence": "**Default:** `'ignore'`."
        },
        {
          "id": "s_1470",
          "content": "Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed.",
          "position": 13,
          "originalSentence": "Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed."
        },
        {
          "id": "s_1471",
          "content": "Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory.",
          "position": 14,
          "originalSentence": "Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory."
        },
        {
          "id": "s_1472",
          "content": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory.",
          "position": 15,
          "originalSentence": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory."
        },
        {
          "id": "s_1473",
          "content": "All the [caveats][] for `fs.",
          "position": 16,
          "originalSentence": "All the [caveats][] for `fs."
        },
        {
          "id": "s_1474",
          "content": "watch()` also apply to `fsPromises.",
          "position": 17,
          "originalSentence": "watch()` also apply to `fsPromises."
        },
        {
          "id": "s_1528",
          "content": "`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_1529",
          "content": "**Default:** `'w'`.",
          "position": 1,
          "originalSentence": "**Default:** `'w'`."
        },
        {
          "id": "s_1530",
          "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `filehandle.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `filehandle."
        },
        {
          "id": "s_1531",
          "content": "sync()` is used to flush the data.",
          "position": 3,
          "originalSentence": "sync()` is used to flush the data."
        },
        {
          "id": "s_1532",
          "content": "**Default:** `false`.",
          "position": 4,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1533",
          "content": "* `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success.",
          "position": 5,
          "originalSentence": "* `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success."
        },
        {
          "id": "s_1534",
          "content": "Asynchronously writes data to a file, replacing the file if it already exists.",
          "position": 6,
          "originalSentence": "Asynchronously writes data to a file, replacing the file if it already exists."
        },
        {
          "id": "s_1535",
          "content": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
          "position": 7,
          "originalSentence": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object."
        },
        {
          "id": "s_1536",
          "content": "The `encoding` option is ignored if `data` is a buffer.",
          "position": 8,
          "originalSentence": "The `encoding` option is ignored if `data` is a buffer."
        },
        {
          "id": "s_1537",
          "content": "If `options` is a string, then it specifies the encoding.",
          "position": 9,
          "originalSentence": "If `options` is a string, then it specifies the encoding."
        },
        {
          "id": "s_1538",
          "content": "The `mode` option only affects the newly created file.",
          "position": 10,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "s_1539",
          "content": "open()`][] for more details.",
          "position": 11,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "s_1540",
          "content": "Any specified {FileHandle} has to support writing.",
          "position": 12,
          "originalSentence": "Any specified {FileHandle} has to support writing."
        },
        {
          "id": "s_1541",
          "content": "It is unsafe to use `fsPromises.",
          "position": 13,
          "originalSentence": "It is unsafe to use `fsPromises."
        },
        {
          "id": "s_1542",
          "content": "writeFile()` multiple times on the same file without waiting for the promise to be settled.",
          "position": 14,
          "originalSentence": "writeFile()` multiple times on the same file without waiting for the promise to be settled."
        },
        {
          "id": "s_1543",
          "content": "Similarly to `fsPromises.",
          "position": 15,
          "originalSentence": "Similarly to `fsPromises."
        },
        {
          "id": "s_1544",
          "content": "readFile` - `fsPromises.",
          "position": 16,
          "originalSentence": "readFile` - `fsPromises."
        },
        {
          "id": "s_1545",
          "content": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
          "position": 17,
          "originalSentence": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it."
        },
        {
          "id": "s_1546",
          "content": "For performance sensitive code consider using [`fs.",
          "position": 18,
          "originalSentence": "For performance sensitive code consider using [`fs."
        },
        {
          "id": "s_1547",
          "content": "createWriteStream()`][] or [`filehandle.",
          "position": 19,
          "originalSentence": "createWriteStream()`][] or [`filehandle."
        },
        {
          "id": "s_1548",
          "content": "createWriteStream()`][].",
          "position": 20,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "s_1549",
          "content": "It is possible to use an {AbortSignal} to cancel an `fsPromises.",
          "position": 21,
          "originalSentence": "It is possible to use an {AbortSignal} to cancel an `fsPromises."
        },
        {
          "id": "s_1550",
          "content": "writeFile()`.",
          "position": 22,
          "originalSentence": "writeFile()`."
        },
        {
          "id": "s_1551",
          "content": "Cancelation is \"best effort\", and some amount of data is likely still to be written.",
          "position": 23,
          "originalSentence": "Cancelation is \"best effort\", and some amount of data is likely still to be written."
        },
        {
          "id": "s_1552",
          "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 24,
          "originalSentence": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs."
        },
        {
          "id": "s_1553",
          "content": "writeFile` performs.",
          "position": 25,
          "originalSentence": "writeFile` performs."
        },
        {
          "id": "s_1564",
          "content": "Type: {Object}",
          "position": 0,
          "originalSentence": "Type: {Object}"
        },
        {
          "id": "s_1565",
          "content": "Returns an object containing commonly used constants for file system operations.",
          "position": 1,
          "originalSentence": "Returns an object containing commonly used constants for file system operations."
        },
        {
          "id": "s_1566",
          "content": "The object is the same as `fs.",
          "position": 2,
          "originalSentence": "The object is the same as `fs."
        },
        {
          "id": "s_1567",
          "content": "constants`.",
          "position": 3,
          "originalSentence": "constants`."
        },
        {
          "id": "s_1568",
          "content": "See [FS constants][] for more details.",
          "position": 4,
          "originalSentence": "See [FS constants][] for more details."
        },
        {
          "id": "s_1579",
          "content": "The callback APIs perform all operations asynchronously, without blocking the event loop, then invoke a callback function upon completion or error.",
          "position": 0,
          "originalSentence": "The callback APIs perform all operations asynchronously, without blocking the event loop, then invoke a callback function upon completion or error."
        },
        {
          "id": "s_1580",
          "content": "The callback APIs use the underlying Node.",
          "position": 1,
          "originalSentence": "The callback APIs use the underlying Node."
        },
        {
          "id": "s_1581",
          "content": "js threadpool to perform file system operations off the event loop thread.",
          "position": 2,
          "originalSentence": "js threadpool to perform file system operations off the event loop thread."
        },
        {
          "id": "s_1582",
          "content": "These operations are not synchronized or threadsafe.",
          "position": 3,
          "originalSentence": "These operations are not synchronized or threadsafe."
        },
        {
          "id": "s_1583",
          "content": "Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
          "position": 4,
          "originalSentence": "Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur."
        },
        {
          "id": "s_1641",
          "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs."
        },
        {
          "id": "s_1642",
          "content": "F_OK` `callback` {Function} * `err` {Error}",
          "position": 1,
          "originalSentence": "F_OK` `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_1643",
          "content": "Tests a user's permissions for the file or directory specified by `path`.",
          "position": 2,
          "originalSentence": "Tests a user's permissions for the file or directory specified by `path`."
        },
        {
          "id": "s_1644",
          "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
          "position": 3,
          "originalSentence": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed."
        },
        {
          "id": "s_1645",
          "content": "`mode` should be either the value `fs.",
          "position": 4,
          "originalSentence": "`mode` should be either the value `fs."
        },
        {
          "id": "s_1646",
          "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs.",
          "position": 5,
          "originalSentence": "F_OK` or a mask consisting of the bitwise OR of any of `fs."
        },
        {
          "id": "s_1647",
          "content": "R_OK`, `fs.",
          "position": 6,
          "originalSentence": "R_OK`, `fs."
        },
        {
          "id": "s_1648",
          "content": "W_OK`, and `fs.",
          "position": 7,
          "originalSentence": "W_OK`, and `fs."
        },
        {
          "id": "s_1649",
          "content": "Check [File access constants][] for possible values of `mode`.",
          "position": 8,
          "originalSentence": "Check [File access constants][] for possible values of `mode`."
        },
        {
          "id": "s_1650",
          "content": "The final argument, `callback`, is a callback function that is invoked with a possible error argument.",
          "position": 9,
          "originalSentence": "The final argument, `callback`, is a callback function that is invoked with a possible error argument."
        },
        {
          "id": "s_1651",
          "content": "If any of the accessibility checks fail, the error argument will be an `Error` object.",
          "position": 10,
          "originalSentence": "If any of the accessibility checks fail, the error argument will be an `Error` object."
        },
        {
          "id": "s_1652",
          "content": "The following examples check if `package.",
          "position": 11,
          "originalSentence": "The following examples check if `package."
        },
        {
          "id": "s_1653",
          "content": "json` exists, and if it is readable or writable.",
          "position": 12,
          "originalSentence": "json` exists, and if it is readable or writable."
        },
        {
          "id": "s_1654",
          "content": "Do not use `fs.",
          "position": 13,
          "originalSentence": "Do not use `fs."
        },
        {
          "id": "s_1655",
          "content": "access()` to check for the accessibility of a file before calling `fs.",
          "position": 14,
          "originalSentence": "access()` to check for the accessibility of a file before calling `fs."
        },
        {
          "id": "s_1656",
          "content": "open()`, `fs.",
          "position": 15,
          "originalSentence": "open()`, `fs."
        },
        {
          "id": "s_1657",
          "content": "readFile()`, or `fs.",
          "position": 16,
          "originalSentence": "readFile()`, or `fs."
        },
        {
          "id": "s_1658",
          "content": "writeFile()`.",
          "position": 17,
          "originalSentence": "writeFile()`."
        },
        {
          "id": "s_1659",
          "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
          "position": 18,
          "originalSentence": "Doing so introduces a race condition, since other processes may change the file's state between the two calls."
        },
        {
          "id": "s_1660",
          "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
          "position": 19,
          "originalSentence": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible."
        },
        {
          "id": "s_1661",
          "content": "**write (NOT RECOMMENDED)**",
          "position": 20,
          "originalSentence": "**write (NOT RECOMMENDED)**"
        },
        {
          "id": "s_1662",
          "content": "**write (RECOMMENDED)**",
          "position": 21,
          "originalSentence": "**write (RECOMMENDED)**"
        },
        {
          "id": "s_1663",
          "content": "**read (NOT RECOMMENDED)**",
          "position": 22,
          "originalSentence": "**read (NOT RECOMMENDED)**"
        },
        {
          "id": "s_1664",
          "content": "**read (RECOMMENDED)**",
          "position": 23,
          "originalSentence": "**read (RECOMMENDED)**"
        },
        {
          "id": "s_1665",
          "content": "The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
          "position": 24,
          "originalSentence": "The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any."
        },
        {
          "id": "s_1666",
          "content": "In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process.",
          "position": 25,
          "originalSentence": "In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process."
        },
        {
          "id": "s_1667",
          "content": "On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory.",
          "position": 26,
          "originalSentence": "On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory."
        },
        {
          "id": "s_1668",
          "content": "access()` function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it.",
          "position": 27,
          "originalSentence": "access()` function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it."
        },
        {
          "id": "s_1697",
          "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_1698",
          "content": "**Default:** `'a'`.",
          "position": 1,
          "originalSentence": "**Default:** `'a'`."
        },
        {
          "id": "s_1699",
          "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it."
        },
        {
          "id": "s_1700",
          "content": "**Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1701",
          "content": "`callback` {Function} * `err` {Error}",
          "position": 4,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_1702",
          "content": "Asynchronously append data to a file, creating the file if it does not yet exist.",
          "position": 5,
          "originalSentence": "Asynchronously append data to a file, creating the file if it does not yet exist."
        },
        {
          "id": "s_1703",
          "content": "`data` can be a string or a {Buffer}.",
          "position": 6,
          "originalSentence": "`data` can be a string or a {Buffer}."
        },
        {
          "id": "s_1704",
          "content": "The `mode` option only affects the newly created file.",
          "position": 7,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "s_1705",
          "content": "open()`][] for more details.",
          "position": 8,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "s_1706",
          "content": "If `options` is a string, then it specifies the encoding:",
          "position": 9,
          "originalSentence": "If `options` is a string, then it specifies the encoding:"
        },
        {
          "id": "s_1707",
          "content": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
          "position": 10,
          "originalSentence": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs."
        },
        {
          "id": "s_1708",
          "content": "open()` or `fs.",
          "position": 11,
          "originalSentence": "open()` or `fs."
        },
        {
          "id": "s_1709",
          "content": "openSync()`).",
          "position": 12,
          "originalSentence": "openSync()`)."
        },
        {
          "id": "s_1710",
          "content": "The file descriptor will not be closed automatically.",
          "position": 13,
          "originalSentence": "The file descriptor will not be closed automatically."
        },
        {
          "id": "s_1719",
          "content": "`path` {string|Buffer|URL} `mode` {string|integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {string|integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_1720",
          "content": "Asynchronously changes the permissions of a file.",
          "position": 1,
          "originalSentence": "Asynchronously changes the permissions of a file."
        },
        {
          "id": "s_1721",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_1722",
          "content": "See the POSIX chmod(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX chmod(2) documentation for more detail."
        },
        {
          "id": "s_1753",
          "content": "The `mode` argument used in both the `fs.",
          "position": 0,
          "originalSentence": "The `mode` argument used in both the `fs."
        },
        {
          "id": "s_1754",
          "content": "chmod()` and `fs.",
          "position": 1,
          "originalSentence": "chmod()` and `fs."
        },
        {
          "id": "s_1755",
          "content": "chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants:",
          "position": 2,
          "originalSentence": "chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants:"
        },
        {
          "id": "s_1756",
          "content": "An easier method of constructing the `mode` is to use a sequence of three octal digits (e.",
          "position": 3,
          "originalSentence": "An easier method of constructing the `mode` is to use a sequence of three octal digits (e."
        },
        {
          "id": "s_1757",
          "content": "The left-most digit (`7` in the example), specifies the permissions for the file owner.",
          "position": 4,
          "originalSentence": "The left-most digit (`7` in the example), specifies the permissions for the file owner."
        },
        {
          "id": "s_1758",
          "content": "The middle digit (`6` in the example), specifies permissions for the group.",
          "position": 5,
          "originalSentence": "The middle digit (`6` in the example), specifies permissions for the group."
        },
        {
          "id": "s_1759",
          "content": "The right-most digit (`5` in the example), specifies the permissions for others.",
          "position": 6,
          "originalSentence": "The right-most digit (`5` in the example), specifies the permissions for others."
        },
        {
          "id": "s_1760",
          "content": "For example, the octal value `0o765` means:",
          "position": 7,
          "originalSentence": "For example, the octal value `0o765` means:"
        },
        {
          "id": "s_1761",
          "content": "The owner may read, write, and execute the file.",
          "position": 8,
          "originalSentence": "The owner may read, write, and execute the file."
        },
        {
          "id": "s_1762",
          "content": "The group may read and write the file.",
          "position": 9,
          "originalSentence": "The group may read and write the file."
        },
        {
          "id": "s_1763",
          "content": "Others may read and execute the file.",
          "position": 10,
          "originalSentence": "Others may read and execute the file."
        },
        {
          "id": "s_1764",
          "content": "When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently.",
          "position": 11,
          "originalSentence": "When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently."
        },
        {
          "id": "s_1765",
          "content": "Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs.",
          "position": 12,
          "originalSentence": "Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs."
        },
        {
          "id": "s_1766",
          "content": "constants`.",
          "position": 13,
          "originalSentence": "constants`."
        },
        {
          "id": "s_1767",
          "content": "Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented.",
          "position": 14,
          "originalSentence": "Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented."
        },
        {
          "id": "s_1776",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_1777",
          "content": "Asynchronously changes owner and group of a file.",
          "position": 1,
          "originalSentence": "Asynchronously changes owner and group of a file."
        },
        {
          "id": "s_1778",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_1779",
          "content": "See the POSIX chown(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX chown(2) documentation for more detail."
        },
        {
          "id": "s_1792",
          "content": "`fd` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_1793",
          "content": "Closes the file descriptor.",
          "position": 1,
          "originalSentence": "Closes the file descriptor."
        },
        {
          "id": "s_1794",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_1795",
          "content": "Calling `fs.",
          "position": 3,
          "originalSentence": "Calling `fs."
        },
        {
          "id": "s_1796",
          "content": "close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
          "position": 4,
          "originalSentence": "close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior."
        },
        {
          "id": "s_1797",
          "content": "See the POSIX close(2) documentation for more detail.",
          "position": 5,
          "originalSentence": "See the POSIX close(2) documentation for more detail."
        },
        {
          "id": "s_1834",
          "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation.",
          "position": 0,
          "originalSentence": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation."
        },
        {
          "id": "s_1835",
          "content": "**Default:** `0`.",
          "position": 1,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "s_1836",
          "content": "`callback` {Function} * `err` {Error}",
          "position": 2,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_1837",
          "content": "Asynchronously copies `src` to `dest`.",
          "position": 3,
          "originalSentence": "Asynchronously copies `src` to `dest`."
        },
        {
          "id": "s_1838",
          "content": "By default, `dest` is overwritten if it already exists.",
          "position": 4,
          "originalSentence": "By default, `dest` is overwritten if it already exists."
        },
        {
          "id": "s_1839",
          "content": "No arguments other than a possible exception are given to the callback function.",
          "position": 5,
          "originalSentence": "No arguments other than a possible exception are given to the callback function."
        },
        {
          "id": "s_1840",
          "content": "js makes no guarantees about the atomicity of the copy operation.",
          "position": 6,
          "originalSentence": "js makes no guarantees about the atomicity of the copy operation."
        },
        {
          "id": "s_1841",
          "content": "If an error occurs after the destination file has been opened for writing, Node.",
          "position": 7,
          "originalSentence": "If an error occurs after the destination file has been opened for writing, Node."
        },
        {
          "id": "s_1842",
          "content": "js will attempt to remove the destination.",
          "position": 8,
          "originalSentence": "js will attempt to remove the destination."
        },
        {
          "id": "s_1843",
          "content": "`mode` is an optional integer that specifies the behavior of the copy operation.",
          "position": 9,
          "originalSentence": "`mode` is an optional integer that specifies the behavior of the copy operation."
        },
        {
          "id": "s_1844",
          "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
          "position": 10,
          "originalSentence": "It is possible to create a mask consisting of the bitwise OR of two or more values (e."
        },
        {
          "id": "s_1845",
          "content": "COPYFILE_EXCL | fs.",
          "position": 11,
          "originalSentence": "COPYFILE_EXCL | fs."
        },
        {
          "id": "s_1846",
          "content": "COPYFILE_FICLONE`).",
          "position": 12,
          "originalSentence": "COPYFILE_FICLONE`)."
        },
        {
          "id": "s_1847",
          "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
          "position": 13,
          "originalSentence": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists."
        },
        {
          "id": "s_1848",
          "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 14,
          "originalSentence": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "s_1849",
          "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
          "position": 15,
          "originalSentence": "If the platform does not support copy-on-write, then a fallback copy mechanism is used."
        },
        {
          "id": "s_1850",
          "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 16,
          "originalSentence": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "s_1851",
          "content": "If the platform does not support copy-on-write, then the operation will fail.",
          "position": 17,
          "originalSentence": "If the platform does not support copy-on-write, then the operation will fail."
        },
        {
          "id": "s_1907",
          "content": "`src` {string|URL} source path to copy.",
          "position": 0,
          "originalSentence": "`src` {string|URL} source path to copy."
        },
        {
          "id": "s_1908",
          "content": "`dest` {string|URL} destination path to copy to.",
          "position": 1,
          "originalSentence": "`dest` {string|URL} destination path to copy to."
        },
        {
          "id": "s_1909",
          "content": "`options` {Object} * `dereference` {boolean} dereference symlinks.",
          "position": 2,
          "originalSentence": "`options` {Object} * `dereference` {boolean} dereference symlinks."
        },
        {
          "id": "s_1910",
          "content": "**Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1911",
          "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
          "position": 4,
          "originalSentence": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error."
        },
        {
          "id": "s_1912",
          "content": "**Default:** `false`.",
          "position": 5,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1913",
          "content": "* `filter` {Function} Function to filter copied files/directories.",
          "position": 6,
          "originalSentence": "* `filter` {Function} Function to filter copied files/directories."
        },
        {
          "id": "s_1914",
          "content": "Return `true` to copy the item, `false` to ignore it.",
          "position": 7,
          "originalSentence": "Return `true` to copy the item, `false` to ignore it."
        },
        {
          "id": "s_1915",
          "content": "When ignoring a directory, all of its contents will be skipped as well.",
          "position": 8,
          "originalSentence": "When ignoring a directory, all of its contents will be skipped as well."
        },
        {
          "id": "s_1916",
          "content": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
          "position": 9,
          "originalSentence": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`."
        },
        {
          "id": "s_1917",
          "content": "* `src` {string} source path to copy.",
          "position": 10,
          "originalSentence": "* `src` {string} source path to copy."
        },
        {
          "id": "s_1918",
          "content": "* `dest` {string} destination path to copy to.",
          "position": 11,
          "originalSentence": "* `dest` {string} destination path to copy to."
        },
        {
          "id": "s_1919",
          "content": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
          "position": 12,
          "originalSentence": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value."
        },
        {
          "id": "s_1920",
          "content": "* `force` {boolean} overwrite existing file or directory.",
          "position": 13,
          "originalSentence": "* `force` {boolean} overwrite existing file or directory."
        },
        {
          "id": "s_1921",
          "content": "The copy operation will ignore errors if you set this to false and the destination exists.",
          "position": 14,
          "originalSentence": "The copy operation will ignore errors if you set this to false and the destination exists."
        },
        {
          "id": "s_1922",
          "content": "Use the `errorOnExist` option to change this behavior.",
          "position": 15,
          "originalSentence": "Use the `errorOnExist` option to change this behavior."
        },
        {
          "id": "s_1923",
          "content": "**Default:** `true`.",
          "position": 16,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "s_1924",
          "content": "* `mode` {integer} modifiers for copy operation.",
          "position": 17,
          "originalSentence": "* `mode` {integer} modifiers for copy operation."
        },
        {
          "id": "s_1925",
          "content": "**Default:** `0`.",
          "position": 18,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "s_1926",
          "content": "See `mode` flag of [`fs.",
          "position": 19,
          "originalSentence": "See `mode` flag of [`fs."
        },
        {
          "id": "s_1927",
          "content": "copyFile()`][].",
          "position": 20,
          "originalSentence": "copyFile()`][]."
        },
        {
          "id": "s_1928",
          "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
          "position": 21,
          "originalSentence": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved."
        },
        {
          "id": "s_1929",
          "content": "**Default:** `false`.",
          "position": 22,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_1930",
          "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
          "position": 23,
          "originalSentence": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped."
        },
        {
          "id": "s_1931",
          "content": "**Default:** `false` `callback` {Function} * `err` {Error}",
          "position": 24,
          "originalSentence": "**Default:** `false` `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_1932",
          "content": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
          "position": 25,
          "originalSentence": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files."
        },
        {
          "id": "s_1933",
          "content": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 26,
          "originalSentence": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`."
        },
        {
          "id": "s_1989",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_1990",
          "content": "**Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "s_1991",
          "content": "* `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:** `null` Returns: {fs.",
          "position": 2,
          "originalSentence": "* `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:** `null` Returns: {fs."
        },
        {
          "id": "s_1992",
          "content": "ReadStream}",
          "position": 3,
          "originalSentence": "ReadStream}"
        },
        {
          "id": "s_1993",
          "content": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file.",
          "position": 4,
          "originalSentence": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file."
        },
        {
          "id": "s_1994",
          "content": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
          "position": 5,
          "originalSentence": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number."
        },
        {
          "id": "s_1995",
          "content": "MAX_SAFE_INTEGER`][]] range.",
          "position": 6,
          "originalSentence": "MAX_SAFE_INTEGER`][]] range."
        },
        {
          "id": "s_1996",
          "content": "If `fd` is specified and `start` is omitted or `undefined`, `fs.",
          "position": 7,
          "originalSentence": "If `fd` is specified and `start` is omitted or `undefined`, `fs."
        },
        {
          "id": "s_1997",
          "content": "createReadStream()` reads sequentially from the current file position.",
          "position": 8,
          "originalSentence": "createReadStream()` reads sequentially from the current file position."
        },
        {
          "id": "s_1998",
          "content": "The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 9,
          "originalSentence": "The `encoding` can be any one of those accepted by {Buffer}."
        },
        {
          "id": "s_1999",
          "content": "If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor.",
          "position": 10,
          "originalSentence": "If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor."
        },
        {
          "id": "s_2000",
          "content": "This means that no `'open'` event will be emitted.",
          "position": 11,
          "originalSentence": "This means that no `'open'` event will be emitted."
        },
        {
          "id": "s_2001",
          "content": "`fd` should be blocking; non-blocking `fd`s should be passed to {net.",
          "position": 12,
          "originalSentence": "`fd` should be blocking; non-blocking `fd`s should be passed to {net."
        },
        {
          "id": "s_2002",
          "content": "If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
          "position": 13,
          "originalSentence": "If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available."
        },
        {
          "id": "s_2003",
          "content": "This can prevent the process from exiting and the stream from closing naturally.",
          "position": 14,
          "originalSentence": "This can prevent the process from exiting and the stream from closing naturally."
        },
        {
          "id": "s_2004",
          "content": "By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 15,
          "originalSentence": "By default, the stream will emit a `'close'` event after it has been destroyed."
        },
        {
          "id": "s_2005",
          "content": "Set the `emitClose` option to `false` to change this behavior.",
          "position": 16,
          "originalSentence": "Set the `emitClose` option to `false` to change this behavior."
        },
        {
          "id": "s_2006",
          "content": "By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`.",
          "position": 17,
          "originalSentence": "By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`."
        },
        {
          "id": "s_2007",
          "content": "When providing the `fs` option, an override for `read` is required.",
          "position": 18,
          "originalSentence": "When providing the `fs` option, an override for `read` is required."
        },
        {
          "id": "s_2008",
          "content": "If no `fd` is provided, an override for `open` is also required.",
          "position": 19,
          "originalSentence": "If no `fd` is provided, an override for `open` is also required."
        },
        {
          "id": "s_2009",
          "content": "If `autoClose` is `true`, an override for `close` is also required.",
          "position": 20,
          "originalSentence": "If `autoClose` is `true`, an override for `close` is also required."
        },
        {
          "id": "s_2010",
          "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 21,
          "originalSentence": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error."
        },
        {
          "id": "s_2011",
          "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 22,
          "originalSentence": "It is the application's responsibility to close it and make sure there's no file descriptor leak."
        },
        {
          "id": "s_2012",
          "content": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
          "position": 23,
          "originalSentence": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically."
        },
        {
          "id": "s_2013",
          "content": "`mode` sets the file mode (permission and sticky bits), but only if the file was created.",
          "position": 24,
          "originalSentence": "`mode` sets the file mode (permission and sticky bits), but only if the file was created."
        },
        {
          "id": "s_2014",
          "content": "An example to read the last 10 bytes of a file which is 100 bytes long:",
          "position": 25,
          "originalSentence": "An example to read the last 10 bytes of a file which is 100 bytes long:"
        },
        {
          "id": "s_2015",
          "content": "If `options` is a string, then it specifies the encoding.",
          "position": 26,
          "originalSentence": "If `options` is a string, then it specifies the encoding."
        },
        {
          "id": "s_2067",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_2068",
          "content": "**Default:** `'w'`.",
          "position": 1,
          "originalSentence": "**Default:** `'w'`."
        },
        {
          "id": "s_2069",
          "content": "* `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:** `null` * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
          "position": 2,
          "originalSentence": "* `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:** `null` * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it."
        },
        {
          "id": "s_2070",
          "content": "**Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_2071",
          "content": "Returns: {fs.",
          "position": 4,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_2072",
          "content": "WriteStream}",
          "position": 5,
          "originalSentence": "WriteStream}"
        },
        {
          "id": "s_2073",
          "content": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
          "position": 6,
          "originalSentence": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number."
        },
        {
          "id": "s_2074",
          "content": "MAX_SAFE_INTEGER`][]] range.",
          "position": 7,
          "originalSentence": "MAX_SAFE_INTEGER`][]] range."
        },
        {
          "id": "s_2075",
          "content": "Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`.",
          "position": 8,
          "originalSentence": "Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`."
        },
        {
          "id": "s_2076",
          "content": "The `encoding` can be any one of those accepted by {Buffer}.",
          "position": 9,
          "originalSentence": "The `encoding` can be any one of those accepted by {Buffer}."
        },
        {
          "id": "s_2077",
          "content": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
          "position": 10,
          "originalSentence": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically."
        },
        {
          "id": "s_2078",
          "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
          "position": 11,
          "originalSentence": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error."
        },
        {
          "id": "s_2079",
          "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak.",
          "position": 12,
          "originalSentence": "It is the application's responsibility to close it and make sure there's no file descriptor leak."
        },
        {
          "id": "s_2080",
          "content": "By default, the stream will emit a `'close'` event after it has been destroyed.",
          "position": 13,
          "originalSentence": "By default, the stream will emit a `'close'` event after it has been destroyed."
        },
        {
          "id": "s_2081",
          "content": "Set the `emitClose` option to `false` to change this behavior.",
          "position": 14,
          "originalSentence": "Set the `emitClose` option to `false` to change this behavior."
        },
        {
          "id": "s_2082",
          "content": "By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`.",
          "position": 15,
          "originalSentence": "By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`."
        },
        {
          "id": "s_2083",
          "content": "Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled.",
          "position": 16,
          "originalSentence": "Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled."
        },
        {
          "id": "s_2084",
          "content": "When providing the `fs` option, overrides for at least one of `write` and `writev` are required.",
          "position": 17,
          "originalSentence": "When providing the `fs` option, overrides for at least one of `write` and `writev` are required."
        },
        {
          "id": "s_2085",
          "content": "If no `fd` option is supplied, an override for `open` is also required.",
          "position": 18,
          "originalSentence": "If no `fd` option is supplied, an override for `open` is also required."
        },
        {
          "id": "s_2086",
          "content": "If `autoClose` is `true`, an override for `close` is also required.",
          "position": 19,
          "originalSentence": "If `autoClose` is `true`, an override for `close` is also required."
        },
        {
          "id": "s_2087",
          "content": "ReadStream}, if `fd` is specified, {fs.",
          "position": 20,
          "originalSentence": "ReadStream}, if `fd` is specified, {fs."
        },
        {
          "id": "s_2088",
          "content": "WriteStream} will ignore the `path` argument and will use the specified file descriptor.",
          "position": 21,
          "originalSentence": "WriteStream} will ignore the `path` argument and will use the specified file descriptor."
        },
        {
          "id": "s_2089",
          "content": "This means that no `'open'` event will be emitted.",
          "position": 22,
          "originalSentence": "This means that no `'open'` event will be emitted."
        },
        {
          "id": "s_2090",
          "content": "`fd` should be blocking; non-blocking `fd`s should be passed to {net.",
          "position": 23,
          "originalSentence": "`fd` should be blocking; non-blocking `fd`s should be passed to {net."
        },
        {
          "id": "s_2091",
          "content": "If `options` is a string, then it specifies the encoding.",
          "position": 24,
          "originalSentence": "If `options` is a string, then it specifies the encoding."
        },
        {
          "id": "s_2141",
          "content": "`path` {string|Buffer|URL} `callback` {Function} * `exists` {boolean}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `callback` {Function} * `exists` {boolean}"
        },
        {
          "id": "s_2142",
          "content": "Test whether or not the element at the given `path` exists by checking with the file system.",
          "position": 1,
          "originalSentence": "Test whether or not the element at the given `path` exists by checking with the file system."
        },
        {
          "id": "s_2143",
          "content": "Then call the `callback` argument with either true or false:",
          "position": 2,
          "originalSentence": "Then call the `callback` argument with either true or false:"
        },
        {
          "id": "s_2144",
          "content": "**The parameters for this callback are not consistent with other Node.",
          "position": 3,
          "originalSentence": "**The parameters for this callback are not consistent with other Node."
        },
        {
          "id": "s_2145",
          "content": "js callbacks.",
          "position": 4,
          "originalSentence": "js callbacks."
        },
        {
          "id": "s_2146",
          "content": "** Normally, the first parameter to a Node.",
          "position": 5,
          "originalSentence": "** Normally, the first parameter to a Node."
        },
        {
          "id": "s_2147",
          "content": "js callback is an `err` parameter, optionally followed by other parameters.",
          "position": 6,
          "originalSentence": "js callback is an `err` parameter, optionally followed by other parameters."
        },
        {
          "id": "s_2148",
          "content": "exists()` callback has only one boolean parameter.",
          "position": 7,
          "originalSentence": "exists()` callback has only one boolean parameter."
        },
        {
          "id": "s_2149",
          "content": "This is one reason `fs.",
          "position": 8,
          "originalSentence": "This is one reason `fs."
        },
        {
          "id": "s_2150",
          "content": "access()` is recommended instead of `fs.",
          "position": 9,
          "originalSentence": "access()` is recommended instead of `fs."
        },
        {
          "id": "s_2151",
          "content": "If `path` is a symbolic link, it is followed.",
          "position": 10,
          "originalSentence": "If `path` is a symbolic link, it is followed."
        },
        {
          "id": "s_2152",
          "content": "Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`.",
          "position": 11,
          "originalSentence": "Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`."
        },
        {
          "id": "s_2153",
          "content": "exists()` to check for the existence of a file before calling `fs.",
          "position": 12,
          "originalSentence": "exists()` to check for the existence of a file before calling `fs."
        },
        {
          "id": "s_2154",
          "content": "open()`, `fs.",
          "position": 13,
          "originalSentence": "open()`, `fs."
        },
        {
          "id": "s_2155",
          "content": "readFile()`, or `fs.",
          "position": 14,
          "originalSentence": "readFile()`, or `fs."
        },
        {
          "id": "s_2156",
          "content": "writeFile()` is not recommended.",
          "position": 15,
          "originalSentence": "writeFile()` is not recommended."
        },
        {
          "id": "s_2157",
          "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
          "position": 16,
          "originalSentence": "Doing so introduces a race condition, since other processes may change the file's state between the two calls."
        },
        {
          "id": "s_2158",
          "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.",
          "position": 17,
          "originalSentence": "Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist."
        },
        {
          "id": "s_2159",
          "content": "**write (NOT RECOMMENDED)**",
          "position": 18,
          "originalSentence": "**write (NOT RECOMMENDED)**"
        },
        {
          "id": "s_2160",
          "content": "**write (RECOMMENDED)**",
          "position": 19,
          "originalSentence": "**write (RECOMMENDED)**"
        },
        {
          "id": "s_2161",
          "content": "**read (NOT RECOMMENDED)**",
          "position": 20,
          "originalSentence": "**read (NOT RECOMMENDED)**"
        },
        {
          "id": "s_2162",
          "content": "**read (RECOMMENDED)**",
          "position": 21,
          "originalSentence": "**read (RECOMMENDED)**"
        },
        {
          "id": "s_2163",
          "content": "The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
          "position": 22,
          "originalSentence": "The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any."
        },
        {
          "id": "s_2164",
          "content": "In general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another process.",
          "position": 23,
          "originalSentence": "In general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another process."
        },
        {
          "id": "s_2173",
          "content": "`fd` {integer} `mode` {string|integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `mode` {string|integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2174",
          "content": "Sets the permissions on the file.",
          "position": 1,
          "originalSentence": "Sets the permissions on the file."
        },
        {
          "id": "s_2175",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2176",
          "content": "See the POSIX fchmod(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX fchmod(2) documentation for more detail."
        },
        {
          "id": "s_2185",
          "content": "`fd` {integer} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2186",
          "content": "Sets the owner of the file.",
          "position": 1,
          "originalSentence": "Sets the owner of the file."
        },
        {
          "id": "s_2187",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2188",
          "content": "See the POSIX fchown(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX fchown(2) documentation for more detail."
        },
        {
          "id": "s_2197",
          "content": "`fd` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2198",
          "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
          "position": 1,
          "originalSentence": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state."
        },
        {
          "id": "s_2199",
          "content": "Refer to the POSIX fdatasync(2) documentation for details.",
          "position": 2,
          "originalSentence": "Refer to the POSIX fdatasync(2) documentation for details."
        },
        {
          "id": "s_2200",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 3,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2215",
          "content": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_2216",
          "content": "Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "s_2217",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_2218",
          "content": "`callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error} * `stats` {fs."
        },
        {
          "id": "s_2219",
          "content": "Invokes the callback with the {fs.",
          "position": 4,
          "originalSentence": "Invokes the callback with the {fs."
        },
        {
          "id": "s_2220",
          "content": "Stats} for the file descriptor.",
          "position": 5,
          "originalSentence": "Stats} for the file descriptor."
        },
        {
          "id": "s_2221",
          "content": "See the POSIX fstat(2) documentation for more detail.",
          "position": 6,
          "originalSentence": "See the POSIX fstat(2) documentation for more detail."
        },
        {
          "id": "s_2232",
          "content": "`fd` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2233",
          "content": "Request that all data for the open file descriptor is flushed to the storage device.",
          "position": 1,
          "originalSentence": "Request that all data for the open file descriptor is flushed to the storage device."
        },
        {
          "id": "s_2234",
          "content": "The specific implementation is operating system and device specific.",
          "position": 2,
          "originalSentence": "The specific implementation is operating system and device specific."
        },
        {
          "id": "s_2235",
          "content": "Refer to the POSIX fsync(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "Refer to the POSIX fsync(2) documentation for more detail."
        },
        {
          "id": "s_2236",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 4,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2253",
          "content": "`fd` {integer} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2254",
          "content": "Truncates the file descriptor.",
          "position": 1,
          "originalSentence": "Truncates the file descriptor."
        },
        {
          "id": "s_2255",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2256",
          "content": "See the POSIX ftruncate(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX ftruncate(2) documentation for more detail."
        },
        {
          "id": "s_2257",
          "content": "If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
          "position": 4,
          "originalSentence": "If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file."
        },
        {
          "id": "s_2258",
          "content": "For example, the following program retains only the first four bytes of the file:",
          "position": 5,
          "originalSentence": "For example, the following program retains only the first four bytes of the file:"
        },
        {
          "id": "s_2259",
          "content": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
          "position": 6,
          "originalSentence": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):"
        },
        {
          "id": "s_2260",
          "content": "If `len` is negative then `0` will be used.",
          "position": 7,
          "originalSentence": "If `len` is negative then `0` will be used."
        },
        {
          "id": "s_2267",
          "content": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2268",
          "content": "Change the file system timestamps of the object referenced by the supplied file descriptor.",
          "position": 1,
          "originalSentence": "Change the file system timestamps of the object referenced by the supplied file descriptor."
        },
        {
          "id": "s_2269",
          "content": "utimes()`][].",
          "position": 2,
          "originalSentence": "utimes()`][]."
        },
        {
          "id": "s_2286",
          "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
          "position": 0,
          "originalSentence": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory."
        },
        {
          "id": "s_2287",
          "content": "**Default:** `process.",
          "position": 1,
          "originalSentence": "**Default:** `process."
        },
        {
          "id": "s_2288",
          "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
          "position": 2,
          "originalSentence": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded."
        },
        {
          "id": "s_2289",
          "content": "If a function is provided, return `true` to exclude the item, `false` to include it.",
          "position": 3,
          "originalSentence": "If a function is provided, return `true` to exclude the item, `false` to include it."
        },
        {
          "id": "s_2290",
          "content": "**Default:** `undefined`.",
          "position": 4,
          "originalSentence": "**Default:** `undefined`."
        },
        {
          "id": "s_2291",
          "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
          "position": 5,
          "originalSentence": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise."
        },
        {
          "id": "s_2292",
          "content": "**Default:** `false`.",
          "position": 6,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_2293",
          "content": "`callback` {Function} * `err` {Error} Retrieves the files matching the specified pattern.",
          "position": 7,
          "originalSentence": "`callback` {Function} * `err` {Error} Retrieves the files matching the specified pattern."
        },
        {
          "id": "s_2304",
          "content": "`path` {string|Buffer|URL} `mode` {integer} `callback` {Function} * `err` {Error|AggregateError}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer} `callback` {Function} * `err` {Error|AggregateError}"
        },
        {
          "id": "s_2305",
          "content": "Changes the permissions on a symbolic link.",
          "position": 1,
          "originalSentence": "Changes the permissions on a symbolic link."
        },
        {
          "id": "s_2306",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2307",
          "content": "This method is only implemented on macOS.",
          "position": 3,
          "originalSentence": "This method is only implemented on macOS."
        },
        {
          "id": "s_2308",
          "content": "See the POSIX lchmod(2) documentation for more detail.",
          "position": 4,
          "originalSentence": "See the POSIX lchmod(2) documentation for more detail."
        },
        {
          "id": "s_2317",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2318",
          "content": "Set the owner of the symbolic link.",
          "position": 1,
          "originalSentence": "Set the owner of the symbolic link."
        },
        {
          "id": "s_2319",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2320",
          "content": "See the POSIX lchown(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX lchown(2) documentation for more detail."
        },
        {
          "id": "s_2329",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2330",
          "content": "Changes the access and modification times of a file in the same way as [`fs.",
          "position": 1,
          "originalSentence": "Changes the access and modification times of a file in the same way as [`fs."
        },
        {
          "id": "s_2331",
          "content": "utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.",
          "position": 2,
          "originalSentence": "utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed."
        },
        {
          "id": "s_2332",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 3,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2341",
          "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2342",
          "content": "Creates a new link from the `existingPath` to the `newPath`.",
          "position": 1,
          "originalSentence": "Creates a new link from the `existingPath` to the `newPath`."
        },
        {
          "id": "s_2343",
          "content": "See the POSIX link(2) documentation for more detail.",
          "position": 2,
          "originalSentence": "See the POSIX link(2) documentation for more detail."
        },
        {
          "id": "s_2344",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 3,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2365",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_2366",
          "content": "Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "s_2367",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_2368",
          "content": "`callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error} * `stats` {fs."
        },
        {
          "id": "s_2369",
          "content": "Retrieves the {fs.",
          "position": 4,
          "originalSentence": "Retrieves the {fs."
        },
        {
          "id": "s_2370",
          "content": "Stats} for the symbolic link referred to by the path.",
          "position": 5,
          "originalSentence": "Stats} for the symbolic link referred to by the path."
        },
        {
          "id": "s_2371",
          "content": "The callback gets two arguments `(err, stats)` where `stats` is a {fs.",
          "position": 6,
          "originalSentence": "The callback gets two arguments `(err, stats)` where `stats` is a {fs."
        },
        {
          "id": "s_2372",
          "content": "Stats} object.",
          "position": 7,
          "originalSentence": "Stats} object."
        },
        {
          "id": "s_2373",
          "content": "`lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to.",
          "position": 8,
          "originalSentence": "`lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to."
        },
        {
          "id": "s_2374",
          "content": "See the POSIX lstat(2) documentation for more details.",
          "position": 9,
          "originalSentence": "See the POSIX lstat(2) documentation for more details."
        },
        {
          "id": "s_2403",
          "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows."
        },
        {
          "id": "s_2404",
          "content": "**Default:** `0o777`.",
          "position": 1,
          "originalSentence": "**Default:** `0o777`."
        },
        {
          "id": "s_2405",
          "content": "`callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`.",
          "position": 2,
          "originalSentence": "`callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`."
        },
        {
          "id": "s_2406",
          "content": "Asynchronously creates a directory.",
          "position": 3,
          "originalSentence": "Asynchronously creates a directory."
        },
        {
          "id": "s_2407",
          "content": "The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`.",
          "position": 4,
          "originalSentence": "The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`."
        },
        {
          "id": "s_2408",
          "content": "`path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created).",
          "position": 5,
          "originalSentence": "`path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created)."
        },
        {
          "id": "s_2409",
          "content": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)",
          "position": 6,
          "originalSentence": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)"
        },
        {
          "id": "s_2410",
          "content": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
          "position": 7,
          "originalSentence": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created."
        },
        {
          "id": "s_2411",
          "content": "Calling `fs.",
          "position": 8,
          "originalSentence": "Calling `fs."
        },
        {
          "id": "s_2412",
          "content": "mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false.",
          "position": 9,
          "originalSentence": "mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false."
        },
        {
          "id": "s_2413",
          "content": "If `recursive` is false and the directory exists, an `EEXIST` error occurs.",
          "position": 10,
          "originalSentence": "If `recursive` is false and the directory exists, an `EEXIST` error occurs."
        },
        {
          "id": "s_2414",
          "content": "On Windows, using `fs.",
          "position": 11,
          "originalSentence": "On Windows, using `fs."
        },
        {
          "id": "s_2415",
          "content": "mkdir()` on the root directory even with recursion will result in an error:",
          "position": 12,
          "originalSentence": "mkdir()` on the root directory even with recursion will result in an error:"
        },
        {
          "id": "s_2416",
          "content": "See the POSIX mkdir(2) documentation for more details.",
          "position": 13,
          "originalSentence": "See the POSIX mkdir(2) documentation for more details."
        },
        {
          "id": "s_2435",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `directory` {string}",
          "position": 0,
          "originalSentence": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `directory` {string}"
        },
        {
          "id": "s_2436",
          "content": "Creates a unique temporary directory.",
          "position": 1,
          "originalSentence": "Creates a unique temporary directory."
        },
        {
          "id": "s_2437",
          "content": "Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.",
          "position": 2,
          "originalSentence": "Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory."
        },
        {
          "id": "s_2438",
          "content": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
          "position": 3,
          "originalSentence": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`."
        },
        {
          "id": "s_2439",
          "content": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
          "position": 4,
          "originalSentence": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters."
        },
        {
          "id": "s_2440",
          "content": "The created directory path is passed as a string to the callback's second parameter.",
          "position": 5,
          "originalSentence": "The created directory path is passed as a string to the callback's second parameter."
        },
        {
          "id": "s_2441",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 6,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use."
        },
        {
          "id": "s_2442",
          "content": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
          "position": 7,
          "originalSentence": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string."
        },
        {
          "id": "s_2443",
          "content": "For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
          "position": 8,
          "originalSentence": "For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path')."
        },
        {
          "id": "s_2478",
          "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][]."
        },
        {
          "id": "s_2479",
          "content": "**Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "s_2480",
          "content": "`mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer}",
          "position": 2,
          "originalSentence": "`mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer}"
        },
        {
          "id": "s_2481",
          "content": "Asynchronous file open.",
          "position": 3,
          "originalSentence": "Asynchronous file open."
        },
        {
          "id": "s_2482",
          "content": "See the POSIX open(2) documentation for more details.",
          "position": 4,
          "originalSentence": "See the POSIX open(2) documentation for more details."
        },
        {
          "id": "s_2483",
          "content": "`mode` sets the file mode (permission and sticky bits), but only if the file was created.",
          "position": 5,
          "originalSentence": "`mode` sets the file mode (permission and sticky bits), but only if the file was created."
        },
        {
          "id": "s_2484",
          "content": "On Windows, only the write permission can be manipulated; see [`fs.",
          "position": 6,
          "originalSentence": "On Windows, only the write permission can be manipulated; see [`fs."
        },
        {
          "id": "s_2485",
          "content": "chmod()`][].",
          "position": 7,
          "originalSentence": "chmod()`][]."
        },
        {
          "id": "s_2486",
          "content": "The callback gets two arguments `(err, fd)`.",
          "position": 8,
          "originalSentence": "The callback gets two arguments `(err, fd)`."
        },
        {
          "id": "s_2487",
          "content": "Some characters (`< > : \" / \\ | ?",
          "position": 9,
          "originalSentence": "Some characters (`< > : \" / \\ | ?"
        },
        {
          "id": "s_2488",
          "content": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
          "position": 10,
          "originalSentence": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]."
        },
        {
          "id": "s_2489",
          "content": "Under NTFS, if the filename contains a colon, Node.",
          "position": 11,
          "originalSentence": "Under NTFS, if the filename contains a colon, Node."
        },
        {
          "id": "s_2490",
          "content": "js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
          "position": 12,
          "originalSentence": "js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams]."
        },
        {
          "id": "s_2491",
          "content": "Functions based on `fs.",
          "position": 13,
          "originalSentence": "Functions based on `fs."
        },
        {
          "id": "s_2492",
          "content": "open()` exhibit this behavior as well: `fs.",
          "position": 14,
          "originalSentence": "open()` exhibit this behavior as well: `fs."
        },
        {
          "id": "s_2493",
          "content": "writeFile()`, `fs.",
          "position": 15,
          "originalSentence": "writeFile()`, `fs."
        },
        {
          "id": "s_2494",
          "content": "readFile()`, etc.",
          "position": 16,
          "originalSentence": "readFile()`, etc."
        },
        {
          "id": "s_2507",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `type` {string} An optional mime type for the blob.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `type` {string} An optional mime type for the blob."
        },
        {
          "id": "s_2508",
          "content": "Returns: {Promise} Fulfills with a {Blob} upon success.",
          "position": 1,
          "originalSentence": "Returns: {Promise} Fulfills with a {Blob} upon success."
        },
        {
          "id": "s_2509",
          "content": "Returns a {Blob} whose data is backed by the given file.",
          "position": 2,
          "originalSentence": "Returns a {Blob} whose data is backed by the given file."
        },
        {
          "id": "s_2510",
          "content": "The file must not be modified after the {Blob} is created.",
          "position": 3,
          "originalSentence": "The file must not be modified after the {Blob} is created."
        },
        {
          "id": "s_2511",
          "content": "Any modifications will cause reading the {Blob} data to fail with a `DOMException` error.",
          "position": 4,
          "originalSentence": "Any modifications will cause reading the {Blob} data to fail with a `DOMException` error."
        },
        {
          "id": "s_2512",
          "content": "Synchronous stat operations on the file when the `Blob` is created, and before each read in order to detect whether the file data has been modified on disk.",
          "position": 5,
          "originalSentence": "Synchronous stat operations on the file when the `Blob` is created, and before each read in order to detect whether the file data has been modified on disk."
        },
        {
          "id": "s_2529",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory."
        },
        {
          "id": "s_2530",
          "content": "Higher values lead to better performance but higher memory usage.",
          "position": 1,
          "originalSentence": "Higher values lead to better performance but higher memory usage."
        },
        {
          "id": "s_2531",
          "content": "**Default:** `32` * `recursive` {boolean} **Default:** `false` `callback` {Function} * `err` {Error} * `dir` {fs.",
          "position": 2,
          "originalSentence": "**Default:** `32` * `recursive` {boolean} **Default:** `false` `callback` {Function} * `err` {Error} * `dir` {fs."
        },
        {
          "id": "s_2532",
          "content": "Asynchronously open a directory.",
          "position": 3,
          "originalSentence": "Asynchronously open a directory."
        },
        {
          "id": "s_2533",
          "content": "See the POSIX opendir(3) documentation for more details.",
          "position": 4,
          "originalSentence": "See the POSIX opendir(3) documentation for more details."
        },
        {
          "id": "s_2534",
          "content": "Creates an {fs.",
          "position": 5,
          "originalSentence": "Creates an {fs."
        },
        {
          "id": "s_2535",
          "content": "Dir}, which contains all further functions for reading from and cleaning up the directory.",
          "position": 6,
          "originalSentence": "Dir}, which contains all further functions for reading from and cleaning up the directory."
        },
        {
          "id": "s_2536",
          "content": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 7,
          "originalSentence": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations."
        },
        {
          "id": "s_2588",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to."
        },
        {
          "id": "s_2589",
          "content": "`offset` {integer} The position in `buffer` to write the data to.",
          "position": 1,
          "originalSentence": "`offset` {integer} The position in `buffer` to write the data to."
        },
        {
          "id": "s_2590",
          "content": "`length` {integer} The number of bytes to read.",
          "position": 2,
          "originalSentence": "`length` {integer} The number of bytes to read."
        },
        {
          "id": "s_2591",
          "content": "`position` {integer|bigint|null} Specifies where to begin reading from in the file.",
          "position": 3,
          "originalSentence": "`position` {integer|bigint|null} Specifies where to begin reading from in the file."
        },
        {
          "id": "s_2592",
          "content": "If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated.",
          "position": 4,
          "originalSentence": "If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated."
        },
        {
          "id": "s_2593",
          "content": "If `position` is a non-negative integer, the file position will be unchanged.",
          "position": 5,
          "originalSentence": "If `position` is a non-negative integer, the file position will be unchanged."
        },
        {
          "id": "s_2594",
          "content": "`callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
          "position": 6,
          "originalSentence": "`callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}"
        },
        {
          "id": "s_2595",
          "content": "Read data from the file specified by `fd`.",
          "position": 7,
          "originalSentence": "Read data from the file specified by `fd`."
        },
        {
          "id": "s_2596",
          "content": "The callback is given the three arguments, `(err, bytesRead, buffer)`.",
          "position": 8,
          "originalSentence": "The callback is given the three arguments, `(err, bytesRead, buffer)`."
        },
        {
          "id": "s_2597",
          "content": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
          "position": 9,
          "originalSentence": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero."
        },
        {
          "id": "s_2598",
          "content": "If this method is invoked as its [`util.",
          "position": 10,
          "originalSentence": "If this method is invoked as its [`util."
        },
        {
          "id": "s_2599",
          "content": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties.",
          "position": 11,
          "originalSentence": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties."
        },
        {
          "id": "s_2600",
          "content": "read()` method reads data from the file specified by the file descriptor (`fd`).",
          "position": 12,
          "originalSentence": "read()` method reads data from the file specified by the file descriptor (`fd`)."
        },
        {
          "id": "s_2601",
          "content": "The `length` argument indicates the maximum number of bytes that Node.",
          "position": 13,
          "originalSentence": "The `length` argument indicates the maximum number of bytes that Node."
        },
        {
          "id": "s_2602",
          "content": "js will attempt to read from the kernel.",
          "position": 14,
          "originalSentence": "js will attempt to read from the kernel."
        },
        {
          "id": "s_2603",
          "content": "However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons.",
          "position": 15,
          "originalSentence": "However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons."
        },
        {
          "id": "s_2604",
          "content": "For example:",
          "position": 16,
          "originalSentence": "For example:"
        },
        {
          "id": "s_2605",
          "content": "If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read.",
          "position": 17,
          "originalSentence": "If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read."
        },
        {
          "id": "s_2606",
          "content": "If the file encounters EOF (End of File) before the buffer could be filled, Node.",
          "position": 18,
          "originalSentence": "If the file encounters EOF (End of File) before the buffer could be filled, Node."
        },
        {
          "id": "s_2607",
          "content": "js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read, which may be less than the specified `length`.",
          "position": 19,
          "originalSentence": "js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read, which may be less than the specified `length`."
        },
        {
          "id": "s_2608",
          "content": "If the file is on a slow network `filesystem` or encounters any other issue during reading, `bytesRead` can be lower than the specified `length`.",
          "position": 20,
          "originalSentence": "If the file is on a slow network `filesystem` or encounters any other issue during reading, `bytesRead` can be lower than the specified `length`."
        },
        {
          "id": "s_2609",
          "content": "Therefore, when using `fs.",
          "position": 21,
          "originalSentence": "Therefore, when using `fs."
        },
        {
          "id": "s_2610",
          "content": "read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file.",
          "position": 22,
          "originalSentence": "read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file."
        },
        {
          "id": "s_2611",
          "content": "Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of bytes.",
          "position": 23,
          "originalSentence": "Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of bytes."
        },
        {
          "id": "s_2612",
          "content": "This behavior is similar to the POSIX `preadv2` function.",
          "position": 24,
          "originalSentence": "This behavior is similar to the POSIX `preadv2` function."
        },
        {
          "id": "s_2625",
          "content": "`fd` {integer} `options` {Object} * `buffer` {Buffer|TypedArray|DataView} **Default:** `Buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `options` {Object} * `buffer` {Buffer|TypedArray|DataView} **Default:** `Buffer."
        },
        {
          "id": "s_2626",
          "content": "alloc(16384)` * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 1,
          "originalSentence": "alloc(16384)` * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "s_2627",
          "content": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
          "position": 2,
          "originalSentence": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}"
        },
        {
          "id": "s_2628",
          "content": "Similar to the [`fs.",
          "position": 3,
          "originalSentence": "Similar to the [`fs."
        },
        {
          "id": "s_2629",
          "content": "read()`][] function, this version takes an optional `options` object.",
          "position": 4,
          "originalSentence": "read()`][] function, this version takes an optional `options` object."
        },
        {
          "id": "s_2630",
          "content": "If no `options` object is specified, it will default with the above values.",
          "position": 5,
          "originalSentence": "If no `options` object is specified, it will default with the above values."
        },
        {
          "id": "s_2643",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to."
        },
        {
          "id": "s_2644",
          "content": "`options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 1,
          "originalSentence": "`options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "s_2645",
          "content": "byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
          "position": 2,
          "originalSentence": "byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}"
        },
        {
          "id": "s_2646",
          "content": "Similar to the [`fs.",
          "position": 3,
          "originalSentence": "Similar to the [`fs."
        },
        {
          "id": "s_2647",
          "content": "read()`][] function, this version takes an optional `options` object.",
          "position": 4,
          "originalSentence": "read()`][] function, this version takes an optional `options` object."
        },
        {
          "id": "s_2648",
          "content": "If no `options` object is specified, it will default with the above values.",
          "position": 5,
          "originalSentence": "If no `options` object is specified, it will default with the above values."
        },
        {
          "id": "s_2675",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively."
        },
        {
          "id": "s_2676",
          "content": "In recursive mode, it will list all files, sub files and directories.",
          "position": 1,
          "originalSentence": "In recursive mode, it will list all files, sub files and directories."
        },
        {
          "id": "s_2677",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_2678",
          "content": "`callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs.",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs."
        },
        {
          "id": "s_2679",
          "content": "Reads the contents of a directory.",
          "position": 4,
          "originalSentence": "Reads the contents of a directory."
        },
        {
          "id": "s_2680",
          "content": "The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.'",
          "position": 5,
          "originalSentence": "The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.'"
        },
        {
          "id": "s_2681",
          "content": "` and `'..'",
          "position": 6,
          "originalSentence": "` and `'..'"
        },
        {
          "id": "s_2682",
          "content": "See the POSIX readdir(3) documentation for more details.",
          "position": 7,
          "originalSentence": "See the POSIX readdir(3) documentation for more details."
        },
        {
          "id": "s_2683",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback.",
          "position": 8,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback."
        },
        {
          "id": "s_2684",
          "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
          "position": 9,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects."
        },
        {
          "id": "s_2685",
          "content": "If `options.",
          "position": 10,
          "originalSentence": "If `options."
        },
        {
          "id": "s_2686",
          "content": "withFileTypes` is set to `true`, the `files` array will contain {fs.",
          "position": 11,
          "originalSentence": "withFileTypes` is set to `true`, the `files` array will contain {fs."
        },
        {
          "id": "s_2687",
          "content": "Dirent} objects.",
          "position": 12,
          "originalSentence": "Dirent} objects."
        },
        {
          "id": "s_2726",
          "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_2727",
          "content": "**Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "s_2728",
          "content": "* `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data` {string|Buffer}",
          "position": 2,
          "originalSentence": "* `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data` {string|Buffer}"
        },
        {
          "id": "s_2729",
          "content": "Asynchronously reads the entire contents of a file.",
          "position": 3,
          "originalSentence": "Asynchronously reads the entire contents of a file."
        },
        {
          "id": "s_2730",
          "content": "The callback is passed two arguments `(err, data)`, where `data` is the contents of the file.",
          "position": 4,
          "originalSentence": "The callback is passed two arguments `(err, data)`, where `data` is the contents of the file."
        },
        {
          "id": "s_2731",
          "content": "If no encoding is specified, then the raw buffer is returned.",
          "position": 5,
          "originalSentence": "If no encoding is specified, then the raw buffer is returned."
        },
        {
          "id": "s_2732",
          "content": "If `options` is a string, then it specifies the encoding:",
          "position": 6,
          "originalSentence": "If `options` is a string, then it specifies the encoding:"
        },
        {
          "id": "s_2733",
          "content": "When the path is a directory, the behavior of `fs.",
          "position": 7,
          "originalSentence": "When the path is a directory, the behavior of `fs."
        },
        {
          "id": "s_2734",
          "content": "readFile()` and [`fs.",
          "position": 8,
          "originalSentence": "readFile()` and [`fs."
        },
        {
          "id": "s_2735",
          "content": "readFileSync()`][] is platform-specific.",
          "position": 9,
          "originalSentence": "readFileSync()`][] is platform-specific."
        },
        {
          "id": "s_2736",
          "content": "On macOS, Linux, and Windows, an error will be returned.",
          "position": 10,
          "originalSentence": "On macOS, Linux, and Windows, an error will be returned."
        },
        {
          "id": "s_2737",
          "content": "On FreeBSD, a representation of the directory's contents will be returned.",
          "position": 11,
          "originalSentence": "On FreeBSD, a representation of the directory's contents will be returned."
        },
        {
          "id": "s_2738",
          "content": "It is possible to abort an ongoing request using an `AbortSignal`.",
          "position": 12,
          "originalSentence": "It is possible to abort an ongoing request using an `AbortSignal`."
        },
        {
          "id": "s_2739",
          "content": "If a request is aborted the callback is called with an `AbortError`:",
          "position": 13,
          "originalSentence": "If a request is aborted the callback is called with an `AbortError`:"
        },
        {
          "id": "s_2740",
          "content": "readFile()` function buffers the entire file.",
          "position": 14,
          "originalSentence": "readFile()` function buffers the entire file."
        },
        {
          "id": "s_2741",
          "content": "To minimize memory costs, when possible prefer streaming via `fs.",
          "position": 15,
          "originalSentence": "To minimize memory costs, when possible prefer streaming via `fs."
        },
        {
          "id": "s_2742",
          "content": "createReadStream()`.",
          "position": 16,
          "originalSentence": "createReadStream()`."
        },
        {
          "id": "s_2743",
          "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 17,
          "originalSentence": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs."
        },
        {
          "id": "s_2744",
          "content": "readFile` performs.",
          "position": 18,
          "originalSentence": "readFile` performs."
        },
        {
          "id": "s_2755",
          "content": "Any specified file descriptor has to support reading.",
          "position": 0,
          "originalSentence": "Any specified file descriptor has to support reading."
        },
        {
          "id": "s_2756",
          "content": "If a file descriptor is specified as the `path`, it will not be closed automatically.",
          "position": 1,
          "originalSentence": "If a file descriptor is specified as the `path`, it will not be closed automatically."
        },
        {
          "id": "s_2757",
          "content": "The reading will begin at the current position.",
          "position": 2,
          "originalSentence": "The reading will begin at the current position."
        },
        {
          "id": "s_2758",
          "content": "For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs.",
          "position": 3,
          "originalSentence": "For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs."
        },
        {
          "id": "s_2759",
          "content": "readFile()` with the same file descriptor, would give `'World'`, rather than `'Hello World'`.",
          "position": 4,
          "originalSentence": "readFile()` with the same file descriptor, would give `'World'`, rather than `'Hello World'`."
        },
        {
          "id": "s_2782",
          "content": "readFile()` method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk.",
          "position": 0,
          "originalSentence": "readFile()` method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk."
        },
        {
          "id": "s_2783",
          "content": "This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory.",
          "position": 1,
          "originalSentence": "This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory."
        },
        {
          "id": "s_2784",
          "content": "The additional read overhead can vary broadly on different systems and depends on the type of file being read.",
          "position": 2,
          "originalSentence": "The additional read overhead can vary broadly on different systems and depends on the type of file being read."
        },
        {
          "id": "s_2785",
          "content": "If the file type is not a regular file (a pipe for instance) and Node.",
          "position": 3,
          "originalSentence": "If the file type is not a regular file (a pipe for instance) and Node."
        },
        {
          "id": "s_2786",
          "content": "js is unable to determine an actual file size, each read operation will load on 64 KiB of data.",
          "position": 4,
          "originalSentence": "js is unable to determine an actual file size, each read operation will load on 64 KiB of data."
        },
        {
          "id": "s_2787",
          "content": "For regular files, each read will process 512 KiB of data.",
          "position": 5,
          "originalSentence": "For regular files, each read will process 512 KiB of data."
        },
        {
          "id": "s_2788",
          "content": "For applications that require as-fast-as-possible reading of file contents, it is better to use `fs.",
          "position": 6,
          "originalSentence": "For applications that require as-fast-as-possible reading of file contents, it is better to use `fs."
        },
        {
          "id": "s_2789",
          "content": "read()` directly and for application code to manage reading the full contents of the file itself.",
          "position": 7,
          "originalSentence": "read()` directly and for application code to manage reading the full contents of the file itself."
        },
        {
          "id": "s_2790",
          "content": "js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs.",
          "position": 8,
          "originalSentence": "js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs."
        },
        {
          "id": "s_2791",
          "content": "readFile()` for multiple file sizes in different Node.",
          "position": 9,
          "originalSentence": "readFile()` for multiple file sizes in different Node."
        },
        {
          "id": "s_2792",
          "content": "js versions.",
          "position": 10,
          "originalSentence": "js versions."
        },
        {
          "id": "s_2805",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `linkString` {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `linkString` {string|Buffer}"
        },
        {
          "id": "s_2806",
          "content": "Reads the contents of the symbolic link referred to by `path`.",
          "position": 1,
          "originalSentence": "Reads the contents of the symbolic link referred to by `path`."
        },
        {
          "id": "s_2807",
          "content": "The callback gets two arguments `(err, linkString)`.",
          "position": 2,
          "originalSentence": "The callback gets two arguments `(err, linkString)`."
        },
        {
          "id": "s_2808",
          "content": "See the POSIX readlink(2) documentation for more details.",
          "position": 3,
          "originalSentence": "See the POSIX readlink(2) documentation for more details."
        },
        {
          "id": "s_2809",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback.",
          "position": 4,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback."
        },
        {
          "id": "s_2810",
          "content": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 5,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object."
        },
        {
          "id": "s_2829",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffers` {ArrayBufferView\\[]}",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffers` {ArrayBufferView\\[]}"
        },
        {
          "id": "s_2830",
          "content": "Read from a file specified by `fd` and write to an array of `ArrayBufferView`s using `readv()`.",
          "position": 1,
          "originalSentence": "Read from a file specified by `fd` and write to an array of `ArrayBufferView`s using `readv()`."
        },
        {
          "id": "s_2831",
          "content": "`position` is the offset from the beginning of the file from where data should be read.",
          "position": 2,
          "originalSentence": "`position` is the offset from the beginning of the file from where data should be read."
        },
        {
          "id": "s_2832",
          "content": "If `typeof position !",
          "position": 3,
          "originalSentence": "If `typeof position !"
        },
        {
          "id": "s_2833",
          "content": "== 'number'`, the data will be read from the current position.",
          "position": 4,
          "originalSentence": "== 'number'`, the data will be read from the current position."
        },
        {
          "id": "s_2834",
          "content": "The callback will be given three arguments: `err`, `bytesRead`, and `buffers`.",
          "position": 5,
          "originalSentence": "The callback will be given three arguments: `err`, `bytesRead`, and `buffers`."
        },
        {
          "id": "s_2835",
          "content": "`bytesRead` is how many bytes were read from the file.",
          "position": 6,
          "originalSentence": "`bytesRead` is how many bytes were read from the file."
        },
        {
          "id": "s_2836",
          "content": "If this method is invoked as its [`util.",
          "position": 7,
          "originalSentence": "If this method is invoked as its [`util."
        },
        {
          "id": "s_2837",
          "content": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffers` properties.",
          "position": 8,
          "originalSentence": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffers` properties."
        },
        {
          "id": "s_2872",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}"
        },
        {
          "id": "s_2873",
          "content": "Asynchronously computes the canonical pathname by resolving `.",
          "position": 1,
          "originalSentence": "Asynchronously computes the canonical pathname by resolving `."
        },
        {
          "id": "s_2874",
          "content": "`, and symbolic links.",
          "position": 2,
          "originalSentence": "`, and symbolic links."
        },
        {
          "id": "s_2875",
          "content": "A canonical pathname is not necessarily unique.",
          "position": 3,
          "originalSentence": "A canonical pathname is not necessarily unique."
        },
        {
          "id": "s_2876",
          "content": "Hard links and bind mounts can expose a file system entity through many pathnames.",
          "position": 4,
          "originalSentence": "Hard links and bind mounts can expose a file system entity through many pathnames."
        },
        {
          "id": "s_2877",
          "content": "This function behaves like realpath(3), with some exceptions:",
          "position": 5,
          "originalSentence": "This function behaves like realpath(3), with some exceptions:"
        },
        {
          "id": "s_2878",
          "content": "No case conversion is performed on case-insensitive file systems.",
          "position": 6,
          "originalSentence": "No case conversion is performed on case-insensitive file systems."
        },
        {
          "id": "s_2879",
          "content": "The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports.",
          "position": 7,
          "originalSentence": "The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports."
        },
        {
          "id": "s_2880",
          "content": "The `callback` gets two arguments `(err, resolvedPath)`.",
          "position": 8,
          "originalSentence": "The `callback` gets two arguments `(err, resolvedPath)`."
        },
        {
          "id": "s_2881",
          "content": "May use `process.",
          "position": 9,
          "originalSentence": "May use `process."
        },
        {
          "id": "s_2882",
          "content": "cwd` to resolve relative paths.",
          "position": 10,
          "originalSentence": "cwd` to resolve relative paths."
        },
        {
          "id": "s_2883",
          "content": "Only paths that can be converted to UTF8 strings are supported.",
          "position": 11,
          "originalSentence": "Only paths that can be converted to UTF8 strings are supported."
        },
        {
          "id": "s_2884",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
          "position": 12,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback."
        },
        {
          "id": "s_2885",
          "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 13,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object."
        },
        {
          "id": "s_2886",
          "content": "If `path` resolves to a socket or a pipe, the function will return a system dependent name for that object.",
          "position": 14,
          "originalSentence": "If `path` resolves to a socket or a pipe, the function will return a system dependent name for that object."
        },
        {
          "id": "s_2887",
          "content": "A path that does not exist results in an ENOENT error.",
          "position": 15,
          "originalSentence": "A path that does not exist results in an ENOENT error."
        },
        {
          "id": "s_2888",
          "content": "path` is the absolute file path.",
          "position": 16,
          "originalSentence": "path` is the absolute file path."
        },
        {
          "id": "s_2907",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}"
        },
        {
          "id": "s_2908",
          "content": "Asynchronous realpath(3).",
          "position": 1,
          "originalSentence": "Asynchronous realpath(3)."
        },
        {
          "id": "s_2909",
          "content": "The `callback` gets two arguments `(err, resolvedPath)`.",
          "position": 2,
          "originalSentence": "The `callback` gets two arguments `(err, resolvedPath)`."
        },
        {
          "id": "s_2910",
          "content": "Only paths that can be converted to UTF8 strings are supported.",
          "position": 3,
          "originalSentence": "Only paths that can be converted to UTF8 strings are supported."
        },
        {
          "id": "s_2911",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
          "position": 4,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback."
        },
        {
          "id": "s_2912",
          "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 5,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object."
        },
        {
          "id": "s_2913",
          "content": "On Linux, when Node.",
          "position": 6,
          "originalSentence": "On Linux, when Node."
        },
        {
          "id": "s_2914",
          "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
          "position": 7,
          "originalSentence": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work."
        },
        {
          "id": "s_2915",
          "content": "Glibc does not have this restriction.",
          "position": 8,
          "originalSentence": "Glibc does not have this restriction."
        },
        {
          "id": "s_2928",
          "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2929",
          "content": "Asynchronously rename file at `oldPath` to the pathname provided as `newPath`.",
          "position": 1,
          "originalSentence": "Asynchronously rename file at `oldPath` to the pathname provided as `newPath`."
        },
        {
          "id": "s_2930",
          "content": "In the case that `newPath` already exists, it will be overwritten.",
          "position": 2,
          "originalSentence": "In the case that `newPath` already exists, it will be overwritten."
        },
        {
          "id": "s_2931",
          "content": "If there is a directory at `newPath`, an error will be raised instead.",
          "position": 3,
          "originalSentence": "If there is a directory at `newPath`, an error will be raised instead."
        },
        {
          "id": "s_2932",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 4,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2933",
          "content": "See also: rename(2).",
          "position": 5,
          "originalSentence": "See also: rename(2)."
        },
        {
          "id": "s_2952",
          "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed."
        },
        {
          "id": "s_2953",
          "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
          "position": 1,
          "originalSentence": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed."
        },
        {
          "id": "s_2954",
          "content": "The `options` argument is still accepted for backwards compatibility but it is not used.",
          "position": 2,
          "originalSentence": "The `options` argument is still accepted for backwards compatibility but it is not used."
        },
        {
          "id": "s_2955",
          "content": "`callback` {Function} * `err` {Error}",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_2956",
          "content": "Asynchronous rmdir(2).",
          "position": 4,
          "originalSentence": "Asynchronous rmdir(2)."
        },
        {
          "id": "s_2957",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 5,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_2958",
          "content": "rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
          "position": 6,
          "originalSentence": "rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX."
        },
        {
          "id": "s_2959",
          "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
          "position": 7,
          "originalSentence": "To get a behavior similar to the `rm -rf` Unix command, use [`fs."
        },
        {
          "id": "s_2960",
          "content": "rm()`][] with options `{ recursive: true, force: true }`.",
          "position": 8,
          "originalSentence": "rm()`][] with options `{ recursive: true, force: true }`."
        },
        {
          "id": "s_2993",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist."
        },
        {
          "id": "s_2994",
          "content": "**Default:** `false`.",
          "position": 1,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_2995",
          "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
          "position": 2,
          "originalSentence": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node."
        },
        {
          "id": "s_2996",
          "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
          "position": 3,
          "originalSentence": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try."
        },
        {
          "id": "s_2997",
          "content": "This option represents the number of retries.",
          "position": 4,
          "originalSentence": "This option represents the number of retries."
        },
        {
          "id": "s_2998",
          "content": "This option is ignored if the `recursive` option is not `true`.",
          "position": 5,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "s_2999",
          "content": "**Default:** `0`.",
          "position": 6,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "s_3000",
          "content": "* `recursive` {boolean} If `true`, perform a recursive removal.",
          "position": 7,
          "originalSentence": "* `recursive` {boolean} If `true`, perform a recursive removal."
        },
        {
          "id": "s_3001",
          "content": "In recursive mode operations are retried on failure.",
          "position": 8,
          "originalSentence": "In recursive mode operations are retried on failure."
        },
        {
          "id": "s_3002",
          "content": "**Default:** `false`.",
          "position": 9,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_3003",
          "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
          "position": 10,
          "originalSentence": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries."
        },
        {
          "id": "s_3004",
          "content": "This option is ignored if the `recursive` option is not `true`.",
          "position": 11,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "s_3005",
          "content": "**Default:** `100`.",
          "position": 12,
          "originalSentence": "**Default:** `100`."
        },
        {
          "id": "s_3006",
          "content": "`callback` {Function} * `err` {Error}",
          "position": 13,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_3007",
          "content": "Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 14,
          "originalSentence": "Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility)."
        },
        {
          "id": "s_3008",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 15,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_3051",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_3052",
          "content": "Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "s_3053",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_3054",
          "content": "`callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error} * `stats` {fs."
        },
        {
          "id": "s_3055",
          "content": "Asynchronous stat(2).",
          "position": 4,
          "originalSentence": "Asynchronous stat(2)."
        },
        {
          "id": "s_3056",
          "content": "The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
          "position": 5,
          "originalSentence": "The callback gets two arguments `(err, stats)` where `stats` is an {fs."
        },
        {
          "id": "s_3057",
          "content": "Stats} object.",
          "position": 6,
          "originalSentence": "Stats} object."
        },
        {
          "id": "s_3058",
          "content": "In case of an error, the `err.",
          "position": 7,
          "originalSentence": "In case of an error, the `err."
        },
        {
          "id": "s_3059",
          "content": "code` will be one of [Common System Errors][].",
          "position": 8,
          "originalSentence": "code` will be one of [Common System Errors][]."
        },
        {
          "id": "s_3060",
          "content": "stat()`][] follows symbolic links.",
          "position": 9,
          "originalSentence": "stat()`][] follows symbolic links."
        },
        {
          "id": "s_3061",
          "content": "lstat()`][] to look at the links themselves.",
          "position": 10,
          "originalSentence": "lstat()`][] to look at the links themselves."
        },
        {
          "id": "s_3062",
          "content": "stat()` to check for the existence of a file before calling `fs.",
          "position": 11,
          "originalSentence": "stat()` to check for the existence of a file before calling `fs."
        },
        {
          "id": "s_3063",
          "content": "open()`, `fs.",
          "position": 12,
          "originalSentence": "open()`, `fs."
        },
        {
          "id": "s_3064",
          "content": "readFile()`, or `fs.",
          "position": 13,
          "originalSentence": "readFile()`, or `fs."
        },
        {
          "id": "s_3065",
          "content": "writeFile()` is not recommended.",
          "position": 14,
          "originalSentence": "writeFile()` is not recommended."
        },
        {
          "id": "s_3066",
          "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.",
          "position": 15,
          "originalSentence": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not available."
        },
        {
          "id": "s_3067",
          "content": "To check if a file exists without manipulating it afterwards, [`fs.",
          "position": 16,
          "originalSentence": "To check if a file exists without manipulating it afterwards, [`fs."
        },
        {
          "id": "s_3068",
          "content": "access()`][] is recommended.",
          "position": 17,
          "originalSentence": "access()`][] is recommended."
        },
        {
          "id": "s_3069",
          "content": "For example, given the following directory structure:",
          "position": 18,
          "originalSentence": "For example, given the following directory structure:"
        },
        {
          "id": "s_3070",
          "content": "The next program will check for the stats of the given paths:",
          "position": 19,
          "originalSentence": "The next program will check for the stats of the given paths:"
        },
        {
          "id": "s_3071",
          "content": "The resulting output will resemble:",
          "position": 20,
          "originalSentence": "The resulting output will resemble:"
        },
        {
          "id": "s_3092",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_3093",
          "content": "StatFs} object should be `bigint`.",
          "position": 1,
          "originalSentence": "StatFs} object should be `bigint`."
        },
        {
          "id": "s_3094",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_3095",
          "content": "`callback` {Function} * `err` {Error} * `stats` {fs.",
          "position": 3,
          "originalSentence": "`callback` {Function} * `err` {Error} * `stats` {fs."
        },
        {
          "id": "s_3096",
          "content": "Asynchronous statfs(2).",
          "position": 4,
          "originalSentence": "Asynchronous statfs(2)."
        },
        {
          "id": "s_3097",
          "content": "Returns information about the mounted file system which contains `path`.",
          "position": 5,
          "originalSentence": "Returns information about the mounted file system which contains `path`."
        },
        {
          "id": "s_3098",
          "content": "The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
          "position": 6,
          "originalSentence": "The callback gets two arguments `(err, stats)` where `stats` is an {fs."
        },
        {
          "id": "s_3099",
          "content": "StatFs} object.",
          "position": 7,
          "originalSentence": "StatFs} object."
        },
        {
          "id": "s_3100",
          "content": "In case of an error, the `err.",
          "position": 8,
          "originalSentence": "In case of an error, the `err."
        },
        {
          "id": "s_3101",
          "content": "code` will be one of [Common System Errors][].",
          "position": 9,
          "originalSentence": "code` will be one of [Common System Errors][]."
        },
        {
          "id": "s_3130",
          "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_3131",
          "content": "Creates the link called `path` pointing to `target`.",
          "position": 1,
          "originalSentence": "Creates the link called `path` pointing to `target`."
        },
        {
          "id": "s_3132",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_3133",
          "content": "See the POSIX symlink(2) documentation for more details.",
          "position": 3,
          "originalSentence": "See the POSIX symlink(2) documentation for more details."
        },
        {
          "id": "s_3134",
          "content": "The `type` argument is only available on Windows and ignored on other platforms.",
          "position": 4,
          "originalSentence": "The `type` argument is only available on Windows and ignored on other platforms."
        },
        {
          "id": "s_3135",
          "content": "It can be set to `'dir'`, `'file'`, or `'junction'`.",
          "position": 5,
          "originalSentence": "It can be set to `'dir'`, `'file'`, or `'junction'`."
        },
        {
          "id": "s_3136",
          "content": "If the `type` argument is `null`, Node.",
          "position": 6,
          "originalSentence": "If the `type` argument is `null`, Node."
        },
        {
          "id": "s_3137",
          "content": "js will autodetect `target` type and use `'file'` or `'dir'`.",
          "position": 7,
          "originalSentence": "js will autodetect `target` type and use `'file'` or `'dir'`."
        },
        {
          "id": "s_3138",
          "content": "If the `target` does not exist, `'file'` will be used.",
          "position": 8,
          "originalSentence": "If the `target` does not exist, `'file'` will be used."
        },
        {
          "id": "s_3139",
          "content": "Windows junction points require the destination path to be absolute.",
          "position": 9,
          "originalSentence": "Windows junction points require the destination path to be absolute."
        },
        {
          "id": "s_3140",
          "content": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
          "position": 10,
          "originalSentence": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path."
        },
        {
          "id": "s_3141",
          "content": "Junction points on NTFS volumes can only point to directories.",
          "position": 11,
          "originalSentence": "Junction points on NTFS volumes can only point to directories."
        },
        {
          "id": "s_3142",
          "content": "Relative targets are relative to the link's parent directory.",
          "position": 12,
          "originalSentence": "Relative targets are relative to the link's parent directory."
        },
        {
          "id": "s_3143",
          "content": "The above example creates a symbolic link `mewtwo` which points to `mew` in the same directory:",
          "position": 13,
          "originalSentence": "The above example creates a symbolic link `mewtwo` which points to `mew` in the same directory:"
        },
        {
          "id": "s_3160",
          "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error|AggregateError}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error|AggregateError}"
        },
        {
          "id": "s_3161",
          "content": "Truncates the file.",
          "position": 1,
          "originalSentence": "Truncates the file."
        },
        {
          "id": "s_3162",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_3163",
          "content": "A file descriptor can also be passed as the first argument.",
          "position": 3,
          "originalSentence": "A file descriptor can also be passed as the first argument."
        },
        {
          "id": "s_3164",
          "content": "In this case, `fs.",
          "position": 4,
          "originalSentence": "In this case, `fs."
        },
        {
          "id": "s_3165",
          "content": "ftruncate()` is called.",
          "position": 5,
          "originalSentence": "ftruncate()` is called."
        },
        {
          "id": "s_3166",
          "content": "Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
          "position": 6,
          "originalSentence": "Passing a file descriptor is deprecated and may result in an error being thrown in the future."
        },
        {
          "id": "s_3167",
          "content": "See the POSIX truncate(2) documentation for more details.",
          "position": 7,
          "originalSentence": "See the POSIX truncate(2) documentation for more details."
        },
        {
          "id": "s_3182",
          "content": "`path` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_3183",
          "content": "Asynchronously removes a file or symbolic link.",
          "position": 1,
          "originalSentence": "Asynchronously removes a file or symbolic link."
        },
        {
          "id": "s_3184",
          "content": "No arguments other than a possible exception are given to the completion callback.",
          "position": 2,
          "originalSentence": "No arguments other than a possible exception are given to the completion callback."
        },
        {
          "id": "s_3185",
          "content": "unlink()` will not work on a directory, empty or otherwise.",
          "position": 3,
          "originalSentence": "unlink()` will not work on a directory, empty or otherwise."
        },
        {
          "id": "s_3186",
          "content": "To remove a directory, use [`fs.",
          "position": 4,
          "originalSentence": "To remove a directory, use [`fs."
        },
        {
          "id": "s_3187",
          "content": "rmdir()`][].",
          "position": 5,
          "originalSentence": "rmdir()`][]."
        },
        {
          "id": "s_3188",
          "content": "See the POSIX unlink(2) documentation for more details.",
          "position": 6,
          "originalSentence": "See the POSIX unlink(2) documentation for more details."
        },
        {
          "id": "s_3217",
          "content": "`filename` {string|Buffer|URL} `listener` {Function} Optional, a listener previously attached using `fs.",
          "position": 0,
          "originalSentence": "`filename` {string|Buffer|URL} `listener` {Function} Optional, a listener previously attached using `fs."
        },
        {
          "id": "s_3218",
          "content": "watchFile()`",
          "position": 1,
          "originalSentence": "watchFile()`"
        },
        {
          "id": "s_3219",
          "content": "Stop watching for changes on `filename`.",
          "position": 2,
          "originalSentence": "Stop watching for changes on `filename`."
        },
        {
          "id": "s_3220",
          "content": "If `listener` is specified, only that particular listener is removed.",
          "position": 3,
          "originalSentence": "If `listener` is specified, only that particular listener is removed."
        },
        {
          "id": "s_3221",
          "content": "Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`.",
          "position": 4,
          "originalSentence": "Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`."
        },
        {
          "id": "s_3222",
          "content": "Calling `fs.",
          "position": 5,
          "originalSentence": "Calling `fs."
        },
        {
          "id": "s_3223",
          "content": "unwatchFile()` with a filename that is not being watched is a no-op, not an error.",
          "position": 6,
          "originalSentence": "unwatchFile()` with a filename that is not being watched is a no-op, not an error."
        },
        {
          "id": "s_3224",
          "content": "Using [`fs.",
          "position": 7,
          "originalSentence": "Using [`fs."
        },
        {
          "id": "s_3225",
          "content": "watch()`][] is more efficient than `fs.",
          "position": 8,
          "originalSentence": "watch()`][] is more efficient than `fs."
        },
        {
          "id": "s_3226",
          "content": "watchFile()` and `fs.",
          "position": 9,
          "originalSentence": "watchFile()` and `fs."
        },
        {
          "id": "s_3227",
          "content": "unwatchFile()`.",
          "position": 10,
          "originalSentence": "unwatchFile()`."
        },
        {
          "id": "s_3228",
          "content": "watch()` should be used instead of `fs.",
          "position": 11,
          "originalSentence": "watch()` should be used instead of `fs."
        },
        {
          "id": "s_3229",
          "content": "watchFile()` and `fs.",
          "position": 12,
          "originalSentence": "watchFile()` and `fs."
        },
        {
          "id": "s_3230",
          "content": "unwatchFile()` when possible.",
          "position": 13,
          "originalSentence": "unwatchFile()` when possible."
        },
        {
          "id": "s_3241",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_3242",
          "content": "Change the file system timestamps of the object referenced by `path`.",
          "position": 1,
          "originalSentence": "Change the file system timestamps of the object referenced by `path`."
        },
        {
          "id": "s_3243",
          "content": "The `atime` and `mtime` arguments follow these rules:",
          "position": 2,
          "originalSentence": "The `atime` and `mtime` arguments follow these rules:"
        },
        {
          "id": "s_3244",
          "content": "Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789.",
          "position": 3,
          "originalSentence": "Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789."
        },
        {
          "id": "s_3245",
          "content": "If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
          "position": 4,
          "originalSentence": "If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown."
        },
        {
          "id": "s_3287",
          "content": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched.",
          "position": 0,
          "originalSentence": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched."
        },
        {
          "id": "s_3288",
          "content": "**Default:** `true`.",
          "position": 1,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "s_3289",
          "content": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
          "position": 2,
          "originalSentence": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory."
        },
        {
          "id": "s_3290",
          "content": "This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
          "position": 3,
          "originalSentence": "This applies when a directory is specified, and only on supported platforms (See [caveats][])."
        },
        {
          "id": "s_3291",
          "content": "**Default:** `false`.",
          "position": 4,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_3292",
          "content": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
          "position": 5,
          "originalSentence": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener."
        },
        {
          "id": "s_3293",
          "content": "**Default:** `'utf8'`.",
          "position": 6,
          "originalSentence": "**Default:** `'utf8'`."
        },
        {
          "id": "s_3294",
          "content": "* `signal` {AbortSignal} allows closing the watcher with an AbortSignal.",
          "position": 7,
          "originalSentence": "* `signal` {AbortSignal} allows closing the watcher with an AbortSignal."
        },
        {
          "id": "s_3295",
          "content": "`listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs.",
          "position": 8,
          "originalSentence": "`listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs."
        },
        {
          "id": "s_3296",
          "content": "Watch for changes on `filename`, where `filename` is either a file or a directory.",
          "position": 9,
          "originalSentence": "Watch for changes on `filename`, where `filename` is either a file or a directory."
        },
        {
          "id": "s_3297",
          "content": "The second argument is optional.",
          "position": 10,
          "originalSentence": "The second argument is optional."
        },
        {
          "id": "s_3298",
          "content": "If `options` is provided as a string, it specifies the `encoding`.",
          "position": 11,
          "originalSentence": "If `options` is provided as a string, it specifies the `encoding`."
        },
        {
          "id": "s_3299",
          "content": "Otherwise `options` should be passed as an object.",
          "position": 12,
          "originalSentence": "Otherwise `options` should be passed as an object."
        },
        {
          "id": "s_3300",
          "content": "The listener callback gets two arguments `(eventType, filename)`.",
          "position": 13,
          "originalSentence": "The listener callback gets two arguments `(eventType, filename)`."
        },
        {
          "id": "s_3301",
          "content": "`eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event.",
          "position": 14,
          "originalSentence": "`eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event."
        },
        {
          "id": "s_3302",
          "content": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory.",
          "position": 15,
          "originalSentence": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory."
        },
        {
          "id": "s_3303",
          "content": "The listener callback is attached to the `'change'` event fired by {fs.",
          "position": 16,
          "originalSentence": "The listener callback is attached to the `'change'` event fired by {fs."
        },
        {
          "id": "s_3304",
          "content": "FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`.",
          "position": 17,
          "originalSentence": "FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`."
        },
        {
          "id": "s_3305",
          "content": "If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs.",
          "position": 18,
          "originalSentence": "If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs."
        },
        {
          "id": "s_3306",
          "content": "FSWatcher}.",
          "position": 19,
          "originalSentence": "FSWatcher}."
        },
        {
          "id": "s_3319",
          "content": "watch` API is not 100% consistent across platforms, and is unavailable in some situations.",
          "position": 0,
          "originalSentence": "watch` API is not 100% consistent across platforms, and is unavailable in some situations."
        },
        {
          "id": "s_3320",
          "content": "On Windows, no events will be emitted if the watched directory is moved or renamed.",
          "position": 1,
          "originalSentence": "On Windows, no events will be emitted if the watched directory is moved or renamed."
        },
        {
          "id": "s_3321",
          "content": "An `EPERM` error is reported when the watched directory is deleted.",
          "position": 2,
          "originalSentence": "An `EPERM` error is reported when the watched directory is deleted."
        },
        {
          "id": "s_3322",
          "content": "watch` API does not provide any protection with respect to malicious actions on the file system.",
          "position": 3,
          "originalSentence": "watch` API does not provide any protection with respect to malicious actions on the file system."
        },
        {
          "id": "s_3323",
          "content": "For example, on Windows it is implemented by monitoring changes in a directory versus specific files.",
          "position": 4,
          "originalSentence": "For example, on Windows it is implemented by monitoring changes in a directory versus specific files."
        },
        {
          "id": "s_3324",
          "content": "This allows substitution of a file and fs reporting changes on the new file with the same filename.",
          "position": 5,
          "originalSentence": "This allows substitution of a file and fs reporting changes on the new file with the same filename."
        },
        {
          "id": "s_3353",
          "content": "This feature depends on the underlying operating system providing a way to be notified of file system changes.",
          "position": 0,
          "originalSentence": "This feature depends on the underlying operating system providing a way to be notified of file system changes."
        },
        {
          "id": "s_3354",
          "content": "On Linux systems, this uses [`inotify(7)`][].",
          "position": 1,
          "originalSentence": "On Linux systems, this uses [`inotify(7)`][]."
        },
        {
          "id": "s_3355",
          "content": "On BSD systems, this uses [`kqueue(2)`][].",
          "position": 2,
          "originalSentence": "On BSD systems, this uses [`kqueue(2)`][]."
        },
        {
          "id": "s_3356",
          "content": "On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories.",
          "position": 3,
          "originalSentence": "On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories."
        },
        {
          "id": "s_3357",
          "content": "On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][].",
          "position": 4,
          "originalSentence": "On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][]."
        },
        {
          "id": "s_3358",
          "content": "On Windows systems, this feature depends on [`ReadDirectoryChangesW`][].",
          "position": 5,
          "originalSentence": "On Windows systems, this feature depends on [`ReadDirectoryChangesW`][]."
        },
        {
          "id": "s_3359",
          "content": "On AIX systems, this feature depends on [`AHAFS`][], which must be enabled.",
          "position": 6,
          "originalSentence": "On AIX systems, this feature depends on [`AHAFS`][], which must be enabled."
        },
        {
          "id": "s_3360",
          "content": "On IBM i systems, this feature is not supported.",
          "position": 7,
          "originalSentence": "On IBM i systems, this feature is not supported."
        },
        {
          "id": "s_3361",
          "content": "If the underlying functionality is not available for some reason, then `fs.",
          "position": 8,
          "originalSentence": "If the underlying functionality is not available for some reason, then `fs."
        },
        {
          "id": "s_3362",
          "content": "watch()` will not be able to function and may throw an exception.",
          "position": 9,
          "originalSentence": "watch()` will not be able to function and may throw an exception."
        },
        {
          "id": "s_3363",
          "content": "For example, watching files or directories can be unreliable",
          "position": 10,
          "originalSentence": "For example, watching files or directories can be unreliable"
        },
        {
          "id": "s_3364",
          "content": "and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker.",
          "position": 11,
          "originalSentence": "and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker."
        },
        {
          "id": "s_3365",
          "content": "It is still possible to use `fs.",
          "position": 12,
          "originalSentence": "It is still possible to use `fs."
        },
        {
          "id": "s_3366",
          "content": "watchFile()`, which uses stat polling, but this method is slower and less reliable.",
          "position": 13,
          "originalSentence": "watchFile()`, which uses stat polling, but this method is slower and less reliable."
        },
        {
          "id": "s_3383",
          "content": "On Linux and macOS systems, `fs.",
          "position": 0,
          "originalSentence": "On Linux and macOS systems, `fs."
        },
        {
          "id": "s_3384",
          "content": "watch()` resolves the path to an [inode][] and watches the inode.",
          "position": 1,
          "originalSentence": "watch()` resolves the path to an [inode][] and watches the inode."
        },
        {
          "id": "s_3385",
          "content": "If the watched path is deleted and recreated, it is assigned a new inode.",
          "position": 2,
          "originalSentence": "If the watched path is deleted and recreated, it is assigned a new inode."
        },
        {
          "id": "s_3386",
          "content": "The watch will emit an event for the delete but will continue watching the _original_ inode.",
          "position": 3,
          "originalSentence": "The watch will emit an event for the delete but will continue watching the _original_ inode."
        },
        {
          "id": "s_3387",
          "content": "Events for the new inode will not be emitted.",
          "position": 4,
          "originalSentence": "Events for the new inode will not be emitted."
        },
        {
          "id": "s_3388",
          "content": "This is expected behavior.",
          "position": 5,
          "originalSentence": "This is expected behavior."
        },
        {
          "id": "s_3389",
          "content": "AIX files retain the same inode for the lifetime of a file.",
          "position": 6,
          "originalSentence": "AIX files retain the same inode for the lifetime of a file."
        },
        {
          "id": "s_3390",
          "content": "Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation).",
          "position": 7,
          "originalSentence": "Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation)."
        },
        {
          "id": "s_3397",
          "content": "Providing `filename` argument in the callback is only supported on Linux, macOS, Windows, and AIX.",
          "position": 0,
          "originalSentence": "Providing `filename` argument in the callback is only supported on Linux, macOS, Windows, and AIX."
        },
        {
          "id": "s_3398",
          "content": "Even on supported platforms, `filename` is not always guaranteed to be provided.",
          "position": 1,
          "originalSentence": "Even on supported platforms, `filename` is not always guaranteed to be provided."
        },
        {
          "id": "s_3399",
          "content": "Therefore, don't assume that `filename` argument is always provided in the callback, and have some fallback logic if it is `null`.",
          "position": 2,
          "originalSentence": "Therefore, don't assume that `filename` argument is always provided in the callback, and have some fallback logic if it is `null`."
        },
        {
          "id": "s_3461",
          "content": "`filename` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} **Default:** `false` * `persistent` {boolean} **Default:** `true` * `interval` {integer} **Default:** `5007` `listener` {Function} * `current` {fs.",
          "position": 0,
          "originalSentence": "`filename` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} **Default:** `false` * `persistent` {boolean} **Default:** `true` * `interval` {integer} **Default:** `5007` `listener` {Function} * `current` {fs."
        },
        {
          "id": "s_3462",
          "content": "Stats} * `previous` {fs.",
          "position": 1,
          "originalSentence": "Stats} * `previous` {fs."
        },
        {
          "id": "s_3463",
          "content": "Stats} Returns: {fs.",
          "position": 2,
          "originalSentence": "Stats} Returns: {fs."
        },
        {
          "id": "s_3464",
          "content": "StatWatcher}",
          "position": 3,
          "originalSentence": "StatWatcher}"
        },
        {
          "id": "s_3465",
          "content": "Watch for changes on `filename`.",
          "position": 4,
          "originalSentence": "Watch for changes on `filename`."
        },
        {
          "id": "s_3466",
          "content": "The callback `listener` will be called each time the file is accessed.",
          "position": 5,
          "originalSentence": "The callback `listener` will be called each time the file is accessed."
        },
        {
          "id": "s_3467",
          "content": "The `options` argument may be omitted.",
          "position": 6,
          "originalSentence": "The `options` argument may be omitted."
        },
        {
          "id": "s_3468",
          "content": "If provided, it should be an object.",
          "position": 7,
          "originalSentence": "If provided, it should be an object."
        },
        {
          "id": "s_3469",
          "content": "The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched.",
          "position": 8,
          "originalSentence": "The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched."
        },
        {
          "id": "s_3470",
          "content": "The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds.",
          "position": 9,
          "originalSentence": "The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds."
        },
        {
          "id": "s_3471",
          "content": "The `listener` gets two arguments the current stat object and the previous stat object:",
          "position": 10,
          "originalSentence": "The `listener` gets two arguments the current stat object and the previous stat object:"
        },
        {
          "id": "s_3472",
          "content": "These stat objects are instances of `fs.",
          "position": 11,
          "originalSentence": "These stat objects are instances of `fs."
        },
        {
          "id": "s_3473",
          "content": "If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s.",
          "position": 12,
          "originalSentence": "If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s."
        },
        {
          "id": "s_3474",
          "content": "To be notified when the file was modified, not just accessed, it is necessary to compare `curr.",
          "position": 13,
          "originalSentence": "To be notified when the file was modified, not just accessed, it is necessary to compare `curr."
        },
        {
          "id": "s_3475",
          "content": "mtimeMs` and `prev.",
          "position": 14,
          "originalSentence": "mtimeMs` and `prev."
        },
        {
          "id": "s_3476",
          "content": "When an `fs.",
          "position": 15,
          "originalSentence": "When an `fs."
        },
        {
          "id": "s_3477",
          "content": "watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch).",
          "position": 16,
          "originalSentence": "watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch)."
        },
        {
          "id": "s_3478",
          "content": "If the file is created later on, the listener will be called again, with the latest stat objects.",
          "position": 17,
          "originalSentence": "If the file is created later on, the listener will be called again, with the latest stat objects."
        },
        {
          "id": "s_3479",
          "content": "This is a change in functionality since v0.",
          "position": 18,
          "originalSentence": "This is a change in functionality since v0."
        },
        {
          "id": "s_3480",
          "content": "Using [`fs.",
          "position": 19,
          "originalSentence": "Using [`fs."
        },
        {
          "id": "s_3481",
          "content": "watch()`][] is more efficient than `fs.",
          "position": 20,
          "originalSentence": "watch()`][] is more efficient than `fs."
        },
        {
          "id": "s_3482",
          "content": "watchFile` and `fs.",
          "position": 21,
          "originalSentence": "watchFile` and `fs."
        },
        {
          "id": "s_3483",
          "content": "unwatchFile`.",
          "position": 22,
          "originalSentence": "unwatchFile`."
        },
        {
          "id": "s_3484",
          "content": "watch` should be used instead of `fs.",
          "position": 23,
          "originalSentence": "watch` should be used instead of `fs."
        },
        {
          "id": "s_3485",
          "content": "watchFile` and `fs.",
          "position": 24,
          "originalSentence": "watchFile` and `fs."
        },
        {
          "id": "s_3486",
          "content": "unwatchFile` when possible.",
          "position": 25,
          "originalSentence": "unwatchFile` when possible."
        },
        {
          "id": "s_3487",
          "content": "When a file being watched by `fs.",
          "position": 26,
          "originalSentence": "When a file being watched by `fs."
        },
        {
          "id": "s_3488",
          "content": "watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance).",
          "position": 27,
          "originalSentence": "watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance)."
        },
        {
          "id": "s_3489",
          "content": "This happens when:",
          "position": 28,
          "originalSentence": "This happens when:"
        },
        {
          "id": "s_3490",
          "content": "the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name",
          "position": 29,
          "originalSentence": "the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name"
        },
        {
          "id": "s_3525",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer."
        },
        {
          "id": "s_3526",
          "content": "byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}",
          "position": 1,
          "originalSentence": "byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}"
        },
        {
          "id": "s_3527",
          "content": "Write `buffer` to the file specified by `fd`.",
          "position": 2,
          "originalSentence": "Write `buffer` to the file specified by `fd`."
        },
        {
          "id": "s_3528",
          "content": "`offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write.",
          "position": 3,
          "originalSentence": "`offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write."
        },
        {
          "id": "s_3529",
          "content": "`position` refers to the offset from the beginning of the file where this data should be written.",
          "position": 4,
          "originalSentence": "`position` refers to the offset from the beginning of the file where this data should be written."
        },
        {
          "id": "s_3530",
          "content": "If `typeof position !",
          "position": 5,
          "originalSentence": "If `typeof position !"
        },
        {
          "id": "s_3531",
          "content": "== 'number'`, the data will be written at the current position.",
          "position": 6,
          "originalSentence": "== 'number'`, the data will be written at the current position."
        },
        {
          "id": "s_3532",
          "content": "See pwrite(2).",
          "position": 7,
          "originalSentence": "See pwrite(2)."
        },
        {
          "id": "s_3533",
          "content": "The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`.",
          "position": 8,
          "originalSentence": "The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`."
        },
        {
          "id": "s_3534",
          "content": "If this method is invoked as its [`util.",
          "position": 9,
          "originalSentence": "If this method is invoked as its [`util."
        },
        {
          "id": "s_3535",
          "content": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties.",
          "position": 10,
          "originalSentence": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties."
        },
        {
          "id": "s_3536",
          "content": "It is unsafe to use `fs.",
          "position": 11,
          "originalSentence": "It is unsafe to use `fs."
        },
        {
          "id": "s_3537",
          "content": "write()` multiple times on the same file without waiting for the callback.",
          "position": 12,
          "originalSentence": "write()` multiple times on the same file without waiting for the callback."
        },
        {
          "id": "s_3538",
          "content": "For this scenario, [`fs.",
          "position": 13,
          "originalSentence": "For this scenario, [`fs."
        },
        {
          "id": "s_3539",
          "content": "createWriteStream()`][] is recommended.",
          "position": 14,
          "originalSentence": "createWriteStream()`][] is recommended."
        },
        {
          "id": "s_3540",
          "content": "On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 15,
          "originalSentence": "On Linux, positional writes don't work when the file is opened in append mode."
        },
        {
          "id": "s_3541",
          "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 16,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "s_3554",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "s_3555",
          "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}",
          "position": 1,
          "originalSentence": "byteLength - offset` * `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}"
        },
        {
          "id": "s_3556",
          "content": "Write `buffer` to the file specified by `fd`.",
          "position": 2,
          "originalSentence": "Write `buffer` to the file specified by `fd`."
        },
        {
          "id": "s_3557",
          "content": "Similar to the above `fs.",
          "position": 3,
          "originalSentence": "Similar to the above `fs."
        },
        {
          "id": "s_3558",
          "content": "write` function, this version takes an optional `options` object.",
          "position": 4,
          "originalSentence": "write` function, this version takes an optional `options` object."
        },
        {
          "id": "s_3559",
          "content": "If no `options` object is specified, it will default with the above values.",
          "position": 5,
          "originalSentence": "If no `options` object is specified, it will default with the above values."
        },
        {
          "id": "s_3605",
          "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `written` {integer} * `string` {string}",
          "position": 0,
          "originalSentence": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `written` {integer} * `string` {string}"
        },
        {
          "id": "s_3606",
          "content": "Write `string` to the file specified by `fd`.",
          "position": 1,
          "originalSentence": "Write `string` to the file specified by `fd`."
        },
        {
          "id": "s_3607",
          "content": "If `string` is not a string, an exception is thrown.",
          "position": 2,
          "originalSentence": "If `string` is not a string, an exception is thrown."
        },
        {
          "id": "s_3608",
          "content": "`position` refers to the offset from the beginning of the file where this data should be written.",
          "position": 3,
          "originalSentence": "`position` refers to the offset from the beginning of the file where this data should be written."
        },
        {
          "id": "s_3609",
          "content": "If `typeof position !",
          "position": 4,
          "originalSentence": "If `typeof position !"
        },
        {
          "id": "s_3610",
          "content": "== 'number'` the data will be written at the current position.",
          "position": 5,
          "originalSentence": "== 'number'` the data will be written at the current position."
        },
        {
          "id": "s_3611",
          "content": "See pwrite(2).",
          "position": 6,
          "originalSentence": "See pwrite(2)."
        },
        {
          "id": "s_3612",
          "content": "`encoding` is the expected string encoding.",
          "position": 7,
          "originalSentence": "`encoding` is the expected string encoding."
        },
        {
          "id": "s_3613",
          "content": "The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written.",
          "position": 8,
          "originalSentence": "The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written."
        },
        {
          "id": "s_3614",
          "content": "Bytes written is not necessarily the same as string characters written.",
          "position": 9,
          "originalSentence": "Bytes written is not necessarily the same as string characters written."
        },
        {
          "id": "s_3615",
          "content": "See [`Buffer.",
          "position": 10,
          "originalSentence": "See [`Buffer."
        },
        {
          "id": "s_3616",
          "content": "byteLength`][].",
          "position": 11,
          "originalSentence": "byteLength`][]."
        },
        {
          "id": "s_3617",
          "content": "It is unsafe to use `fs.",
          "position": 12,
          "originalSentence": "It is unsafe to use `fs."
        },
        {
          "id": "s_3618",
          "content": "write()` multiple times on the same file without waiting for the callback.",
          "position": 13,
          "originalSentence": "write()` multiple times on the same file without waiting for the callback."
        },
        {
          "id": "s_3619",
          "content": "For this scenario, [`fs.",
          "position": 14,
          "originalSentence": "For this scenario, [`fs."
        },
        {
          "id": "s_3620",
          "content": "createWriteStream()`][] is recommended.",
          "position": 15,
          "originalSentence": "createWriteStream()`][] is recommended."
        },
        {
          "id": "s_3621",
          "content": "On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 16,
          "originalSentence": "On Linux, positional writes don't work when the file is opened in append mode."
        },
        {
          "id": "s_3622",
          "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 17,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "s_3623",
          "content": "On Windows, if the file descriptor is connected to the console (e.",
          "position": 18,
          "originalSentence": "On Windows, if the file descriptor is connected to the console (e."
        },
        {
          "id": "s_3624",
          "content": "`fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used.",
          "position": 19,
          "originalSentence": "`fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used."
        },
        {
          "id": "s_3625",
          "content": "It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command.",
          "position": 20,
          "originalSentence": "It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command."
        },
        {
          "id": "s_3626",
          "content": "See the [chcp][] docs for more details.",
          "position": 21,
          "originalSentence": "See the [chcp][] docs for more details."
        },
        {
          "id": "s_3686",
          "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_3687",
          "content": "**Default:** `'w'`.",
          "position": 1,
          "originalSentence": "**Default:** `'w'`."
        },
        {
          "id": "s_3688",
          "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs."
        },
        {
          "id": "s_3689",
          "content": "fsync()` is used to flush the data.",
          "position": 3,
          "originalSentence": "fsync()` is used to flush the data."
        },
        {
          "id": "s_3690",
          "content": "**Default:** `false`.",
          "position": 4,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_3691",
          "content": "* `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError}",
          "position": 5,
          "originalSentence": "* `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError}"
        },
        {
          "id": "s_3692",
          "content": "When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists.",
          "position": 6,
          "originalSentence": "When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists."
        },
        {
          "id": "s_3693",
          "content": "`data` can be a string or a buffer.",
          "position": 7,
          "originalSentence": "`data` can be a string or a buffer."
        },
        {
          "id": "s_3694",
          "content": "When `file` is a file descriptor, the behavior is similar to calling `fs.",
          "position": 8,
          "originalSentence": "When `file` is a file descriptor, the behavior is similar to calling `fs."
        },
        {
          "id": "s_3695",
          "content": "write()` directly (which is recommended).",
          "position": 9,
          "originalSentence": "write()` directly (which is recommended)."
        },
        {
          "id": "s_3696",
          "content": "See the notes below on using a file descriptor.",
          "position": 10,
          "originalSentence": "See the notes below on using a file descriptor."
        },
        {
          "id": "s_3697",
          "content": "The `encoding` option is ignored if `data` is a buffer.",
          "position": 11,
          "originalSentence": "The `encoding` option is ignored if `data` is a buffer."
        },
        {
          "id": "s_3698",
          "content": "The `mode` option only affects the newly created file.",
          "position": 12,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "s_3699",
          "content": "open()`][] for more details.",
          "position": 13,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "s_3700",
          "content": "If `options` is a string, then it specifies the encoding:",
          "position": 14,
          "originalSentence": "If `options` is a string, then it specifies the encoding:"
        },
        {
          "id": "s_3701",
          "content": "It is unsafe to use `fs.",
          "position": 15,
          "originalSentence": "It is unsafe to use `fs."
        },
        {
          "id": "s_3702",
          "content": "writeFile()` multiple times on the same file without waiting for the callback.",
          "position": 16,
          "originalSentence": "writeFile()` multiple times on the same file without waiting for the callback."
        },
        {
          "id": "s_3703",
          "content": "For this scenario, [`fs.",
          "position": 17,
          "originalSentence": "For this scenario, [`fs."
        },
        {
          "id": "s_3704",
          "content": "createWriteStream()`][] is recommended.",
          "position": 18,
          "originalSentence": "createWriteStream()`][] is recommended."
        },
        {
          "id": "s_3705",
          "content": "Similarly to `fs.",
          "position": 19,
          "originalSentence": "Similarly to `fs."
        },
        {
          "id": "s_3706",
          "content": "readFile` - `fs.",
          "position": 20,
          "originalSentence": "readFile` - `fs."
        },
        {
          "id": "s_3707",
          "content": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
          "position": 21,
          "originalSentence": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it."
        },
        {
          "id": "s_3708",
          "content": "For performance sensitive code consider using [`fs.",
          "position": 22,
          "originalSentence": "For performance sensitive code consider using [`fs."
        },
        {
          "id": "s_3709",
          "content": "createWriteStream()`][].",
          "position": 23,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "s_3710",
          "content": "It is possible to use an {AbortSignal} to cancel an `fs.",
          "position": 24,
          "originalSentence": "It is possible to use an {AbortSignal} to cancel an `fs."
        },
        {
          "id": "s_3711",
          "content": "writeFile()`.",
          "position": 25,
          "originalSentence": "writeFile()`."
        },
        {
          "id": "s_3712",
          "content": "Cancelation is \"best effort\", and some amount of data is likely still to be written.",
          "position": 26,
          "originalSentence": "Cancelation is \"best effort\", and some amount of data is likely still to be written."
        },
        {
          "id": "s_3713",
          "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
          "position": 27,
          "originalSentence": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs."
        },
        {
          "id": "s_3714",
          "content": "writeFile` performs.",
          "position": 28,
          "originalSentence": "writeFile` performs."
        },
        {
          "id": "s_3743",
          "content": "When `file` is a file descriptor, the behavior is almost identical to directly calling `fs.",
          "position": 0,
          "originalSentence": "When `file` is a file descriptor, the behavior is almost identical to directly calling `fs."
        },
        {
          "id": "s_3744",
          "content": "write()` like:",
          "position": 1,
          "originalSentence": "write()` like:"
        },
        {
          "id": "s_3745",
          "content": "The difference from directly calling `fs.",
          "position": 2,
          "originalSentence": "The difference from directly calling `fs."
        },
        {
          "id": "s_3746",
          "content": "write()` is that under some unusual conditions, `fs.",
          "position": 3,
          "originalSentence": "write()` is that under some unusual conditions, `fs."
        },
        {
          "id": "s_3747",
          "content": "write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs.",
          "position": 4,
          "originalSentence": "write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs."
        },
        {
          "id": "s_3748",
          "content": "writeFile()` retries until the data is entirely written (or an error occurs).",
          "position": 5,
          "originalSentence": "writeFile()` retries until the data is entirely written (or an error occurs)."
        },
        {
          "id": "s_3749",
          "content": "The implications of this are a common source of confusion.",
          "position": 6,
          "originalSentence": "The implications of this are a common source of confusion."
        },
        {
          "id": "s_3750",
          "content": "In the file descriptor case, the file is not replaced!",
          "position": 7,
          "originalSentence": "In the file descriptor case, the file is not replaced!"
        },
        {
          "id": "s_3751",
          "content": "The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.",
          "position": 8,
          "originalSentence": "The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data."
        },
        {
          "id": "s_3752",
          "content": "For example, if `fs.",
          "position": 9,
          "originalSentence": "For example, if `fs."
        },
        {
          "id": "s_3753",
          "content": "writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'`",
          "position": 10,
          "originalSentence": "writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'`"
        },
        {
          "id": "s_3754",
          "content": "and might contain some of the file's original data (depending on the size of the original file",
          "position": 11,
          "originalSentence": "and might contain some of the file's original data (depending on the size of the original file"
        },
        {
          "id": "s_3755",
          "content": "and the position of the file descriptor).",
          "position": 12,
          "originalSentence": "and the position of the file descriptor)."
        },
        {
          "id": "s_3756",
          "content": "If a file name had been used instead of a descriptor, the file would be guaranteed to contain only `', World'`.",
          "position": 13,
          "originalSentence": "If a file name had been used instead of a descriptor, the file would be guaranteed to contain only `', World'`."
        },
        {
          "id": "s_3787",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffers` {ArrayBufferView\\[]}",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffers` {ArrayBufferView\\[]}"
        },
        {
          "id": "s_3788",
          "content": "Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`.",
          "position": 1,
          "originalSentence": "Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`."
        },
        {
          "id": "s_3789",
          "content": "`position` is the offset from the beginning of the file where this data should be written.",
          "position": 2,
          "originalSentence": "`position` is the offset from the beginning of the file where this data should be written."
        },
        {
          "id": "s_3790",
          "content": "If `typeof position !",
          "position": 3,
          "originalSentence": "If `typeof position !"
        },
        {
          "id": "s_3791",
          "content": "== 'number'`, the data will be written at the current position.",
          "position": 4,
          "originalSentence": "== 'number'`, the data will be written at the current position."
        },
        {
          "id": "s_3792",
          "content": "The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`.",
          "position": 5,
          "originalSentence": "The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`."
        },
        {
          "id": "s_3793",
          "content": "`bytesWritten` is how many bytes were written from `buffers`.",
          "position": 6,
          "originalSentence": "`bytesWritten` is how many bytes were written from `buffers`."
        },
        {
          "id": "s_3794",
          "content": "If this method is [`util.",
          "position": 7,
          "originalSentence": "If this method is [`util."
        },
        {
          "id": "s_3795",
          "content": "promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties.",
          "position": 8,
          "originalSentence": "promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties."
        },
        {
          "id": "s_3796",
          "content": "It is unsafe to use `fs.",
          "position": 9,
          "originalSentence": "It is unsafe to use `fs."
        },
        {
          "id": "s_3797",
          "content": "writev()` multiple times on the same file without waiting for the callback.",
          "position": 10,
          "originalSentence": "writev()` multiple times on the same file without waiting for the callback."
        },
        {
          "id": "s_3798",
          "content": "For this scenario, use [`fs.",
          "position": 11,
          "originalSentence": "For this scenario, use [`fs."
        },
        {
          "id": "s_3799",
          "content": "createWriteStream()`][].",
          "position": 12,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "s_3800",
          "content": "On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 13,
          "originalSentence": "On Linux, positional writes don't work when the file is opened in append mode."
        },
        {
          "id": "s_3801",
          "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 14,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "s_3803",
          "content": "The synchronous APIs perform all operations synchronously, blocking the event loop until the operation completes or fails.",
          "position": 0,
          "originalSentence": "The synchronous APIs perform all operations synchronously, blocking the event loop until the operation completes or fails."
        },
        {
          "id": "s_3824",
          "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs."
        },
        {
          "id": "s_3825",
          "content": "Synchronously tests a user's permissions for the file or directory specified by `path`.",
          "position": 1,
          "originalSentence": "Synchronously tests a user's permissions for the file or directory specified by `path`."
        },
        {
          "id": "s_3826",
          "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
          "position": 2,
          "originalSentence": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed."
        },
        {
          "id": "s_3827",
          "content": "`mode` should be either the value `fs.",
          "position": 3,
          "originalSentence": "`mode` should be either the value `fs."
        },
        {
          "id": "s_3828",
          "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs.",
          "position": 4,
          "originalSentence": "F_OK` or a mask consisting of the bitwise OR of any of `fs."
        },
        {
          "id": "s_3829",
          "content": "R_OK`, `fs.",
          "position": 5,
          "originalSentence": "R_OK`, `fs."
        },
        {
          "id": "s_3830",
          "content": "W_OK`, and `fs.",
          "position": 6,
          "originalSentence": "W_OK`, and `fs."
        },
        {
          "id": "s_3831",
          "content": "Check [File access constants][] for possible values of `mode`.",
          "position": 7,
          "originalSentence": "Check [File access constants][] for possible values of `mode`."
        },
        {
          "id": "s_3832",
          "content": "If any of the accessibility checks fail, an `Error` will be thrown.",
          "position": 8,
          "originalSentence": "If any of the accessibility checks fail, an `Error` will be thrown."
        },
        {
          "id": "s_3833",
          "content": "Otherwise, the method will return `undefined`.",
          "position": 9,
          "originalSentence": "Otherwise, the method will return `undefined`."
        },
        {
          "id": "s_3860",
          "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_3861",
          "content": "**Default:** `'a'`.",
          "position": 1,
          "originalSentence": "**Default:** `'a'`."
        },
        {
          "id": "s_3862",
          "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it."
        },
        {
          "id": "s_3863",
          "content": "**Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_3864",
          "content": "Synchronously append data to a file, creating the file if it does not yet exist.",
          "position": 4,
          "originalSentence": "Synchronously append data to a file, creating the file if it does not yet exist."
        },
        {
          "id": "s_3865",
          "content": "`data` can be a string or a {Buffer}.",
          "position": 5,
          "originalSentence": "`data` can be a string or a {Buffer}."
        },
        {
          "id": "s_3866",
          "content": "The `mode` option only affects the newly created file.",
          "position": 6,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "s_3867",
          "content": "open()`][] for more details.",
          "position": 7,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "s_3868",
          "content": "If `options` is a string, then it specifies the encoding:",
          "position": 8,
          "originalSentence": "If `options` is a string, then it specifies the encoding:"
        },
        {
          "id": "s_3869",
          "content": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
          "position": 9,
          "originalSentence": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs."
        },
        {
          "id": "s_3870",
          "content": "open()` or `fs.",
          "position": 10,
          "originalSentence": "open()` or `fs."
        },
        {
          "id": "s_3871",
          "content": "openSync()`).",
          "position": 11,
          "originalSentence": "openSync()`)."
        },
        {
          "id": "s_3872",
          "content": "The file descriptor will not be closed automatically.",
          "position": 12,
          "originalSentence": "The file descriptor will not be closed automatically."
        },
        {
          "id": "s_3881",
          "content": "`path` {string|Buffer|URL} `mode` {string|integer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {string|integer}"
        },
        {
          "id": "s_3882",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_3883",
          "content": "chmod()`][].",
          "position": 2,
          "originalSentence": "chmod()`][]."
        },
        {
          "id": "s_3884",
          "content": "See the POSIX chmod(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX chmod(2) documentation for more detail."
        },
        {
          "id": "s_3897",
          "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer}"
        },
        {
          "id": "s_3898",
          "content": "Synchronously changes owner and group of a file.",
          "position": 1,
          "originalSentence": "Synchronously changes owner and group of a file."
        },
        {
          "id": "s_3899",
          "content": "Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_3900",
          "content": "This is the synchronous version of [`fs.",
          "position": 3,
          "originalSentence": "This is the synchronous version of [`fs."
        },
        {
          "id": "s_3901",
          "content": "chown()`][].",
          "position": 4,
          "originalSentence": "chown()`][]."
        },
        {
          "id": "s_3902",
          "content": "See the POSIX chown(2) documentation for more detail.",
          "position": 5,
          "originalSentence": "See the POSIX chown(2) documentation for more detail."
        },
        {
          "id": "s_3915",
          "content": "`fd` {integer}",
          "position": 0,
          "originalSentence": "`fd` {integer}"
        },
        {
          "id": "s_3916",
          "content": "Closes the file descriptor.",
          "position": 1,
          "originalSentence": "Closes the file descriptor."
        },
        {
          "id": "s_3917",
          "content": "Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_3918",
          "content": "Calling `fs.",
          "position": 3,
          "originalSentence": "Calling `fs."
        },
        {
          "id": "s_3919",
          "content": "closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
          "position": 4,
          "originalSentence": "closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior."
        },
        {
          "id": "s_3920",
          "content": "See the POSIX close(2) documentation for more detail.",
          "position": 5,
          "originalSentence": "See the POSIX close(2) documentation for more detail."
        },
        {
          "id": "s_3955",
          "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation.",
          "position": 0,
          "originalSentence": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation."
        },
        {
          "id": "s_3956",
          "content": "**Default:** `0`.",
          "position": 1,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "s_3957",
          "content": "Synchronously copies `src` to `dest`.",
          "position": 2,
          "originalSentence": "Synchronously copies `src` to `dest`."
        },
        {
          "id": "s_3958",
          "content": "By default, `dest` is overwritten if it already exists.",
          "position": 3,
          "originalSentence": "By default, `dest` is overwritten if it already exists."
        },
        {
          "id": "s_3959",
          "content": "Returns `undefined`.",
          "position": 4,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_3960",
          "content": "js makes no guarantees about the atomicity of the copy operation.",
          "position": 5,
          "originalSentence": "js makes no guarantees about the atomicity of the copy operation."
        },
        {
          "id": "s_3961",
          "content": "If an error occurs after the destination file has been opened for writing, Node.",
          "position": 6,
          "originalSentence": "If an error occurs after the destination file has been opened for writing, Node."
        },
        {
          "id": "s_3962",
          "content": "js will attempt to remove the destination.",
          "position": 7,
          "originalSentence": "js will attempt to remove the destination."
        },
        {
          "id": "s_3963",
          "content": "`mode` is an optional integer that specifies the behavior of the copy operation.",
          "position": 8,
          "originalSentence": "`mode` is an optional integer that specifies the behavior of the copy operation."
        },
        {
          "id": "s_3964",
          "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
          "position": 9,
          "originalSentence": "It is possible to create a mask consisting of the bitwise OR of two or more values (e."
        },
        {
          "id": "s_3965",
          "content": "COPYFILE_EXCL | fs.",
          "position": 10,
          "originalSentence": "COPYFILE_EXCL | fs."
        },
        {
          "id": "s_3966",
          "content": "COPYFILE_FICLONE`).",
          "position": 11,
          "originalSentence": "COPYFILE_FICLONE`)."
        },
        {
          "id": "s_3967",
          "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
          "position": 12,
          "originalSentence": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists."
        },
        {
          "id": "s_3968",
          "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 13,
          "originalSentence": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "s_3969",
          "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
          "position": 14,
          "originalSentence": "If the platform does not support copy-on-write, then a fallback copy mechanism is used."
        },
        {
          "id": "s_3970",
          "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
          "position": 15,
          "originalSentence": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink."
        },
        {
          "id": "s_3971",
          "content": "If the platform does not support copy-on-write, then the operation will fail.",
          "position": 16,
          "originalSentence": "If the platform does not support copy-on-write, then the operation will fail."
        },
        {
          "id": "s_4025",
          "content": "`src` {string|URL} source path to copy.",
          "position": 0,
          "originalSentence": "`src` {string|URL} source path to copy."
        },
        {
          "id": "s_4026",
          "content": "`dest` {string|URL} destination path to copy to.",
          "position": 1,
          "originalSentence": "`dest` {string|URL} destination path to copy to."
        },
        {
          "id": "s_4027",
          "content": "`options` {Object} * `dereference` {boolean} dereference symlinks.",
          "position": 2,
          "originalSentence": "`options` {Object} * `dereference` {boolean} dereference symlinks."
        },
        {
          "id": "s_4028",
          "content": "**Default:** `false`.",
          "position": 3,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4029",
          "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
          "position": 4,
          "originalSentence": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error."
        },
        {
          "id": "s_4030",
          "content": "**Default:** `false`.",
          "position": 5,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4031",
          "content": "* `filter` {Function} Function to filter copied files/directories.",
          "position": 6,
          "originalSentence": "* `filter` {Function} Function to filter copied files/directories."
        },
        {
          "id": "s_4032",
          "content": "Return `true` to copy the item, `false` to ignore it.",
          "position": 7,
          "originalSentence": "Return `true` to copy the item, `false` to ignore it."
        },
        {
          "id": "s_4033",
          "content": "When ignoring a directory, all of its contents will be skipped as well.",
          "position": 8,
          "originalSentence": "When ignoring a directory, all of its contents will be skipped as well."
        },
        {
          "id": "s_4034",
          "content": "**Default:** `undefined` * `src` {string} source path to copy.",
          "position": 9,
          "originalSentence": "**Default:** `undefined` * `src` {string} source path to copy."
        },
        {
          "id": "s_4035",
          "content": "* `dest` {string} destination path to copy to.",
          "position": 10,
          "originalSentence": "* `dest` {string} destination path to copy to."
        },
        {
          "id": "s_4036",
          "content": "* Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`.",
          "position": 11,
          "originalSentence": "* Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`."
        },
        {
          "id": "s_4037",
          "content": "* `force` {boolean} overwrite existing file or directory.",
          "position": 12,
          "originalSentence": "* `force` {boolean} overwrite existing file or directory."
        },
        {
          "id": "s_4038",
          "content": "The copy operation will ignore errors if you set this to false and the destination exists.",
          "position": 13,
          "originalSentence": "The copy operation will ignore errors if you set this to false and the destination exists."
        },
        {
          "id": "s_4039",
          "content": "Use the `errorOnExist` option to change this behavior.",
          "position": 14,
          "originalSentence": "Use the `errorOnExist` option to change this behavior."
        },
        {
          "id": "s_4040",
          "content": "**Default:** `true`.",
          "position": 15,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "s_4041",
          "content": "* `mode` {integer} modifiers for copy operation.",
          "position": 16,
          "originalSentence": "* `mode` {integer} modifiers for copy operation."
        },
        {
          "id": "s_4042",
          "content": "**Default:** `0`.",
          "position": 17,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "s_4043",
          "content": "See `mode` flag of [`fs.",
          "position": 18,
          "originalSentence": "See `mode` flag of [`fs."
        },
        {
          "id": "s_4044",
          "content": "copyFileSync()`][].",
          "position": 19,
          "originalSentence": "copyFileSync()`][]."
        },
        {
          "id": "s_4045",
          "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
          "position": 20,
          "originalSentence": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved."
        },
        {
          "id": "s_4046",
          "content": "**Default:** `false`.",
          "position": 21,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4047",
          "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
          "position": 22,
          "originalSentence": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped."
        },
        {
          "id": "s_4048",
          "content": "**Default:** `false`",
          "position": 23,
          "originalSentence": "**Default:** `false`"
        },
        {
          "id": "s_4049",
          "content": "Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
          "position": 24,
          "originalSentence": "Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files."
        },
        {
          "id": "s_4050",
          "content": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
          "position": 25,
          "originalSentence": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`."
        },
        {
          "id": "s_4071",
          "content": "`path` {string|Buffer|URL} Returns: {boolean}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} Returns: {boolean}"
        },
        {
          "id": "s_4072",
          "content": "Returns `true` if the path exists, `false` otherwise.",
          "position": 1,
          "originalSentence": "Returns `true` if the path exists, `false` otherwise."
        },
        {
          "id": "s_4073",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4074",
          "content": "exists()`][].",
          "position": 3,
          "originalSentence": "exists()`][]."
        },
        {
          "id": "s_4075",
          "content": "exists()` is deprecated, but `fs.",
          "position": 4,
          "originalSentence": "exists()` is deprecated, but `fs."
        },
        {
          "id": "s_4076",
          "content": "existsSync()` is not.",
          "position": 5,
          "originalSentence": "existsSync()` is not."
        },
        {
          "id": "s_4077",
          "content": "The `callback` parameter to `fs.",
          "position": 6,
          "originalSentence": "The `callback` parameter to `fs."
        },
        {
          "id": "s_4078",
          "content": "exists()` accepts parameters that are inconsistent with other Node.",
          "position": 7,
          "originalSentence": "exists()` accepts parameters that are inconsistent with other Node."
        },
        {
          "id": "s_4079",
          "content": "js callbacks.",
          "position": 8,
          "originalSentence": "js callbacks."
        },
        {
          "id": "s_4080",
          "content": "existsSync()` does not use a callback.",
          "position": 9,
          "originalSentence": "existsSync()` does not use a callback."
        },
        {
          "id": "s_4088",
          "content": "`fd` {integer} `mode` {string|integer}",
          "position": 0,
          "originalSentence": "`fd` {integer} `mode` {string|integer}"
        },
        {
          "id": "s_4089",
          "content": "Sets the permissions on the file.",
          "position": 1,
          "originalSentence": "Sets the permissions on the file."
        },
        {
          "id": "s_4090",
          "content": "Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4091",
          "content": "See the POSIX fchmod(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX fchmod(2) documentation for more detail."
        },
        {
          "id": "s_4102",
          "content": "`fd` {integer} `uid` {integer} The file's new owner's user id.",
          "position": 0,
          "originalSentence": "`fd` {integer} `uid` {integer} The file's new owner's user id."
        },
        {
          "id": "s_4103",
          "content": "`gid` {integer} The file's new group's group id.",
          "position": 1,
          "originalSentence": "`gid` {integer} The file's new group's group id."
        },
        {
          "id": "s_4104",
          "content": "Sets the owner of the file.",
          "position": 2,
          "originalSentence": "Sets the owner of the file."
        },
        {
          "id": "s_4105",
          "content": "Returns `undefined`.",
          "position": 3,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4106",
          "content": "See the POSIX fchown(2) documentation for more detail.",
          "position": 4,
          "originalSentence": "See the POSIX fchown(2) documentation for more detail."
        },
        {
          "id": "s_4115",
          "content": "`fd` {integer}",
          "position": 0,
          "originalSentence": "`fd` {integer}"
        },
        {
          "id": "s_4116",
          "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
          "position": 1,
          "originalSentence": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state."
        },
        {
          "id": "s_4117",
          "content": "Refer to the POSIX fdatasync(2) documentation for details.",
          "position": 2,
          "originalSentence": "Refer to the POSIX fdatasync(2) documentation for details."
        },
        {
          "id": "s_4118",
          "content": "Returns `undefined`.",
          "position": 3,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4133",
          "content": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_4134",
          "content": "Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "s_4135",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4136",
          "content": "Returns: {fs.",
          "position": 3,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_4137",
          "content": "Retrieves the {fs.",
          "position": 4,
          "originalSentence": "Retrieves the {fs."
        },
        {
          "id": "s_4138",
          "content": "Stats} for the file descriptor.",
          "position": 5,
          "originalSentence": "Stats} for the file descriptor."
        },
        {
          "id": "s_4139",
          "content": "See the POSIX fstat(2) documentation for more detail.",
          "position": 6,
          "originalSentence": "See the POSIX fstat(2) documentation for more detail."
        },
        {
          "id": "s_4150",
          "content": "`fd` {integer}",
          "position": 0,
          "originalSentence": "`fd` {integer}"
        },
        {
          "id": "s_4151",
          "content": "Request that all data for the open file descriptor is flushed to the storage device.",
          "position": 1,
          "originalSentence": "Request that all data for the open file descriptor is flushed to the storage device."
        },
        {
          "id": "s_4152",
          "content": "The specific implementation is operating system and device specific.",
          "position": 2,
          "originalSentence": "The specific implementation is operating system and device specific."
        },
        {
          "id": "s_4153",
          "content": "Refer to the POSIX fsync(2) documentation for more detail.",
          "position": 3,
          "originalSentence": "Refer to the POSIX fsync(2) documentation for more detail."
        },
        {
          "id": "s_4154",
          "content": "Returns `undefined`.",
          "position": 4,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4165",
          "content": "`fd` {integer} `len` {integer} **Default:** `0`",
          "position": 0,
          "originalSentence": "`fd` {integer} `len` {integer} **Default:** `0`"
        },
        {
          "id": "s_4166",
          "content": "Truncates the file descriptor.",
          "position": 1,
          "originalSentence": "Truncates the file descriptor."
        },
        {
          "id": "s_4167",
          "content": "Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4168",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 3,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4169",
          "content": "ftruncate()`][].",
          "position": 4,
          "originalSentence": "ftruncate()`][]."
        },
        {
          "id": "s_4177",
          "content": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date}",
          "position": 0,
          "originalSentence": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date}"
        },
        {
          "id": "s_4178",
          "content": "Synchronous version of [`fs.",
          "position": 1,
          "originalSentence": "Synchronous version of [`fs."
        },
        {
          "id": "s_4179",
          "content": "futimes()`][].",
          "position": 2,
          "originalSentence": "futimes()`][]."
        },
        {
          "id": "s_4180",
          "content": "Returns `undefined`.",
          "position": 3,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4197",
          "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
          "position": 0,
          "originalSentence": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory."
        },
        {
          "id": "s_4198",
          "content": "**Default:** `process.",
          "position": 1,
          "originalSentence": "**Default:** `process."
        },
        {
          "id": "s_4199",
          "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
          "position": 2,
          "originalSentence": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded."
        },
        {
          "id": "s_4200",
          "content": "If a function is provided, return `true` to exclude the item, `false` to include it.",
          "position": 3,
          "originalSentence": "If a function is provided, return `true` to exclude the item, `false` to include it."
        },
        {
          "id": "s_4201",
          "content": "**Default:** `undefined`.",
          "position": 4,
          "originalSentence": "**Default:** `undefined`."
        },
        {
          "id": "s_4202",
          "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
          "position": 5,
          "originalSentence": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise."
        },
        {
          "id": "s_4203",
          "content": "**Default:** `false`.",
          "position": 6,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4204",
          "content": "Returns: {string\\[]} paths of files that match the pattern.",
          "position": 7,
          "originalSentence": "Returns: {string\\[]} paths of files that match the pattern."
        },
        {
          "id": "s_4215",
          "content": "`path` {string|Buffer|URL} `mode` {integer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `mode` {integer}"
        },
        {
          "id": "s_4216",
          "content": "Changes the permissions on a symbolic link.",
          "position": 1,
          "originalSentence": "Changes the permissions on a symbolic link."
        },
        {
          "id": "s_4217",
          "content": "Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4218",
          "content": "This method is only implemented on macOS.",
          "position": 3,
          "originalSentence": "This method is only implemented on macOS."
        },
        {
          "id": "s_4219",
          "content": "See the POSIX lchmod(2) documentation for more detail.",
          "position": 4,
          "originalSentence": "See the POSIX lchmod(2) documentation for more detail."
        },
        {
          "id": "s_4230",
          "content": "`path` {string|Buffer|URL} `uid` {integer} The file's new owner's user id.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `uid` {integer} The file's new owner's user id."
        },
        {
          "id": "s_4231",
          "content": "`gid` {integer} The file's new group's group id.",
          "position": 1,
          "originalSentence": "`gid` {integer} The file's new group's group id."
        },
        {
          "id": "s_4232",
          "content": "Set the owner for the path.",
          "position": 2,
          "originalSentence": "Set the owner for the path."
        },
        {
          "id": "s_4233",
          "content": "Returns `undefined`.",
          "position": 3,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4234",
          "content": "See the POSIX lchown(2) documentation for more details.",
          "position": 4,
          "originalSentence": "See the POSIX lchown(2) documentation for more details."
        },
        {
          "id": "s_4245",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date}"
        },
        {
          "id": "s_4246",
          "content": "Change the file system timestamps of the symbolic link referenced by `path`.",
          "position": 1,
          "originalSentence": "Change the file system timestamps of the symbolic link referenced by `path`."
        },
        {
          "id": "s_4247",
          "content": "Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails.",
          "position": 2,
          "originalSentence": "Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails."
        },
        {
          "id": "s_4248",
          "content": "This is the synchronous version of [`fs.",
          "position": 3,
          "originalSentence": "This is the synchronous version of [`fs."
        },
        {
          "id": "s_4249",
          "content": "lutimes()`][].",
          "position": 4,
          "originalSentence": "lutimes()`][]."
        },
        {
          "id": "s_4258",
          "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}",
          "position": 0,
          "originalSentence": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}"
        },
        {
          "id": "s_4259",
          "content": "Creates a new link from the `existingPath` to the `newPath`.",
          "position": 1,
          "originalSentence": "Creates a new link from the `existingPath` to the `newPath`."
        },
        {
          "id": "s_4260",
          "content": "See the POSIX link(2) documentation for more detail.",
          "position": 2,
          "originalSentence": "See the POSIX link(2) documentation for more detail."
        },
        {
          "id": "s_4261",
          "content": "Returns `undefined`.",
          "position": 3,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4280",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_4281",
          "content": "Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "s_4282",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4283",
          "content": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
          "position": 3,
          "originalSentence": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`."
        },
        {
          "id": "s_4284",
          "content": "**Default:** `true`.",
          "position": 4,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "s_4285",
          "content": "Returns: {fs.",
          "position": 5,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_4286",
          "content": "Retrieves the {fs.",
          "position": 6,
          "originalSentence": "Retrieves the {fs."
        },
        {
          "id": "s_4287",
          "content": "Stats} for the symbolic link referred to by `path`.",
          "position": 7,
          "originalSentence": "Stats} for the symbolic link referred to by `path`."
        },
        {
          "id": "s_4288",
          "content": "See the POSIX lstat(2) documentation for more details.",
          "position": 8,
          "originalSentence": "See the POSIX lstat(2) documentation for more details."
        },
        {
          "id": "s_4305",
          "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows."
        },
        {
          "id": "s_4306",
          "content": "**Default:** `0o777`.",
          "position": 1,
          "originalSentence": "**Default:** `0o777`."
        },
        {
          "id": "s_4307",
          "content": "Returns: {string|undefined}",
          "position": 2,
          "originalSentence": "Returns: {string|undefined}"
        },
        {
          "id": "s_4308",
          "content": "Synchronously creates a directory.",
          "position": 3,
          "originalSentence": "Synchronously creates a directory."
        },
        {
          "id": "s_4309",
          "content": "Returns `undefined`, or if `recursive` is `true`, the first directory path created.",
          "position": 4,
          "originalSentence": "Returns `undefined`, or if `recursive` is `true`, the first directory path created."
        },
        {
          "id": "s_4310",
          "content": "This is the synchronous version of [`fs.",
          "position": 5,
          "originalSentence": "This is the synchronous version of [`fs."
        },
        {
          "id": "s_4311",
          "content": "mkdir()`][].",
          "position": 6,
          "originalSentence": "mkdir()`][]."
        },
        {
          "id": "s_4312",
          "content": "See the POSIX mkdir(2) documentation for more details.",
          "position": 7,
          "originalSentence": "See the POSIX mkdir(2) documentation for more details."
        },
        {
          "id": "s_4323",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string}",
          "position": 0,
          "originalSentence": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string}"
        },
        {
          "id": "s_4324",
          "content": "Returns the created directory path.",
          "position": 1,
          "originalSentence": "Returns the created directory path."
        },
        {
          "id": "s_4325",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4326",
          "content": "mkdtemp()`][].",
          "position": 3,
          "originalSentence": "mkdtemp()`][]."
        },
        {
          "id": "s_4327",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 4,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use."
        },
        {
          "id": "s_4352",
          "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Object} A disposable object: * `path` {string} The path of the created directory.",
          "position": 0,
          "originalSentence": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Object} A disposable object: * `path` {string} The path of the created directory."
        },
        {
          "id": "s_4353",
          "content": "* `remove` {Function} A function which removes the created directory.",
          "position": 1,
          "originalSentence": "* `remove` {Function} A function which removes the created directory."
        },
        {
          "id": "s_4354",
          "content": "* `[Symbol.",
          "position": 2,
          "originalSentence": "* `[Symbol."
        },
        {
          "id": "s_4355",
          "content": "dispose]` {Function} The same as `remove`.",
          "position": 3,
          "originalSentence": "dispose]` {Function} The same as `remove`."
        },
        {
          "id": "s_4356",
          "content": "Returns a disposable object whose `path` property holds the created directory path.",
          "position": 4,
          "originalSentence": "Returns a disposable object whose `path` property holds the created directory path."
        },
        {
          "id": "s_4357",
          "content": "When the object is disposed, the directory and its contents will be removed if it still exists.",
          "position": 5,
          "originalSentence": "When the object is disposed, the directory and its contents will be removed if it still exists."
        },
        {
          "id": "s_4358",
          "content": "If the directory cannot be deleted, disposal will throw an error.",
          "position": 6,
          "originalSentence": "If the directory cannot be deleted, disposal will throw an error."
        },
        {
          "id": "s_4359",
          "content": "The object has a `remove()` method which will perform the same task.",
          "position": 7,
          "originalSentence": "The object has a `remove()` method which will perform the same task."
        },
        {
          "id": "s_4360",
          "content": "For detailed information, see the documentation of [`fs.",
          "position": 8,
          "originalSentence": "For detailed information, see the documentation of [`fs."
        },
        {
          "id": "s_4361",
          "content": "mkdtemp()`][].",
          "position": 9,
          "originalSentence": "mkdtemp()`][]."
        },
        {
          "id": "s_4362",
          "content": "There is no callback-based version of this API because it is designed for use with the `using` syntax.",
          "position": 10,
          "originalSentence": "There is no callback-based version of this API because it is designed for use with the `using` syntax."
        },
        {
          "id": "s_4363",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
          "position": 11,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use."
        },
        {
          "id": "s_4380",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory."
        },
        {
          "id": "s_4381",
          "content": "Higher values lead to better performance but higher memory usage.",
          "position": 1,
          "originalSentence": "Higher values lead to better performance but higher memory usage."
        },
        {
          "id": "s_4382",
          "content": "**Default:** `32` * `recursive` {boolean} **Default:** `false` Returns: {fs.",
          "position": 2,
          "originalSentence": "**Default:** `32` * `recursive` {boolean} **Default:** `false` Returns: {fs."
        },
        {
          "id": "s_4383",
          "content": "Synchronously open a directory.",
          "position": 3,
          "originalSentence": "Synchronously open a directory."
        },
        {
          "id": "s_4384",
          "content": "See opendir(3).",
          "position": 4,
          "originalSentence": "See opendir(3)."
        },
        {
          "id": "s_4385",
          "content": "Creates an {fs.",
          "position": 5,
          "originalSentence": "Creates an {fs."
        },
        {
          "id": "s_4386",
          "content": "Dir}, which contains all further functions for reading from and cleaning up the directory.",
          "position": 6,
          "originalSentence": "Dir}, which contains all further functions for reading from and cleaning up the directory."
        },
        {
          "id": "s_4387",
          "content": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
          "position": 7,
          "originalSentence": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations."
        },
        {
          "id": "s_4400",
          "content": "`path` {string|Buffer|URL} `flags` {string|number} **Default:** `'r'`.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `flags` {string|number} **Default:** `'r'`."
        },
        {
          "id": "s_4401",
          "content": "See [support of file system `flags`][].",
          "position": 1,
          "originalSentence": "See [support of file system `flags`][]."
        },
        {
          "id": "s_4402",
          "content": "`mode` {string|integer} **Default:** `0o666` Returns: {number}",
          "position": 2,
          "originalSentence": "`mode` {string|integer} **Default:** `0o666` Returns: {number}"
        },
        {
          "id": "s_4403",
          "content": "Returns an integer representing the file descriptor.",
          "position": 3,
          "originalSentence": "Returns an integer representing the file descriptor."
        },
        {
          "id": "s_4404",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 4,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4405",
          "content": "open()`][].",
          "position": 5,
          "originalSentence": "open()`][]."
        },
        {
          "id": "s_4428",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively."
        },
        {
          "id": "s_4429",
          "content": "In recursive mode, it will list all files, sub files, and directories.",
          "position": 1,
          "originalSentence": "In recursive mode, it will list all files, sub files, and directories."
        },
        {
          "id": "s_4430",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4431",
          "content": "Returns: {string\\[]|Buffer\\[]|fs.",
          "position": 3,
          "originalSentence": "Returns: {string\\[]|Buffer\\[]|fs."
        },
        {
          "id": "s_4432",
          "content": "Reads the contents of the directory.",
          "position": 4,
          "originalSentence": "Reads the contents of the directory."
        },
        {
          "id": "s_4433",
          "content": "See the POSIX readdir(3) documentation for more details.",
          "position": 5,
          "originalSentence": "See the POSIX readdir(3) documentation for more details."
        },
        {
          "id": "s_4434",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned.",
          "position": 6,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned."
        },
        {
          "id": "s_4435",
          "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
          "position": 7,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects."
        },
        {
          "id": "s_4436",
          "content": "If `options.",
          "position": 8,
          "originalSentence": "If `options."
        },
        {
          "id": "s_4437",
          "content": "withFileTypes` is set to `true`, the result will contain {fs.",
          "position": 9,
          "originalSentence": "withFileTypes` is set to `true`, the result will contain {fs."
        },
        {
          "id": "s_4438",
          "content": "Dirent} objects.",
          "position": 10,
          "originalSentence": "Dirent} objects."
        },
        {
          "id": "s_4461",
          "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_4462",
          "content": "**Default:** `'r'`.",
          "position": 1,
          "originalSentence": "**Default:** `'r'`."
        },
        {
          "id": "s_4463",
          "content": "Returns: {string|Buffer}",
          "position": 2,
          "originalSentence": "Returns: {string|Buffer}"
        },
        {
          "id": "s_4464",
          "content": "Returns the contents of the `path`.",
          "position": 3,
          "originalSentence": "Returns the contents of the `path`."
        },
        {
          "id": "s_4465",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 4,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4466",
          "content": "readFile()`][].",
          "position": 5,
          "originalSentence": "readFile()`][]."
        },
        {
          "id": "s_4467",
          "content": "If the `encoding` option is specified then this function returns a string.",
          "position": 6,
          "originalSentence": "If the `encoding` option is specified then this function returns a string."
        },
        {
          "id": "s_4468",
          "content": "Otherwise it returns a buffer.",
          "position": 7,
          "originalSentence": "Otherwise it returns a buffer."
        },
        {
          "id": "s_4469",
          "content": "Similar to [`fs.",
          "position": 8,
          "originalSentence": "Similar to [`fs."
        },
        {
          "id": "s_4470",
          "content": "readFile()`][], when the path is a directory, the behavior of `fs.",
          "position": 9,
          "originalSentence": "readFile()`][], when the path is a directory, the behavior of `fs."
        },
        {
          "id": "s_4471",
          "content": "readFileSync()` is platform-specific.",
          "position": 10,
          "originalSentence": "readFileSync()` is platform-specific."
        },
        {
          "id": "s_4482",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}"
        },
        {
          "id": "s_4483",
          "content": "Returns the symbolic link's string value.",
          "position": 1,
          "originalSentence": "Returns the symbolic link's string value."
        },
        {
          "id": "s_4484",
          "content": "See the POSIX readlink(2) documentation for more details.",
          "position": 2,
          "originalSentence": "See the POSIX readlink(2) documentation for more details."
        },
        {
          "id": "s_4485",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
          "position": 3,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned."
        },
        {
          "id": "s_4486",
          "content": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
          "position": 4,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object."
        },
        {
          "id": "s_4495",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} `length` {integer} `position` {integer|bigint|null} **Default:** `null` Returns: {number}",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} `length` {integer} `position` {integer|bigint|null} **Default:** `null` Returns: {number}"
        },
        {
          "id": "s_4496",
          "content": "Returns the number of `bytesRead`.",
          "position": 1,
          "originalSentence": "Returns the number of `bytesRead`."
        },
        {
          "id": "s_4497",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4498",
          "content": "read()`][].",
          "position": 3,
          "originalSentence": "read()`][]."
        },
        {
          "id": "s_4515",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "s_4516",
          "content": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` Returns: {number}",
          "position": 1,
          "originalSentence": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` Returns: {number}"
        },
        {
          "id": "s_4517",
          "content": "Returns the number of `bytesRead`.",
          "position": 2,
          "originalSentence": "Returns the number of `bytesRead`."
        },
        {
          "id": "s_4518",
          "content": "Similar to the above `fs.",
          "position": 3,
          "originalSentence": "Similar to the above `fs."
        },
        {
          "id": "s_4519",
          "content": "readSync` function, this version takes an optional `options` object.",
          "position": 4,
          "originalSentence": "readSync` function, this version takes an optional `options` object."
        },
        {
          "id": "s_4520",
          "content": "If no `options` object is specified, it will default with the above values.",
          "position": 5,
          "originalSentence": "If no `options` object is specified, it will default with the above values."
        },
        {
          "id": "s_4521",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 6,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4522",
          "content": "read()`][].",
          "position": 7,
          "originalSentence": "read()`][]."
        },
        {
          "id": "s_4529",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes read.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes read."
        },
        {
          "id": "s_4530",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4531",
          "content": "readv()`][].",
          "position": 2,
          "originalSentence": "readv()`][]."
        },
        {
          "id": "s_4540",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}"
        },
        {
          "id": "s_4541",
          "content": "Returns the resolved pathname.",
          "position": 1,
          "originalSentence": "Returns the resolved pathname."
        },
        {
          "id": "s_4542",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4543",
          "content": "realpath()`][].",
          "position": 3,
          "originalSentence": "realpath()`][]."
        },
        {
          "id": "s_4560",
          "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}"
        },
        {
          "id": "s_4561",
          "content": "Synchronous realpath(3).",
          "position": 1,
          "originalSentence": "Synchronous realpath(3)."
        },
        {
          "id": "s_4562",
          "content": "Only paths that can be converted to UTF8 strings are supported.",
          "position": 2,
          "originalSentence": "Only paths that can be converted to UTF8 strings are supported."
        },
        {
          "id": "s_4563",
          "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned.",
          "position": 3,
          "originalSentence": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned."
        },
        {
          "id": "s_4564",
          "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
          "position": 4,
          "originalSentence": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object."
        },
        {
          "id": "s_4565",
          "content": "On Linux, when Node.",
          "position": 5,
          "originalSentence": "On Linux, when Node."
        },
        {
          "id": "s_4566",
          "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
          "position": 6,
          "originalSentence": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work."
        },
        {
          "id": "s_4567",
          "content": "Glibc does not have this restriction.",
          "position": 7,
          "originalSentence": "Glibc does not have this restriction."
        },
        {
          "id": "s_4576",
          "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}",
          "position": 0,
          "originalSentence": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}"
        },
        {
          "id": "s_4577",
          "content": "Renames the file from `oldPath` to `newPath`.",
          "position": 1,
          "originalSentence": "Renames the file from `oldPath` to `newPath`."
        },
        {
          "id": "s_4578",
          "content": "Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4579",
          "content": "See the POSIX rename(2) documentation for more details.",
          "position": 3,
          "originalSentence": "See the POSIX rename(2) documentation for more details."
        },
        {
          "id": "s_4596",
          "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed."
        },
        {
          "id": "s_4597",
          "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
          "position": 1,
          "originalSentence": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed."
        },
        {
          "id": "s_4598",
          "content": "The `options` argument is still accepted for backwards compatibility but it is not used.",
          "position": 2,
          "originalSentence": "The `options` argument is still accepted for backwards compatibility but it is not used."
        },
        {
          "id": "s_4599",
          "content": "Synchronous rmdir(2).",
          "position": 3,
          "originalSentence": "Synchronous rmdir(2)."
        },
        {
          "id": "s_4600",
          "content": "Returns `undefined`.",
          "position": 4,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4601",
          "content": "rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
          "position": 5,
          "originalSentence": "rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX."
        },
        {
          "id": "s_4602",
          "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
          "position": 6,
          "originalSentence": "To get a behavior similar to the `rm -rf` Unix command, use [`fs."
        },
        {
          "id": "s_4603",
          "content": "rmSync()`][] with options `{ recursive: true, force: true }`.",
          "position": 7,
          "originalSentence": "rmSync()`][] with options `{ recursive: true, force: true }`."
        },
        {
          "id": "s_4634",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist."
        },
        {
          "id": "s_4635",
          "content": "**Default:** `false`.",
          "position": 1,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4636",
          "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
          "position": 2,
          "originalSentence": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node."
        },
        {
          "id": "s_4637",
          "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
          "position": 3,
          "originalSentence": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try."
        },
        {
          "id": "s_4638",
          "content": "This option represents the number of retries.",
          "position": 4,
          "originalSentence": "This option represents the number of retries."
        },
        {
          "id": "s_4639",
          "content": "This option is ignored if the `recursive` option is not `true`.",
          "position": 5,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "s_4640",
          "content": "**Default:** `0`.",
          "position": 6,
          "originalSentence": "**Default:** `0`."
        },
        {
          "id": "s_4641",
          "content": "* `recursive` {boolean} If `true`, perform a recursive directory removal.",
          "position": 7,
          "originalSentence": "* `recursive` {boolean} If `true`, perform a recursive directory removal."
        },
        {
          "id": "s_4642",
          "content": "In recursive mode operations are retried on failure.",
          "position": 8,
          "originalSentence": "In recursive mode operations are retried on failure."
        },
        {
          "id": "s_4643",
          "content": "**Default:** `false`.",
          "position": 9,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4644",
          "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
          "position": 10,
          "originalSentence": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries."
        },
        {
          "id": "s_4645",
          "content": "This option is ignored if the `recursive` option is not `true`.",
          "position": 11,
          "originalSentence": "This option is ignored if the `recursive` option is not `true`."
        },
        {
          "id": "s_4646",
          "content": "**Default:** `100`.",
          "position": 12,
          "originalSentence": "**Default:** `100`."
        },
        {
          "id": "s_4647",
          "content": "Synchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
          "position": 13,
          "originalSentence": "Synchronously removes files and directories (modeled on the standard POSIX `rm` utility)."
        },
        {
          "id": "s_4648",
          "content": "Returns `undefined`.",
          "position": 14,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4665",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_4666",
          "content": "Stats} object should be `bigint`.",
          "position": 1,
          "originalSentence": "Stats} object should be `bigint`."
        },
        {
          "id": "s_4667",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4668",
          "content": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
          "position": 3,
          "originalSentence": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`."
        },
        {
          "id": "s_4669",
          "content": "**Default:** `true`.",
          "position": 4,
          "originalSentence": "**Default:** `true`."
        },
        {
          "id": "s_4670",
          "content": "Returns: {fs.",
          "position": 5,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_4671",
          "content": "Retrieves the {fs.",
          "position": 6,
          "originalSentence": "Retrieves the {fs."
        },
        {
          "id": "s_4672",
          "content": "Stats} for the path.",
          "position": 7,
          "originalSentence": "Stats} for the path."
        },
        {
          "id": "s_4689",
          "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs."
        },
        {
          "id": "s_4690",
          "content": "StatFs} object should be `bigint`.",
          "position": 1,
          "originalSentence": "StatFs} object should be `bigint`."
        },
        {
          "id": "s_4691",
          "content": "**Default:** `false`.",
          "position": 2,
          "originalSentence": "**Default:** `false`."
        },
        {
          "id": "s_4692",
          "content": "Returns: {fs.",
          "position": 3,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_4693",
          "content": "Synchronous statfs(2).",
          "position": 4,
          "originalSentence": "Synchronous statfs(2)."
        },
        {
          "id": "s_4694",
          "content": "Returns information about the mounted file system which contains `path`.",
          "position": 5,
          "originalSentence": "Returns information about the mounted file system which contains `path`."
        },
        {
          "id": "s_4695",
          "content": "In case of an error, the `err.",
          "position": 6,
          "originalSentence": "In case of an error, the `err."
        },
        {
          "id": "s_4696",
          "content": "code` will be one of [Common System Errors][].",
          "position": 7,
          "originalSentence": "code` will be one of [Common System Errors][]."
        },
        {
          "id": "s_4703",
          "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: `undefined`.",
          "position": 0,
          "originalSentence": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: `undefined`."
        },
        {
          "id": "s_4704",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4705",
          "content": "symlink()`][].",
          "position": 2,
          "originalSentence": "symlink()`][]."
        },
        {
          "id": "s_4720",
          "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0`",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0`"
        },
        {
          "id": "s_4721",
          "content": "Truncates the file.",
          "position": 1,
          "originalSentence": "Truncates the file."
        },
        {
          "id": "s_4722",
          "content": "Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4723",
          "content": "A file descriptor can also be passed as the first argument.",
          "position": 3,
          "originalSentence": "A file descriptor can also be passed as the first argument."
        },
        {
          "id": "s_4724",
          "content": "In this case, `fs.",
          "position": 4,
          "originalSentence": "In this case, `fs."
        },
        {
          "id": "s_4725",
          "content": "ftruncateSync()` is called.",
          "position": 5,
          "originalSentence": "ftruncateSync()` is called."
        },
        {
          "id": "s_4726",
          "content": "Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
          "position": 6,
          "originalSentence": "Passing a file descriptor is deprecated and may result in an error being thrown in the future."
        },
        {
          "id": "s_4732",
          "content": "`path` {string|Buffer|URL}",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL}"
        },
        {
          "id": "s_4733",
          "content": "Synchronous unlink(2).",
          "position": 1,
          "originalSentence": "Synchronous unlink(2)."
        },
        {
          "id": "s_4734",
          "content": "Returns `undefined`.",
          "position": 2,
          "originalSentence": "Returns `undefined`."
        },
        {
          "id": "s_4741",
          "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: `undefined`.",
          "position": 0,
          "originalSentence": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: `undefined`."
        },
        {
          "id": "s_4742",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4743",
          "content": "utimes()`][].",
          "position": 2,
          "originalSentence": "utimes()`][]."
        },
        {
          "id": "s_4762",
          "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
          "position": 0,
          "originalSentence": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]."
        },
        {
          "id": "s_4763",
          "content": "**Default:** `'w'`.",
          "position": 1,
          "originalSentence": "**Default:** `'w'`."
        },
        {
          "id": "s_4764",
          "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs.",
          "position": 2,
          "originalSentence": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs."
        },
        {
          "id": "s_4765",
          "content": "fsyncSync()` is used to flush the data.",
          "position": 3,
          "originalSentence": "fsyncSync()` is used to flush the data."
        },
        {
          "id": "s_4766",
          "content": "Returns: `undefined`.",
          "position": 4,
          "originalSentence": "Returns: `undefined`."
        },
        {
          "id": "s_4767",
          "content": "The `mode` option only affects the newly created file.",
          "position": 5,
          "originalSentence": "The `mode` option only affects the newly created file."
        },
        {
          "id": "s_4768",
          "content": "open()`][] for more details.",
          "position": 6,
          "originalSentence": "open()`][] for more details."
        },
        {
          "id": "s_4769",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 7,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4770",
          "content": "writeFile()`][].",
          "position": 8,
          "originalSentence": "writeFile()`][]."
        },
        {
          "id": "s_4779",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer."
        },
        {
          "id": "s_4780",
          "content": "byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
          "position": 1,
          "originalSentence": "byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written."
        },
        {
          "id": "s_4781",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4782",
          "content": "write(fd, buffer...)",
          "position": 3,
          "originalSentence": "write(fd, buffer...)"
        },
        {
          "id": "s_4791",
          "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer."
        },
        {
          "id": "s_4792",
          "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
          "position": 1,
          "originalSentence": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written."
        },
        {
          "id": "s_4793",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 2,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4794",
          "content": "write(fd, buffer...)",
          "position": 3,
          "originalSentence": "write(fd, buffer...)"
        },
        {
          "id": "s_4801",
          "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` Returns: {number} The number of bytes written.",
          "position": 0,
          "originalSentence": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` Returns: {number} The number of bytes written."
        },
        {
          "id": "s_4802",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4803",
          "content": "write(fd, string...)",
          "position": 2,
          "originalSentence": "write(fd, string...)"
        },
        {
          "id": "s_4810",
          "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
          "position": 0,
          "originalSentence": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written."
        },
        {
          "id": "s_4811",
          "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
          "position": 1,
          "originalSentence": "For detailed information, see the documentation of the asynchronous version of this API: [`fs."
        },
        {
          "id": "s_4812",
          "content": "writev()`][].",
          "position": 2,
          "originalSentence": "writev()`][]."
        },
        {
          "id": "s_4814",
          "content": "The common objects are shared by all of the file system API variants (promise, callback, and synchronous).",
          "position": 0,
          "originalSentence": "The common objects are shared by all of the file system API variants (promise, callback, and synchronous)."
        },
        {
          "id": "s_4829",
          "content": "A class representing a directory stream.",
          "position": 0,
          "originalSentence": "A class representing a directory stream."
        },
        {
          "id": "s_4830",
          "content": "Created by [`fs.",
          "position": 1,
          "originalSentence": "Created by [`fs."
        },
        {
          "id": "s_4831",
          "content": "opendir()`][], [`fs.",
          "position": 2,
          "originalSentence": "opendir()`][], [`fs."
        },
        {
          "id": "s_4832",
          "content": "opendirSync()`][], or [`fsPromises.",
          "position": 3,
          "originalSentence": "opendirSync()`][], or [`fsPromises."
        },
        {
          "id": "s_4833",
          "content": "opendir()`][].",
          "position": 4,
          "originalSentence": "opendir()`][]."
        },
        {
          "id": "s_4834",
          "content": "When using the async iterator, the {fs.",
          "position": 5,
          "originalSentence": "When using the async iterator, the {fs."
        },
        {
          "id": "s_4835",
          "content": "Dir} object will be automatically closed after the iterator exits.",
          "position": 6,
          "originalSentence": "Dir} object will be automatically closed after the iterator exits."
        },
        {
          "id": "s_4844",
          "content": "Returns: {Promise}",
          "position": 0,
          "originalSentence": "Returns: {Promise}"
        },
        {
          "id": "s_4845",
          "content": "Asynchronously close the directory's underlying resource handle.",
          "position": 1,
          "originalSentence": "Asynchronously close the directory's underlying resource handle."
        },
        {
          "id": "s_4846",
          "content": "Subsequent reads will result in errors.",
          "position": 2,
          "originalSentence": "Subsequent reads will result in errors."
        },
        {
          "id": "s_4847",
          "content": "A promise is returned that will be fulfilled after the resource has been closed.",
          "position": 3,
          "originalSentence": "A promise is returned that will be fulfilled after the resource has been closed."
        },
        {
          "id": "s_4856",
          "content": "`callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_4857",
          "content": "Asynchronously close the directory's underlying resource handle.",
          "position": 1,
          "originalSentence": "Asynchronously close the directory's underlying resource handle."
        },
        {
          "id": "s_4858",
          "content": "Subsequent reads will result in errors.",
          "position": 2,
          "originalSentence": "Subsequent reads will result in errors."
        },
        {
          "id": "s_4859",
          "content": "The `callback` will be called after the resource handle has been closed.",
          "position": 3,
          "originalSentence": "The `callback` will be called after the resource handle has been closed."
        },
        {
          "id": "s_4863",
          "content": "Synchronously close the directory's underlying resource handle.",
          "position": 0,
          "originalSentence": "Synchronously close the directory's underlying resource handle."
        },
        {
          "id": "s_4864",
          "content": "Subsequent reads will result in errors.",
          "position": 1,
          "originalSentence": "Subsequent reads will result in errors."
        },
        {
          "id": "s_4874",
          "content": "Type: {string}",
          "position": 0,
          "originalSentence": "Type: {string}"
        },
        {
          "id": "s_4875",
          "content": "The read-only path of this directory as was provided to [`fs.",
          "position": 1,
          "originalSentence": "The read-only path of this directory as was provided to [`fs."
        },
        {
          "id": "s_4876",
          "content": "opendir()`][], [`fs.",
          "position": 2,
          "originalSentence": "opendir()`][], [`fs."
        },
        {
          "id": "s_4877",
          "content": "opendirSync()`][], or [`fsPromises.",
          "position": 3,
          "originalSentence": "opendirSync()`][], or [`fsPromises."
        },
        {
          "id": "s_4878",
          "content": "opendir()`][].",
          "position": 4,
          "originalSentence": "opendir()`][]."
        },
        {
          "id": "s_4893",
          "content": "Returns: {Promise} Fulfills with a {fs.",
          "position": 0,
          "originalSentence": "Returns: {Promise} Fulfills with a {fs."
        },
        {
          "id": "s_4894",
          "content": "Dirent|null}",
          "position": 1,
          "originalSentence": "Dirent|null}"
        },
        {
          "id": "s_4895",
          "content": "Asynchronously read the next directory entry via readdir(3) as an {fs.",
          "position": 2,
          "originalSentence": "Asynchronously read the next directory entry via readdir(3) as an {fs."
        },
        {
          "id": "s_4896",
          "content": "A promise is returned that will be fulfilled with an {fs.",
          "position": 3,
          "originalSentence": "A promise is returned that will be fulfilled with an {fs."
        },
        {
          "id": "s_4897",
          "content": "Dirent}, or `null` if there are no more directory entries to read.",
          "position": 4,
          "originalSentence": "Dirent}, or `null` if there are no more directory entries to read."
        },
        {
          "id": "s_4898",
          "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 5,
          "originalSentence": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms."
        },
        {
          "id": "s_4899",
          "content": "Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 6,
          "originalSentence": "Entries added or removed while iterating over the directory might not be included in the iteration results."
        },
        {
          "id": "s_4914",
          "content": "`callback` {Function} * `err` {Error} * `dirent` {fs.",
          "position": 0,
          "originalSentence": "`callback` {Function} * `err` {Error} * `dirent` {fs."
        },
        {
          "id": "s_4915",
          "content": "Dirent|null}",
          "position": 1,
          "originalSentence": "Dirent|null}"
        },
        {
          "id": "s_4916",
          "content": "Asynchronously read the next directory entry via readdir(3) as an {fs.",
          "position": 2,
          "originalSentence": "Asynchronously read the next directory entry via readdir(3) as an {fs."
        },
        {
          "id": "s_4917",
          "content": "After the read is completed, the `callback` will be called with an {fs.",
          "position": 3,
          "originalSentence": "After the read is completed, the `callback` will be called with an {fs."
        },
        {
          "id": "s_4918",
          "content": "Dirent}, or `null` if there are no more directory entries to read.",
          "position": 4,
          "originalSentence": "Dirent}, or `null` if there are no more directory entries to read."
        },
        {
          "id": "s_4919",
          "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 5,
          "originalSentence": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms."
        },
        {
          "id": "s_4920",
          "content": "Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 6,
          "originalSentence": "Entries added or removed while iterating over the directory might not be included in the iteration results."
        },
        {
          "id": "s_4935",
          "content": "Returns: {fs.",
          "position": 0,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_4936",
          "content": "Dirent|null}",
          "position": 1,
          "originalSentence": "Dirent|null}"
        },
        {
          "id": "s_4937",
          "content": "Synchronously read the next directory entry as an {fs.",
          "position": 2,
          "originalSentence": "Synchronously read the next directory entry as an {fs."
        },
        {
          "id": "s_4938",
          "content": "See the POSIX readdir(3) documentation for more detail.",
          "position": 3,
          "originalSentence": "See the POSIX readdir(3) documentation for more detail."
        },
        {
          "id": "s_4939",
          "content": "If there are no more directory entries to read, `null` will be returned.",
          "position": 4,
          "originalSentence": "If there are no more directory entries to read, `null` will be returned."
        },
        {
          "id": "s_4940",
          "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 5,
          "originalSentence": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms."
        },
        {
          "id": "s_4941",
          "content": "Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 6,
          "originalSentence": "Entries added or removed while iterating over the directory might not be included in the iteration results."
        },
        {
          "id": "s_4960",
          "content": "Returns: {AsyncIterator} An AsyncIterator of {fs.",
          "position": 0,
          "originalSentence": "Returns: {AsyncIterator} An AsyncIterator of {fs."
        },
        {
          "id": "s_4961",
          "content": "Asynchronously iterates over the directory until all entries have been read.",
          "position": 1,
          "originalSentence": "Asynchronously iterates over the directory until all entries have been read."
        },
        {
          "id": "s_4962",
          "content": "Refer to the POSIX readdir(3) documentation for more detail.",
          "position": 2,
          "originalSentence": "Refer to the POSIX readdir(3) documentation for more detail."
        },
        {
          "id": "s_4963",
          "content": "Entries returned by the async iterator are always an {fs.",
          "position": 3,
          "originalSentence": "Entries returned by the async iterator are always an {fs."
        },
        {
          "id": "s_4964",
          "content": "The `null` case from `dir.",
          "position": 4,
          "originalSentence": "The `null` case from `dir."
        },
        {
          "id": "s_4965",
          "content": "read()` is handled internally.",
          "position": 5,
          "originalSentence": "read()` is handled internally."
        },
        {
          "id": "s_4966",
          "content": "Dir} for an example.",
          "position": 6,
          "originalSentence": "Dir} for an example."
        },
        {
          "id": "s_4967",
          "content": "Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms.",
          "position": 7,
          "originalSentence": "Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms."
        },
        {
          "id": "s_4968",
          "content": "Entries added or removed while iterating over the directory might not be included in the iteration results.",
          "position": 8,
          "originalSentence": "Entries added or removed while iterating over the directory might not be included in the iteration results."
        },
        {
          "id": "s_4972",
          "content": "Calls `dir.",
          "position": 0,
          "originalSentence": "Calls `dir."
        },
        {
          "id": "s_4973",
          "content": "close()` if the directory handle is open, and returns a promise that fulfills when disposal is complete.",
          "position": 1,
          "originalSentence": "close()` if the directory handle is open, and returns a promise that fulfills when disposal is complete."
        },
        {
          "id": "s_4977",
          "content": "Calls `dir.",
          "position": 0,
          "originalSentence": "Calls `dir."
        },
        {
          "id": "s_4978",
          "content": "closeSync()` if the directory handle is open, and returns `undefined`.",
          "position": 1,
          "originalSentence": "closeSync()` if the directory handle is open, and returns `undefined`."
        },
        {
          "id": "s_4991",
          "content": "A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an {fs.",
          "position": 0,
          "originalSentence": "A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an {fs."
        },
        {
          "id": "s_4992",
          "content": "The directory entry is a combination of the file name and file type pairs.",
          "position": 1,
          "originalSentence": "The directory entry is a combination of the file name and file type pairs."
        },
        {
          "id": "s_4993",
          "content": "Additionally, when [`fs.",
          "position": 2,
          "originalSentence": "Additionally, when [`fs."
        },
        {
          "id": "s_4994",
          "content": "readdir()`][] or [`fs.",
          "position": 3,
          "originalSentence": "readdir()`][] or [`fs."
        },
        {
          "id": "s_4995",
          "content": "readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs.",
          "position": 4,
          "originalSentence": "readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs."
        },
        {
          "id": "s_4996",
          "content": "Dirent} objects, rather than strings or {Buffer}s.",
          "position": 5,
          "originalSentence": "Dirent} objects, rather than strings or {Buffer}s."
        },
        {
          "id": "s_5002",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5003",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5004",
          "content": "Dirent} object describes a block device.",
          "position": 2,
          "originalSentence": "Dirent} object describes a block device."
        },
        {
          "id": "s_5010",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5011",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5012",
          "content": "Dirent} object describes a character device.",
          "position": 2,
          "originalSentence": "Dirent} object describes a character device."
        },
        {
          "id": "s_5018",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5019",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5020",
          "content": "Dirent} object describes a file system directory.",
          "position": 2,
          "originalSentence": "Dirent} object describes a file system directory."
        },
        {
          "id": "s_5026",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5027",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5028",
          "content": "Dirent} object describes a first-in-first-out (FIFO) pipe.",
          "position": 2,
          "originalSentence": "Dirent} object describes a first-in-first-out (FIFO) pipe."
        },
        {
          "id": "s_5034",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5035",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5036",
          "content": "Dirent} object describes a regular file.",
          "position": 2,
          "originalSentence": "Dirent} object describes a regular file."
        },
        {
          "id": "s_5042",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5043",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5044",
          "content": "Dirent} object describes a socket.",
          "position": 2,
          "originalSentence": "Dirent} object describes a socket."
        },
        {
          "id": "s_5050",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5051",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5052",
          "content": "Dirent} object describes a symbolic link.",
          "position": 2,
          "originalSentence": "Dirent} object describes a symbolic link."
        },
        {
          "id": "s_5067",
          "content": "Type: {string|Buffer}",
          "position": 0,
          "originalSentence": "Type: {string|Buffer}"
        },
        {
          "id": "s_5068",
          "content": "The file name that this {fs.",
          "position": 1,
          "originalSentence": "The file name that this {fs."
        },
        {
          "id": "s_5069",
          "content": "Dirent} object refers to.",
          "position": 2,
          "originalSentence": "Dirent} object refers to."
        },
        {
          "id": "s_5070",
          "content": "The type of this value is determined by the `options.",
          "position": 3,
          "originalSentence": "The type of this value is determined by the `options."
        },
        {
          "id": "s_5071",
          "content": "encoding` passed to [`fs.",
          "position": 4,
          "originalSentence": "encoding` passed to [`fs."
        },
        {
          "id": "s_5072",
          "content": "readdir()`][] or [`fs.",
          "position": 5,
          "originalSentence": "readdir()`][] or [`fs."
        },
        {
          "id": "s_5073",
          "content": "readdirSync()`][].",
          "position": 6,
          "originalSentence": "readdirSync()`][]."
        },
        {
          "id": "s_5079",
          "content": "Type: {string}",
          "position": 0,
          "originalSentence": "Type: {string}"
        },
        {
          "id": "s_5080",
          "content": "The path to the parent directory of the file this {fs.",
          "position": 1,
          "originalSentence": "The path to the parent directory of the file this {fs."
        },
        {
          "id": "s_5081",
          "content": "Dirent} object refers to.",
          "position": 2,
          "originalSentence": "Dirent} object refers to."
        },
        {
          "id": "s_5092",
          "content": "Extends {EventEmitter}",
          "position": 0,
          "originalSentence": "Extends {EventEmitter}"
        },
        {
          "id": "s_5093",
          "content": "A successful call to [`fs.",
          "position": 1,
          "originalSentence": "A successful call to [`fs."
        },
        {
          "id": "s_5094",
          "content": "watch()`][] method will return a new {fs.",
          "position": 2,
          "originalSentence": "watch()`][] method will return a new {fs."
        },
        {
          "id": "s_5095",
          "content": "FSWatcher} object.",
          "position": 3,
          "originalSentence": "FSWatcher} object."
        },
        {
          "id": "s_5096",
          "content": "FSWatcher} objects emit a `'change'` event whenever a specific watched file is modified.",
          "position": 4,
          "originalSentence": "FSWatcher} objects emit a `'change'` event whenever a specific watched file is modified."
        },
        {
          "id": "s_5111",
          "content": "`eventType` {string} The type of change event that has occurred `filename` {string|Buffer} The filename that changed (if relevant/available)",
          "position": 0,
          "originalSentence": "`eventType` {string} The type of change event that has occurred `filename` {string|Buffer} The filename that changed (if relevant/available)"
        },
        {
          "id": "s_5112",
          "content": "Emitted when something changes in a watched directory or file.",
          "position": 1,
          "originalSentence": "Emitted when something changes in a watched directory or file."
        },
        {
          "id": "s_5113",
          "content": "See more details in [`fs.",
          "position": 2,
          "originalSentence": "See more details in [`fs."
        },
        {
          "id": "s_5114",
          "content": "watch()`][].",
          "position": 3,
          "originalSentence": "watch()`][]."
        },
        {
          "id": "s_5115",
          "content": "The `filename` argument may not be provided depending on operating system support.",
          "position": 4,
          "originalSentence": "The `filename` argument may not be provided depending on operating system support."
        },
        {
          "id": "s_5116",
          "content": "If `filename` is provided, it will be provided as a {Buffer} if `fs.",
          "position": 5,
          "originalSentence": "If `filename` is provided, it will be provided as a {Buffer} if `fs."
        },
        {
          "id": "s_5117",
          "content": "watch()` is called with its `encoding` option set to `'buffer'`, otherwise `filename` will be a UTF-8 string.",
          "position": 6,
          "originalSentence": "watch()` is called with its `encoding` option set to `'buffer'`, otherwise `filename` will be a UTF-8 string."
        },
        {
          "id": "s_5123",
          "content": "Emitted when the watcher stops watching for changes.",
          "position": 0,
          "originalSentence": "Emitted when the watcher stops watching for changes."
        },
        {
          "id": "s_5124",
          "content": "The closed {fs.",
          "position": 1,
          "originalSentence": "The closed {fs."
        },
        {
          "id": "s_5125",
          "content": "FSWatcher} object is no longer usable in the event handler.",
          "position": 2,
          "originalSentence": "FSWatcher} object is no longer usable in the event handler."
        },
        {
          "id": "s_5134",
          "content": "`error` {Error}",
          "position": 0,
          "originalSentence": "`error` {Error}"
        },
        {
          "id": "s_5135",
          "content": "Emitted when an error occurs while watching the file.",
          "position": 1,
          "originalSentence": "Emitted when an error occurs while watching the file."
        },
        {
          "id": "s_5136",
          "content": "The errored {fs.",
          "position": 2,
          "originalSentence": "The errored {fs."
        },
        {
          "id": "s_5137",
          "content": "FSWatcher} object is no longer usable in the event handler.",
          "position": 3,
          "originalSentence": "FSWatcher} object is no longer usable in the event handler."
        },
        {
          "id": "s_5145",
          "content": "Stop watching for changes on the given {fs.",
          "position": 0,
          "originalSentence": "Stop watching for changes on the given {fs."
        },
        {
          "id": "s_5146",
          "content": "FSWatcher}.",
          "position": 1,
          "originalSentence": "FSWatcher}."
        },
        {
          "id": "s_5147",
          "content": "Once stopped, the {fs.",
          "position": 2,
          "originalSentence": "Once stopped, the {fs."
        },
        {
          "id": "s_5148",
          "content": "FSWatcher} object is no longer usable.",
          "position": 3,
          "originalSentence": "FSWatcher} object is no longer usable."
        },
        {
          "id": "s_5169",
          "content": "Returns: {fs.",
          "position": 0,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_5170",
          "content": "When called, requests that the Node.",
          "position": 1,
          "originalSentence": "When called, requests that the Node."
        },
        {
          "id": "s_5171",
          "content": "js event loop _not_ exit so long as the {fs.",
          "position": 2,
          "originalSentence": "js event loop _not_ exit so long as the {fs."
        },
        {
          "id": "s_5172",
          "content": "FSWatcher} is active.",
          "position": 3,
          "originalSentence": "FSWatcher} is active."
        },
        {
          "id": "s_5173",
          "content": "Calling `watcher.",
          "position": 4,
          "originalSentence": "Calling `watcher."
        },
        {
          "id": "s_5174",
          "content": "ref()` multiple times will have no effect.",
          "position": 5,
          "originalSentence": "ref()` multiple times will have no effect."
        },
        {
          "id": "s_5175",
          "content": "By default, all {fs.",
          "position": 6,
          "originalSentence": "By default, all {fs."
        },
        {
          "id": "s_5176",
          "content": "FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
          "position": 7,
          "originalSentence": "FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher."
        },
        {
          "id": "s_5177",
          "content": "ref()` unless `watcher.",
          "position": 8,
          "originalSentence": "ref()` unless `watcher."
        },
        {
          "id": "s_5178",
          "content": "unref()` had been called previously.",
          "position": 9,
          "originalSentence": "unref()` had been called previously."
        },
        {
          "id": "s_5195",
          "content": "Returns: {fs.",
          "position": 0,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_5196",
          "content": "When called, the active {fs.",
          "position": 1,
          "originalSentence": "When called, the active {fs."
        },
        {
          "id": "s_5197",
          "content": "FSWatcher} object will not require the Node.",
          "position": 2,
          "originalSentence": "FSWatcher} object will not require the Node."
        },
        {
          "id": "s_5198",
          "content": "js event loop to remain active.",
          "position": 3,
          "originalSentence": "js event loop to remain active."
        },
        {
          "id": "s_5199",
          "content": "If there is no other activity keeping the event loop running, the process may exit before the {fs.",
          "position": 4,
          "originalSentence": "If there is no other activity keeping the event loop running, the process may exit before the {fs."
        },
        {
          "id": "s_5200",
          "content": "FSWatcher} object's callback is invoked.",
          "position": 5,
          "originalSentence": "FSWatcher} object's callback is invoked."
        },
        {
          "id": "s_5201",
          "content": "Calling `watcher.",
          "position": 6,
          "originalSentence": "Calling `watcher."
        },
        {
          "id": "s_5202",
          "content": "unref()` multiple times will have no effect.",
          "position": 7,
          "originalSentence": "unref()` multiple times will have no effect."
        },
        {
          "id": "s_5210",
          "content": "Extends {EventEmitter}",
          "position": 0,
          "originalSentence": "Extends {EventEmitter}"
        },
        {
          "id": "s_5211",
          "content": "A successful call to `fs.",
          "position": 1,
          "originalSentence": "A successful call to `fs."
        },
        {
          "id": "s_5212",
          "content": "watchFile()` method will return a new {fs.",
          "position": 2,
          "originalSentence": "watchFile()` method will return a new {fs."
        },
        {
          "id": "s_5213",
          "content": "StatWatcher} object.",
          "position": 3,
          "originalSentence": "StatWatcher} object."
        },
        {
          "id": "s_5236",
          "content": "Returns: {fs.",
          "position": 0,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_5237",
          "content": "StatWatcher}",
          "position": 1,
          "originalSentence": "StatWatcher}"
        },
        {
          "id": "s_5238",
          "content": "When called, requests that the Node.",
          "position": 2,
          "originalSentence": "When called, requests that the Node."
        },
        {
          "id": "s_5239",
          "content": "js event loop _not_ exit so long as the {fs.",
          "position": 3,
          "originalSentence": "js event loop _not_ exit so long as the {fs."
        },
        {
          "id": "s_5240",
          "content": "StatWatcher} is active.",
          "position": 4,
          "originalSentence": "StatWatcher} is active."
        },
        {
          "id": "s_5241",
          "content": "Calling `watcher.",
          "position": 5,
          "originalSentence": "Calling `watcher."
        },
        {
          "id": "s_5242",
          "content": "ref()` multiple times will have no effect.",
          "position": 6,
          "originalSentence": "ref()` multiple times will have no effect."
        },
        {
          "id": "s_5243",
          "content": "By default, all {fs.",
          "position": 7,
          "originalSentence": "By default, all {fs."
        },
        {
          "id": "s_5244",
          "content": "StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
          "position": 8,
          "originalSentence": "StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher."
        },
        {
          "id": "s_5245",
          "content": "ref()` unless `watcher.",
          "position": 9,
          "originalSentence": "ref()` unless `watcher."
        },
        {
          "id": "s_5246",
          "content": "unref()` had been called previously.",
          "position": 10,
          "originalSentence": "unref()` had been called previously."
        },
        {
          "id": "s_5265",
          "content": "Returns: {fs.",
          "position": 0,
          "originalSentence": "Returns: {fs."
        },
        {
          "id": "s_5266",
          "content": "StatWatcher}",
          "position": 1,
          "originalSentence": "StatWatcher}"
        },
        {
          "id": "s_5267",
          "content": "When called, the active {fs.",
          "position": 2,
          "originalSentence": "When called, the active {fs."
        },
        {
          "id": "s_5268",
          "content": "StatWatcher} object will not require the Node.",
          "position": 3,
          "originalSentence": "StatWatcher} object will not require the Node."
        },
        {
          "id": "s_5269",
          "content": "js event loop to remain active.",
          "position": 4,
          "originalSentence": "js event loop to remain active."
        },
        {
          "id": "s_5270",
          "content": "If there is no other activity keeping the event loop running, the process may exit before the {fs.",
          "position": 5,
          "originalSentence": "If there is no other activity keeping the event loop running, the process may exit before the {fs."
        },
        {
          "id": "s_5271",
          "content": "StatWatcher} object's callback is invoked.",
          "position": 6,
          "originalSentence": "StatWatcher} object's callback is invoked."
        },
        {
          "id": "s_5272",
          "content": "Calling `watcher.",
          "position": 7,
          "originalSentence": "Calling `watcher."
        },
        {
          "id": "s_5273",
          "content": "unref()` multiple times will have no effect.",
          "position": 8,
          "originalSentence": "unref()` multiple times will have no effect."
        },
        {
          "id": "s_5281",
          "content": "Extends: {stream.",
          "position": 0,
          "originalSentence": "Extends: {stream."
        },
        {
          "id": "s_5282",
          "content": "Instances of {fs.",
          "position": 1,
          "originalSentence": "Instances of {fs."
        },
        {
          "id": "s_5283",
          "content": "ReadStream} are created and returned using the [`fs.",
          "position": 2,
          "originalSentence": "ReadStream} are created and returned using the [`fs."
        },
        {
          "id": "s_5284",
          "content": "createReadStream()`][] function.",
          "position": 3,
          "originalSentence": "createReadStream()`][] function."
        },
        {
          "id": "s_5288",
          "content": "Emitted when the {fs.",
          "position": 0,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "s_5289",
          "content": "ReadStream}'s underlying file descriptor has been closed.",
          "position": 1,
          "originalSentence": "ReadStream}'s underlying file descriptor has been closed."
        },
        {
          "id": "s_5297",
          "content": "`fd` {integer} Integer file descriptor used by the {fs.",
          "position": 0,
          "originalSentence": "`fd` {integer} Integer file descriptor used by the {fs."
        },
        {
          "id": "s_5298",
          "content": "ReadStream}.",
          "position": 1,
          "originalSentence": "ReadStream}."
        },
        {
          "id": "s_5299",
          "content": "Emitted when the {fs.",
          "position": 2,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "s_5300",
          "content": "ReadStream}'s file descriptor has been opened.",
          "position": 3,
          "originalSentence": "ReadStream}'s file descriptor has been opened."
        },
        {
          "id": "s_5306",
          "content": "Emitted when the {fs.",
          "position": 0,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "s_5307",
          "content": "ReadStream} is ready to be used.",
          "position": 1,
          "originalSentence": "ReadStream} is ready to be used."
        },
        {
          "id": "s_5308",
          "content": "Fires immediately after `'open'`.",
          "position": 2,
          "originalSentence": "Fires immediately after `'open'`."
        },
        {
          "id": "s_5312",
          "content": "Type: {number}",
          "position": 0,
          "originalSentence": "Type: {number}"
        },
        {
          "id": "s_5313",
          "content": "The number of bytes that have been read so far.",
          "position": 1,
          "originalSentence": "The number of bytes that have been read so far."
        },
        {
          "id": "s_5332",
          "content": "Type: {string|Buffer}",
          "position": 0,
          "originalSentence": "Type: {string|Buffer}"
        },
        {
          "id": "s_5333",
          "content": "The path to the file the stream is reading from as specified in the first argument to `fs.",
          "position": 1,
          "originalSentence": "The path to the file the stream is reading from as specified in the first argument to `fs."
        },
        {
          "id": "s_5334",
          "content": "createReadStream()`.",
          "position": 2,
          "originalSentence": "createReadStream()`."
        },
        {
          "id": "s_5335",
          "content": "If `path` is passed as a string, then `readStream.",
          "position": 3,
          "originalSentence": "If `path` is passed as a string, then `readStream."
        },
        {
          "id": "s_5336",
          "content": "path` will be a string.",
          "position": 4,
          "originalSentence": "path` will be a string."
        },
        {
          "id": "s_5337",
          "content": "If `path` is passed as a {Buffer}, then `readStream.",
          "position": 5,
          "originalSentence": "If `path` is passed as a {Buffer}, then `readStream."
        },
        {
          "id": "s_5338",
          "content": "path` will be a {Buffer}.",
          "position": 6,
          "originalSentence": "path` will be a {Buffer}."
        },
        {
          "id": "s_5339",
          "content": "If `fd` is specified, then `readStream.",
          "position": 7,
          "originalSentence": "If `fd` is specified, then `readStream."
        },
        {
          "id": "s_5340",
          "content": "path` will be `undefined`.",
          "position": 8,
          "originalSentence": "path` will be `undefined`."
        },
        {
          "id": "s_5347",
          "content": "Type: {boolean}",
          "position": 0,
          "originalSentence": "Type: {boolean}"
        },
        {
          "id": "s_5348",
          "content": "This property is `true` if the underlying file has not been opened yet, i.",
          "position": 1,
          "originalSentence": "This property is `true` if the underlying file has not been opened yet, i."
        },
        {
          "id": "s_5349",
          "content": "before the `'ready'` event is emitted.",
          "position": 2,
          "originalSentence": "before the `'ready'` event is emitted."
        },
        {
          "id": "s_5368",
          "content": "Stats} object provides information about a file.",
          "position": 0,
          "originalSentence": "Stats} object provides information about a file."
        },
        {
          "id": "s_5369",
          "content": "Objects returned from [`fs.",
          "position": 1,
          "originalSentence": "Objects returned from [`fs."
        },
        {
          "id": "s_5370",
          "content": "stat()`][], [`fs.",
          "position": 2,
          "originalSentence": "stat()`][], [`fs."
        },
        {
          "id": "s_5371",
          "content": "lstat()`][], [`fs.",
          "position": 3,
          "originalSentence": "lstat()`][], [`fs."
        },
        {
          "id": "s_5372",
          "content": "fstat()`][], and their synchronous counterparts are of this type.",
          "position": 4,
          "originalSentence": "fstat()`][], and their synchronous counterparts are of this type."
        },
        {
          "id": "s_5373",
          "content": "If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`",
          "position": 5,
          "originalSentence": "If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`"
        },
        {
          "id": "s_5374",
          "content": "and the object will contain additional nanosecond-precision properties suffixed with `Ns`.",
          "position": 6,
          "originalSentence": "and the object will contain additional nanosecond-precision properties suffixed with `Ns`."
        },
        {
          "id": "s_5375",
          "content": "`Stat` objects are not to be created directly using the `new` keyword.",
          "position": 7,
          "originalSentence": "`Stat` objects are not to be created directly using the `new` keyword."
        },
        {
          "id": "s_5376",
          "content": "`bigint` version:",
          "position": 8,
          "originalSentence": "`bigint` version:"
        },
        {
          "id": "s_5382",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5383",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5384",
          "content": "Stats} object describes a block device.",
          "position": 2,
          "originalSentence": "Stats} object describes a block device."
        },
        {
          "id": "s_5390",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5391",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5392",
          "content": "Stats} object describes a character device.",
          "position": 2,
          "originalSentence": "Stats} object describes a character device."
        },
        {
          "id": "s_5409",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5410",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5411",
          "content": "Stats} object describes a file system directory.",
          "position": 2,
          "originalSentence": "Stats} object describes a file system directory."
        },
        {
          "id": "s_5412",
          "content": "If the {fs.",
          "position": 3,
          "originalSentence": "If the {fs."
        },
        {
          "id": "s_5413",
          "content": "Stats} object was obtained from calling [`fs.",
          "position": 4,
          "originalSentence": "Stats} object was obtained from calling [`fs."
        },
        {
          "id": "s_5414",
          "content": "lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`.",
          "position": 5,
          "originalSentence": "lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`."
        },
        {
          "id": "s_5415",
          "content": "This is because [`fs.",
          "position": 6,
          "originalSentence": "This is because [`fs."
        },
        {
          "id": "s_5416",
          "content": "lstat()`][] returns information about a symbolic link itself and not the path it resolves to.",
          "position": 7,
          "originalSentence": "lstat()`][] returns information about a symbolic link itself and not the path it resolves to."
        },
        {
          "id": "s_5422",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5423",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5424",
          "content": "Stats} object describes a first-in-first-out (FIFO) pipe.",
          "position": 2,
          "originalSentence": "Stats} object describes a first-in-first-out (FIFO) pipe."
        },
        {
          "id": "s_5430",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5431",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5432",
          "content": "Stats} object describes a regular file.",
          "position": 2,
          "originalSentence": "Stats} object describes a regular file."
        },
        {
          "id": "s_5438",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5439",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5440",
          "content": "Stats} object describes a socket.",
          "position": 2,
          "originalSentence": "Stats} object describes a socket."
        },
        {
          "id": "s_5450",
          "content": "Returns: {boolean}",
          "position": 0,
          "originalSentence": "Returns: {boolean}"
        },
        {
          "id": "s_5451",
          "content": "Returns `true` if the {fs.",
          "position": 1,
          "originalSentence": "Returns `true` if the {fs."
        },
        {
          "id": "s_5452",
          "content": "Stats} object describes a symbolic link.",
          "position": 2,
          "originalSentence": "Stats} object describes a symbolic link."
        },
        {
          "id": "s_5453",
          "content": "This method is only valid when using [`fs.",
          "position": 3,
          "originalSentence": "This method is only valid when using [`fs."
        },
        {
          "id": "s_5454",
          "content": "lstat()`][].",
          "position": 4,
          "originalSentence": "lstat()`][]."
        },
        {
          "id": "s_5458",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5459",
          "content": "The numeric identifier of the device containing the file.",
          "position": 1,
          "originalSentence": "The numeric identifier of the device containing the file."
        },
        {
          "id": "s_5463",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5464",
          "content": "The file system specific \"Inode\" number for the file.",
          "position": 1,
          "originalSentence": "The file system specific \"Inode\" number for the file."
        },
        {
          "id": "s_5468",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5469",
          "content": "A bit-field describing the file type and mode.",
          "position": 1,
          "originalSentence": "A bit-field describing the file type and mode."
        },
        {
          "id": "s_5473",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5474",
          "content": "The number of hard-links that exist for the file.",
          "position": 1,
          "originalSentence": "The number of hard-links that exist for the file."
        },
        {
          "id": "s_5478",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5479",
          "content": "The numeric user identifier of the user that owns the file (POSIX).",
          "position": 1,
          "originalSentence": "The numeric user identifier of the user that owns the file (POSIX)."
        },
        {
          "id": "s_5483",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5484",
          "content": "The numeric group identifier of the group that owns the file (POSIX).",
          "position": 1,
          "originalSentence": "The numeric group identifier of the group that owns the file (POSIX)."
        },
        {
          "id": "s_5488",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5489",
          "content": "A numeric device identifier if the file represents a device.",
          "position": 1,
          "originalSentence": "A numeric device identifier if the file represents a device."
        },
        {
          "id": "s_5496",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5497",
          "content": "The size of the file in bytes.",
          "position": 1,
          "originalSentence": "The size of the file in bytes."
        },
        {
          "id": "s_5498",
          "content": "If the underlying file system does not support getting the size of the file, this will be `0`.",
          "position": 2,
          "originalSentence": "If the underlying file system does not support getting the size of the file, this will be `0`."
        },
        {
          "id": "s_5502",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5503",
          "content": "The file system block size for i/o operations.",
          "position": 1,
          "originalSentence": "The file system block size for i/o operations."
        },
        {
          "id": "s_5507",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5508",
          "content": "The number of blocks allocated for this file.",
          "position": 1,
          "originalSentence": "The number of blocks allocated for this file."
        },
        {
          "id": "s_5512",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5513",
          "content": "The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch."
        },
        {
          "id": "s_5517",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5518",
          "content": "The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch."
        },
        {
          "id": "s_5522",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5523",
          "content": "The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch."
        },
        {
          "id": "s_5527",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5528",
          "content": "The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.",
          "position": 1,
          "originalSentence": "The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch."
        },
        {
          "id": "s_5535",
          "content": "Type: {bigint}",
          "position": 0,
          "originalSentence": "Type: {bigint}"
        },
        {
          "id": "s_5536",
          "content": "Only present when `bigint: true` is passed into the method that generates the object.",
          "position": 1,
          "originalSentence": "Only present when `bigint: true` is passed into the method that generates the object."
        },
        {
          "id": "s_5537",
          "content": "The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch.",
          "position": 2,
          "originalSentence": "The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch."
        },
        {
          "id": "s_5544",
          "content": "Type: {bigint}",
          "position": 0,
          "originalSentence": "Type: {bigint}"
        },
        {
          "id": "s_5545",
          "content": "Only present when `bigint: true` is passed into the method that generates the object.",
          "position": 1,
          "originalSentence": "Only present when `bigint: true` is passed into the method that generates the object."
        },
        {
          "id": "s_5546",
          "content": "The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch.",
          "position": 2,
          "originalSentence": "The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch."
        },
        {
          "id": "s_5553",
          "content": "Type: {bigint}",
          "position": 0,
          "originalSentence": "Type: {bigint}"
        },
        {
          "id": "s_5554",
          "content": "Only present when `bigint: true` is passed into the method that generates the object.",
          "position": 1,
          "originalSentence": "Only present when `bigint: true` is passed into the method that generates the object."
        },
        {
          "id": "s_5555",
          "content": "The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch.",
          "position": 2,
          "originalSentence": "The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch."
        },
        {
          "id": "s_5562",
          "content": "Type: {bigint}",
          "position": 0,
          "originalSentence": "Type: {bigint}"
        },
        {
          "id": "s_5563",
          "content": "Only present when `bigint: true` is passed into the method that generates the object.",
          "position": 1,
          "originalSentence": "Only present when `bigint: true` is passed into the method that generates the object."
        },
        {
          "id": "s_5564",
          "content": "The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch.",
          "position": 2,
          "originalSentence": "The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch."
        },
        {
          "id": "s_5568",
          "content": "Type: {Date}",
          "position": 0,
          "originalSentence": "Type: {Date}"
        },
        {
          "id": "s_5569",
          "content": "The timestamp indicating the last time this file was accessed.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time this file was accessed."
        },
        {
          "id": "s_5573",
          "content": "Type: {Date}",
          "position": 0,
          "originalSentence": "Type: {Date}"
        },
        {
          "id": "s_5574",
          "content": "The timestamp indicating the last time this file was modified.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time this file was modified."
        },
        {
          "id": "s_5578",
          "content": "Type: {Date}",
          "position": 0,
          "originalSentence": "Type: {Date}"
        },
        {
          "id": "s_5579",
          "content": "The timestamp indicating the last time the file status was changed.",
          "position": 1,
          "originalSentence": "The timestamp indicating the last time the file status was changed."
        },
        {
          "id": "s_5583",
          "content": "Type: {Date}",
          "position": 0,
          "originalSentence": "Type: {Date}"
        },
        {
          "id": "s_5584",
          "content": "The timestamp indicating the creation time of this file.",
          "position": 1,
          "originalSentence": "The timestamp indicating the creation time of this file."
        },
        {
          "id": "s_5634",
          "content": "The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs` properties are numeric values that hold the corresponding times in milliseconds.",
          "position": 0,
          "originalSentence": "The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs` properties are numeric values that hold the corresponding times in milliseconds."
        },
        {
          "id": "s_5635",
          "content": "Their precision is platform specific.",
          "position": 1,
          "originalSentence": "Their precision is platform specific."
        },
        {
          "id": "s_5636",
          "content": "When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number].",
          "position": 2,
          "originalSentence": "When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number]."
        },
        {
          "id": "s_5637",
          "content": "The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds.",
          "position": 3,
          "originalSentence": "The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds."
        },
        {
          "id": "s_5638",
          "content": "They are only present when `bigint: true` is passed into the method that generates the object.",
          "position": 4,
          "originalSentence": "They are only present when `bigint: true` is passed into the method that generates the object."
        },
        {
          "id": "s_5639",
          "content": "Their precision is platform specific.",
          "position": 5,
          "originalSentence": "Their precision is platform specific."
        },
        {
          "id": "s_5640",
          "content": "`atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times.",
          "position": 6,
          "originalSentence": "`atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times."
        },
        {
          "id": "s_5641",
          "content": "The `Date` and number values are not connected.",
          "position": 7,
          "originalSentence": "The `Date` and number values are not connected."
        },
        {
          "id": "s_5642",
          "content": "Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation.",
          "position": 8,
          "originalSentence": "Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation."
        },
        {
          "id": "s_5643",
          "content": "The times in the stat object have the following semantics:",
          "position": 9,
          "originalSentence": "The times in the stat object have the following semantics:"
        },
        {
          "id": "s_5644",
          "content": "`atime` \"Access Time\": Time when file data last accessed.",
          "position": 10,
          "originalSentence": "`atime` \"Access Time\": Time when file data last accessed."
        },
        {
          "id": "s_5645",
          "content": "Changed by the mknod(2), utimes(2), and read(2) system calls.",
          "position": 11,
          "originalSentence": "Changed by the mknod(2), utimes(2), and read(2) system calls."
        },
        {
          "id": "s_5646",
          "content": "`mtime` \"Modified Time\": Time when file data last modified.",
          "position": 12,
          "originalSentence": "`mtime` \"Modified Time\": Time when file data last modified."
        },
        {
          "id": "s_5647",
          "content": "Changed by the mknod(2), utimes(2), and write(2) system calls.",
          "position": 13,
          "originalSentence": "Changed by the mknod(2), utimes(2), and write(2) system calls."
        },
        {
          "id": "s_5648",
          "content": "`ctime` \"Change Time\": Time when file status was last changed (inode data modification).",
          "position": 14,
          "originalSentence": "`ctime` \"Change Time\": Time when file status was last changed (inode data modification)."
        },
        {
          "id": "s_5649",
          "content": "Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls.",
          "position": 15,
          "originalSentence": "Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls."
        },
        {
          "id": "s_5650",
          "content": "`birthtime` \"Birth Time\": Time of file creation.",
          "position": 16,
          "originalSentence": "`birthtime` \"Birth Time\": Time of file creation."
        },
        {
          "id": "s_5651",
          "content": "Set once when the file is created.",
          "position": 17,
          "originalSentence": "Set once when the file is created."
        },
        {
          "id": "s_5652",
          "content": "On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`).",
          "position": 18,
          "originalSentence": "On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`)."
        },
        {
          "id": "s_5653",
          "content": "This value may be greater than `atime` or `mtime` in this case.",
          "position": 19,
          "originalSentence": "This value may be greater than `atime` or `mtime` in this case."
        },
        {
          "id": "s_5654",
          "content": "On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime` using the utimes(2) system call.",
          "position": 20,
          "originalSentence": "On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime` using the utimes(2) system call."
        },
        {
          "id": "s_5655",
          "content": "Prior to Node.",
          "position": 21,
          "originalSentence": "Prior to Node."
        },
        {
          "id": "s_5656",
          "content": "js 0.12, the `ctime` held the `birthtime` on Windows systems.",
          "position": 22,
          "originalSentence": "js 0.12, the `ctime` held the `birthtime` on Windows systems."
        },
        {
          "id": "s_5657",
          "content": "As of 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
          "position": 23,
          "originalSentence": "As of 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was."
        },
        {
          "id": "s_5668",
          "content": "Provides information about a mounted file system.",
          "position": 0,
          "originalSentence": "Provides information about a mounted file system."
        },
        {
          "id": "s_5669",
          "content": "Objects returned from [`fs.",
          "position": 1,
          "originalSentence": "Objects returned from [`fs."
        },
        {
          "id": "s_5670",
          "content": "statfs()`][] and its synchronous counterpart are of this type.",
          "position": 2,
          "originalSentence": "statfs()`][] and its synchronous counterpart are of this type."
        },
        {
          "id": "s_5671",
          "content": "If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`.",
          "position": 3,
          "originalSentence": "If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`."
        },
        {
          "id": "s_5672",
          "content": "`bigint` version:",
          "position": 4,
          "originalSentence": "`bigint` version:"
        },
        {
          "id": "s_5676",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5677",
          "content": "Free blocks available to unprivileged users.",
          "position": 1,
          "originalSentence": "Free blocks available to unprivileged users."
        },
        {
          "id": "s_5681",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5682",
          "content": "Free blocks in file system.",
          "position": 1,
          "originalSentence": "Free blocks in file system."
        },
        {
          "id": "s_5686",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5687",
          "content": "Total data blocks in file system.",
          "position": 1,
          "originalSentence": "Total data blocks in file system."
        },
        {
          "id": "s_5691",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5692",
          "content": "Optimal transfer block size.",
          "position": 1,
          "originalSentence": "Optimal transfer block size."
        },
        {
          "id": "s_5696",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5697",
          "content": "Free file nodes in file system.",
          "position": 1,
          "originalSentence": "Free file nodes in file system."
        },
        {
          "id": "s_5701",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5702",
          "content": "Total file nodes in file system.",
          "position": 1,
          "originalSentence": "Total file nodes in file system."
        },
        {
          "id": "s_5706",
          "content": "Type: {number|bigint}",
          "position": 0,
          "originalSentence": "Type: {number|bigint}"
        },
        {
          "id": "s_5707",
          "content": "Type of file system.",
          "position": 1,
          "originalSentence": "Type of file system."
        },
        {
          "id": "s_5712",
          "content": "An optimized UTF-8 stream writer that allows for flushing all the internal buffering on demand.",
          "position": 0,
          "originalSentence": "An optimized UTF-8 stream writer that allows for flushing all the internal buffering on demand."
        },
        {
          "id": "s_5713",
          "content": "It handles `EAGAIN` errors correctly, allowing for customization, for example, by dropping content if the disk is busy.",
          "position": 1,
          "originalSentence": "It handles `EAGAIN` errors correctly, allowing for customization, for example, by dropping content if the disk is busy."
        },
        {
          "id": "s_5715",
          "content": "The `'close'` event is emitted when the stream is fully closed.",
          "position": 0,
          "originalSentence": "The `'close'` event is emitted when the stream is fully closed."
        },
        {
          "id": "s_5717",
          "content": "The `'drain'` event is emitted when the internal buffer has drained sufficiently to allow continued writing.",
          "position": 0,
          "originalSentence": "The `'drain'` event is emitted when the internal buffer has drained sufficiently to allow continued writing."
        },
        {
          "id": "s_5722",
          "content": "The `'drop'` event is emitted when to maximal length is reached and that data will not be written.",
          "position": 0,
          "originalSentence": "The `'drop'` event is emitted when to maximal length is reached and that data will not be written."
        },
        {
          "id": "s_5723",
          "content": "The data that was dropped is passed as the first argument to the event handle.",
          "position": 1,
          "originalSentence": "The data that was dropped is passed as the first argument to the event handle."
        },
        {
          "id": "s_5725",
          "content": "The `'error'` event is emitted when an error occurs.",
          "position": 0,
          "originalSentence": "The `'error'` event is emitted when an error occurs."
        },
        {
          "id": "s_5727",
          "content": "The `'finish'` event is emitted when the stream has been ended and all data has been flushed to the underlying file.",
          "position": 0,
          "originalSentence": "The `'finish'` event is emitted when the stream has been ended and all data has been flushed to the underlying file."
        },
        {
          "id": "s_5729",
          "content": "The `'ready'` event is emitted when the stream is ready to accept writes.",
          "position": 0,
          "originalSentence": "The `'ready'` event is emitted when the stream is ready to accept writes."
        },
        {
          "id": "s_5734",
          "content": "The `'write'` event is emitted when a write operation has completed.",
          "position": 0,
          "originalSentence": "The `'write'` event is emitted when a write operation has completed."
        },
        {
          "id": "s_5735",
          "content": "The number of bytes written is passed as the first argument to the event handler.",
          "position": 1,
          "originalSentence": "The number of bytes written is passed as the first argument to the event handler."
        },
        {
          "id": "s_5783",
          "content": "`options` {Object} * `append`: {boolean} Appends writes to dest file instead of truncating it.",
          "position": 0,
          "originalSentence": "`options` {Object} * `append`: {boolean} Appends writes to dest file instead of truncating it."
        },
        {
          "id": "s_5784",
          "content": "**Default**: `true`.",
          "position": 1,
          "originalSentence": "**Default**: `true`."
        },
        {
          "id": "s_5785",
          "content": "* `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`.",
          "position": 2,
          "originalSentence": "* `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`."
        },
        {
          "id": "s_5786",
          "content": "**Default**: `'utf8'`.",
          "position": 3,
          "originalSentence": "**Default**: `'utf8'`."
        },
        {
          "id": "s_5787",
          "content": "* `dest`: {string} A path to a file to be written to (mode controlled by the append option).",
          "position": 4,
          "originalSentence": "* `dest`: {string} A path to a file to be written to (mode controlled by the append option)."
        },
        {
          "id": "s_5788",
          "content": "* `fd`: {number} A file descriptor, something that is returned by `fs.",
          "position": 5,
          "originalSentence": "* `fd`: {number} A file descriptor, something that is returned by `fs."
        },
        {
          "id": "s_5789",
          "content": "open()` or `fs.",
          "position": 6,
          "originalSentence": "open()` or `fs."
        },
        {
          "id": "s_5790",
          "content": "openSync()`.",
          "position": 7,
          "originalSentence": "openSync()`."
        },
        {
          "id": "s_5791",
          "content": "* `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream.",
          "position": 8,
          "originalSentence": "* `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream."
        },
        {
          "id": "s_5792",
          "content": "* `fsync`: {boolean} Perform a `fs.",
          "position": 9,
          "originalSentence": "* `fsync`: {boolean} Perform a `fs."
        },
        {
          "id": "s_5793",
          "content": "fsyncSync()` every time a write is completed.",
          "position": 10,
          "originalSentence": "fsyncSync()` every time a write is completed."
        },
        {
          "id": "s_5794",
          "content": "* `maxLength`: {number} The maximum length of the internal buffer.",
          "position": 11,
          "originalSentence": "* `maxLength`: {number} The maximum length of the internal buffer."
        },
        {
          "id": "s_5795",
          "content": "If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**: `16384` * `minLength`: {number} The minimum length of the internal buffer that is required to be full before flushing.",
          "position": 12,
          "originalSentence": "If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**: `16384` * `minLength`: {number} The minimum length of the internal buffer that is required to be full before flushing."
        },
        {
          "id": "s_5796",
          "content": "* `mkdir`: {boolean} Ensure directory for `dest` file exists when true.",
          "position": 13,
          "originalSentence": "* `mkdir`: {boolean} Ensure directory for `dest` file exists when true."
        },
        {
          "id": "s_5797",
          "content": "**Default**: `false`.",
          "position": 14,
          "originalSentence": "**Default**: `false`."
        },
        {
          "id": "s_5798",
          "content": "* `mode`: {number|string} Specify the creating file mode (see `fs.",
          "position": 15,
          "originalSentence": "* `mode`: {number|string} Specify the creating file mode (see `fs."
        },
        {
          "id": "s_5799",
          "content": "* `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds.",
          "position": 16,
          "originalSentence": "* `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds."
        },
        {
          "id": "s_5800",
          "content": "* `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error.",
          "position": 17,
          "originalSentence": "* `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error."
        },
        {
          "id": "s_5801",
          "content": "If the return value is `true` the operation will be retried, otherwise it will bubble the error.",
          "position": 18,
          "originalSentence": "If the return value is `true` the operation will be retried, otherwise it will bubble the error."
        },
        {
          "id": "s_5802",
          "content": "The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the buffer that was written",
          "position": 19,
          "originalSentence": "The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the buffer that was written"
        },
        {
          "id": "s_5803",
          "content": "and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write.",
          "position": 20,
          "originalSentence": "and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write."
        },
        {
          "id": "s_5804",
          "content": "* `err` {any} An error or `null`.",
          "position": 21,
          "originalSentence": "* `err` {any} An error or `null`."
        },
        {
          "id": "s_5805",
          "content": "* `writeBufferLen` {number} * `remainingBufferLen`: {number} * `sync`: {boolean} Perform writes synchronously.",
          "position": 22,
          "originalSentence": "* `writeBufferLen` {number} * `remainingBufferLen`: {number} * `sync`: {boolean} Perform writes synchronously."
        },
        {
          "id": "s_5807",
          "content": "{boolean} Whether the stream is appending to the file or truncating it.",
          "position": 0,
          "originalSentence": "{boolean} Whether the stream is appending to the file or truncating it."
        },
        {
          "id": "s_5813",
          "content": "{string} The type of data that can be written to the stream.",
          "position": 0,
          "originalSentence": "{string} The type of data that can be written to the stream."
        },
        {
          "id": "s_5814",
          "content": "Supported values are `'utf8'` or `'buffer'`.",
          "position": 1,
          "originalSentence": "Supported values are `'utf8'` or `'buffer'`."
        },
        {
          "id": "s_5815",
          "content": "**Default**: `'utf8'`.",
          "position": 2,
          "originalSentence": "**Default**: `'utf8'`."
        },
        {
          "id": "s_5817",
          "content": "Close the stream immediately, without flushing the internal buffer.",
          "position": 0,
          "originalSentence": "Close the stream immediately, without flushing the internal buffer."
        },
        {
          "id": "s_5819",
          "content": "Close the stream gracefully, flushing the internal buffer before closing.",
          "position": 0,
          "originalSentence": "Close the stream gracefully, flushing the internal buffer before closing."
        },
        {
          "id": "s_5821",
          "content": "{number} The file descriptor that is being written to.",
          "position": 0,
          "originalSentence": "{number} The file descriptor that is being written to."
        },
        {
          "id": "s_5823",
          "content": "{string} The file that is being written to.",
          "position": 0,
          "originalSentence": "{string} The file that is being written to."
        },
        {
          "id": "s_5830",
          "content": "`callback` {Function} * `err` {Error|null} An error if the flush failed, otherwise `null`.",
          "position": 0,
          "originalSentence": "`callback` {Function} * `err` {Error|null} An error if the flush failed, otherwise `null`."
        },
        {
          "id": "s_5831",
          "content": "Writes the current buffer to the file if a write was not in progress.",
          "position": 1,
          "originalSentence": "Writes the current buffer to the file if a write was not in progress."
        },
        {
          "id": "s_5832",
          "content": "Do nothing if `minLength` is zero or if it is already writing.",
          "position": 2,
          "originalSentence": "Do nothing if `minLength` is zero or if it is already writing."
        },
        {
          "id": "s_5836",
          "content": "Flushes the buffered data synchronously.",
          "position": 0,
          "originalSentence": "Flushes the buffered data synchronously."
        },
        {
          "id": "s_5837",
          "content": "This is a costly operation.",
          "position": 1,
          "originalSentence": "This is a costly operation."
        },
        {
          "id": "s_5841",
          "content": "{boolean} Whether the stream is performing a `fs.",
          "position": 0,
          "originalSentence": "{boolean} Whether the stream is performing a `fs."
        },
        {
          "id": "s_5842",
          "content": "fsyncSync()` after every write operation.",
          "position": 1,
          "originalSentence": "fsyncSync()` after every write operation."
        },
        {
          "id": "s_5847",
          "content": "{number} The maximum length of the internal buffer.",
          "position": 0,
          "originalSentence": "{number} The maximum length of the internal buffer."
        },
        {
          "id": "s_5848",
          "content": "If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data.",
          "position": 1,
          "originalSentence": "If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data."
        },
        {
          "id": "s_5850",
          "content": "{number} The minimum length of the internal buffer that is required to be full before flushing.",
          "position": 0,
          "originalSentence": "{number} The minimum length of the internal buffer that is required to be full before flushing."
        },
        {
          "id": "s_5857",
          "content": "{boolean} Whether the stream should ensure that the directory for the `dest` file exists.",
          "position": 0,
          "originalSentence": "{boolean} Whether the stream should ensure that the directory for the `dest` file exists."
        },
        {
          "id": "s_5858",
          "content": "If `true`, it will create the directory if it does not exist.",
          "position": 1,
          "originalSentence": "If `true`, it will create the directory if it does not exist."
        },
        {
          "id": "s_5859",
          "content": "**Default**: `false`.",
          "position": 2,
          "originalSentence": "**Default**: `false`."
        },
        {
          "id": "s_5861",
          "content": "{number|string} The mode of the file that is being written to.",
          "position": 0,
          "originalSentence": "{number|string} The mode of the file that is being written to."
        },
        {
          "id": "s_5865",
          "content": "{number} The number of milliseconds between flushes.",
          "position": 0,
          "originalSentence": "{number} The number of milliseconds between flushes."
        },
        {
          "id": "s_5866",
          "content": "If set to `0`, no periodic flushes will be performed.",
          "position": 1,
          "originalSentence": "If set to `0`, no periodic flushes will be performed."
        },
        {
          "id": "s_5871",
          "content": "`file`: {string|Buffer|URL} A path to a file to be written to (mode controlled by the append option).",
          "position": 0,
          "originalSentence": "`file`: {string|Buffer|URL} A path to a file to be written to (mode controlled by the append option)."
        },
        {
          "id": "s_5872",
          "content": "Reopen the file in place, useful for log rotation.",
          "position": 1,
          "originalSentence": "Reopen the file in place, useful for log rotation."
        },
        {
          "id": "s_5874",
          "content": "{boolean} Whether the stream is writing synchronously or asynchronously.",
          "position": 0,
          "originalSentence": "{boolean} Whether the stream is writing synchronously or asynchronously."
        },
        {
          "id": "s_5885",
          "content": "`data` {string|Buffer} The data to write.",
          "position": 0,
          "originalSentence": "`data` {string|Buffer} The data to write."
        },
        {
          "id": "s_5886",
          "content": "Returns {boolean}",
          "position": 1,
          "originalSentence": "Returns {boolean}"
        },
        {
          "id": "s_5887",
          "content": "When the `options.",
          "position": 2,
          "originalSentence": "When the `options."
        },
        {
          "id": "s_5888",
          "content": "contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string.",
          "position": 3,
          "originalSentence": "contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string."
        },
        {
          "id": "s_5889",
          "content": "If the `contentMode` is set to `'buffer'`, the `data` argument must be a {Buffer}.",
          "position": 4,
          "originalSentence": "If the `contentMode` is set to `'buffer'`, the `data` argument must be a {Buffer}."
        },
        {
          "id": "s_5891",
          "content": "{boolean} Whether the stream is currently writing data to the file.",
          "position": 0,
          "originalSentence": "{boolean} Whether the stream is currently writing data to the file."
        },
        {
          "id": "s_5895",
          "content": "Calls `utf8Stream.",
          "position": 0,
          "originalSentence": "Calls `utf8Stream."
        },
        {
          "id": "s_5896",
          "content": "destroy()`.",
          "position": 1,
          "originalSentence": "destroy()`."
        },
        {
          "id": "s_5904",
          "content": "Extends {stream.",
          "position": 0,
          "originalSentence": "Extends {stream."
        },
        {
          "id": "s_5905",
          "content": "Instances of {fs.",
          "position": 1,
          "originalSentence": "Instances of {fs."
        },
        {
          "id": "s_5906",
          "content": "WriteStream} are created and returned using the [`fs.",
          "position": 2,
          "originalSentence": "WriteStream} are created and returned using the [`fs."
        },
        {
          "id": "s_5907",
          "content": "createWriteStream()`][] function.",
          "position": 3,
          "originalSentence": "createWriteStream()`][] function."
        },
        {
          "id": "s_5911",
          "content": "Emitted when the {fs.",
          "position": 0,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "s_5912",
          "content": "WriteStream}'s underlying file descriptor has been closed.",
          "position": 1,
          "originalSentence": "WriteStream}'s underlying file descriptor has been closed."
        },
        {
          "id": "s_5920",
          "content": "`fd` {integer} Integer file descriptor used by the {fs.",
          "position": 0,
          "originalSentence": "`fd` {integer} Integer file descriptor used by the {fs."
        },
        {
          "id": "s_5921",
          "content": "WriteStream}.",
          "position": 1,
          "originalSentence": "WriteStream}."
        },
        {
          "id": "s_5922",
          "content": "Emitted when the {fs.",
          "position": 2,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "s_5923",
          "content": "WriteStream}'s file is opened.",
          "position": 3,
          "originalSentence": "WriteStream}'s file is opened."
        },
        {
          "id": "s_5929",
          "content": "Emitted when the {fs.",
          "position": 0,
          "originalSentence": "Emitted when the {fs."
        },
        {
          "id": "s_5930",
          "content": "WriteStream} is ready to be used.",
          "position": 1,
          "originalSentence": "WriteStream} is ready to be used."
        },
        {
          "id": "s_5931",
          "content": "Fires immediately after `'open'`.",
          "position": 2,
          "originalSentence": "Fires immediately after `'open'`."
        },
        {
          "id": "s_5935",
          "content": "The number of bytes written so far.",
          "position": 0,
          "originalSentence": "The number of bytes written so far."
        },
        {
          "id": "s_5936",
          "content": "Does not include data that is still queued for writing.",
          "position": 1,
          "originalSentence": "Does not include data that is still queued for writing."
        },
        {
          "id": "s_5942",
          "content": "`callback` {Function} * `err` {Error}",
          "position": 0,
          "originalSentence": "`callback` {Function} * `err` {Error}"
        },
        {
          "id": "s_5943",
          "content": "Closes `writeStream`.",
          "position": 1,
          "originalSentence": "Closes `writeStream`."
        },
        {
          "id": "s_5944",
          "content": "Optionally accepts a callback that will be executed once the `writeStream` is closed.",
          "position": 2,
          "originalSentence": "Optionally accepts a callback that will be executed once the `writeStream` is closed."
        },
        {
          "id": "s_5957",
          "content": "The path to the file the stream is writing to as specified in the first argument to [`fs.",
          "position": 0,
          "originalSentence": "The path to the file the stream is writing to as specified in the first argument to [`fs."
        },
        {
          "id": "s_5958",
          "content": "createWriteStream()`][].",
          "position": 1,
          "originalSentence": "createWriteStream()`][]."
        },
        {
          "id": "s_5959",
          "content": "If `path` is passed as a string, then `writeStream.",
          "position": 2,
          "originalSentence": "If `path` is passed as a string, then `writeStream."
        },
        {
          "id": "s_5960",
          "content": "path` will be a string.",
          "position": 3,
          "originalSentence": "path` will be a string."
        },
        {
          "id": "s_5961",
          "content": "If `path` is passed as a {Buffer}, then `writeStream.",
          "position": 4,
          "originalSentence": "If `path` is passed as a {Buffer}, then `writeStream."
        },
        {
          "id": "s_5962",
          "content": "path` will be a {Buffer}.",
          "position": 5,
          "originalSentence": "path` will be a {Buffer}."
        },
        {
          "id": "s_5969",
          "content": "Type: {boolean}",
          "position": 0,
          "originalSentence": "Type: {boolean}"
        },
        {
          "id": "s_5970",
          "content": "This property is `true` if the underlying file has not been opened yet, i.",
          "position": 1,
          "originalSentence": "This property is `true` if the underlying file has not been opened yet, i."
        },
        {
          "id": "s_5971",
          "content": "before the `'ready'` event is emitted.",
          "position": 2,
          "originalSentence": "before the `'ready'` event is emitted."
        },
        {
          "id": "s_5975",
          "content": "Type: {Object}",
          "position": 0,
          "originalSentence": "Type: {Object}"
        },
        {
          "id": "s_5976",
          "content": "Returns an object containing commonly used constants for file system operations.",
          "position": 1,
          "originalSentence": "Returns an object containing commonly used constants for file system operations."
        },
        {
          "id": "s_5989",
          "content": "The following constants are exported by `fs.",
          "position": 0,
          "originalSentence": "The following constants are exported by `fs."
        },
        {
          "id": "s_5990",
          "content": "constants` and `fsPromises.",
          "position": 1,
          "originalSentence": "constants` and `fsPromises."
        },
        {
          "id": "s_5991",
          "content": "constants`.",
          "position": 2,
          "originalSentence": "constants`."
        },
        {
          "id": "s_5992",
          "content": "Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available.",
          "position": 3,
          "originalSentence": "Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available."
        },
        {
          "id": "s_5993",
          "content": "For portable applications it is recommended to check for their presence before use.",
          "position": 4,
          "originalSentence": "For portable applications it is recommended to check for their presence before use."
        },
        {
          "id": "s_5994",
          "content": "To use more than one constant, use the bitwise OR `|` operator.",
          "position": 5,
          "originalSentence": "To use more than one constant, use the bitwise OR `|` operator."
        },
        {
          "id": "s_6005",
          "content": "The following constants are meant for use as the `mode` parameter passed to [`fsPromises.",
          "position": 0,
          "originalSentence": "The following constants are meant for use as the `mode` parameter passed to [`fsPromises."
        },
        {
          "id": "s_6006",
          "content": "access()`][], [`fs.",
          "position": 1,
          "originalSentence": "access()`][], [`fs."
        },
        {
          "id": "s_6007",
          "content": "access()`][], and [`fs.",
          "position": 2,
          "originalSentence": "access()`][], and [`fs."
        },
        {
          "id": "s_6008",
          "content": "accessSync()`][].",
          "position": 3,
          "originalSentence": "accessSync()`][]."
        },
        {
          "id": "s_6009",
          "content": "The definitions are also available on Windows.",
          "position": 4,
          "originalSentence": "The definitions are also available on Windows."
        },
        {
          "id": "s_6015",
          "content": "The following constants are meant for use with [`fs.",
          "position": 0,
          "originalSentence": "The following constants are meant for use with [`fs."
        },
        {
          "id": "s_6016",
          "content": "copyFile()`][].",
          "position": 1,
          "originalSentence": "copyFile()`][]."
        },
        {
          "id": "s_6017",
          "content": "The definitions are also available on Windows.",
          "position": 2,
          "originalSentence": "The definitions are also available on Windows."
        },
        {
          "id": "s_6022",
          "content": "The following constants are meant for use with `fs.",
          "position": 0,
          "originalSentence": "The following constants are meant for use with `fs."
        },
        {
          "id": "s_6023",
          "content": "On Windows, only `O_APPEND`, `O_CREAT`, `O_EXCL`, `O_RDONLY`, `O_RDWR`, `O_TRUNC`, `O_WRONLY`, and `UV_FS_O_FILEMAP` are available.",
          "position": 1,
          "originalSentence": "On Windows, only `O_APPEND`, `O_CREAT`, `O_EXCL`, `O_RDONLY`, `O_RDWR`, `O_TRUNC`, `O_WRONLY`, and `UV_FS_O_FILEMAP` are available."
        },
        {
          "id": "s_6030",
          "content": "The following constants are meant for use with the {fs.",
          "position": 0,
          "originalSentence": "The following constants are meant for use with the {fs."
        },
        {
          "id": "s_6031",
          "content": "Stats} object's `mode` property for determining a file's type.",
          "position": 1,
          "originalSentence": "Stats} object's `mode` property for determining a file's type."
        },
        {
          "id": "s_6032",
          "content": "On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`, are available.",
          "position": 2,
          "originalSentence": "On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`, are available."
        },
        {
          "id": "s_6039",
          "content": "The following constants are meant for use with the {fs.",
          "position": 0,
          "originalSentence": "The following constants are meant for use with the {fs."
        },
        {
          "id": "s_6040",
          "content": "Stats} object's `mode` property for determining the access permissions for a file.",
          "position": 1,
          "originalSentence": "Stats} object's `mode` property for determining the access permissions for a file."
        },
        {
          "id": "s_6041",
          "content": "On Windows, only `S_IRUSR` and `S_IWUSR` are available.",
          "position": 2,
          "originalSentence": "On Windows, only `S_IRUSR` and `S_IWUSR` are available."
        },
        {
          "id": "s_6058",
          "content": "Because they are executed asynchronously by the underlying thread pool, there is no guaranteed ordering when using either the callback or promise-based methods.",
          "position": 0,
          "originalSentence": "Because they are executed asynchronously by the underlying thread pool, there is no guaranteed ordering when using either the callback or promise-based methods."
        },
        {
          "id": "s_6059",
          "content": "For example, the following is prone to error because the `fs.",
          "position": 1,
          "originalSentence": "For example, the following is prone to error because the `fs."
        },
        {
          "id": "s_6060",
          "content": "stat()` operation might complete before the `fs.",
          "position": 2,
          "originalSentence": "stat()` operation might complete before the `fs."
        },
        {
          "id": "s_6061",
          "content": "rename()` operation:",
          "position": 3,
          "originalSentence": "rename()` operation:"
        },
        {
          "id": "s_6062",
          "content": "It is important to correctly order the operations by awaiting the results of one before invoking the other:",
          "position": 4,
          "originalSentence": "It is important to correctly order the operations by awaiting the results of one before invoking the other:"
        },
        {
          "id": "s_6063",
          "content": "Or, when using the callback APIs, move the `fs.",
          "position": 5,
          "originalSentence": "Or, when using the callback APIs, move the `fs."
        },
        {
          "id": "s_6064",
          "content": "stat()` call into the callback of the `fs.",
          "position": 6,
          "originalSentence": "stat()` call into the callback of the `fs."
        },
        {
          "id": "s_6065",
          "content": "rename()` operation:",
          "position": 7,
          "originalSentence": "rename()` operation:"
        },
        {
          "id": "s_6068",
          "content": "Most `fs` operations accept file paths that may be specified in the form of a string, a {Buffer}, or a {URL} object using the `file:` protocol.",
          "position": 0,
          "originalSentence": "Most `fs` operations accept file paths that may be specified in the form of a string, a {Buffer}, or a {URL} object using the `file:` protocol."
        },
        {
          "id": "s_6077",
          "content": "String paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename.",
          "position": 0,
          "originalSentence": "String paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename."
        },
        {
          "id": "s_6078",
          "content": "Relative paths will be resolved relative to the current working directory as determined by calling `process.",
          "position": 1,
          "originalSentence": "Relative paths will be resolved relative to the current working directory as determined by calling `process."
        },
        {
          "id": "s_6079",
          "content": "Example using an absolute path on POSIX:",
          "position": 2,
          "originalSentence": "Example using an absolute path on POSIX:"
        },
        {
          "id": "s_6080",
          "content": "Example using a relative path on POSIX (relative to `process.",
          "position": 3,
          "originalSentence": "Example using a relative path on POSIX (relative to `process."
        },
        {
          "id": "s_6085",
          "content": "For most `node:fs` module functions, the `path` or `filename` argument may be passed as a {URL} object using the `file:` protocol.",
          "position": 0,
          "originalSentence": "For most `node:fs` module functions, the `path` or `filename` argument may be passed as a {URL} object using the `file:` protocol."
        },
        {
          "id": "s_6086",
          "content": "`file:` URLs are always absolute paths.",
          "position": 1,
          "originalSentence": "`file:` URLs are always absolute paths."
        },
        {
          "id": "s_6101",
          "content": "On Windows, `file:` {URL}s with a host name convert to UNC paths, while `file:` {URL}s with drive letters convert to local absolute paths.",
          "position": 0,
          "originalSentence": "On Windows, `file:` {URL}s with a host name convert to UNC paths, while `file:` {URL}s with drive letters convert to local absolute paths."
        },
        {
          "id": "s_6102",
          "content": "`file:` {URL}s with no host name and no drive letter will result in an error:",
          "position": 1,
          "originalSentence": "`file:` {URL}s with no host name and no drive letter will result in an error:"
        },
        {
          "id": "s_6103",
          "content": "`file:` {URL}s with drive letters must use `:` as a separator just after the drive letter.",
          "position": 2,
          "originalSentence": "`file:` {URL}s with drive letters must use `:` as a separator just after the drive letter."
        },
        {
          "id": "s_6104",
          "content": "Using another separator will result in an error.",
          "position": 3,
          "originalSentence": "Using another separator will result in an error."
        },
        {
          "id": "s_6105",
          "content": "On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error:",
          "position": 4,
          "originalSentence": "On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error:"
        },
        {
          "id": "s_6106",
          "content": "A `file:` {URL} having encoded slash characters will result in an error on all platforms:",
          "position": 5,
          "originalSentence": "A `file:` {URL} having encoded slash characters will result in an error on all platforms:"
        },
        {
          "id": "s_6107",
          "content": "On Windows, `file:` {URL}s having encoded backslash will result in an error:",
          "position": 6,
          "originalSentence": "On Windows, `file:` {URL}s having encoded backslash will result in an error:"
        },
        {
          "id": "s_6116",
          "content": "Paths specified using a {Buffer} are useful primarily on certain POSIX operating systems that treat file paths as opaque byte sequences.",
          "position": 0,
          "originalSentence": "Paths specified using a {Buffer} are useful primarily on certain POSIX operating systems that treat file paths as opaque byte sequences."
        },
        {
          "id": "s_6117",
          "content": "On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings.",
          "position": 1,
          "originalSentence": "On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings."
        },
        {
          "id": "s_6118",
          "content": "As with string paths, {Buffer} paths may be relative or absolute:",
          "position": 2,
          "originalSentence": "As with string paths, {Buffer} paths may be relative or absolute:"
        },
        {
          "id": "s_6119",
          "content": "Example using an absolute path on POSIX:",
          "position": 3,
          "originalSentence": "Example using an absolute path on POSIX:"
        },
        {
          "id": "s_6134",
          "content": "On Windows, Node.",
          "position": 0,
          "originalSentence": "On Windows, Node."
        },
        {
          "id": "s_6135",
          "content": "js follows the concept of per-drive working directory.",
          "position": 1,
          "originalSentence": "js follows the concept of per-drive working directory."
        },
        {
          "id": "s_6136",
          "content": "This behavior can be observed when using a drive path without a backslash.",
          "position": 2,
          "originalSentence": "This behavior can be observed when using a drive path without a backslash."
        },
        {
          "id": "s_6137",
          "content": "For example `fs.",
          "position": 3,
          "originalSentence": "For example `fs."
        },
        {
          "id": "s_6138",
          "content": "readdirSync('C:\\\\')` can potentially return a different result than `fs.",
          "position": 4,
          "originalSentence": "readdirSync('C:\\\\')` can potentially return a different result than `fs."
        },
        {
          "id": "s_6139",
          "content": "readdirSync('C:')`.",
          "position": 5,
          "originalSentence": "readdirSync('C:')`."
        },
        {
          "id": "s_6140",
          "content": "For more information, see [this MSDN page][MSDN-Rel-Path].",
          "position": 6,
          "originalSentence": "For more information, see [this MSDN page][MSDN-Rel-Path]."
        },
        {
          "id": "s_6171",
          "content": "On POSIX systems, for every process, the kernel maintains a table of currently open files and resources.",
          "position": 0,
          "originalSentence": "On POSIX systems, for every process, the kernel maintains a table of currently open files and resources."
        },
        {
          "id": "s_6172",
          "content": "Each open file is assigned a simple numeric identifier called a _file descriptor_.",
          "position": 1,
          "originalSentence": "Each open file is assigned a simple numeric identifier called a _file descriptor_."
        },
        {
          "id": "s_6173",
          "content": "At the system-level, all file system operations use these file descriptors to identify and track each specific file.",
          "position": 2,
          "originalSentence": "At the system-level, all file system operations use these file descriptors to identify and track each specific file."
        },
        {
          "id": "s_6174",
          "content": "Windows systems use a different but conceptually similar mechanism for tracking resources.",
          "position": 3,
          "originalSentence": "Windows systems use a different but conceptually similar mechanism for tracking resources."
        },
        {
          "id": "s_6175",
          "content": "To simplify things for users, Node.",
          "position": 4,
          "originalSentence": "To simplify things for users, Node."
        },
        {
          "id": "s_6176",
          "content": "js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor.",
          "position": 5,
          "originalSentence": "js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor."
        },
        {
          "id": "s_6177",
          "content": "The callback-based `fs.",
          "position": 6,
          "originalSentence": "The callback-based `fs."
        },
        {
          "id": "s_6178",
          "content": "open()`, and synchronous `fs.",
          "position": 7,
          "originalSentence": "open()`, and synchronous `fs."
        },
        {
          "id": "s_6179",
          "content": "openSync()` methods open a file and allocate a new file descriptor.",
          "position": 8,
          "originalSentence": "openSync()` methods open a file and allocate a new file descriptor."
        },
        {
          "id": "s_6180",
          "content": "Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file.",
          "position": 9,
          "originalSentence": "Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file."
        },
        {
          "id": "s_6181",
          "content": "Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed.",
          "position": 10,
          "originalSentence": "Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed."
        },
        {
          "id": "s_6182",
          "content": "Failure to do so will result in a memory leak that will eventually cause an application to crash.",
          "position": 11,
          "originalSentence": "Failure to do so will result in a memory leak that will eventually cause an application to crash."
        },
        {
          "id": "s_6183",
          "content": "The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor.",
          "position": 12,
          "originalSentence": "The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor."
        },
        {
          "id": "s_6184",
          "content": "These objects are better managed by the system to ensure that resources are not leaked.",
          "position": 13,
          "originalSentence": "These objects are better managed by the system to ensure that resources are not leaked."
        },
        {
          "id": "s_6185",
          "content": "However, it is still required that they are closed when operations are completed:",
          "position": 14,
          "originalSentence": "However, it is still required that they are closed when operations are completed:"
        },
        {
          "id": "s_6194",
          "content": "All callback and promise-based file system APIs (with the exception of `fs.",
          "position": 0,
          "originalSentence": "All callback and promise-based file system APIs (with the exception of `fs."
        },
        {
          "id": "s_6195",
          "content": "FSWatcher()`) use libuv's threadpool.",
          "position": 1,
          "originalSentence": "FSWatcher()`) use libuv's threadpool."
        },
        {
          "id": "s_6196",
          "content": "This can have surprising and negative performance implications for some applications.",
          "position": 2,
          "originalSentence": "This can have surprising and negative performance implications for some applications."
        },
        {
          "id": "s_6197",
          "content": "See the [`UV_THREADPOOL_SIZE`][] documentation for more information.",
          "position": 3,
          "originalSentence": "See the [`UV_THREADPOOL_SIZE`][] documentation for more information."
        },
        {
          "id": "s_6306",
          "content": "The following flags are available wherever the `flag` option takes a string.",
          "position": 0,
          "originalSentence": "The following flags are available wherever the `flag` option takes a string."
        },
        {
          "id": "s_6307",
          "content": "`'a'`: Open file for appending.",
          "position": 1,
          "originalSentence": "`'a'`: Open file for appending."
        },
        {
          "id": "s_6308",
          "content": "The file is created if it does not exist.",
          "position": 2,
          "originalSentence": "The file is created if it does not exist."
        },
        {
          "id": "s_6309",
          "content": "`'ax'`: Like `'a'` but fails if the path exists.",
          "position": 3,
          "originalSentence": "`'ax'`: Like `'a'` but fails if the path exists."
        },
        {
          "id": "s_6310",
          "content": "`'a+'`: Open file for reading and appending.",
          "position": 4,
          "originalSentence": "`'a+'`: Open file for reading and appending."
        },
        {
          "id": "s_6311",
          "content": "The file is created if it does not exist.",
          "position": 5,
          "originalSentence": "The file is created if it does not exist."
        },
        {
          "id": "s_6312",
          "content": "`'ax+'`: Like `'a+'` but fails if the path exists.",
          "position": 6,
          "originalSentence": "`'ax+'`: Like `'a+'` but fails if the path exists."
        },
        {
          "id": "s_6313",
          "content": "`'as'`: Open file for appending in synchronous mode.",
          "position": 7,
          "originalSentence": "`'as'`: Open file for appending in synchronous mode."
        },
        {
          "id": "s_6314",
          "content": "The file is created if it does not exist.",
          "position": 8,
          "originalSentence": "The file is created if it does not exist."
        },
        {
          "id": "s_6315",
          "content": "`'as+'`: Open file for reading and appending in synchronous mode.",
          "position": 9,
          "originalSentence": "`'as+'`: Open file for reading and appending in synchronous mode."
        },
        {
          "id": "s_6316",
          "content": "The file is created if it does not exist.",
          "position": 10,
          "originalSentence": "The file is created if it does not exist."
        },
        {
          "id": "s_6317",
          "content": "`'r'`: Open file for reading.",
          "position": 11,
          "originalSentence": "`'r'`: Open file for reading."
        },
        {
          "id": "s_6318",
          "content": "An exception occurs if the file does not exist.",
          "position": 12,
          "originalSentence": "An exception occurs if the file does not exist."
        },
        {
          "id": "s_6319",
          "content": "`'rs'`: Open file for reading in synchronous mode.",
          "position": 13,
          "originalSentence": "`'rs'`: Open file for reading in synchronous mode."
        },
        {
          "id": "s_6320",
          "content": "An exception occurs if the file does not exist.",
          "position": 14,
          "originalSentence": "An exception occurs if the file does not exist."
        },
        {
          "id": "s_6321",
          "content": "`'r+'`: Open file for reading and writing.",
          "position": 15,
          "originalSentence": "`'r+'`: Open file for reading and writing."
        },
        {
          "id": "s_6322",
          "content": "An exception occurs if the file does not exist.",
          "position": 16,
          "originalSentence": "An exception occurs if the file does not exist."
        },
        {
          "id": "s_6323",
          "content": "`'rs+'`: Open file for reading and writing in synchronous mode.",
          "position": 17,
          "originalSentence": "`'rs+'`: Open file for reading and writing in synchronous mode."
        },
        {
          "id": "s_6324",
          "content": "Instructs the operating system to bypass the local file system cache.",
          "position": 18,
          "originalSentence": "Instructs the operating system to bypass the local file system cache."
        },
        {
          "id": "s_6325",
          "content": "This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache.",
          "position": 19,
          "originalSentence": "This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache."
        },
        {
          "id": "s_6326",
          "content": "It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.",
          "position": 20,
          "originalSentence": "It has a very real impact on I/O performance so using this flag is not recommended unless it is needed."
        },
        {
          "id": "s_6327",
          "content": "This doesn't turn `fs.",
          "position": 21,
          "originalSentence": "This doesn't turn `fs."
        },
        {
          "id": "s_6328",
          "content": "open()` or `fsPromises.",
          "position": 22,
          "originalSentence": "open()` or `fsPromises."
        },
        {
          "id": "s_6329",
          "content": "open()` into a synchronous blocking call.",
          "position": 23,
          "originalSentence": "open()` into a synchronous blocking call."
        },
        {
          "id": "s_6330",
          "content": "If synchronous operation is desired, something like `fs.",
          "position": 24,
          "originalSentence": "If synchronous operation is desired, something like `fs."
        },
        {
          "id": "s_6331",
          "content": "openSync()` should be used.",
          "position": 25,
          "originalSentence": "openSync()` should be used."
        },
        {
          "id": "s_6332",
          "content": "`'w'`: Open file for writing.",
          "position": 26,
          "originalSentence": "`'w'`: Open file for writing."
        },
        {
          "id": "s_6333",
          "content": "The file is created (if it does not exist) or truncated (if it exists).",
          "position": 27,
          "originalSentence": "The file is created (if it does not exist) or truncated (if it exists)."
        },
        {
          "id": "s_6334",
          "content": "`'wx'`: Like `'w'` but fails if the path exists.",
          "position": 28,
          "originalSentence": "`'wx'`: Like `'w'` but fails if the path exists."
        },
        {
          "id": "s_6335",
          "content": "`'w+'`: Open file for reading and writing.",
          "position": 29,
          "originalSentence": "`'w+'`: Open file for reading and writing."
        },
        {
          "id": "s_6336",
          "content": "The file is created (if it does not exist) or truncated (if it exists).",
          "position": 30,
          "originalSentence": "The file is created (if it does not exist) or truncated (if it exists)."
        },
        {
          "id": "s_6337",
          "content": "`'wx+'`: Like `'w+'` but fails if the path exists.",
          "position": 31,
          "originalSentence": "`'wx+'`: Like `'w+'` but fails if the path exists."
        },
        {
          "id": "s_6338",
          "content": "`flag` can also be a number as documented by open(2); commonly used constants are available from `fs.",
          "position": 32,
          "originalSentence": "`flag` can also be a number as documented by open(2); commonly used constants are available from `fs."
        },
        {
          "id": "s_6339",
          "content": "constants`.",
          "position": 33,
          "originalSentence": "constants`."
        },
        {
          "id": "s_6340",
          "content": "On Windows, flags are translated to their equivalent ones where applicable, e.",
          "position": 34,
          "originalSentence": "On Windows, flags are translated to their equivalent ones where applicable, e."
        },
        {
          "id": "s_6341",
          "content": "`O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`.",
          "position": 35,
          "originalSentence": "`O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`."
        },
        {
          "id": "s_6342",
          "content": "The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists.",
          "position": 36,
          "originalSentence": "The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists."
        },
        {
          "id": "s_6343",
          "content": "On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist.",
          "position": 37,
          "originalSentence": "On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist."
        },
        {
          "id": "s_6344",
          "content": "The exclusive flag might not work with network file systems.",
          "position": 38,
          "originalSentence": "The exclusive flag might not work with network file systems."
        },
        {
          "id": "s_6345",
          "content": "On Linux, positional writes don't work when the file is opened in append mode.",
          "position": 39,
          "originalSentence": "On Linux, positional writes don't work when the file is opened in append mode."
        },
        {
          "id": "s_6346",
          "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
          "position": 40,
          "originalSentence": "The kernel ignores the position argument and always appends the data to the end of the file."
        },
        {
          "id": "s_6347",
          "content": "Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`.",
          "position": 41,
          "originalSentence": "Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`."
        },
        {
          "id": "s_6348",
          "content": "The behavior of some flags are platform-specific.",
          "position": 42,
          "originalSentence": "The behavior of some flags are platform-specific."
        },
        {
          "id": "s_6349",
          "content": "As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error.",
          "position": 43,
          "originalSentence": "As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error."
        },
        {
          "id": "s_6350",
          "content": "In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned.",
          "position": 44,
          "originalSentence": "In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned."
        },
        {
          "id": "s_6351",
          "content": "On Windows, opening an existing hidden file using the `'w'` flag (either through `fs.",
          "position": 45,
          "originalSentence": "On Windows, opening an existing hidden file using the `'w'` flag (either through `fs."
        },
        {
          "id": "s_6352",
          "content": "open()`, `fs.",
          "position": 46,
          "originalSentence": "open()`, `fs."
        },
        {
          "id": "s_6353",
          "content": "writeFile()`, or `fsPromises.",
          "position": 47,
          "originalSentence": "writeFile()`, or `fsPromises."
        },
        {
          "id": "s_6354",
          "content": "open()`) will fail with `EPERM`.",
          "position": 48,
          "originalSentence": "open()`) will fail with `EPERM`."
        },
        {
          "id": "s_6355",
          "content": "Existing hidden files can be opened for writing with the `'r+'` flag.",
          "position": 49,
          "originalSentence": "Existing hidden files can be opened for writing with the `'r+'` flag."
        },
        {
          "id": "s_6356",
          "content": "A call to `fs.",
          "position": 50,
          "originalSentence": "A call to `fs."
        },
        {
          "id": "s_6357",
          "content": "ftruncate()` or `filehandle.",
          "position": 51,
          "originalSentence": "ftruncate()` or `filehandle."
        },
        {
          "id": "s_6358",
          "content": "truncate()` can be used to reset the file contents.",
          "position": 52,
          "originalSentence": "truncate()` can be used to reset the file contents."
        }
      ]
    }
  },
  "allChunks": [
    {
      "id": "w_0",
      "type": "window",
      "content": "The `node:fs` module enables interacting with the file system in a\nway modeled on standard POSIX functions. To use the promise-based APIs: To use the callback and sync APIs: All file system operations have synchronous, callback, and promise-based\nforms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).",
      "position": 0,
      "windowSize": 48
    },
    {
      "id": "sw_1",
      "type": "sentence_window",
      "content": "The `node:fs` module enables interacting with the file system in a way modeled on standard POSIX functions. To use the promise-based APIs: To use the callback and sync APIs:",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2",
      "type": "sentence_window",
      "content": "To use the promise-based APIs: To use the callback and sync APIs: All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3",
      "type": "sentence_window",
      "content": "To use the callback and sync APIs: All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4",
      "type": "sentence_context",
      "content": "[File system] The `node:fs` module enables interacting with the file system in a way modeled on standard POSIX functions.",
      "position": 0
    },
    {
      "id": "sc_5",
      "type": "sentence_context",
      "content": "[File system] [Previous: The `node:fs` module enables interacting with the ...] To use the promise-based APIs:",
      "position": 1
    },
    {
      "id": "sc_6",
      "type": "sentence_context",
      "content": "[File system] [Previous: To use the promise-based APIs:...] To use the callback and sync APIs:",
      "position": 2
    },
    {
      "id": "sc_7",
      "type": "sentence_context",
      "content": "[File system] [Previous: To use the callback and sync APIs:...] All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).",
      "position": 3
    },
    {
      "id": "s_8",
      "type": "sentence",
      "content": "The `node:fs` module enables interacting with the file system in a way modeled on standard POSIX functions.",
      "position": 0
    },
    {
      "id": "s_9",
      "type": "sentence",
      "content": "To use the promise-based APIs:",
      "position": 1
    },
    {
      "id": "s_10",
      "type": "sentence",
      "content": "To use the callback and sync APIs:",
      "position": 2
    },
    {
      "id": "s_11",
      "type": "sentence",
      "content": "All file system operations have synchronous, callback, and promise-based forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).",
      "position": 3
    },
    {
      "id": "sc_12",
      "type": "sentence_context",
      "content": "[Promise example] Promise-based operations return a promise that is fulfilled when the asynchronous operation is complete.",
      "position": 0
    },
    {
      "id": "s_13",
      "type": "sentence",
      "content": "Promise-based operations return a promise that is fulfilled when the asynchronous operation is complete.",
      "position": 0
    },
    {
      "id": "w_14",
      "type": "window",
      "content": "The callback form takes a completion callback function as its last\nargument and invokes the operation asynchronously. The arguments passed to\nthe completion callback depend on the method, but the first argument is always\nreserved for an exception. If the operation is completed successfully, then\nthe first argument is `null` or `undefined`. The callback-based versions of the `node:fs` module APIs are preferable over\nthe use of the promise APIs when maximal performance (both in terms of\nexecution time and memory allocation) is required.",
      "position": 0,
      "windowSize": 77
    },
    {
      "id": "sw_15",
      "type": "sentence_window",
      "content": "The callback form takes a completion callback function as its last argument and invokes the operation asynchronously. The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation is completed successfully, then the first argument is `null` or `undefined`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_16",
      "type": "sentence_window",
      "content": "The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception. If the operation is completed successfully, then the first argument is `null` or `undefined`. The callback-based versions of the `node:fs` module APIs are preferable over the use of the promise APIs when maximal",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_17",
      "type": "sentence_window",
      "content": "If the operation is completed successfully, then the first argument is `null` or `undefined`. The callback-based versions of the `node:fs` module APIs are preferable over the use of the promise APIs when maximal performance (both in terms of execution time and memory allocation) is required.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_18",
      "type": "sentence_context",
      "content": "[Callback example] The callback form takes a completion callback function as its last argument and invokes the operation asynchronously.",
      "position": 0
    },
    {
      "id": "sc_19",
      "type": "sentence_context",
      "content": "[Callback example] [Previous: The callback form takes a completion callback func...] The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception.",
      "position": 1
    },
    {
      "id": "sc_20",
      "type": "sentence_context",
      "content": "[Callback example] [Previous: The arguments passed to the completion callback de...] If the operation is completed successfully, then the first argument is `null` or `undefined`.",
      "position": 2
    },
    {
      "id": "sc_21",
      "type": "sentence_context",
      "content": "[Callback example] [Previous: If the operation is completed successfully, then t...] The callback-based versions of the `node:fs` module APIs are preferable over the use of the promise APIs when maximal performance (both in terms of execution time and memory allocation) is required.",
      "position": 3
    },
    {
      "id": "s_22",
      "type": "sentence",
      "content": "The callback form takes a completion callback function as its last argument and invokes the operation asynchronously.",
      "position": 0
    },
    {
      "id": "s_23",
      "type": "sentence",
      "content": "The arguments passed to the completion callback depend on the method, but the first argument is always reserved for an exception.",
      "position": 1
    },
    {
      "id": "s_24",
      "type": "sentence",
      "content": "If the operation is completed successfully, then the first argument is `null` or `undefined`.",
      "position": 2
    },
    {
      "id": "s_25",
      "type": "sentence",
      "content": "The callback-based versions of the `node:fs` module APIs are preferable over the use of the promise APIs when maximal performance (both in terms of execution time and memory allocation) is required.",
      "position": 3
    },
    {
      "id": "w_26",
      "type": "window",
      "content": "The synchronous APIs block the Node.js event loop and further JavaScript\nexecution until the operation is complete. Exceptions are thrown immediately\nand can be handled using `tryâ€¦catch`, or can be allowed to bubble up.",
      "position": 0,
      "windowSize": 32
    },
    {
      "id": "sw_27",
      "type": "sentence_window",
      "content": "The synchronous APIs block the Node. js event loop and further JavaScript execution until the operation is complete. Exceptions are thrown immediately and can be handled using `tryâ€¦",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_28",
      "type": "sentence_window",
      "content": "js event loop and further JavaScript execution until the operation is complete. Exceptions are thrown immediately and can be handled using `tryâ€¦ catch`, or can be allowed to bubble up.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_29",
      "type": "sentence_window",
      "content": "Exceptions are thrown immediately and can be handled using `tryâ€¦ catch`, or can be allowed to bubble up.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_30",
      "type": "sentence_context",
      "content": "[Synchronous example] The synchronous APIs block the Node.",
      "position": 0
    },
    {
      "id": "sc_31",
      "type": "sentence_context",
      "content": "[Synchronous example] [Previous: The synchronous APIs block the Node....] js event loop and further JavaScript execution until the operation is complete.",
      "position": 1
    },
    {
      "id": "sc_32",
      "type": "sentence_context",
      "content": "[Synchronous example] [Previous: js event loop and further JavaScript execution unt...] Exceptions are thrown immediately and can be handled using `tryâ€¦",
      "position": 2
    },
    {
      "id": "sc_33",
      "type": "sentence_context",
      "content": "[Synchronous example] [Previous: Exceptions are thrown immediately and can be handl...] catch`, or can be allowed to bubble up.",
      "position": 3
    },
    {
      "id": "s_34",
      "type": "sentence",
      "content": "The synchronous APIs block the Node.",
      "position": 0
    },
    {
      "id": "s_35",
      "type": "sentence",
      "content": "js event loop and further JavaScript execution until the operation is complete.",
      "position": 1
    },
    {
      "id": "s_36",
      "type": "sentence",
      "content": "Exceptions are thrown immediately and can be handled using `tryâ€¦",
      "position": 2
    },
    {
      "id": "s_37",
      "type": "sentence",
      "content": "catch`, or can be allowed to bubble up.",
      "position": 3
    },
    {
      "id": "w_38",
      "type": "window",
      "content": "The `fs/promises` API provides asynchronous file system methods that return\npromises. The promise APIs use the underlying Node.js threadpool to perform file\nsystem operations off the event loop thread. These operations are not\nsynchronized or threadsafe. Care must be taken when performing multiple\nconcurrent modifications on the same file or data corruption may occur.",
      "position": 0,
      "windowSize": 50
    },
    {
      "id": "sw_39",
      "type": "sentence_window",
      "content": "The `fs/promises` API provides asynchronous file system methods that return promises. The promise APIs use the underlying Node. js threadpool to perform file system operations off the event loop thread.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_40",
      "type": "sentence_window",
      "content": "The promise APIs use the underlying Node. js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_41",
      "type": "sentence_window",
      "content": "js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_42",
      "type": "sentence_window",
      "content": "These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_43",
      "type": "sentence_context",
      "content": "[Promises API] The `fs/promises` API provides asynchronous file system methods that return promises.",
      "position": 0
    },
    {
      "id": "sc_44",
      "type": "sentence_context",
      "content": "[Promises API] [Previous: The `fs/promises` API provides asynchronous file s...] The promise APIs use the underlying Node.",
      "position": 1
    },
    {
      "id": "sc_45",
      "type": "sentence_context",
      "content": "[Promises API] [Previous: The promise APIs use the underlying Node....] js threadpool to perform file system operations off the event loop thread.",
      "position": 2
    },
    {
      "id": "sc_46",
      "type": "sentence_context",
      "content": "[Promises API] [Previous: js threadpool to perform file system operations of...] These operations are not synchronized or threadsafe.",
      "position": 3
    },
    {
      "id": "sc_47",
      "type": "sentence_context",
      "content": "[Promises API] [Previous: These operations are not synchronized or threadsaf...] Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
      "position": 4
    },
    {
      "id": "s_48",
      "type": "sentence",
      "content": "The `fs/promises` API provides asynchronous file system methods that return promises.",
      "position": 0
    },
    {
      "id": "s_49",
      "type": "sentence",
      "content": "The promise APIs use the underlying Node.",
      "position": 1
    },
    {
      "id": "s_50",
      "type": "sentence",
      "content": "js threadpool to perform file system operations off the event loop thread.",
      "position": 2
    },
    {
      "id": "s_51",
      "type": "sentence",
      "content": "These operations are not synchronized or threadsafe.",
      "position": 3
    },
    {
      "id": "s_52",
      "type": "sentence",
      "content": "Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
      "position": 4
    },
    {
      "id": "w_53",
      "type": "window",
      "content": "A {FileHandle} object is an object wrapper for a numeric file descriptor. Instances of the {FileHandle} object are created by the `fsPromises.open()`\nmethod. All {FileHandle} objects are {EventEmitter}s. If a {FileHandle} is not closed using the `filehandle.close()` method, it will\ntry to automatically close the file descriptor and emit a process warning,\nhelping to prevent memory leaks. Please do not rely on this behavior because\nit can be unreliable and the file may not be closed. Instead, always explicitly\nclose {FileHandle}s. Node.js may change this behavior in the future.",
      "position": 0,
      "windowSize": 84
    },
    {
      "id": "sw_54",
      "type": "sentence_window",
      "content": "A {FileHandle} object is an object wrapper for a numeric file descriptor. Instances of the {FileHandle} object are created by the `fsPromises. open()` method.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_55",
      "type": "sentence_window",
      "content": "Instances of the {FileHandle} object are created by the `fsPromises. open()` method. All {FileHandle} objects are {EventEmitter}s.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_56",
      "type": "sentence_window",
      "content": "open()` method. All {FileHandle} objects are {EventEmitter}s. If a {FileHandle} is not closed using the `filehandle.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_57",
      "type": "sentence_window",
      "content": "All {FileHandle} objects are {EventEmitter}s. If a {FileHandle} is not closed using the `filehandle. close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_58",
      "type": "sentence_window",
      "content": "If a {FileHandle} is not closed using the `filehandle. close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks. Please do not rely on this behavior because it can be unreliable and the file may not be closed.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_59",
      "type": "sentence_window",
      "content": "close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks. Please do not rely on this behavior because it can be unreliable and the file may not be closed. Instead, always explicitly close {FileHandle}s.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_60",
      "type": "sentence_window",
      "content": "Please do not rely on this behavior because it can be unreliable and the file may not be closed. Instead, always explicitly close {FileHandle}s. js may change this behavior in the future.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_61",
      "type": "sentence_window",
      "content": "Instead, always explicitly close {FileHandle}s. js may change this behavior in the future.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_62",
      "type": "sentence_context",
      "content": "[Class: `FileHandle`] A {FileHandle} object is an object wrapper for a numeric file descriptor.",
      "position": 0
    },
    {
      "id": "sc_63",
      "type": "sentence_context",
      "content": "[Class: `FileHandle`] [Previous: A {FileHandle} object is an object wrapper for a n...] Instances of the {FileHandle} object are created by the `fsPromises.",
      "position": 1
    },
    {
      "id": "sc_64",
      "type": "sentence_context",
      "content": "[Class: `FileHandle`] [Previous: Instances of the {FileHandle} object are created b...] open()` method.",
      "position": 2
    },
    {
      "id": "sc_65",
      "type": "sentence_context",
      "content": "[Class: `FileHandle`] All {FileHandle} objects are {EventEmitter}s.",
      "position": 3
    },
    {
      "id": "sc_66",
      "type": "sentence_context",
      "content": "[Class: `FileHandle`] [Previous: All {FileHandle} objects are {EventEmitter}s....] If a {FileHandle} is not closed using the `filehandle.",
      "position": 4
    },
    {
      "id": "sc_67",
      "type": "sentence_context",
      "content": "[Class: `FileHandle`] [Previous: If a {FileHandle} is not closed using the `filehan...] close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks.",
      "position": 5
    },
    {
      "id": "sc_68",
      "type": "sentence_context",
      "content": "[Class: `FileHandle`] [Previous: close()` method, it will try to automatically clos...] Please do not rely on this behavior because it can be unreliable and the file may not be closed.",
      "position": 6
    },
    {
      "id": "sc_69",
      "type": "sentence_context",
      "content": "[Class: `FileHandle`] [Previous: Please do not rely on this behavior because it can...] Instead, always explicitly close {FileHandle}s.",
      "position": 7
    },
    {
      "id": "sc_70",
      "type": "sentence_context",
      "content": "[Class: `FileHandle`] [Previous: Instead, always explicitly close {FileHandle}s....] js may change this behavior in the future.",
      "position": 8
    },
    {
      "id": "s_71",
      "type": "sentence",
      "content": "A {FileHandle} object is an object wrapper for a numeric file descriptor.",
      "position": 0
    },
    {
      "id": "s_72",
      "type": "sentence",
      "content": "Instances of the {FileHandle} object are created by the `fsPromises.",
      "position": 1
    },
    {
      "id": "s_73",
      "type": "sentence",
      "content": "open()` method.",
      "position": 2
    },
    {
      "id": "s_74",
      "type": "sentence",
      "content": "All {FileHandle} objects are {EventEmitter}s.",
      "position": 3
    },
    {
      "id": "s_75",
      "type": "sentence",
      "content": "If a {FileHandle} is not closed using the `filehandle.",
      "position": 4
    },
    {
      "id": "s_76",
      "type": "sentence",
      "content": "close()` method, it will try to automatically close the file descriptor and emit a process warning, helping to prevent memory leaks.",
      "position": 5
    },
    {
      "id": "s_77",
      "type": "sentence",
      "content": "Please do not rely on this behavior because it can be unreliable and the file may not be closed.",
      "position": 6
    },
    {
      "id": "s_78",
      "type": "sentence",
      "content": "Instead, always explicitly close {FileHandle}s.",
      "position": 7
    },
    {
      "id": "s_79",
      "type": "sentence",
      "content": "js may change this behavior in the future.",
      "position": 8
    },
    {
      "id": "sc_80",
      "type": "sentence_context",
      "content": "[Event: `'close'`] The `'close'` event is emitted when the {FileHandle} has been closed and can no longer be used.",
      "position": 0
    },
    {
      "id": "s_81",
      "type": "sentence",
      "content": "The `'close'` event is emitted when the {FileHandle} has been closed and can no longer be used.",
      "position": 0
    },
    {
      "id": "w_82",
      "type": "window",
      "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile. **Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success. Alias of [`filehandle.writeFile()`][]. When operating on file handles, the mode cannot be changed from what it was set\nto with [`fsPromises.open()`][]. Therefore, this is equivalent to\n[`filehandle.writeFile()`][].",
      "position": 0,
      "windowSize": 49
    },
    {
      "id": "sw_83",
      "type": "sentence_window",
      "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile. **Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success. Alias of [`filehandle.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_84",
      "type": "sentence_window",
      "content": "**Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success. Alias of [`filehandle. writeFile()`][].",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_85",
      "type": "sentence_window",
      "content": "Alias of [`filehandle. writeFile()`][]. When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_86",
      "type": "sentence_window",
      "content": "writeFile()`][]. When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises. open()`][].",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_87",
      "type": "sentence_window",
      "content": "When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises. open()`][]. Therefore, this is equivalent to [`filehandle.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_88",
      "type": "sentence_window",
      "content": "open()`][]. Therefore, this is equivalent to [`filehandle. writeFile()`][].",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_89",
      "type": "sentence_window",
      "content": "Therefore, this is equivalent to [`filehandle. writeFile()`][].",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_90",
      "type": "sentence_context",
      "content": "[`filehandle.appendFile(data[, options])`] `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile.",
      "position": 0
    },
    {
      "id": "sc_91",
      "type": "sentence_context",
      "content": "[`filehandle.appendFile(data[, options])`] [Previous: `data` {string|Buffer|TypedArray|DataView|AsyncIte...] **Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 1
    },
    {
      "id": "sc_92",
      "type": "sentence_context",
      "content": "[`filehandle.appendFile(data[, options])`] [Previous: **Default:** `undefined` Returns: {Promise} Fulfil...] Alias of [`filehandle.",
      "position": 2
    },
    {
      "id": "sc_93",
      "type": "sentence_context",
      "content": "[`filehandle.appendFile(data[, options])`] [Previous: Alias of [`filehandle....] writeFile()`][].",
      "position": 3
    },
    {
      "id": "sc_94",
      "type": "sentence_context",
      "content": "[`filehandle.appendFile(data[, options])`] When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises.",
      "position": 4
    },
    {
      "id": "sc_95",
      "type": "sentence_context",
      "content": "[`filehandle.appendFile(data[, options])`] [Previous: When operating on file handles, the mode cannot be...] open()`][].",
      "position": 5
    },
    {
      "id": "sc_96",
      "type": "sentence_context",
      "content": "[`filehandle.appendFile(data[, options])`] Therefore, this is equivalent to [`filehandle.",
      "position": 6
    },
    {
      "id": "sc_97",
      "type": "sentence_context",
      "content": "[`filehandle.appendFile(data[, options])`] [Previous: Therefore, this is equivalent to [`filehandle....] writeFile()`][].",
      "position": 7
    },
    {
      "id": "s_98",
      "type": "sentence",
      "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile.",
      "position": 0
    },
    {
      "id": "s_99",
      "type": "sentence",
      "content": "**Default:** `undefined` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 1
    },
    {
      "id": "s_100",
      "type": "sentence",
      "content": "Alias of [`filehandle.",
      "position": 2
    },
    {
      "id": "s_101",
      "type": "sentence",
      "content": "writeFile()`][].",
      "position": 3
    },
    {
      "id": "s_102",
      "type": "sentence",
      "content": "When operating on file handles, the mode cannot be changed from what it was set to with [`fsPromises.",
      "position": 4
    },
    {
      "id": "s_103",
      "type": "sentence",
      "content": "open()`][].",
      "position": 5
    },
    {
      "id": "s_104",
      "type": "sentence",
      "content": "Therefore, this is equivalent to [`filehandle.",
      "position": 6
    },
    {
      "id": "s_105",
      "type": "sentence",
      "content": "writeFile()`][].",
      "position": 7
    },
    {
      "id": "w_106",
      "type": "window",
      "content": "`mode` {integer} the file mode bit mask. Returns: {Promise} Fulfills with `undefined` upon success. Modifies the permissions on the file. See chmod(2).",
      "position": 0,
      "windowSize": 22
    },
    {
      "id": "sw_107",
      "type": "sentence_window",
      "content": "`mode` {integer} the file mode bit mask. Returns: {Promise} Fulfills with `undefined` upon success. Modifies the permissions on the file.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_108",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Modifies the permissions on the file. See chmod(2).",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_109",
      "type": "sentence_window",
      "content": "Modifies the permissions on the file. See chmod(2).",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_110",
      "type": "sentence_context",
      "content": "[`filehandle.chmod(mode)`] `mode` {integer} the file mode bit mask.",
      "position": 0
    },
    {
      "id": "sc_111",
      "type": "sentence_context",
      "content": "[`filehandle.chmod(mode)`] [Previous: `mode` {integer} the file mode bit mask....] Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 1
    },
    {
      "id": "sc_112",
      "type": "sentence_context",
      "content": "[`filehandle.chmod(mode)`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Modifies the permissions on the file.",
      "position": 2
    },
    {
      "id": "sc_113",
      "type": "sentence_context",
      "content": "[`filehandle.chmod(mode)`] [Previous: Modifies the permissions on the file....] See chmod(2).",
      "position": 3
    },
    {
      "id": "s_114",
      "type": "sentence",
      "content": "`mode` {integer} the file mode bit mask.",
      "position": 0
    },
    {
      "id": "s_115",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 1
    },
    {
      "id": "s_116",
      "type": "sentence",
      "content": "Modifies the permissions on the file.",
      "position": 2
    },
    {
      "id": "s_117",
      "type": "sentence",
      "content": "See chmod(2).",
      "position": 3
    },
    {
      "id": "w_118",
      "type": "window",
      "content": "`uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Returns: {Promise} Fulfills with `undefined` upon success. Changes the ownership of the file. A wrapper for chown(2).",
      "position": 0,
      "windowSize": 33
    },
    {
      "id": "sw_119",
      "type": "sentence_window",
      "content": "`uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_120",
      "type": "sentence_window",
      "content": "`gid` {integer} The file's new group's group id. Returns: {Promise} Fulfills with `undefined` upon success. Changes the ownership of the file.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_121",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Changes the ownership of the file. A wrapper for chown(2).",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_122",
      "type": "sentence_window",
      "content": "Changes the ownership of the file. A wrapper for chown(2).",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_123",
      "type": "sentence_context",
      "content": "[`filehandle.chown(uid, gid)`] `uid` {integer} The file's new owner's user id.",
      "position": 0
    },
    {
      "id": "sc_124",
      "type": "sentence_context",
      "content": "[`filehandle.chown(uid, gid)`] [Previous: `uid` {integer} The file's new owner's user id....] `gid` {integer} The file's new group's group id.",
      "position": 1
    },
    {
      "id": "sc_125",
      "type": "sentence_context",
      "content": "[`filehandle.chown(uid, gid)`] [Previous: `gid` {integer} The file's new group's group id....] Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 2
    },
    {
      "id": "sc_126",
      "type": "sentence_context",
      "content": "[`filehandle.chown(uid, gid)`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Changes the ownership of the file.",
      "position": 3
    },
    {
      "id": "sc_127",
      "type": "sentence_context",
      "content": "[`filehandle.chown(uid, gid)`] [Previous: Changes the ownership of the file....] A wrapper for chown(2).",
      "position": 4
    },
    {
      "id": "s_128",
      "type": "sentence",
      "content": "`uid` {integer} The file's new owner's user id.",
      "position": 0
    },
    {
      "id": "s_129",
      "type": "sentence",
      "content": "`gid` {integer} The file's new group's group id.",
      "position": 1
    },
    {
      "id": "s_130",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 2
    },
    {
      "id": "s_131",
      "type": "sentence",
      "content": "Changes the ownership of the file.",
      "position": 3
    },
    {
      "id": "s_132",
      "type": "sentence",
      "content": "A wrapper for chown(2).",
      "position": 4
    },
    {
      "id": "w_133",
      "type": "window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Closes the file handle after waiting for any pending operation on the handle to\ncomplete.",
      "position": 0,
      "windowSize": 21
    },
    {
      "id": "sw_134",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Closes the file handle after waiting for any pending operation on the handle to complete.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_135",
      "type": "sentence_context",
      "content": "[`filehandle.close()`] Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_136",
      "type": "sentence_context",
      "content": "[`filehandle.close()`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Closes the file handle after waiting for any pending operation on the handle to complete.",
      "position": 1
    },
    {
      "id": "s_137",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_138",
      "type": "sentence",
      "content": "Closes the file handle after waiting for any pending operation on the handle to complete.",
      "position": 1
    },
    {
      "id": "w_139",
      "type": "window",
      "content": "`options` {Object}\n* `encoding` {string} **Default:** `null`\n* `autoClose` {boolean} **Default:** `true`\n* `emitClose` {boolean} **Default:** `true`\n* `start` {integer}\n* `end` {integer} **Default:** `Infinity`\n* `highWaterMark` {integer} **Default:** `64 * 1024`\n* `signal` {AbortSignal|undefined} **Default:** `undefined` Returns: {fs.ReadStream} `options` can include `start` and `end` values to read a range of bytes from\nthe file instead of the entire file. Both `start` and `end` are inclusive and\nstart counting at 0, allowed values are in the\n\\[0, [`Number.MAX_SAFE_INTEGER`][]] range. If `start` is\nomitted or `undefined`, `filehandle.createReadStream()` reads sequentially from\nthe current file position. The `encoding` can be any one of those accepted by\n{Buffer}. If the `FileHandle` points to a character device that only supports blocking\nreads (such as keyboard or sound card), read operations do not finish until data\nis available. This can prevent the process from exiting and the stream from\nclosing naturally. By default, the stream will emit a `'close'` event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior. If `autoClose` is false, then the file descriptor won't be closed, even if\nthere's an error. It is the application's responsibility to close it and make\nsure there's no file descriptor leak. If `autoClose` is set to true (default\nbehavior), on `'error'` or `'end'` the file descriptor will be closed\nautomatically. An example to read the last 10 bytes of a file which is 100 bytes long:",
      "position": 0,
      "windowSize": 216
    },
    {
      "id": "w_140",
      "type": "window",
      "content": "file descriptor leak. If `autoClose` is set to true (default\nbehavior), on `'error'` or `'end'` the file descriptor will be closed\nautomatically. An example to read the last 10 bytes of a file which is 100 bytes long:",
      "position": 180,
      "windowSize": 36
    },
    {
      "id": "sw_141",
      "type": "sentence_window",
      "content": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `signal` {AbortSignal|undefined} **Default:** `undefined` Returns: {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_142",
      "type": "sentence_window",
      "content": "ReadStream} `options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file. Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_143",
      "type": "sentence_window",
      "content": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file. Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_144",
      "type": "sentence_window",
      "content": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range. If `start` is omitted or `undefined`, `filehandle.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_145",
      "type": "sentence_window",
      "content": "MAX_SAFE_INTEGER`][]] range. If `start` is omitted or `undefined`, `filehandle. createReadStream()` reads sequentially from the current file position.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_146",
      "type": "sentence_window",
      "content": "If `start` is omitted or `undefined`, `filehandle. createReadStream()` reads sequentially from the current file position. The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_147",
      "type": "sentence_window",
      "content": "createReadStream()` reads sequentially from the current file position. The `encoding` can be any one of those accepted by {Buffer}. If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_148",
      "type": "sentence_window",
      "content": "The `encoding` can be any one of those accepted by {Buffer}. If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available. This can prevent the process from exiting and the stream from closing naturally.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_149",
      "type": "sentence_window",
      "content": "If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available. This can prevent the process from exiting and the stream from closing naturally. By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_150",
      "type": "sentence_window",
      "content": "This can prevent the process from exiting and the stream from closing naturally. By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_151",
      "type": "sentence_window",
      "content": "By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_152",
      "type": "sentence_window",
      "content": "Set the `emitClose` option to `false` to change this behavior. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_153",
      "type": "sentence_window",
      "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak. If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_154",
      "type": "sentence_window",
      "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak. If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically. An example to read the last 10 bytes of a file which is 100 bytes long:",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_155",
      "type": "sentence_window",
      "content": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically. An example to read the last 10 bytes of a file which is 100 bytes long:",
      "position": 14,
      "sentenceCount": 2
    },
    {
      "id": "sc_156",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] `options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `signal` {AbortSignal|undefined}",
      "position": 0
    },
    {
      "id": "sc_157",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: `options` {Object} * `encoding` {string} **Default...] ReadStream}",
      "position": 1
    },
    {
      "id": "sc_158",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] `options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file.",
      "position": 2
    },
    {
      "id": "sc_159",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: `options` can include `start` and `end` values to ...] Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
      "position": 3
    },
    {
      "id": "sc_160",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: Both `start` and `end` are inclusive and start cou...] MAX_SAFE_INTEGER`][]] range.",
      "position": 4
    },
    {
      "id": "sc_161",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: MAX_SAFE_INTEGER`][]] range....] If `start` is omitted or `undefined`, `filehandle.",
      "position": 5
    },
    {
      "id": "sc_162",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: If `start` is omitted or `undefined`, `filehandle....] createReadStream()` reads sequentially from the current file position.",
      "position": 6
    },
    {
      "id": "sc_163",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: createReadStream()` reads sequentially from the cu...] The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 7
    },
    {
      "id": "sc_164",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: The `encoding` can be any one of those accepted by...] If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
      "position": 8
    },
    {
      "id": "sc_165",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: If the `FileHandle` points to a character device t...] This can prevent the process from exiting and the stream from closing naturally.",
      "position": 9
    },
    {
      "id": "sc_166",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: This can prevent the process from exiting and the ...] By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 10
    },
    {
      "id": "sc_167",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: By default, the stream will emit a `'close'` event...] Set the `emitClose` option to `false` to change this behavior.",
      "position": 11
    },
    {
      "id": "sc_168",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: Set the `emitClose` option to `false` to change th...] If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 12
    },
    {
      "id": "sc_169",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: If `autoClose` is false, then the file descriptor ...] It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 13
    },
    {
      "id": "sc_170",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: It is the application's responsibility to close it...] If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
      "position": 14
    },
    {
      "id": "sc_171",
      "type": "sentence_context",
      "content": "[`filehandle.createReadStream([options])`] [Previous: If `autoClose` is set to true (default behavior), ...] An example to read the last 10 bytes of a file which is 100 bytes long:",
      "position": 15
    },
    {
      "id": "s_172",
      "type": "sentence",
      "content": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `signal` {AbortSignal|undefined} **Default:** `undefined` Returns: {fs.",
      "position": 0
    },
    {
      "id": "s_173",
      "type": "sentence",
      "content": "ReadStream}",
      "position": 1
    },
    {
      "id": "s_174",
      "type": "sentence",
      "content": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file.",
      "position": 2
    },
    {
      "id": "s_175",
      "type": "sentence",
      "content": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
      "position": 3
    },
    {
      "id": "s_176",
      "type": "sentence",
      "content": "MAX_SAFE_INTEGER`][]] range.",
      "position": 4
    },
    {
      "id": "s_177",
      "type": "sentence",
      "content": "If `start` is omitted or `undefined`, `filehandle.",
      "position": 5
    },
    {
      "id": "s_178",
      "type": "sentence",
      "content": "createReadStream()` reads sequentially from the current file position.",
      "position": 6
    },
    {
      "id": "s_179",
      "type": "sentence",
      "content": "The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 7
    },
    {
      "id": "s_180",
      "type": "sentence",
      "content": "If the `FileHandle` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
      "position": 8
    },
    {
      "id": "s_181",
      "type": "sentence",
      "content": "This can prevent the process from exiting and the stream from closing naturally.",
      "position": 9
    },
    {
      "id": "s_182",
      "type": "sentence",
      "content": "By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 10
    },
    {
      "id": "s_183",
      "type": "sentence",
      "content": "Set the `emitClose` option to `false` to change this behavior.",
      "position": 11
    },
    {
      "id": "s_184",
      "type": "sentence",
      "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 12
    },
    {
      "id": "s_185",
      "type": "sentence",
      "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 13
    },
    {
      "id": "s_186",
      "type": "sentence",
      "content": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
      "position": 14
    },
    {
      "id": "s_187",
      "type": "sentence",
      "content": "An example to read the last 10 bytes of a file which is 100 bytes long:",
      "position": 15
    },
    {
      "id": "w_188",
      "type": "window",
      "content": "`options` {Object}\n* `encoding` {string} **Default:** `'utf8'`\n* `autoClose` {boolean} **Default:** `true`\n* `emitClose` {boolean} **Default:** `true`\n* `start` {integer}\n* `highWaterMark` {number} **Default:** `16384`\n* `flush` {boolean} If `true`, the underlying file descriptor is flushed\n  prior to closing it. **Default:** `false`. Returns: {fs.WriteStream} `options` may also include a `start` option to allow writing data at some\nposition past the beginning of the file, allowed values are in the\n\\[0, [`Number.MAX_SAFE_INTEGER`][]] range. Modifying a file rather than\nreplacing it may require the `flags` `open` option to be set to `r+` rather than\nthe default `r`. The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'`\nthe file descriptor will be closed automatically. If `autoClose` is false,\nthen the file descriptor won't be closed, even if there's an error.\nIt is the application's responsibility to close it and make sure there's no\nfile descriptor leak. By default, the stream will emit a `'close'` event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior.",
      "position": 0,
      "windowSize": 168
    },
    {
      "id": "sw_189",
      "type": "sentence_window",
      "content": "`options` {Object} * `encoding` {string} **Default:** `'utf8'` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`. Returns: {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_190",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {fs. WriteStream}",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_191",
      "type": "sentence_window",
      "content": "Returns: {fs. WriteStream} `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_192",
      "type": "sentence_window",
      "content": "WriteStream} `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_193",
      "type": "sentence_window",
      "content": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range. Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_194",
      "type": "sentence_window",
      "content": "MAX_SAFE_INTEGER`][]] range. Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`. The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_195",
      "type": "sentence_window",
      "content": "Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`. The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_196",
      "type": "sentence_window",
      "content": "The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_197",
      "type": "sentence_window",
      "content": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_198",
      "type": "sentence_window",
      "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak. By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_199",
      "type": "sentence_window",
      "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak. By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_200",
      "type": "sentence_window",
      "content": "By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior.",
      "position": 11,
      "sentenceCount": 2
    },
    {
      "id": "sc_201",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] `options` {Object} * `encoding` {string} **Default:** `'utf8'` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to",
      "position": 0
    },
    {
      "id": "sc_202",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] [Previous: `options` {Object} * `encoding` {string} **Default...] **Default:** `false`.",
      "position": 1
    },
    {
      "id": "sc_203",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] [Previous: **Default:** `false`....] Returns: {fs.",
      "position": 2
    },
    {
      "id": "sc_204",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] WriteStream}",
      "position": 3
    },
    {
      "id": "sc_205",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
      "position": 4
    },
    {
      "id": "sc_206",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] [Previous: `options` may also include a `start` option to all...] MAX_SAFE_INTEGER`][]] range.",
      "position": 5
    },
    {
      "id": "sc_207",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] [Previous: MAX_SAFE_INTEGER`][]] range....] Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`.",
      "position": 6
    },
    {
      "id": "sc_208",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] [Previous: Modifying a file rather than replacing it may requ...] The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 7
    },
    {
      "id": "sc_209",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] [Previous: The `encoding` can be any one of those accepted by...] If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
      "position": 8
    },
    {
      "id": "sc_210",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] [Previous: If `autoClose` is set to true (default behavior) o...] If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 9
    },
    {
      "id": "sc_211",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] [Previous: If `autoClose` is false, then the file descriptor ...] It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 10
    },
    {
      "id": "sc_212",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] [Previous: It is the application's responsibility to close it...] By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 11
    },
    {
      "id": "sc_213",
      "type": "sentence_context",
      "content": "[`filehandle.createWriteStream([options])`] [Previous: By default, the stream will emit a `'close'` event...] Set the `emitClose` option to `false` to change this behavior.",
      "position": 12
    },
    {
      "id": "s_214",
      "type": "sentence",
      "content": "`options` {Object} * `encoding` {string} **Default:** `'utf8'` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
      "position": 0
    },
    {
      "id": "s_215",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 1
    },
    {
      "id": "s_216",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 2
    },
    {
      "id": "s_217",
      "type": "sentence",
      "content": "WriteStream}",
      "position": 3
    },
    {
      "id": "s_218",
      "type": "sentence",
      "content": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
      "position": 4
    },
    {
      "id": "s_219",
      "type": "sentence",
      "content": "MAX_SAFE_INTEGER`][]] range.",
      "position": 5
    },
    {
      "id": "s_220",
      "type": "sentence",
      "content": "Modifying a file rather than replacing it may require the `flags` `open` option to be set to `r+` rather than the default `r`.",
      "position": 6
    },
    {
      "id": "s_221",
      "type": "sentence",
      "content": "The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 7
    },
    {
      "id": "s_222",
      "type": "sentence",
      "content": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
      "position": 8
    },
    {
      "id": "s_223",
      "type": "sentence",
      "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 9
    },
    {
      "id": "s_224",
      "type": "sentence",
      "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 10
    },
    {
      "id": "s_225",
      "type": "sentence",
      "content": "By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 11
    },
    {
      "id": "s_226",
      "type": "sentence",
      "content": "Set the `emitClose` option to `false` to change this behavior.",
      "position": 12
    },
    {
      "id": "w_227",
      "type": "window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Forces all currently queued I/O operations associated with the file to the\noperating system's synchronized I/O completion state. Refer to the POSIX\nfdatasync(2) documentation for details. Unlike `filehandle.sync` this method does not flush modified metadata.",
      "position": 0,
      "windowSize": 40
    },
    {
      "id": "sw_228",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_229",
      "type": "sentence_window",
      "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details. Unlike `filehandle.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_230",
      "type": "sentence_window",
      "content": "Refer to the POSIX fdatasync(2) documentation for details. Unlike `filehandle. sync` this method does not flush modified metadata.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_231",
      "type": "sentence_window",
      "content": "Unlike `filehandle. sync` this method does not flush modified metadata.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_232",
      "type": "sentence_context",
      "content": "[`filehandle.datasync()`] Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_233",
      "type": "sentence_context",
      "content": "[`filehandle.datasync()`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
      "position": 1
    },
    {
      "id": "sc_234",
      "type": "sentence_context",
      "content": "[`filehandle.datasync()`] [Previous: Forces all currently queued I/O operations associa...] Refer to the POSIX fdatasync(2) documentation for details.",
      "position": 2
    },
    {
      "id": "sc_235",
      "type": "sentence_context",
      "content": "[`filehandle.datasync()`] [Previous: Refer to the POSIX fdatasync(2) documentation for ...] Unlike `filehandle.",
      "position": 3
    },
    {
      "id": "sc_236",
      "type": "sentence_context",
      "content": "[`filehandle.datasync()`] sync` this method does not flush modified metadata.",
      "position": 4
    },
    {
      "id": "s_237",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_238",
      "type": "sentence",
      "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
      "position": 1
    },
    {
      "id": "s_239",
      "type": "sentence",
      "content": "Refer to the POSIX fdatasync(2) documentation for details.",
      "position": 2
    },
    {
      "id": "s_240",
      "type": "sentence",
      "content": "Unlike `filehandle.",
      "position": 3
    },
    {
      "id": "s_241",
      "type": "sentence",
      "content": "sync` this method does not flush modified metadata.",
      "position": 4
    },
    {
      "id": "sc_242",
      "type": "sentence_context",
      "content": "[`filehandle.fd`] Type: {number} The numeric file descriptor managed by the {FileHandle} object.",
      "position": 0
    },
    {
      "id": "s_243",
      "type": "sentence",
      "content": "Type: {number} The numeric file descriptor managed by the {FileHandle} object.",
      "position": 0
    },
    {
      "id": "w_244",
      "type": "window",
      "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the\nfile data read. `offset` {integer} The location in the buffer at which to start filling.\n**Default:** `0` `length` {integer} The number of bytes to read. **Default:**\n`buffer.byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data\nfrom the file. If `null` or `-1`, data will be read from the current file\nposition, and the position will be updated. If `position` is a non-negative\ninteger, the current file position will remain unchanged.\n**Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties:\n* `bytesRead` {integer} The number of bytes read\n* `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer`\n  argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the\nnumber of bytes read is zero.",
      "position": 0,
      "windowSize": 137
    },
    {
      "id": "sw_245",
      "type": "sentence_window",
      "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read. `offset` {integer} The location in the buffer at which to start filling. **Default:** `0` `length` {integer} The number of bytes to read.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_246",
      "type": "sentence_window",
      "content": "`offset` {integer} The location in the buffer at which to start filling. **Default:** `0` `length` {integer} The number of bytes to read. **Default:** `buffer.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_247",
      "type": "sentence_window",
      "content": "**Default:** `0` `length` {integer} The number of bytes to read. **Default:** `buffer. byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_248",
      "type": "sentence_window",
      "content": "**Default:** `buffer. byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_249",
      "type": "sentence_window",
      "content": "byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_250",
      "type": "sentence_window",
      "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged. **Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read *",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_251",
      "type": "sentence_window",
      "content": "If `position` is a non-negative integer, the current file position will remain unchanged. **Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the file",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_252",
      "type": "sentence_window",
      "content": "**Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_253",
      "type": "sentence_window",
      "content": "Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 8,
      "sentenceCount": 2
    },
    {
      "id": "sc_254",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer, offset, length, position)`] `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
      "position": 0
    },
    {
      "id": "sc_255",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: `buffer` {Buffer|TypedArray|DataView} A buffer tha...] `offset` {integer} The location in the buffer at which to start filling.",
      "position": 1
    },
    {
      "id": "sc_256",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: `offset` {integer} The location in the buffer at w...] **Default:** `0` `length` {integer} The number of bytes to read.",
      "position": 2
    },
    {
      "id": "sc_257",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: **Default:** `0` `length` {integer} The number of ...] **Default:** `buffer.",
      "position": 3
    },
    {
      "id": "sc_258",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: **Default:** `buffer....] byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file.",
      "position": 4
    },
    {
      "id": "sc_259",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: byteLength - offset` `position` {integer|bigint|nu...] If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
      "position": 5
    },
    {
      "id": "sc_260",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: If `null` or `-1`, data will be read from the curr...] If `position` is a non-negative integer, the current file position will remain unchanged.",
      "position": 6
    },
    {
      "id": "sc_261",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: If `position` is a non-negative integer, the curre...] **Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer`",
      "position": 7
    },
    {
      "id": "sc_262",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: **Default:** `null` Returns: {Promise} Fulfills up...] Reads data from the file and stores that in the given buffer.",
      "position": 8
    },
    {
      "id": "sc_263",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer, offset, length, position)`] [Previous: Reads data from the file and stores that in the gi...] If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 9
    },
    {
      "id": "s_264",
      "type": "sentence",
      "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
      "position": 0
    },
    {
      "id": "s_265",
      "type": "sentence",
      "content": "`offset` {integer} The location in the buffer at which to start filling.",
      "position": 1
    },
    {
      "id": "s_266",
      "type": "sentence",
      "content": "**Default:** `0` `length` {integer} The number of bytes to read.",
      "position": 2
    },
    {
      "id": "s_267",
      "type": "sentence",
      "content": "**Default:** `buffer.",
      "position": 3
    },
    {
      "id": "s_268",
      "type": "sentence",
      "content": "byteLength - offset` `position` {integer|bigint|null} The location where to begin reading data from the file.",
      "position": 4
    },
    {
      "id": "s_269",
      "type": "sentence",
      "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
      "position": 5
    },
    {
      "id": "s_270",
      "type": "sentence",
      "content": "If `position` is a non-negative integer, the current file position will remain unchanged.",
      "position": 6
    },
    {
      "id": "s_271",
      "type": "sentence",
      "content": "**Default:** `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument.",
      "position": 7
    },
    {
      "id": "s_272",
      "type": "sentence",
      "content": "Reads data from the file and stores that in the given buffer.",
      "position": 8
    },
    {
      "id": "s_273",
      "type": "sentence",
      "content": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 9
    },
    {
      "id": "w_274",
      "type": "window",
      "content": "`options` {Object}\n* `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the\n  file data read. **Default:** `Buffer.alloc(16384)`\n* `offset` {integer} The location in the buffer at which to start filling.\n  **Default:** `0`\n* `length` {integer} The number of bytes to read. **Default:**\n  `buffer.byteLength - offset`\n* `position` {integer|bigint|null} The location where to begin reading data\n  from the file. If `null` or `-1`, data will be read from the current file\n  position, and the position will be updated. If `position` is a non-negative\n  integer, the current file position will remain unchanged.\n  **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties:\n* `bytesRead` {integer} The number of bytes read\n* `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer`\n  argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the\nnumber of bytes read is zero.",
      "position": 0,
      "windowSize": 155
    },
    {
      "id": "sw_275",
      "type": "sentence_window",
      "content": "`options` {Object} * `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read. **Default:** `Buffer. alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_276",
      "type": "sentence_window",
      "content": "**Default:** `Buffer. alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling. **Default:** `0` * `length` {integer} The number of bytes to read.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_277",
      "type": "sentence_window",
      "content": "alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling. **Default:** `0` * `length` {integer} The number of bytes to read. **Default:** `buffer.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_278",
      "type": "sentence_window",
      "content": "**Default:** `0` * `length` {integer} The number of bytes to read. **Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_279",
      "type": "sentence_window",
      "content": "**Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_280",
      "type": "sentence_window",
      "content": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_281",
      "type": "sentence_window",
      "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged. **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read *",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_282",
      "type": "sentence_window",
      "content": "If `position` is a non-negative integer, the current file position will remain unchanged. **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_283",
      "type": "sentence_window",
      "content": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_284",
      "type": "sentence_window",
      "content": "Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 9,
      "sentenceCount": 2
    },
    {
      "id": "sc_285",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] `options` {Object} * `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
      "position": 0
    },
    {
      "id": "sc_286",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] [Previous: `options` {Object} * `buffer` {Buffer|TypedArray|D...] **Default:** `Buffer.",
      "position": 1
    },
    {
      "id": "sc_287",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] [Previous: **Default:** `Buffer....] alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling.",
      "position": 2
    },
    {
      "id": "sc_288",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] [Previous: alloc(16384)` * `offset` {integer} The location in...] **Default:** `0` * `length` {integer} The number of bytes to read.",
      "position": 3
    },
    {
      "id": "sc_289",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] [Previous: **Default:** `0` * `length` {integer} The number o...] **Default:** `buffer.",
      "position": 4
    },
    {
      "id": "sc_290",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] [Previous: **Default:** `buffer....] byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
      "position": 5
    },
    {
      "id": "sc_291",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] [Previous: byteLength - offset` * `position` {integer|bigint|...] If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
      "position": 6
    },
    {
      "id": "sc_292",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] [Previous: If `null` or `-1`, data will be read from the curr...] If `position` is a non-negative integer, the current file position will remain unchanged.",
      "position": 7
    },
    {
      "id": "sc_293",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] [Previous: If `position` is a non-negative integer, the curre...] **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument.",
      "position": 8
    },
    {
      "id": "sc_294",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] [Previous: **Default:**: `null` Returns: {Promise} Fulfills u...] Reads data from the file and stores that in the given buffer.",
      "position": 9
    },
    {
      "id": "sc_295",
      "type": "sentence_context",
      "content": "[`filehandle.read([options])`] [Previous: Reads data from the file and stores that in the gi...] If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 10
    },
    {
      "id": "s_296",
      "type": "sentence",
      "content": "`options` {Object} * `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
      "position": 0
    },
    {
      "id": "s_297",
      "type": "sentence",
      "content": "**Default:** `Buffer.",
      "position": 1
    },
    {
      "id": "s_298",
      "type": "sentence",
      "content": "alloc(16384)` * `offset` {integer} The location in the buffer at which to start filling.",
      "position": 2
    },
    {
      "id": "s_299",
      "type": "sentence",
      "content": "**Default:** `0` * `length` {integer} The number of bytes to read.",
      "position": 3
    },
    {
      "id": "s_300",
      "type": "sentence",
      "content": "**Default:** `buffer.",
      "position": 4
    },
    {
      "id": "s_301",
      "type": "sentence",
      "content": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
      "position": 5
    },
    {
      "id": "s_302",
      "type": "sentence",
      "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
      "position": 6
    },
    {
      "id": "s_303",
      "type": "sentence",
      "content": "If `position` is a non-negative integer, the current file position will remain unchanged.",
      "position": 7
    },
    {
      "id": "s_304",
      "type": "sentence",
      "content": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument.",
      "position": 8
    },
    {
      "id": "s_305",
      "type": "sentence",
      "content": "Reads data from the file and stores that in the given buffer.",
      "position": 9
    },
    {
      "id": "s_306",
      "type": "sentence",
      "content": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 10
    },
    {
      "id": "w_307",
      "type": "window",
      "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the\nfile data read. `options` {Object}\n* `offset` {integer} The location in the buffer at which to start filling.\n  **Default:** `0`\n* `length` {integer} The number of bytes to read. **Default:**\n  `buffer.byteLength - offset`\n* `position` {integer|bigint|null} The location where to begin reading data\n  from the file. If `null` or `-1`, data will be read from the current file\n  position, and the position will be updated. If `position` is a non-negative\n  integer, the current file position will remain unchanged.\n  **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties:\n* `bytesRead` {integer} The number of bytes read\n* `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer`\n  argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the\nnumber of bytes read is zero.",
      "position": 0,
      "windowSize": 151
    },
    {
      "id": "sw_308",
      "type": "sentence_window",
      "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read. `options` {Object} * `offset` {integer} The location in the buffer at which to start filling. **Default:** `0` * `length` {integer} The number of bytes to read.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_309",
      "type": "sentence_window",
      "content": "`options` {Object} * `offset` {integer} The location in the buffer at which to start filling. **Default:** `0` * `length` {integer} The number of bytes to read. **Default:** `buffer.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_310",
      "type": "sentence_window",
      "content": "**Default:** `0` * `length` {integer} The number of bytes to read. **Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_311",
      "type": "sentence_window",
      "content": "**Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_312",
      "type": "sentence_window",
      "content": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file. If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_313",
      "type": "sentence_window",
      "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated. If `position` is a non-negative integer, the current file position will remain unchanged. **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read *",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_314",
      "type": "sentence_window",
      "content": "If `position` is a non-negative integer, the current file position will remain unchanged. **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_315",
      "type": "sentence_window",
      "content": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument. Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_316",
      "type": "sentence_window",
      "content": "Reads data from the file and stores that in the given buffer. If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 8,
      "sentenceCount": 2
    },
    {
      "id": "sc_317",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer[, options])`] `buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
      "position": 0
    },
    {
      "id": "sc_318",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer[, options])`] [Previous: `buffer` {Buffer|TypedArray|DataView} A buffer tha...] `options` {Object} * `offset` {integer} The location in the buffer at which to start filling.",
      "position": 1
    },
    {
      "id": "sc_319",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer[, options])`] [Previous: `options` {Object} * `offset` {integer} The locati...] **Default:** `0` * `length` {integer} The number of bytes to read.",
      "position": 2
    },
    {
      "id": "sc_320",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer[, options])`] [Previous: **Default:** `0` * `length` {integer} The number o...] **Default:** `buffer.",
      "position": 3
    },
    {
      "id": "sc_321",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer[, options])`] [Previous: **Default:** `buffer....] byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
      "position": 4
    },
    {
      "id": "sc_322",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer[, options])`] [Previous: byteLength - offset` * `position` {integer|bigint|...] If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
      "position": 5
    },
    {
      "id": "sc_323",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer[, options])`] [Previous: If `null` or `-1`, data will be read from the curr...] If `position` is a non-negative integer, the current file position will remain unchanged.",
      "position": 6
    },
    {
      "id": "sc_324",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer[, options])`] [Previous: If `position` is a non-negative integer, the curre...] **Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument.",
      "position": 7
    },
    {
      "id": "sc_325",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer[, options])`] [Previous: **Default:**: `null` Returns: {Promise} Fulfills u...] Reads data from the file and stores that in the given buffer.",
      "position": 8
    },
    {
      "id": "sc_326",
      "type": "sentence_context",
      "content": "[`filehandle.read(buffer[, options])`] [Previous: Reads data from the file and stores that in the gi...] If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 9
    },
    {
      "id": "s_327",
      "type": "sentence",
      "content": "`buffer` {Buffer|TypedArray|DataView} A buffer that will be filled with the file data read.",
      "position": 0
    },
    {
      "id": "s_328",
      "type": "sentence",
      "content": "`options` {Object} * `offset` {integer} The location in the buffer at which to start filling.",
      "position": 1
    },
    {
      "id": "s_329",
      "type": "sentence",
      "content": "**Default:** `0` * `length` {integer} The number of bytes to read.",
      "position": 2
    },
    {
      "id": "s_330",
      "type": "sentence",
      "content": "**Default:** `buffer.",
      "position": 3
    },
    {
      "id": "s_331",
      "type": "sentence",
      "content": "byteLength - offset` * `position` {integer|bigint|null} The location where to begin reading data from the file.",
      "position": 4
    },
    {
      "id": "s_332",
      "type": "sentence",
      "content": "If `null` or `-1`, data will be read from the current file position, and the position will be updated.",
      "position": 5
    },
    {
      "id": "s_333",
      "type": "sentence",
      "content": "If `position` is a non-negative integer, the current file position will remain unchanged.",
      "position": 6
    },
    {
      "id": "s_334",
      "type": "sentence",
      "content": "**Default:**: `null` Returns: {Promise} Fulfills upon success with an object with two properties: * `bytesRead` {integer} The number of bytes read * `buffer` {Buffer|TypedArray|DataView} A reference to the passed in `buffer` argument.",
      "position": 7
    },
    {
      "id": "s_335",
      "type": "sentence",
      "content": "Reads data from the file and stores that in the given buffer.",
      "position": 8
    },
    {
      "id": "s_336",
      "type": "sentence",
      "content": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 9
    },
    {
      "id": "w_337",
      "type": "window",
      "content": "`options` {Object}\n* `autoClose` {boolean} When true, causes the {FileHandle} to be closed when the\n  stream is closed. **Default:** `false` Returns: {ReadableStream} Returns a byte-oriented `ReadableStream` that may be used to read the file's\ncontents. An error will be thrown if this method is called more than once or is called\nafter the `FileHandle` is closed or closing. While the `ReadableStream` will read the file to completion, it will not\nclose the `FileHandle` automatically. User code must still call the\n`fileHandle.close()` method unless the `autoClose` option is set to `true`.",
      "position": 0,
      "windowSize": 86
    },
    {
      "id": "sw_338",
      "type": "sentence_window",
      "content": "`options` {Object} * `autoClose` {boolean} When true, causes the {FileHandle} to be closed when the stream is closed. **Default:** `false` Returns: {ReadableStream} Returns a byte-oriented `ReadableStream` that may be used to read the file's contents.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_339",
      "type": "sentence_window",
      "content": "**Default:** `false` Returns: {ReadableStream} Returns a byte-oriented `ReadableStream` that may be used to read the file's contents. An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_340",
      "type": "sentence_window",
      "content": "Returns a byte-oriented `ReadableStream` that may be used to read the file's contents. An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing. While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_341",
      "type": "sentence_window",
      "content": "An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing. While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically. User code must still call the `fileHandle.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_342",
      "type": "sentence_window",
      "content": "While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically. User code must still call the `fileHandle. close()` method unless the `autoClose` option is set to `true`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_343",
      "type": "sentence_window",
      "content": "User code must still call the `fileHandle. close()` method unless the `autoClose` option is set to `true`.",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_344",
      "type": "sentence_context",
      "content": "[`filehandle.readableWebStream([options])`] `options` {Object} * `autoClose` {boolean} When true, causes the {FileHandle} to be closed when the stream is closed.",
      "position": 0
    },
    {
      "id": "sc_345",
      "type": "sentence_context",
      "content": "[`filehandle.readableWebStream([options])`] [Previous: `options` {Object} * `autoClose` {boolean} When tr...] **Default:** `false` Returns: {ReadableStream}",
      "position": 1
    },
    {
      "id": "sc_346",
      "type": "sentence_context",
      "content": "[`filehandle.readableWebStream([options])`] [Previous: **Default:** `false` Returns: {ReadableStream}...] Returns a byte-oriented `ReadableStream` that may be used to read the file's contents.",
      "position": 2
    },
    {
      "id": "sc_347",
      "type": "sentence_context",
      "content": "[`filehandle.readableWebStream([options])`] [Previous: Returns a byte-oriented `ReadableStream` that may ...] An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing.",
      "position": 3
    },
    {
      "id": "sc_348",
      "type": "sentence_context",
      "content": "[`filehandle.readableWebStream([options])`] [Previous: An error will be thrown if this method is called m...] While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically.",
      "position": 4
    },
    {
      "id": "sc_349",
      "type": "sentence_context",
      "content": "[`filehandle.readableWebStream([options])`] [Previous: While the `ReadableStream` will read the file to c...] User code must still call the `fileHandle.",
      "position": 5
    },
    {
      "id": "sc_350",
      "type": "sentence_context",
      "content": "[`filehandle.readableWebStream([options])`] [Previous: User code must still call the `fileHandle....] close()` method unless the `autoClose` option is set to `true`.",
      "position": 6
    },
    {
      "id": "s_351",
      "type": "sentence",
      "content": "`options` {Object} * `autoClose` {boolean} When true, causes the {FileHandle} to be closed when the stream is closed.",
      "position": 0
    },
    {
      "id": "s_352",
      "type": "sentence",
      "content": "**Default:** `false` Returns: {ReadableStream}",
      "position": 1
    },
    {
      "id": "s_353",
      "type": "sentence",
      "content": "Returns a byte-oriented `ReadableStream` that may be used to read the file's contents.",
      "position": 2
    },
    {
      "id": "s_354",
      "type": "sentence",
      "content": "An error will be thrown if this method is called more than once or is called after the `FileHandle` is closed or closing.",
      "position": 3
    },
    {
      "id": "s_355",
      "type": "sentence",
      "content": "While the `ReadableStream` will read the file to completion, it will not close the `FileHandle` automatically.",
      "position": 4
    },
    {
      "id": "s_356",
      "type": "sentence",
      "content": "User code must still call the `fileHandle.",
      "position": 5
    },
    {
      "id": "s_357",
      "type": "sentence",
      "content": "close()` method unless the `autoClose` option is set to `true`.",
      "position": 6
    },
    {
      "id": "w_358",
      "type": "window",
      "content": "`options` {Object|string}\n* `encoding` {string|null} **Default:** `null`\n* `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills upon a successful read with the contents of the\nfile. If no encoding is specified (using `options.encoding`), the data is\nreturned as a {Buffer} object. Otherwise, the data will be a string. Asynchronously reads the entire contents of a file. If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support reading. If one or more `filehandle.read()` calls are made on a file handle and then a\n`filehandle.readFile()` call is made, the data will be read from the current\nposition till the end of the file. It doesn't always read from the beginning\nof the file.",
      "position": 0,
      "windowSize": 111
    },
    {
      "id": "sw_359",
      "type": "sentence_window",
      "content": "`options` {Object|string} * `encoding` {string|null} **Default:** `null` * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills upon a successful read with the contents of the file. If no encoding is specified (using `options. encoding`), the data is returned as a {Buffer} object.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_360",
      "type": "sentence_window",
      "content": "If no encoding is specified (using `options. encoding`), the data is returned as a {Buffer} object. Otherwise, the data will be a string.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_361",
      "type": "sentence_window",
      "content": "encoding`), the data is returned as a {Buffer} object. Otherwise, the data will be a string. Asynchronously reads the entire contents of a file.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_362",
      "type": "sentence_window",
      "content": "Otherwise, the data will be a string. Asynchronously reads the entire contents of a file. If `options` is a string, then it specifies the `encoding`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_363",
      "type": "sentence_window",
      "content": "Asynchronously reads the entire contents of a file. If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support reading.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_364",
      "type": "sentence_window",
      "content": "If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support reading. If one or more `filehandle.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_365",
      "type": "sentence_window",
      "content": "The {FileHandle} has to support reading. If one or more `filehandle. read()` calls are made on a file handle and then a `filehandle.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_366",
      "type": "sentence_window",
      "content": "If one or more `filehandle. read()` calls are made on a file handle and then a `filehandle. readFile()` call is made, the data will be read from the current position till the end of the file.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_367",
      "type": "sentence_window",
      "content": "read()` calls are made on a file handle and then a `filehandle. readFile()` call is made, the data will be read from the current position till the end of the file. It doesn't always read from the beginning of the file.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_368",
      "type": "sentence_window",
      "content": "readFile()` call is made, the data will be read from the current position till the end of the file. It doesn't always read from the beginning of the file.",
      "position": 9,
      "sentenceCount": 2
    },
    {
      "id": "sc_369",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills upon a successful read with the contents of the file.",
      "position": 0
    },
    {
      "id": "sc_370",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] [Previous: `options` {Object|string} * `encoding` {string|nul...] If no encoding is specified (using `options.",
      "position": 1
    },
    {
      "id": "sc_371",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] [Previous: If no encoding is specified (using `options....] encoding`), the data is returned as a {Buffer} object.",
      "position": 2
    },
    {
      "id": "sc_372",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] [Previous: encoding`), the data is returned as a {Buffer} obj...] Otherwise, the data will be a string.",
      "position": 3
    },
    {
      "id": "sc_373",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] [Previous: Otherwise, the data will be a string....] Asynchronously reads the entire contents of a file.",
      "position": 4
    },
    {
      "id": "sc_374",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] [Previous: Asynchronously reads the entire contents of a file...] If `options` is a string, then it specifies the `encoding`.",
      "position": 5
    },
    {
      "id": "sc_375",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] [Previous: If `options` is a string, then it specifies the `e...] The {FileHandle} has to support reading.",
      "position": 6
    },
    {
      "id": "sc_376",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] [Previous: The {FileHandle} has to support reading....] If one or more `filehandle.",
      "position": 7
    },
    {
      "id": "sc_377",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] [Previous: If one or more `filehandle....] read()` calls are made on a file handle and then a `filehandle.",
      "position": 8
    },
    {
      "id": "sc_378",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] [Previous: read()` calls are made on a file handle and then a...] readFile()` call is made, the data will be read from the current position till the end of the file.",
      "position": 9
    },
    {
      "id": "sc_379",
      "type": "sentence_context",
      "content": "[`filehandle.readFile(options)`] [Previous: readFile()` call is made, the data will be read fr...] It doesn't always read from the beginning of the file.",
      "position": 10
    },
    {
      "id": "s_380",
      "type": "sentence",
      "content": "`options` {Object|string} * `encoding` {string|null} **Default:** `null` * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills upon a successful read with the contents of the file.",
      "position": 0
    },
    {
      "id": "s_381",
      "type": "sentence",
      "content": "If no encoding is specified (using `options.",
      "position": 1
    },
    {
      "id": "s_382",
      "type": "sentence",
      "content": "encoding`), the data is returned as a {Buffer} object.",
      "position": 2
    },
    {
      "id": "s_383",
      "type": "sentence",
      "content": "Otherwise, the data will be a string.",
      "position": 3
    },
    {
      "id": "s_384",
      "type": "sentence",
      "content": "Asynchronously reads the entire contents of a file.",
      "position": 4
    },
    {
      "id": "s_385",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the `encoding`.",
      "position": 5
    },
    {
      "id": "s_386",
      "type": "sentence",
      "content": "The {FileHandle} has to support reading.",
      "position": 6
    },
    {
      "id": "s_387",
      "type": "sentence",
      "content": "If one or more `filehandle.",
      "position": 7
    },
    {
      "id": "s_388",
      "type": "sentence",
      "content": "read()` calls are made on a file handle and then a `filehandle.",
      "position": 8
    },
    {
      "id": "s_389",
      "type": "sentence",
      "content": "readFile()` call is made, the data will be read from the current position till the end of the file.",
      "position": 9
    },
    {
      "id": "s_390",
      "type": "sentence",
      "content": "It doesn't always read from the beginning of the file.",
      "position": 10
    },
    {
      "id": "w_391",
      "type": "window",
      "content": "`options` {Object}\n* `encoding` {string} **Default:** `null`\n* `autoClose` {boolean} **Default:** `true`\n* `emitClose` {boolean} **Default:** `true`\n* `start` {integer}\n* `end` {integer} **Default:** `Infinity`\n* `highWaterMark` {integer} **Default:** `64 * 1024` Returns: {readline.InterfaceConstructor} Convenience method to create a `readline` interface and stream over the file.\nSee [`filehandle.createReadStream()`][] for the options.",
      "position": 0,
      "windowSize": 44
    },
    {
      "id": "sw_392",
      "type": "sentence_window",
      "content": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` Returns: {readline. InterfaceConstructor} Convenience method to create a `readline`",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_393",
      "type": "sentence_window",
      "content": "InterfaceConstructor} Convenience method to create a `readline` interface and stream over the file. See [`filehandle.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_394",
      "type": "sentence_window",
      "content": "Convenience method to create a `readline` interface and stream over the file. See [`filehandle. createReadStream()`][] for the options.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_395",
      "type": "sentence_window",
      "content": "See [`filehandle. createReadStream()`][] for the options.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_396",
      "type": "sentence_context",
      "content": "[`filehandle.readLines([options])`] `options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` Returns: {readline.",
      "position": 0
    },
    {
      "id": "sc_397",
      "type": "sentence_context",
      "content": "[`filehandle.readLines([options])`] [Previous: `options` {Object} * `encoding` {string} **Default...] InterfaceConstructor}",
      "position": 1
    },
    {
      "id": "sc_398",
      "type": "sentence_context",
      "content": "[`filehandle.readLines([options])`] [Previous: InterfaceConstructor}...] Convenience method to create a `readline` interface and stream over the file.",
      "position": 2
    },
    {
      "id": "sc_399",
      "type": "sentence_context",
      "content": "[`filehandle.readLines([options])`] [Previous: Convenience method to create a `readline` interfac...] See [`filehandle.",
      "position": 3
    },
    {
      "id": "sc_400",
      "type": "sentence_context",
      "content": "[`filehandle.readLines([options])`] createReadStream()`][] for the options.",
      "position": 4
    },
    {
      "id": "s_401",
      "type": "sentence",
      "content": "`options` {Object} * `encoding` {string} **Default:** `null` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` Returns: {readline.",
      "position": 0
    },
    {
      "id": "s_402",
      "type": "sentence",
      "content": "InterfaceConstructor}",
      "position": 1
    },
    {
      "id": "s_403",
      "type": "sentence",
      "content": "Convenience method to create a `readline` interface and stream over the file.",
      "position": 2
    },
    {
      "id": "s_404",
      "type": "sentence",
      "content": "See [`filehandle.",
      "position": 3
    },
    {
      "id": "s_405",
      "type": "sentence",
      "content": "createReadStream()`][] for the options.",
      "position": 4
    },
    {
      "id": "w_406",
      "type": "window",
      "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where\nthe data should be read from. If `position` is not a `number`, the data will\nbe read from the current position. **Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties:\n* `bytesRead` {integer} the number of bytes read\n* `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing\n  a reference to the `buffers` input. Read from a file and write to an array of {ArrayBufferView}s",
      "position": 0,
      "windowSize": 73
    },
    {
      "id": "sw_407",
      "type": "sentence_window",
      "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data should be read from. If `position` is not a `number`, the data will be read from the current position. **Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead`",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_408",
      "type": "sentence_window",
      "content": "If `position` is not a `number`, the data will be read from the current position. **Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead` {integer} the number of bytes read * `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing a reference to the `buffers` input. Read from a",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_409",
      "type": "sentence_window",
      "content": "**Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead` {integer} the number of bytes read * `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing a reference to the `buffers` input. Read from a file and write to an array of {ArrayBufferView}s",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_410",
      "type": "sentence_context",
      "content": "[`filehandle.readv(buffers[, position])`] `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data should be read from.",
      "position": 0
    },
    {
      "id": "sc_411",
      "type": "sentence_context",
      "content": "[`filehandle.readv(buffers[, position])`] [Previous: `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `p...] If `position` is not a `number`, the data will be read from the current position.",
      "position": 1
    },
    {
      "id": "sc_412",
      "type": "sentence_context",
      "content": "[`filehandle.readv(buffers[, position])`] [Previous: If `position` is not a `number`, the data will be ...] **Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead` {integer} the number of bytes read * `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing a reference to the",
      "position": 2
    },
    {
      "id": "sc_413",
      "type": "sentence_context",
      "content": "[`filehandle.readv(buffers[, position])`] [Previous: **Default:** `null` Returns: {Promise} Fulfills up...] Read from a file and write to an array of {ArrayBufferView}s",
      "position": 3
    },
    {
      "id": "s_414",
      "type": "sentence",
      "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data should be read from.",
      "position": 0
    },
    {
      "id": "s_415",
      "type": "sentence",
      "content": "If `position` is not a `number`, the data will be read from the current position.",
      "position": 1
    },
    {
      "id": "s_416",
      "type": "sentence",
      "content": "**Default:** `null` Returns: {Promise} Fulfills upon success an object containing two properties: * `bytesRead` {integer} the number of bytes read * `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} property containing a reference to the `buffers` input.",
      "position": 2
    },
    {
      "id": "s_417",
      "type": "sentence",
      "content": "Read from a file and write to an array of {ArrayBufferView}s",
      "position": 3
    },
    {
      "id": "w_418",
      "type": "window",
      "content": "`options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with an {fs.Stats} for the file.",
      "position": 0,
      "windowSize": 28
    },
    {
      "id": "sw_419",
      "type": "sentence_window",
      "content": "`options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_420",
      "type": "sentence_window",
      "content": "Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with an {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_421",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {Promise} Fulfills with an {fs. Stats} for the file.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_422",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with an {fs. Stats} for the file.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_423",
      "type": "sentence_context",
      "content": "[`filehandle.stat([options])`] `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_424",
      "type": "sentence_context",
      "content": "[`filehandle.stat([options])`] [Previous: `options` {Object} * `bigint` {boolean} Whether th...] Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_425",
      "type": "sentence_context",
      "content": "[`filehandle.stat([options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_426",
      "type": "sentence_context",
      "content": "[`filehandle.stat([options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with an {fs.",
      "position": 3
    },
    {
      "id": "sc_427",
      "type": "sentence_context",
      "content": "[`filehandle.stat([options])`] [Previous: Returns: {Promise} Fulfills with an {fs....] Stats} for the file.",
      "position": 4
    },
    {
      "id": "s_428",
      "type": "sentence",
      "content": "`options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_429",
      "type": "sentence",
      "content": "Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_430",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_431",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with an {fs.",
      "position": 3
    },
    {
      "id": "s_432",
      "type": "sentence",
      "content": "Stats} for the file.",
      "position": 4
    },
    {
      "id": "w_433",
      "type": "window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Request that all data for the open file descriptor is flushed to the storage\ndevice. The specific implementation is operating system and device specific.\nRefer to the POSIX fsync(2) documentation for more detail.",
      "position": 0,
      "windowSize": 38
    },
    {
      "id": "sw_434",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_435",
      "type": "sentence_window",
      "content": "Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_436",
      "type": "sentence_window",
      "content": "The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_437",
      "type": "sentence_context",
      "content": "[`filehandle.sync()`] Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_438",
      "type": "sentence_context",
      "content": "[`filehandle.sync()`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Request that all data for the open file descriptor is flushed to the storage device.",
      "position": 1
    },
    {
      "id": "sc_439",
      "type": "sentence_context",
      "content": "[`filehandle.sync()`] [Previous: Request that all data for the open file descriptor...] The specific implementation is operating system and device specific.",
      "position": 2
    },
    {
      "id": "sc_440",
      "type": "sentence_context",
      "content": "[`filehandle.sync()`] [Previous: The specific implementation is operating system an...] Refer to the POSIX fsync(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_441",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_442",
      "type": "sentence",
      "content": "Request that all data for the open file descriptor is flushed to the storage device.",
      "position": 1
    },
    {
      "id": "s_443",
      "type": "sentence",
      "content": "The specific implementation is operating system and device specific.",
      "position": 2
    },
    {
      "id": "s_444",
      "type": "sentence",
      "content": "Refer to the POSIX fsync(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "w_445",
      "type": "window",
      "content": "`len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success. Truncates the file. If the file was larger than `len` bytes, only the first `len` bytes will be\nretained in the file. The following example retains only the first four bytes of the file: If the file previously was shorter than `len` bytes, it is extended, and the\nextended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
      "position": 0,
      "windowSize": 74
    },
    {
      "id": "sw_446",
      "type": "sentence_window",
      "content": "`len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success. Truncates the file. If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_447",
      "type": "sentence_window",
      "content": "Truncates the file. If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file. The following example retains only the first four bytes of the file:",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_448",
      "type": "sentence_window",
      "content": "If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file. The following example retains only the first four bytes of the file: If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_449",
      "type": "sentence_window",
      "content": "The following example retains only the first four bytes of the file: If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_450",
      "type": "sentence_window",
      "content": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_451",
      "type": "sentence_context",
      "content": "[`filehandle.truncate(len)`] `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_452",
      "type": "sentence_context",
      "content": "[`filehandle.truncate(len)`] [Previous: `len` {integer} **Default:** `0` Returns: {Promise...] Truncates the file.",
      "position": 1
    },
    {
      "id": "sc_453",
      "type": "sentence_context",
      "content": "[`filehandle.truncate(len)`] If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
      "position": 2
    },
    {
      "id": "sc_454",
      "type": "sentence_context",
      "content": "[`filehandle.truncate(len)`] [Previous: If the file was larger than `len` bytes, only the ...] The following example retains only the first four bytes of the file:",
      "position": 3
    },
    {
      "id": "sc_455",
      "type": "sentence_context",
      "content": "[`filehandle.truncate(len)`] [Previous: The following example retains only the first four ...] If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
      "position": 4
    },
    {
      "id": "sc_456",
      "type": "sentence_context",
      "content": "[`filehandle.truncate(len)`] [Previous: If the file previously was shorter than `len` byte...] If `len` is negative then `0` will be used.",
      "position": 5
    },
    {
      "id": "s_457",
      "type": "sentence",
      "content": "`len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_458",
      "type": "sentence",
      "content": "Truncates the file.",
      "position": 1
    },
    {
      "id": "s_459",
      "type": "sentence",
      "content": "If the file was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
      "position": 2
    },
    {
      "id": "s_460",
      "type": "sentence",
      "content": "The following example retains only the first four bytes of the file:",
      "position": 3
    },
    {
      "id": "s_461",
      "type": "sentence",
      "content": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
      "position": 4
    },
    {
      "id": "s_462",
      "type": "sentence",
      "content": "If `len` is negative then `0` will be used.",
      "position": 5
    },
    {
      "id": "w_463",
      "type": "window",
      "content": "`atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Change the file system timestamps of the object referenced by the {FileHandle}\nthen fulfills the promise with no arguments upon success.",
      "position": 0,
      "windowSize": 26
    },
    {
      "id": "sw_464",
      "type": "sentence_window",
      "content": "`atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Change the file system timestamps of the object referenced by the {FileHandle} then fulfills the promise with no arguments upon success.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_465",
      "type": "sentence_context",
      "content": "[`filehandle.utimes(atime, mtime)`] `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise}",
      "position": 0
    },
    {
      "id": "sc_466",
      "type": "sentence_context",
      "content": "[`filehandle.utimes(atime, mtime)`] [Previous: `atime` {number|string|Date} `mtime` {number|strin...] Change the file system timestamps of the object referenced by the {FileHandle} then fulfills the promise with no arguments upon success.",
      "position": 1
    },
    {
      "id": "s_467",
      "type": "sentence",
      "content": "`atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise}",
      "position": 0
    },
    {
      "id": "s_468",
      "type": "sentence",
      "content": "Change the file system timestamps of the object referenced by the {FileHandle} then fulfills the promise with no arguments upon success.",
      "position": 1
    },
    {
      "id": "w_469",
      "type": "window",
      "content": "`buffer` {Buffer|TypedArray|DataView} `offset` {integer} The start position from within `buffer` where the data\nto write begins. `length` {integer} The number of bytes from `buffer` to write. **Default:**\n`buffer.byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the\ndata from `buffer` should be written. If `position` is not a `number`,\nthe data will be written at the current position. See the POSIX pwrite(2)\ndocumentation for more detail. **Default:** `null` Returns: {Promise} Write `buffer` to the file. The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the\n`buffer` written. It is unsafe to use `filehandle.write()` multiple times on the same file\nwithout waiting for the promise to be fulfilled (or rejected). For this\nscenario, use [`filehandle.createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.",
      "position": 0,
      "windowSize": 154
    },
    {
      "id": "sw_470",
      "type": "sentence_window",
      "content": "`buffer` {Buffer|TypedArray|DataView} `offset` {integer} The start position from within `buffer` where the data to write begins. `length` {integer} The number of bytes from `buffer` to write. **Default:** `buffer.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_471",
      "type": "sentence_window",
      "content": "`length` {integer} The number of bytes from `buffer` to write. **Default:** `buffer. byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_472",
      "type": "sentence_window",
      "content": "**Default:** `buffer. byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written. If `position` is not a `number`, the data will be written at the current position.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_473",
      "type": "sentence_window",
      "content": "byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written. If `position` is not a `number`, the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_474",
      "type": "sentence_window",
      "content": "If `position` is not a `number`, the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail. **Default:** `null` Returns: {Promise}",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_475",
      "type": "sentence_window",
      "content": "See the POSIX pwrite(2) documentation for more detail. **Default:** `null` Returns: {Promise} Write `buffer` to the file.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_476",
      "type": "sentence_window",
      "content": "**Default:** `null` Returns: {Promise} Write `buffer` to the file. The promise is fulfilled with an object containing two properties:",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_477",
      "type": "sentence_window",
      "content": "Write `buffer` to the file. The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_478",
      "type": "sentence_window",
      "content": "The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written. It is unsafe to use `filehandle.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_479",
      "type": "sentence_window",
      "content": "`bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written. It is unsafe to use `filehandle. write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_480",
      "type": "sentence_window",
      "content": "It is unsafe to use `filehandle. write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). For this scenario, use [`filehandle.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_481",
      "type": "sentence_window",
      "content": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). For this scenario, use [`filehandle. createWriteStream()`][].",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_482",
      "type": "sentence_window",
      "content": "For this scenario, use [`filehandle. createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_483",
      "type": "sentence_window",
      "content": "createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_484",
      "type": "sentence_window",
      "content": "On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 14,
      "sentenceCount": 2
    },
    {
      "id": "sc_485",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] `buffer` {Buffer|TypedArray|DataView} `offset` {integer} The start position from within `buffer` where the data to write begins.",
      "position": 0
    },
    {
      "id": "sc_486",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: `buffer` {Buffer|TypedArray|DataView} `offset` {in...] `length` {integer} The number of bytes from `buffer` to write.",
      "position": 1
    },
    {
      "id": "sc_487",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: `length` {integer} The number of bytes from `buffe...] **Default:** `buffer.",
      "position": 2
    },
    {
      "id": "sc_488",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: **Default:** `buffer....] byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written.",
      "position": 3
    },
    {
      "id": "sc_489",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: byteLength - offset` `position` {integer|null} The...] If `position` is not a `number`, the data will be written at the current position.",
      "position": 4
    },
    {
      "id": "sc_490",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: If `position` is not a `number`, the data will be ...] See the POSIX pwrite(2) documentation for more detail.",
      "position": 5
    },
    {
      "id": "sc_491",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: See the POSIX pwrite(2) documentation for more det...] **Default:** `null` Returns: {Promise}",
      "position": 6
    },
    {
      "id": "sc_492",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: **Default:** `null` Returns: {Promise}...] Write `buffer` to the file.",
      "position": 7
    },
    {
      "id": "sc_493",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: Write `buffer` to the file....] The promise is fulfilled with an object containing two properties:",
      "position": 8
    },
    {
      "id": "sc_494",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: The promise is fulfilled with an object containing...] `bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written.",
      "position": 9
    },
    {
      "id": "sc_495",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: `bytesWritten` {integer} the number of bytes writt...] It is unsafe to use `filehandle.",
      "position": 10
    },
    {
      "id": "sc_496",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: It is unsafe to use `filehandle....] write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 11
    },
    {
      "id": "sc_497",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: write()` multiple times on the same file without w...] For this scenario, use [`filehandle.",
      "position": 12
    },
    {
      "id": "sc_498",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: For this scenario, use [`filehandle....] createWriteStream()`][].",
      "position": 13
    },
    {
      "id": "sc_499",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: createWriteStream()`][]....] On Linux, positional writes do not work when the file is opened in append mode.",
      "position": 14
    },
    {
      "id": "sc_500",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer, offset[, length[, position]])`] [Previous: On Linux, positional writes do not work when the f...] The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 15
    },
    {
      "id": "s_501",
      "type": "sentence",
      "content": "`buffer` {Buffer|TypedArray|DataView} `offset` {integer} The start position from within `buffer` where the data to write begins.",
      "position": 0
    },
    {
      "id": "s_502",
      "type": "sentence",
      "content": "`length` {integer} The number of bytes from `buffer` to write.",
      "position": 1
    },
    {
      "id": "s_503",
      "type": "sentence",
      "content": "**Default:** `buffer.",
      "position": 2
    },
    {
      "id": "s_504",
      "type": "sentence",
      "content": "byteLength - offset` `position` {integer|null} The offset from the beginning of the file where the data from `buffer` should be written.",
      "position": 3
    },
    {
      "id": "s_505",
      "type": "sentence",
      "content": "If `position` is not a `number`, the data will be written at the current position.",
      "position": 4
    },
    {
      "id": "s_506",
      "type": "sentence",
      "content": "See the POSIX pwrite(2) documentation for more detail.",
      "position": 5
    },
    {
      "id": "s_507",
      "type": "sentence",
      "content": "**Default:** `null` Returns: {Promise}",
      "position": 6
    },
    {
      "id": "s_508",
      "type": "sentence",
      "content": "Write `buffer` to the file.",
      "position": 7
    },
    {
      "id": "s_509",
      "type": "sentence",
      "content": "The promise is fulfilled with an object containing two properties:",
      "position": 8
    },
    {
      "id": "s_510",
      "type": "sentence",
      "content": "`bytesWritten` {integer} the number of bytes written `buffer` {Buffer|TypedArray|DataView} a reference to the `buffer` written.",
      "position": 9
    },
    {
      "id": "s_511",
      "type": "sentence",
      "content": "It is unsafe to use `filehandle.",
      "position": 10
    },
    {
      "id": "s_512",
      "type": "sentence",
      "content": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 11
    },
    {
      "id": "s_513",
      "type": "sentence",
      "content": "For this scenario, use [`filehandle.",
      "position": 12
    },
    {
      "id": "s_514",
      "type": "sentence",
      "content": "createWriteStream()`][].",
      "position": 13
    },
    {
      "id": "s_515",
      "type": "sentence",
      "content": "On Linux, positional writes do not work when the file is opened in append mode.",
      "position": 14
    },
    {
      "id": "s_516",
      "type": "sentence",
      "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 15
    },
    {
      "id": "w_517",
      "type": "window",
      "content": "`buffer` {Buffer|TypedArray|DataView} `options` {Object}\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|null} **Default:** `null` Returns: {Promise} Write `buffer` to the file. Similar to the above `filehandle.write` function, this version takes an\noptional `options` object. If no `options` object is specified, it will\ndefault with the above values.",
      "position": 0,
      "windowSize": 49
    },
    {
      "id": "sw_518",
      "type": "sentence_window",
      "content": "`buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {Promise} Write `buffer` to the file.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_519",
      "type": "sentence_window",
      "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {Promise} Write `buffer` to the file. Similar to the above `filehandle.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_520",
      "type": "sentence_window",
      "content": "Write `buffer` to the file. Similar to the above `filehandle. write` function, this version takes an optional `options` object.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_521",
      "type": "sentence_window",
      "content": "Similar to the above `filehandle. write` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_522",
      "type": "sentence_window",
      "content": "write` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_523",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer[, options])`] `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "sc_524",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer[, options])`] [Previous: `buffer` {Buffer|TypedArray|DataView} `options` {O...] byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {Promise}",
      "position": 1
    },
    {
      "id": "sc_525",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer[, options])`] [Previous: byteLength - offset` * `position` {integer|null} *...] Write `buffer` to the file.",
      "position": 2
    },
    {
      "id": "sc_526",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer[, options])`] [Previous: Write `buffer` to the file....] Similar to the above `filehandle.",
      "position": 3
    },
    {
      "id": "sc_527",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer[, options])`] [Previous: Similar to the above `filehandle....] write` function, this version takes an optional `options` object.",
      "position": 4
    },
    {
      "id": "sc_528",
      "type": "sentence_context",
      "content": "[`filehandle.write(buffer[, options])`] [Previous: write` function, this version takes an optional `o...] If no `options` object is specified, it will default with the above values.",
      "position": 5
    },
    {
      "id": "s_529",
      "type": "sentence",
      "content": "`buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "s_530",
      "type": "sentence",
      "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {Promise}",
      "position": 1
    },
    {
      "id": "s_531",
      "type": "sentence",
      "content": "Write `buffer` to the file.",
      "position": 2
    },
    {
      "id": "s_532",
      "type": "sentence",
      "content": "Similar to the above `filehandle.",
      "position": 3
    },
    {
      "id": "s_533",
      "type": "sentence",
      "content": "write` function, this version takes an optional `options` object.",
      "position": 4
    },
    {
      "id": "s_534",
      "type": "sentence",
      "content": "If no `options` object is specified, it will default with the above values.",
      "position": 5
    },
    {
      "id": "w_535",
      "type": "window",
      "content": "`string` {string} `position` {integer|null} The offset from the beginning of the file where the\ndata from `string` should be written. If `position` is not a `number` the\ndata will be written at the current position. See the POSIX pwrite(2)\ndocumentation for more detail. **Default:** `null` `encoding` {string} The expected string encoding. **Default:** `'utf8'` Returns: {Promise} Write `string` to the file. If `string` is not a string, the promise is\nrejected with an error. The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written. It is unsafe to use `filehandle.write()` multiple times on the same file\nwithout waiting for the promise to be fulfilled (or rejected). For this\nscenario, use [`filehandle.createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.",
      "position": 0,
      "windowSize": 149
    },
    {
      "id": "sw_536",
      "type": "sentence_window",
      "content": "`string` {string} `position` {integer|null} The offset from the beginning of the file where the data from `string` should be written. If `position` is not a `number` the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_537",
      "type": "sentence_window",
      "content": "If `position` is not a `number` the data will be written at the current position. See the POSIX pwrite(2) documentation for more detail. **Default:** `null` `encoding` {string} The expected string encoding.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_538",
      "type": "sentence_window",
      "content": "See the POSIX pwrite(2) documentation for more detail. **Default:** `null` `encoding` {string} The expected string encoding. **Default:** `'utf8'` Returns: {Promise}",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_539",
      "type": "sentence_window",
      "content": "**Default:** `null` `encoding` {string} The expected string encoding. **Default:** `'utf8'` Returns: {Promise} Write `string` to the file.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_540",
      "type": "sentence_window",
      "content": "**Default:** `'utf8'` Returns: {Promise} Write `string` to the file. If `string` is not a string, the promise is rejected with an error.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_541",
      "type": "sentence_window",
      "content": "Write `string` to the file. If `string` is not a string, the promise is rejected with an error. The promise is fulfilled with an object containing two properties:",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_542",
      "type": "sentence_window",
      "content": "If `string` is not a string, the promise is rejected with an error. The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_543",
      "type": "sentence_window",
      "content": "The promise is fulfilled with an object containing two properties: `bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written. It is unsafe to use `filehandle.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_544",
      "type": "sentence_window",
      "content": "`bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written. It is unsafe to use `filehandle. write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_545",
      "type": "sentence_window",
      "content": "It is unsafe to use `filehandle. write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). For this scenario, use [`filehandle.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_546",
      "type": "sentence_window",
      "content": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). For this scenario, use [`filehandle. createWriteStream()`][].",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_547",
      "type": "sentence_window",
      "content": "For this scenario, use [`filehandle. createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_548",
      "type": "sentence_window",
      "content": "createWriteStream()`][]. On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_549",
      "type": "sentence_window",
      "content": "On Linux, positional writes do not work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 13,
      "sentenceCount": 2
    },
    {
      "id": "sc_550",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] `string` {string} `position` {integer|null} The offset from the beginning of the file where the data from `string` should be written.",
      "position": 0
    },
    {
      "id": "sc_551",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: `string` {string} `position` {integer|null} The of...] If `position` is not a `number` the data will be written at the current position.",
      "position": 1
    },
    {
      "id": "sc_552",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: If `position` is not a `number` the data will be w...] See the POSIX pwrite(2) documentation for more detail.",
      "position": 2
    },
    {
      "id": "sc_553",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: See the POSIX pwrite(2) documentation for more det...] **Default:** `null` `encoding` {string} The expected string encoding.",
      "position": 3
    },
    {
      "id": "sc_554",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: **Default:** `null` `encoding` {string} The expect...] **Default:** `'utf8'` Returns: {Promise}",
      "position": 4
    },
    {
      "id": "sc_555",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: **Default:** `'utf8'` Returns: {Promise}...] Write `string` to the file.",
      "position": 5
    },
    {
      "id": "sc_556",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: Write `string` to the file....] If `string` is not a string, the promise is rejected with an error.",
      "position": 6
    },
    {
      "id": "sc_557",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: If `string` is not a string, the promise is reject...] The promise is fulfilled with an object containing two properties:",
      "position": 7
    },
    {
      "id": "sc_558",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: The promise is fulfilled with an object containing...] `bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written.",
      "position": 8
    },
    {
      "id": "sc_559",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: `bytesWritten` {integer} the number of bytes writt...] It is unsafe to use `filehandle.",
      "position": 9
    },
    {
      "id": "sc_560",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: It is unsafe to use `filehandle....] write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 10
    },
    {
      "id": "sc_561",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: write()` multiple times on the same file without w...] For this scenario, use [`filehandle.",
      "position": 11
    },
    {
      "id": "sc_562",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: For this scenario, use [`filehandle....] createWriteStream()`][].",
      "position": 12
    },
    {
      "id": "sc_563",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: createWriteStream()`][]....] On Linux, positional writes do not work when the file is opened in append mode.",
      "position": 13
    },
    {
      "id": "sc_564",
      "type": "sentence_context",
      "content": "[`filehandle.write(string[, position[, encoding]])`] [Previous: On Linux, positional writes do not work when the f...] The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 14
    },
    {
      "id": "s_565",
      "type": "sentence",
      "content": "`string` {string} `position` {integer|null} The offset from the beginning of the file where the data from `string` should be written.",
      "position": 0
    },
    {
      "id": "s_566",
      "type": "sentence",
      "content": "If `position` is not a `number` the data will be written at the current position.",
      "position": 1
    },
    {
      "id": "s_567",
      "type": "sentence",
      "content": "See the POSIX pwrite(2) documentation for more detail.",
      "position": 2
    },
    {
      "id": "s_568",
      "type": "sentence",
      "content": "**Default:** `null` `encoding` {string} The expected string encoding.",
      "position": 3
    },
    {
      "id": "s_569",
      "type": "sentence",
      "content": "**Default:** `'utf8'` Returns: {Promise}",
      "position": 4
    },
    {
      "id": "s_570",
      "type": "sentence",
      "content": "Write `string` to the file.",
      "position": 5
    },
    {
      "id": "s_571",
      "type": "sentence",
      "content": "If `string` is not a string, the promise is rejected with an error.",
      "position": 6
    },
    {
      "id": "s_572",
      "type": "sentence",
      "content": "The promise is fulfilled with an object containing two properties:",
      "position": 7
    },
    {
      "id": "s_573",
      "type": "sentence",
      "content": "`bytesWritten` {integer} the number of bytes written `buffer` {string} a reference to the `string` written.",
      "position": 8
    },
    {
      "id": "s_574",
      "type": "sentence",
      "content": "It is unsafe to use `filehandle.",
      "position": 9
    },
    {
      "id": "s_575",
      "type": "sentence",
      "content": "write()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 10
    },
    {
      "id": "s_576",
      "type": "sentence",
      "content": "For this scenario, use [`filehandle.",
      "position": 11
    },
    {
      "id": "s_577",
      "type": "sentence",
      "content": "createWriteStream()`][].",
      "position": 12
    },
    {
      "id": "s_578",
      "type": "sentence",
      "content": "On Linux, positional writes do not work when the file is opened in append mode.",
      "position": 13
    },
    {
      "id": "s_579",
      "type": "sentence",
      "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 14
    },
    {
      "id": "w_580",
      "type": "window",
      "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string}\n* `encoding` {string|null} The expected character encoding when `data` is a\n  string. **Default:** `'utf8'`\n* `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile. **Default:** `undefined` Returns: {Promise} Asynchronously writes data to a file, replacing the file if it already exists.\n`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.\nThe promise is fulfilled with no arguments upon success. If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support writing. It is unsafe to use `filehandle.writeFile()` multiple times on the same file\nwithout waiting for the promise to be fulfilled (or rejected). If one or more `filehandle.write()` calls are made on a file handle and then a\n`filehandle.writeFile()` call is made, the data will be written from the\ncurrent position till the end of the file. It doesn't always write from the\nbeginning of the file.",
      "position": 0,
      "windowSize": 140
    },
    {
      "id": "sw_581",
      "type": "sentence_window",
      "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} The expected character encoding when `data` is a string. **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile. **Default:** `undefined` Returns: {Promise}",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_582",
      "type": "sentence_window",
      "content": "**Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile. **Default:** `undefined` Returns: {Promise} Asynchronously writes data to a file, replacing the file if it already exists.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_583",
      "type": "sentence_window",
      "content": "**Default:** `undefined` Returns: {Promise} Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_584",
      "type": "sentence_window",
      "content": "Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object. The promise is fulfilled with no arguments upon success.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_585",
      "type": "sentence_window",
      "content": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object. The promise is fulfilled with no arguments upon success. If `options` is a string, then it specifies the `encoding`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_586",
      "type": "sentence_window",
      "content": "The promise is fulfilled with no arguments upon success. If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support writing.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_587",
      "type": "sentence_window",
      "content": "If `options` is a string, then it specifies the `encoding`. The {FileHandle} has to support writing. It is unsafe to use `filehandle.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_588",
      "type": "sentence_window",
      "content": "The {FileHandle} has to support writing. It is unsafe to use `filehandle. writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_589",
      "type": "sentence_window",
      "content": "It is unsafe to use `filehandle. writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). If one or more `filehandle.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_590",
      "type": "sentence_window",
      "content": "writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). If one or more `filehandle. write()` calls are made on a file handle and then a `filehandle.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_591",
      "type": "sentence_window",
      "content": "If one or more `filehandle. write()` calls are made on a file handle and then a `filehandle. writeFile()` call is made, the data will be written from the current position till the end of the file.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_592",
      "type": "sentence_window",
      "content": "write()` calls are made on a file handle and then a `filehandle. writeFile()` call is made, the data will be written from the current position till the end of the file. It doesn't always write from the beginning of the file.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_593",
      "type": "sentence_window",
      "content": "writeFile()` call is made, the data will be written from the current position till the end of the file. It doesn't always write from the beginning of the file.",
      "position": 12,
      "sentenceCount": 2
    },
    {
      "id": "sc_594",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} The expected character encoding when `data` is a string.",
      "position": 0
    },
    {
      "id": "sc_595",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: `data` {string|Buffer|TypedArray|DataView|AsyncIte...] **Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile.",
      "position": 1
    },
    {
      "id": "sc_596",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: **Default:** `'utf8'` * `signal` {AbortSignal|unde...] **Default:** `undefined` Returns: {Promise}",
      "position": 2
    },
    {
      "id": "sc_597",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: **Default:** `undefined` Returns: {Promise}...] Asynchronously writes data to a file, replacing the file if it already exists.",
      "position": 3
    },
    {
      "id": "sc_598",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: Asynchronously writes data to a file, replacing th...] `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
      "position": 4
    },
    {
      "id": "sc_599",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: `data` can be a string, a buffer, an {AsyncIterabl...] The promise is fulfilled with no arguments upon success.",
      "position": 5
    },
    {
      "id": "sc_600",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: The promise is fulfilled with no arguments upon su...] If `options` is a string, then it specifies the `encoding`.",
      "position": 6
    },
    {
      "id": "sc_601",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: If `options` is a string, then it specifies the `e...] The {FileHandle} has to support writing.",
      "position": 7
    },
    {
      "id": "sc_602",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: The {FileHandle} has to support writing....] It is unsafe to use `filehandle.",
      "position": 8
    },
    {
      "id": "sc_603",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: It is unsafe to use `filehandle....] writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 9
    },
    {
      "id": "sc_604",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: writeFile()` multiple times on the same file witho...] If one or more `filehandle.",
      "position": 10
    },
    {
      "id": "sc_605",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: If one or more `filehandle....] write()` calls are made on a file handle and then a `filehandle.",
      "position": 11
    },
    {
      "id": "sc_606",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: write()` calls are made on a file handle and then ...] writeFile()` call is made, the data will be written from the current position till the end of the file.",
      "position": 12
    },
    {
      "id": "sc_607",
      "type": "sentence_context",
      "content": "[`filehandle.writeFile(data, options)`] [Previous: writeFile()` call is made, the data will be writte...] It doesn't always write from the beginning of the file.",
      "position": 13
    },
    {
      "id": "s_608",
      "type": "sentence",
      "content": "`data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} The expected character encoding when `data` is a string.",
      "position": 0
    },
    {
      "id": "s_609",
      "type": "sentence",
      "content": "**Default:** `'utf8'` * `signal` {AbortSignal|undefined} allows aborting an in-progress writeFile.",
      "position": 1
    },
    {
      "id": "s_610",
      "type": "sentence",
      "content": "**Default:** `undefined` Returns: {Promise}",
      "position": 2
    },
    {
      "id": "s_611",
      "type": "sentence",
      "content": "Asynchronously writes data to a file, replacing the file if it already exists.",
      "position": 3
    },
    {
      "id": "s_612",
      "type": "sentence",
      "content": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
      "position": 4
    },
    {
      "id": "s_613",
      "type": "sentence",
      "content": "The promise is fulfilled with no arguments upon success.",
      "position": 5
    },
    {
      "id": "s_614",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the `encoding`.",
      "position": 6
    },
    {
      "id": "s_615",
      "type": "sentence",
      "content": "The {FileHandle} has to support writing.",
      "position": 7
    },
    {
      "id": "s_616",
      "type": "sentence",
      "content": "It is unsafe to use `filehandle.",
      "position": 8
    },
    {
      "id": "s_617",
      "type": "sentence",
      "content": "writeFile()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 9
    },
    {
      "id": "s_618",
      "type": "sentence",
      "content": "If one or more `filehandle.",
      "position": 10
    },
    {
      "id": "s_619",
      "type": "sentence",
      "content": "write()` calls are made on a file handle and then a `filehandle.",
      "position": 11
    },
    {
      "id": "s_620",
      "type": "sentence",
      "content": "writeFile()` call is made, the data will be written from the current position till the end of the file.",
      "position": 12
    },
    {
      "id": "s_621",
      "type": "sentence",
      "content": "It doesn't always write from the beginning of the file.",
      "position": 13
    },
    {
      "id": "w_622",
      "type": "window",
      "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the\ndata from `buffers` should be written. If `position` is not a `number`,\nthe data will be written at the current position. **Default:** `null` Returns: {Promise} Write an array of {ArrayBufferView}s to the file. The promise is fulfilled with an object containing a two properties: `bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers`\ninput. It is unsafe to call `writev()` multiple times on the same file without waiting\nfor the promise to be fulfilled (or rejected). On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.",
      "position": 0,
      "windowSize": 120
    },
    {
      "id": "sw_623",
      "type": "sentence_window",
      "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data from `buffers` should be written. If `position` is not a `number`, the data will be written at the current position. **Default:** `null` Returns: {Promise}",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_624",
      "type": "sentence_window",
      "content": "If `position` is not a `number`, the data will be written at the current position. **Default:** `null` Returns: {Promise} Write an array of {ArrayBufferView}s to the file.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_625",
      "type": "sentence_window",
      "content": "**Default:** `null` Returns: {Promise} Write an array of {ArrayBufferView}s to the file. The promise is fulfilled with an object containing a two properties:",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_626",
      "type": "sentence_window",
      "content": "Write an array of {ArrayBufferView}s to the file. The promise is fulfilled with an object containing a two properties: `bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_627",
      "type": "sentence_window",
      "content": "The promise is fulfilled with an object containing a two properties: `bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input. It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_628",
      "type": "sentence_window",
      "content": "`bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input. It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_629",
      "type": "sentence_window",
      "content": "It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected). On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_630",
      "type": "sentence_window",
      "content": "On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_631",
      "type": "sentence_context",
      "content": "[`filehandle.writev(buffers[, position])`] `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data from `buffers` should be written.",
      "position": 0
    },
    {
      "id": "sc_632",
      "type": "sentence_context",
      "content": "[`filehandle.writev(buffers[, position])`] [Previous: `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `p...] If `position` is not a `number`, the data will be written at the current position.",
      "position": 1
    },
    {
      "id": "sc_633",
      "type": "sentence_context",
      "content": "[`filehandle.writev(buffers[, position])`] [Previous: If `position` is not a `number`, the data will be ...] **Default:** `null` Returns: {Promise}",
      "position": 2
    },
    {
      "id": "sc_634",
      "type": "sentence_context",
      "content": "[`filehandle.writev(buffers[, position])`] [Previous: **Default:** `null` Returns: {Promise}...] Write an array of {ArrayBufferView}s to the file.",
      "position": 3
    },
    {
      "id": "sc_635",
      "type": "sentence_context",
      "content": "[`filehandle.writev(buffers[, position])`] [Previous: Write an array of {ArrayBufferView}s to the file....] The promise is fulfilled with an object containing a two properties:",
      "position": 4
    },
    {
      "id": "sc_636",
      "type": "sentence_context",
      "content": "[`filehandle.writev(buffers[, position])`] [Previous: The promise is fulfilled with an object containing...] `bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input.",
      "position": 5
    },
    {
      "id": "sc_637",
      "type": "sentence_context",
      "content": "[`filehandle.writev(buffers[, position])`] [Previous: `bytesWritten` {integer} the number of bytes writt...] It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 6
    },
    {
      "id": "sc_638",
      "type": "sentence_context",
      "content": "[`filehandle.writev(buffers[, position])`] [Previous: It is unsafe to call `writev()` multiple times on ...] On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 7
    },
    {
      "id": "sc_639",
      "type": "sentence_context",
      "content": "[`filehandle.writev(buffers[, position])`] [Previous: On Linux, positional writes don't work when the fi...] The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 8
    },
    {
      "id": "s_640",
      "type": "sentence",
      "content": "`buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} `position` {integer|null} The offset from the beginning of the file where the data from `buffers` should be written.",
      "position": 0
    },
    {
      "id": "s_641",
      "type": "sentence",
      "content": "If `position` is not a `number`, the data will be written at the current position.",
      "position": 1
    },
    {
      "id": "s_642",
      "type": "sentence",
      "content": "**Default:** `null` Returns: {Promise}",
      "position": 2
    },
    {
      "id": "s_643",
      "type": "sentence",
      "content": "Write an array of {ArrayBufferView}s to the file.",
      "position": 3
    },
    {
      "id": "s_644",
      "type": "sentence",
      "content": "The promise is fulfilled with an object containing a two properties:",
      "position": 4
    },
    {
      "id": "s_645",
      "type": "sentence",
      "content": "`bytesWritten` {integer} the number of bytes written `buffers` {Buffer\\[]|TypedArray\\[]|DataView\\[]} a reference to the `buffers` input.",
      "position": 5
    },
    {
      "id": "s_646",
      "type": "sentence",
      "content": "It is unsafe to call `writev()` multiple times on the same file without waiting for the promise to be fulfilled (or rejected).",
      "position": 6
    },
    {
      "id": "s_647",
      "type": "sentence",
      "content": "On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 7
    },
    {
      "id": "s_648",
      "type": "sentence",
      "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 8
    },
    {
      "id": "sw_649",
      "type": "sentence_window",
      "content": "Calls `filehandle. close()` and returns a promise that fulfills when the filehandle is closed.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_650",
      "type": "sentence_context",
      "content": "[`filehandle[Symbol.asyncDispose]()`] Calls `filehandle.",
      "position": 0
    },
    {
      "id": "sc_651",
      "type": "sentence_context",
      "content": "[`filehandle[Symbol.asyncDispose]()`] close()` and returns a promise that fulfills when the filehandle is closed.",
      "position": 1
    },
    {
      "id": "s_652",
      "type": "sentence",
      "content": "Calls `filehandle.",
      "position": 0
    },
    {
      "id": "s_653",
      "type": "sentence",
      "content": "close()` and returns a promise that fulfills when the filehandle is closed.",
      "position": 1
    },
    {
      "id": "w_654",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.constants.F_OK` Returns: {Promise} Fulfills with `undefined` upon success. Tests a user's permissions for the file or directory specified by `path`.\nThe `mode` argument is an optional integer that specifies the accessibility\nchecks to be performed. `mode` should be either the value `fs.constants.F_OK`\nor a mask consisting of the bitwise OR of any of `fs.constants.R_OK`,\n`fs.constants.W_OK`, and `fs.constants.X_OK` (e.g.\n`fs.constants.W_OK | fs.constants.R_OK`). Check [File access constants][] for\npossible values of `mode`. If the accessibility check is successful, the promise is fulfilled with no\nvalue. If any of the accessibility checks fail, the promise is rejected\nwith an {Error} object. The following example checks if the file\n`/etc/passwd` can be read and written by the current process. Using `fsPromises.access()` to check for the accessibility of a file before\ncalling `fsPromises.open()` is not recommended. Doing so introduces a race\ncondition, since other processes may change the file's state between the two\ncalls. Instead, user code should open/read/write the file directly and handle\nthe error raised if the file is not accessible.",
      "position": 0,
      "windowSize": 160
    },
    {
      "id": "sw_655",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs. F_OK` Returns: {Promise} Fulfills with `undefined` upon success. Tests a user's permissions for the file or directory specified by `path`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_656",
      "type": "sentence_window",
      "content": "F_OK` Returns: {Promise} Fulfills with `undefined` upon success. Tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_657",
      "type": "sentence_window",
      "content": "Tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_658",
      "type": "sentence_window",
      "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_659",
      "type": "sentence_window",
      "content": "`mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_660",
      "type": "sentence_window",
      "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs. W_OK`, and `fs.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_661",
      "type": "sentence_window",
      "content": "R_OK`, `fs. W_OK`, and `fs. Check [File access constants][] for possible values of `mode`.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_662",
      "type": "sentence_window",
      "content": "W_OK`, and `fs. Check [File access constants][] for possible values of `mode`. If the accessibility check is successful, the promise is fulfilled with no value.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_663",
      "type": "sentence_window",
      "content": "Check [File access constants][] for possible values of `mode`. If the accessibility check is successful, the promise is fulfilled with no value. If any of the accessibility checks fail, the promise is rejected with an {Error} object.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_664",
      "type": "sentence_window",
      "content": "If the accessibility check is successful, the promise is fulfilled with no value. If any of the accessibility checks fail, the promise is rejected with an {Error} object. The following example checks if the file `/etc/passwd` can be read and written by the current process.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_665",
      "type": "sentence_window",
      "content": "If any of the accessibility checks fail, the promise is rejected with an {Error} object. The following example checks if the file `/etc/passwd` can be read and written by the current process. Using `fsPromises.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_666",
      "type": "sentence_window",
      "content": "The following example checks if the file `/etc/passwd` can be read and written by the current process. Using `fsPromises. access()` to check for the accessibility of a file before calling `fsPromises.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_667",
      "type": "sentence_window",
      "content": "Using `fsPromises. access()` to check for the accessibility of a file before calling `fsPromises. open()` is not recommended.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_668",
      "type": "sentence_window",
      "content": "access()` to check for the accessibility of a file before calling `fsPromises. open()` is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_669",
      "type": "sentence_window",
      "content": "open()` is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_670",
      "type": "sentence_window",
      "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
      "position": 15,
      "sentenceCount": 2
    },
    {
      "id": "sc_671",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] `path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
      "position": 0
    },
    {
      "id": "sc_672",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: `path` {string|Buffer|URL} `mode` {integer} **Defa...] F_OK` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 1
    },
    {
      "id": "sc_673",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: F_OK` Returns: {Promise} Fulfills with `undefined`...] Tests a user's permissions for the file or directory specified by `path`.",
      "position": 2
    },
    {
      "id": "sc_674",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: Tests a user's permissions for the file or directo...] The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
      "position": 3
    },
    {
      "id": "sc_675",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: The `mode` argument is an optional integer that sp...] `mode` should be either the value `fs.",
      "position": 4
    },
    {
      "id": "sc_676",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: `mode` should be either the value `fs....] F_OK` or a mask consisting of the bitwise OR of any of `fs.",
      "position": 5
    },
    {
      "id": "sc_677",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: F_OK` or a mask consisting of the bitwise OR of an...] R_OK`, `fs.",
      "position": 6
    },
    {
      "id": "sc_678",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] W_OK`, and `fs.",
      "position": 7
    },
    {
      "id": "sc_679",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] Check [File access constants][] for possible values of `mode`.",
      "position": 8
    },
    {
      "id": "sc_680",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: Check [File access constants][] for possible value...] If the accessibility check is successful, the promise is fulfilled with no value.",
      "position": 9
    },
    {
      "id": "sc_681",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: If the accessibility check is successful, the prom...] If any of the accessibility checks fail, the promise is rejected with an {Error} object.",
      "position": 10
    },
    {
      "id": "sc_682",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: If any of the accessibility checks fail, the promi...] The following example checks if the file `/etc/passwd` can be read and written by the current process.",
      "position": 11
    },
    {
      "id": "sc_683",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: The following example checks if the file `/etc/pas...] Using `fsPromises.",
      "position": 12
    },
    {
      "id": "sc_684",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] access()` to check for the accessibility of a file before calling `fsPromises.",
      "position": 13
    },
    {
      "id": "sc_685",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: access()` to check for the accessibility of a file...] open()` is not recommended.",
      "position": 14
    },
    {
      "id": "sc_686",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: open()` is not recommended....] Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
      "position": 15
    },
    {
      "id": "sc_687",
      "type": "sentence_context",
      "content": "[`fsPromises.access(path[, mode])`] [Previous: Doing so introduces a race condition, since other ...] Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
      "position": 16
    },
    {
      "id": "s_688",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
      "position": 0
    },
    {
      "id": "s_689",
      "type": "sentence",
      "content": "F_OK` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 1
    },
    {
      "id": "s_690",
      "type": "sentence",
      "content": "Tests a user's permissions for the file or directory specified by `path`.",
      "position": 2
    },
    {
      "id": "s_691",
      "type": "sentence",
      "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
      "position": 3
    },
    {
      "id": "s_692",
      "type": "sentence",
      "content": "`mode` should be either the value `fs.",
      "position": 4
    },
    {
      "id": "s_693",
      "type": "sentence",
      "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs.",
      "position": 5
    },
    {
      "id": "s_694",
      "type": "sentence",
      "content": "R_OK`, `fs.",
      "position": 6
    },
    {
      "id": "s_695",
      "type": "sentence",
      "content": "W_OK`, and `fs.",
      "position": 7
    },
    {
      "id": "s_696",
      "type": "sentence",
      "content": "Check [File access constants][] for possible values of `mode`.",
      "position": 8
    },
    {
      "id": "s_697",
      "type": "sentence",
      "content": "If the accessibility check is successful, the promise is fulfilled with no value.",
      "position": 9
    },
    {
      "id": "s_698",
      "type": "sentence",
      "content": "If any of the accessibility checks fail, the promise is rejected with an {Error} object.",
      "position": 10
    },
    {
      "id": "s_699",
      "type": "sentence",
      "content": "The following example checks if the file `/etc/passwd` can be read and written by the current process.",
      "position": 11
    },
    {
      "id": "s_700",
      "type": "sentence",
      "content": "Using `fsPromises.",
      "position": 12
    },
    {
      "id": "s_701",
      "type": "sentence",
      "content": "access()` to check for the accessibility of a file before calling `fsPromises.",
      "position": 13
    },
    {
      "id": "s_702",
      "type": "sentence",
      "content": "open()` is not recommended.",
      "position": 14
    },
    {
      "id": "s_703",
      "type": "sentence",
      "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
      "position": 15
    },
    {
      "id": "s_704",
      "type": "sentence",
      "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
      "position": 16
    },
    {
      "id": "w_705",
      "type": "window",
      "content": "`path` {string|Buffer|URL|FileHandle} filename or {FileHandle} `data` {string|Buffer} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`.\n* `flush` {boolean} If `true`, the underlying file descriptor is flushed\n  prior to closing it. **Default:** `false`. Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously append data to a file, creating the file if it does not yet\nexist. `data` can be a string or a {Buffer}. If `options` is a string, then it specifies the `encoding`. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. The `path` may be specified as a {FileHandle} that has been opened\nfor appending (using `fsPromises.open()`).",
      "position": 0,
      "windowSize": 111
    },
    {
      "id": "sw_706",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL|FileHandle} filename or {FileHandle} `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_707",
      "type": "sentence_window",
      "content": "**Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_708",
      "type": "sentence_window",
      "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`. Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_709",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously append data to a file, creating the file if it does not yet exist.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_710",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_711",
      "type": "sentence_window",
      "content": "Asynchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}. If `options` is a string, then it specifies the `encoding`.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_712",
      "type": "sentence_window",
      "content": "`data` can be a string or a {Buffer}. If `options` is a string, then it specifies the `encoding`. The `mode` option only affects the newly created file.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_713",
      "type": "sentence_window",
      "content": "If `options` is a string, then it specifies the `encoding`. The `mode` option only affects the newly created file. open()`][] for more details.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_714",
      "type": "sentence_window",
      "content": "The `mode` option only affects the newly created file. open()`][] for more details. The `path` may be specified as a {FileHandle} that has been opened for appending (using `fsPromises.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_715",
      "type": "sentence_window",
      "content": "open()`][] for more details. The `path` may be specified as a {FileHandle} that has been opened for appending (using `fsPromises.",
      "position": 9,
      "sentenceCount": 2
    },
    {
      "id": "sc_716",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] `path` {string|Buffer|URL|FileHandle} filename or {FileHandle} `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_717",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: `path` {string|Buffer|URL|FileHandle} filename or ...] **Default:** `'a'`.",
      "position": 1
    },
    {
      "id": "sc_718",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
      "position": 2
    },
    {
      "id": "sc_719",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: * `flush` {boolean} If `true`, the underlying file...] **Default:** `false`.",
      "position": 3
    },
    {
      "id": "sc_720",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 4
    },
    {
      "id": "sc_721",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Asynchronously append data to a file, creating the file if it does not yet exist.",
      "position": 5
    },
    {
      "id": "sc_722",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: Asynchronously append data to a file, creating the...] `data` can be a string or a {Buffer}.",
      "position": 6
    },
    {
      "id": "sc_723",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: `data` can be a string or a {Buffer}....] If `options` is a string, then it specifies the `encoding`.",
      "position": 7
    },
    {
      "id": "sc_724",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: If `options` is a string, then it specifies the `e...] The `mode` option only affects the newly created file.",
      "position": 8
    },
    {
      "id": "sc_725",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
      "position": 9
    },
    {
      "id": "sc_726",
      "type": "sentence_context",
      "content": "[`fsPromises.appendFile(path, data[, options])`] [Previous: open()`][] for more details....] The `path` may be specified as a {FileHandle} that has been opened for appending (using `fsPromises.",
      "position": 10
    },
    {
      "id": "s_727",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL|FileHandle} filename or {FileHandle} `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_728",
      "type": "sentence",
      "content": "**Default:** `'a'`.",
      "position": 1
    },
    {
      "id": "s_729",
      "type": "sentence",
      "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
      "position": 2
    },
    {
      "id": "s_730",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 3
    },
    {
      "id": "s_731",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 4
    },
    {
      "id": "s_732",
      "type": "sentence",
      "content": "Asynchronously append data to a file, creating the file if it does not yet exist.",
      "position": 5
    },
    {
      "id": "s_733",
      "type": "sentence",
      "content": "`data` can be a string or a {Buffer}.",
      "position": 6
    },
    {
      "id": "s_734",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the `encoding`.",
      "position": 7
    },
    {
      "id": "s_735",
      "type": "sentence",
      "content": "The `mode` option only affects the newly created file.",
      "position": 8
    },
    {
      "id": "s_736",
      "type": "sentence",
      "content": "open()`][] for more details.",
      "position": 9
    },
    {
      "id": "s_737",
      "type": "sentence",
      "content": "The `path` may be specified as a {FileHandle} that has been opened for appending (using `fsPromises.",
      "position": 10
    },
    {
      "id": "sw_738",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `mode` {string|integer} Returns: {Promise} Fulfills with `undefined` upon success. Changes the permissions of a file.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_739",
      "type": "sentence_context",
      "content": "[`fsPromises.chmod(path, mode)`] `path` {string|Buffer|URL} `mode` {string|integer} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_740",
      "type": "sentence_context",
      "content": "[`fsPromises.chmod(path, mode)`] [Previous: `path` {string|Buffer|URL} `mode` {string|integer}...] Changes the permissions of a file.",
      "position": 1
    },
    {
      "id": "s_741",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `mode` {string|integer} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_742",
      "type": "sentence",
      "content": "Changes the permissions of a file.",
      "position": 1
    },
    {
      "id": "sw_743",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success. Changes the ownership of a file.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_744",
      "type": "sentence_context",
      "content": "[`fsPromises.chown(path, uid, gid)`] `path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_745",
      "type": "sentence_context",
      "content": "[`fsPromises.chown(path, uid, gid)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} `gid` {...] Changes the ownership of a file.",
      "position": 1
    },
    {
      "id": "s_746",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_747",
      "type": "sentence",
      "content": "Changes the ownership of a file.",
      "position": 1
    },
    {
      "id": "w_748",
      "type": "window",
      "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} Optional modifiers that specify the behavior of the copy\noperation. It is possible to create a mask consisting of the bitwise OR of\ntwo or more values (e.g.\n`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`)\n**Default:** `0`.\n* `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest`\n  already exists.\n* `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create\n  a copy-on-write reflink. If the platform does not support copy-on-write,\n  then a fallback copy mechanism is used.\n* `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\n  create a copy-on-write reflink. If the platform does not support\n  copy-on-write, then the operation will fail. Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it\nalready exists. No guarantees are made about the atomicity of the copy operation. If an\nerror occurs after the destination file has been opened for writing, an attempt\nwill be made to remove the destination.",
      "position": 0,
      "windowSize": 159
    },
    {
      "id": "sw_749",
      "type": "sentence_window",
      "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} Optional modifiers that specify the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_750",
      "type": "sentence_window",
      "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs. COPYFILE_FICLONE`) **Default:** `0`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_751",
      "type": "sentence_window",
      "content": "COPYFILE_EXCL | fs. COPYFILE_FICLONE`) **Default:** `0`. COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_752",
      "type": "sentence_window",
      "content": "COPYFILE_FICLONE`) **Default:** `0`. COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_753",
      "type": "sentence_window",
      "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_754",
      "type": "sentence_window",
      "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_755",
      "type": "sentence_window",
      "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_756",
      "type": "sentence_window",
      "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail. Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_757",
      "type": "sentence_window",
      "content": "If the platform does not support copy-on-write, then the operation will fail. Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies `src` to `dest`.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_758",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_759",
      "type": "sentence_window",
      "content": "Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists. No guarantees are made about the atomicity of the copy operation.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_760",
      "type": "sentence_window",
      "content": "By default, `dest` is overwritten if it already exists. No guarantees are made about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_761",
      "type": "sentence_window",
      "content": "No guarantees are made about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination.",
      "position": 12,
      "sentenceCount": 2
    },
    {
      "id": "sc_762",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] `src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} Optional modifiers that specify the behavior of the copy operation.",
      "position": 0
    },
    {
      "id": "sc_763",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: `src` {string|Buffer|URL} source filename to copy ...] It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
      "position": 1
    },
    {
      "id": "sc_764",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: It is possible to create a mask consisting of the ...] COPYFILE_EXCL | fs.",
      "position": 2
    },
    {
      "id": "sc_765",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] COPYFILE_FICLONE`) **Default:** `0`.",
      "position": 3
    },
    {
      "id": "sc_766",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: COPYFILE_FICLONE`) **Default:** `0`....] COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
      "position": 4
    },
    {
      "id": "sc_767",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: COPYFILE_EXCL`: The copy operation will fail if `d...] COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 5
    },
    {
      "id": "sc_768",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: COPYFILE_FICLONE`: The copy operation will attempt...] If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
      "position": 6
    },
    {
      "id": "sc_769",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: If the platform does not support copy-on-write, th...] COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 7
    },
    {
      "id": "sc_770",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: COPYFILE_FICLONE_FORCE`: The copy operation will a...] If the platform does not support copy-on-write, then the operation will fail.",
      "position": 8
    },
    {
      "id": "sc_771",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: If the platform does not support copy-on-write, th...] Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 9
    },
    {
      "id": "sc_772",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Asynchronously copies `src` to `dest`.",
      "position": 10
    },
    {
      "id": "sc_773",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: Asynchronously copies `src` to `dest`....] By default, `dest` is overwritten if it already exists.",
      "position": 11
    },
    {
      "id": "sc_774",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: By default, `dest` is overwritten if it already ex...] No guarantees are made about the atomicity of the copy operation.",
      "position": 12
    },
    {
      "id": "sc_775",
      "type": "sentence_context",
      "content": "[`fsPromises.copyFile(src, dest[, mode])`] [Previous: No guarantees are made about the atomicity of the ...] If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination.",
      "position": 13
    },
    {
      "id": "s_776",
      "type": "sentence",
      "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} Optional modifiers that specify the behavior of the copy operation.",
      "position": 0
    },
    {
      "id": "s_777",
      "type": "sentence",
      "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
      "position": 1
    },
    {
      "id": "s_778",
      "type": "sentence",
      "content": "COPYFILE_EXCL | fs.",
      "position": 2
    },
    {
      "id": "s_779",
      "type": "sentence",
      "content": "COPYFILE_FICLONE`) **Default:** `0`.",
      "position": 3
    },
    {
      "id": "s_780",
      "type": "sentence",
      "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
      "position": 4
    },
    {
      "id": "s_781",
      "type": "sentence",
      "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 5
    },
    {
      "id": "s_782",
      "type": "sentence",
      "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
      "position": 6
    },
    {
      "id": "s_783",
      "type": "sentence",
      "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 7
    },
    {
      "id": "s_784",
      "type": "sentence",
      "content": "If the platform does not support copy-on-write, then the operation will fail.",
      "position": 8
    },
    {
      "id": "s_785",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 9
    },
    {
      "id": "s_786",
      "type": "sentence",
      "content": "Asynchronously copies `src` to `dest`.",
      "position": 10
    },
    {
      "id": "s_787",
      "type": "sentence",
      "content": "By default, `dest` is overwritten if it already exists.",
      "position": 11
    },
    {
      "id": "s_788",
      "type": "sentence",
      "content": "No guarantees are made about the atomicity of the copy operation.",
      "position": 12
    },
    {
      "id": "s_789",
      "type": "sentence",
      "content": "If an error occurs after the destination file has been opened for writing, an attempt will be made to remove the destination.",
      "position": 13
    },
    {
      "id": "w_790",
      "type": "window",
      "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object}\n* `dereference` {boolean} dereference symlinks. **Default:** `false`.\n* `errorOnExist` {boolean} when `force` is `false`, and the destination\n  exists, throw an error. **Default:** `false`.\n* `filter` {Function} Function to filter copied files/directories. Return\n  `true` to copy the item, `false` to ignore it. When ignoring a directory,\n  all of its contents will be skipped as well. Can also return a `Promise`\n  that resolves to `true` or `false` **Default:** `undefined`.\n  * `src` {string} source path to copy.\n  * `dest` {string} destination path to copy to.\n  * Returns: {boolean|Promise} A value that is coercible to `boolean` or\n    a `Promise` that fulfils with such value.\n* `force` {boolean} overwrite existing file or directory. The copy\n  operation will ignore errors if you set this to false and the destination\n  exists. Use the `errorOnExist` option to change this behavior.\n  **Default:** `true`.\n* `mode` {integer} modifiers for copy operation. **Default:** `0`.\n  See `mode` flag of [`fsPromises.copyFile()`][].\n* `preserveTimestamps` {boolean} When `true` timestamps from `src` will\n  be preserved. **Default:** `false`.\n* `recursive` {boolean} copy directories recursively **Default:** `false`\n* `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will\n  be skipped. **Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
      "position": 0,
      "windowSize": 244
    },
    {
      "id": "w_791",
      "type": "window",
      "content": " be preserved. **Default:** `false`.\n* `recursive` {boolean} copy directories recursively **Default:** `false`\n* `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will\n  be skipped. **Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
      "position": 180,
      "windowSize": 64
    },
    {
      "id": "sw_792",
      "type": "sentence_window",
      "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_793",
      "type": "sentence_window",
      "content": "`dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_794",
      "type": "sentence_window",
      "content": "`options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_795",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_796",
      "type": "sentence_window",
      "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`. * `filter` {Function} Function to filter copied files/directories.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_797",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_798",
      "type": "sentence_window",
      "content": "* `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_799",
      "type": "sentence_window",
      "content": "Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well. Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_800",
      "type": "sentence_window",
      "content": "When ignoring a directory, all of its contents will be skipped as well. Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`. * `src` {string} source path to copy.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_801",
      "type": "sentence_window",
      "content": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`. * `src` {string} source path to copy. * `dest` {string} destination path to copy to.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_802",
      "type": "sentence_window",
      "content": "* `src` {string} source path to copy. * `dest` {string} destination path to copy to. * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_803",
      "type": "sentence_window",
      "content": "* `dest` {string} destination path to copy to. * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value. * `force` {boolean} overwrite existing file or directory.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_804",
      "type": "sentence_window",
      "content": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value. * `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_805",
      "type": "sentence_window",
      "content": "* `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_806",
      "type": "sentence_window",
      "content": "The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior. **Default:** `true`.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_807",
      "type": "sentence_window",
      "content": "Use the `errorOnExist` option to change this behavior. **Default:** `true`. * `mode` {integer} modifiers for copy operation.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_808",
      "type": "sentence_window",
      "content": "**Default:** `true`. * `mode` {integer} modifiers for copy operation. **Default:** `0`.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_809",
      "type": "sentence_window",
      "content": "* `mode` {integer} modifiers for copy operation. **Default:** `0`. See `mode` flag of [`fsPromises.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_810",
      "type": "sentence_window",
      "content": "**Default:** `0`. See `mode` flag of [`fsPromises. copyFile()`][].",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_811",
      "type": "sentence_window",
      "content": "See `mode` flag of [`fsPromises. copyFile()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_812",
      "type": "sentence_window",
      "content": "copyFile()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_813",
      "type": "sentence_window",
      "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_814",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_815",
      "type": "sentence_window",
      "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and",
      "position": 23,
      "sentenceCount": 3
    },
    {
      "id": "sw_816",
      "type": "sentence_window",
      "content": "**Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 24,
      "sentenceCount": 3
    },
    {
      "id": "sw_817",
      "type": "sentence_window",
      "content": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 25,
      "sentenceCount": 2
    },
    {
      "id": "sc_818",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] `src` {string|URL} source path to copy.",
      "position": 0
    },
    {
      "id": "sc_819",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: `src` {string|URL} source path to copy....] `dest` {string|URL} destination path to copy to.",
      "position": 1
    },
    {
      "id": "sc_820",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: `dest` {string|URL} destination path to copy to....] `options` {Object} * `dereference` {boolean} dereference symlinks.",
      "position": 2
    },
    {
      "id": "sc_821",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: `options` {Object} * `dereference` {boolean} deref...] **Default:** `false`.",
      "position": 3
    },
    {
      "id": "sc_822",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: **Default:** `false`....] * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
      "position": 4
    },
    {
      "id": "sc_823",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `errorOnExist` {boolean} when `force` is `false`...] **Default:** `false`.",
      "position": 5
    },
    {
      "id": "sc_824",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: **Default:** `false`....] * `filter` {Function} Function to filter copied files/directories.",
      "position": 6
    },
    {
      "id": "sc_825",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `filter` {Function} Function to filter copied fi...] Return `true` to copy the item, `false` to ignore it.",
      "position": 7
    },
    {
      "id": "sc_826",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: Return `true` to copy the item, `false` to ignore ...] When ignoring a directory, all of its contents will be skipped as well.",
      "position": 8
    },
    {
      "id": "sc_827",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: When ignoring a directory, all of its contents wil...] Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
      "position": 9
    },
    {
      "id": "sc_828",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: Can also return a `Promise` that resolves to `true...] * `src` {string} source path to copy.",
      "position": 10
    },
    {
      "id": "sc_829",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `src` {string} source path to copy....] * `dest` {string} destination path to copy to.",
      "position": 11
    },
    {
      "id": "sc_830",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `dest` {string} destination path to copy to....] * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
      "position": 12
    },
    {
      "id": "sc_831",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * Returns: {boolean|Promise} A value that is coerc...] * `force` {boolean} overwrite existing file or directory.",
      "position": 13
    },
    {
      "id": "sc_832",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `force` {boolean} overwrite existing file or dir...] The copy operation will ignore errors if you set this to false and the destination exists.",
      "position": 14
    },
    {
      "id": "sc_833",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: The copy operation will ignore errors if you set t...] Use the `errorOnExist` option to change this behavior.",
      "position": 15
    },
    {
      "id": "sc_834",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: Use the `errorOnExist` option to change this behav...] **Default:** `true`.",
      "position": 16
    },
    {
      "id": "sc_835",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] * `mode` {integer} modifiers for copy operation.",
      "position": 17
    },
    {
      "id": "sc_836",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `mode` {integer} modifiers for copy operation....] **Default:** `0`.",
      "position": 18
    },
    {
      "id": "sc_837",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] See `mode` flag of [`fsPromises.",
      "position": 19
    },
    {
      "id": "sc_838",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: See `mode` flag of [`fsPromises....] copyFile()`][].",
      "position": 20
    },
    {
      "id": "sc_839",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
      "position": 21
    },
    {
      "id": "sc_840",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `preserveTimestamps` {boolean} When `true` times...] **Default:** `false`.",
      "position": 22
    },
    {
      "id": "sc_841",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: **Default:** `false`....] * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
      "position": 23
    },
    {
      "id": "sc_842",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: * `recursive` {boolean} copy directories recursive...] **Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 24
    },
    {
      "id": "sc_843",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: **Default:** `false` Returns: {Promise} Fulfills w...] Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
      "position": 25
    },
    {
      "id": "sc_844",
      "type": "sentence_context",
      "content": "[`fsPromises.cp(src, dest[, options])`] [Previous: Asynchronously copies the entire directory structu...] When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 26
    },
    {
      "id": "s_845",
      "type": "sentence",
      "content": "`src` {string|URL} source path to copy.",
      "position": 0
    },
    {
      "id": "s_846",
      "type": "sentence",
      "content": "`dest` {string|URL} destination path to copy to.",
      "position": 1
    },
    {
      "id": "s_847",
      "type": "sentence",
      "content": "`options` {Object} * `dereference` {boolean} dereference symlinks.",
      "position": 2
    },
    {
      "id": "s_848",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 3
    },
    {
      "id": "s_849",
      "type": "sentence",
      "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
      "position": 4
    },
    {
      "id": "s_850",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 5
    },
    {
      "id": "s_851",
      "type": "sentence",
      "content": "* `filter` {Function} Function to filter copied files/directories.",
      "position": 6
    },
    {
      "id": "s_852",
      "type": "sentence",
      "content": "Return `true` to copy the item, `false` to ignore it.",
      "position": 7
    },
    {
      "id": "s_853",
      "type": "sentence",
      "content": "When ignoring a directory, all of its contents will be skipped as well.",
      "position": 8
    },
    {
      "id": "s_854",
      "type": "sentence",
      "content": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
      "position": 9
    },
    {
      "id": "s_855",
      "type": "sentence",
      "content": "* `src` {string} source path to copy.",
      "position": 10
    },
    {
      "id": "s_856",
      "type": "sentence",
      "content": "* `dest` {string} destination path to copy to.",
      "position": 11
    },
    {
      "id": "s_857",
      "type": "sentence",
      "content": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
      "position": 12
    },
    {
      "id": "s_858",
      "type": "sentence",
      "content": "* `force` {boolean} overwrite existing file or directory.",
      "position": 13
    },
    {
      "id": "s_859",
      "type": "sentence",
      "content": "The copy operation will ignore errors if you set this to false and the destination exists.",
      "position": 14
    },
    {
      "id": "s_860",
      "type": "sentence",
      "content": "Use the `errorOnExist` option to change this behavior.",
      "position": 15
    },
    {
      "id": "s_861",
      "type": "sentence",
      "content": "**Default:** `true`.",
      "position": 16
    },
    {
      "id": "s_862",
      "type": "sentence",
      "content": "* `mode` {integer} modifiers for copy operation.",
      "position": 17
    },
    {
      "id": "s_863",
      "type": "sentence",
      "content": "**Default:** `0`.",
      "position": 18
    },
    {
      "id": "s_864",
      "type": "sentence",
      "content": "See `mode` flag of [`fsPromises.",
      "position": 19
    },
    {
      "id": "s_865",
      "type": "sentence",
      "content": "copyFile()`][].",
      "position": 20
    },
    {
      "id": "s_866",
      "type": "sentence",
      "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
      "position": 21
    },
    {
      "id": "s_867",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 22
    },
    {
      "id": "s_868",
      "type": "sentence",
      "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
      "position": 23
    },
    {
      "id": "s_869",
      "type": "sentence",
      "content": "**Default:** `false` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 24
    },
    {
      "id": "s_870",
      "type": "sentence",
      "content": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
      "position": 25
    },
    {
      "id": "s_871",
      "type": "sentence",
      "content": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 26
    },
    {
      "id": "w_872",
      "type": "window",
      "content": "`pattern` {string|string\\[]} `options` {Object}\n* `cwd` {string|URL} current working directory. **Default:** `process.cwd()`\n* `exclude` {Function|string\\[]} Function to filter out files/directories or a\n  list of glob patterns to be excluded. If a function is provided, return\n  `true` to exclude the item, `false` to include it. **Default:** `undefined`.\n  If a string array is provided, each string should be a glob pattern that\n  specifies paths to exclude. Note: Negation patterns (e.g., '!foo.js') are\n  not supported.\n* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents,\n  `false` otherwise. **Default:** `false`. Returns: {AsyncIterator} An AsyncIterator that yields the paths of files\nthat match the pattern.",
      "position": 0,
      "windowSize": 104
    },
    {
      "id": "sw_873",
      "type": "sentence_window",
      "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory. **Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_874",
      "type": "sentence_window",
      "content": "**Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_875",
      "type": "sentence_window",
      "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_876",
      "type": "sentence_window",
      "content": "If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`. If a string array is provided, each string should be a glob pattern that specifies paths to exclude.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_877",
      "type": "sentence_window",
      "content": "**Default:** `undefined`. If a string array is provided, each string should be a glob pattern that specifies paths to exclude. Note: Negation patterns (e.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_878",
      "type": "sentence_window",
      "content": "If a string array is provided, each string should be a glob pattern that specifies paths to exclude. Note: Negation patterns (e. js') are not supported.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_879",
      "type": "sentence_window",
      "content": "Note: Negation patterns (e. js') are not supported. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_880",
      "type": "sentence_window",
      "content": "js') are not supported. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_881",
      "type": "sentence_window",
      "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`. Returns: {AsyncIterator} An AsyncIterator that yields the paths of files that match the pattern.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_882",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {AsyncIterator} An AsyncIterator that yields the paths of files that match the pattern.",
      "position": 9,
      "sentenceCount": 2
    },
    {
      "id": "sc_883",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] `pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
      "position": 0
    },
    {
      "id": "sc_884",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] [Previous: `pattern` {string|string\\[]} `options` {Object} * ...] **Default:** `process.",
      "position": 1
    },
    {
      "id": "sc_885",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] [Previous: **Default:** `process....] cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
      "position": 2
    },
    {
      "id": "sc_886",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] [Previous: cwd()` * `exclude` {Function|string\\[]} Function t...] If a function is provided, return `true` to exclude the item, `false` to include it.",
      "position": 3
    },
    {
      "id": "sc_887",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] [Previous: If a function is provided, return `true` to exclud...] **Default:** `undefined`.",
      "position": 4
    },
    {
      "id": "sc_888",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] [Previous: **Default:** `undefined`....] If a string array is provided, each string should be a glob pattern that specifies paths to exclude.",
      "position": 5
    },
    {
      "id": "sc_889",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] [Previous: If a string array is provided, each string should ...] Note: Negation patterns (e.",
      "position": 6
    },
    {
      "id": "sc_890",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] [Previous: Note: Negation patterns (e....] js') are not supported.",
      "position": 7
    },
    {
      "id": "sc_891",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] [Previous: js') are not supported....] * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
      "position": 8
    },
    {
      "id": "sc_892",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] [Previous: * `withFileTypes` {boolean} `true` if the glob sho...] **Default:** `false`.",
      "position": 9
    },
    {
      "id": "sc_893",
      "type": "sentence_context",
      "content": "[`fsPromises.glob(pattern[, options])`] [Previous: **Default:** `false`....] Returns: {AsyncIterator} An AsyncIterator that yields the paths of files that match the pattern.",
      "position": 10
    },
    {
      "id": "s_894",
      "type": "sentence",
      "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
      "position": 0
    },
    {
      "id": "s_895",
      "type": "sentence",
      "content": "**Default:** `process.",
      "position": 1
    },
    {
      "id": "s_896",
      "type": "sentence",
      "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
      "position": 2
    },
    {
      "id": "s_897",
      "type": "sentence",
      "content": "If a function is provided, return `true` to exclude the item, `false` to include it.",
      "position": 3
    },
    {
      "id": "s_898",
      "type": "sentence",
      "content": "**Default:** `undefined`.",
      "position": 4
    },
    {
      "id": "s_899",
      "type": "sentence",
      "content": "If a string array is provided, each string should be a glob pattern that specifies paths to exclude.",
      "position": 5
    },
    {
      "id": "s_900",
      "type": "sentence",
      "content": "Note: Negation patterns (e.",
      "position": 6
    },
    {
      "id": "s_901",
      "type": "sentence",
      "content": "js') are not supported.",
      "position": 7
    },
    {
      "id": "s_902",
      "type": "sentence",
      "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
      "position": 8
    },
    {
      "id": "s_903",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 9
    },
    {
      "id": "s_904",
      "type": "sentence",
      "content": "Returns: {AsyncIterator} An AsyncIterator that yields the paths of files that match the pattern.",
      "position": 10
    },
    {
      "id": "w_905",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} Returns: {Promise} Fulfills with `undefined` upon success. Changes the permissions on a symbolic link. This method is only implemented on macOS.",
      "position": 0,
      "windowSize": 25
    },
    {
      "id": "sw_906",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} Returns: {Promise} Fulfills with `undefined` upon success. Changes the permissions on a symbolic link. This method is only implemented on macOS.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_907",
      "type": "sentence_window",
      "content": "Changes the permissions on a symbolic link. This method is only implemented on macOS.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_908",
      "type": "sentence_context",
      "content": "[`fsPromises.lchmod(path, mode)`] `path` {string|Buffer|URL} `mode` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_909",
      "type": "sentence_context",
      "content": "[`fsPromises.lchmod(path, mode)`] [Previous: `path` {string|Buffer|URL} `mode` {integer} Return...] Changes the permissions on a symbolic link.",
      "position": 1
    },
    {
      "id": "sc_910",
      "type": "sentence_context",
      "content": "[`fsPromises.lchmod(path, mode)`] [Previous: Changes the permissions on a symbolic link....] This method is only implemented on macOS.",
      "position": 2
    },
    {
      "id": "s_911",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `mode` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_912",
      "type": "sentence",
      "content": "Changes the permissions on a symbolic link.",
      "position": 1
    },
    {
      "id": "s_913",
      "type": "sentence",
      "content": "This method is only implemented on macOS.",
      "position": 2
    },
    {
      "id": "w_914",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise}  Fulfills with `undefined` upon success. Changes the ownership on a symbolic link.",
      "position": 0,
      "windowSize": 21
    },
    {
      "id": "sw_915",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success. Changes the ownership on a symbolic link.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_916",
      "type": "sentence_context",
      "content": "[`fsPromises.lchown(path, uid, gid)`] `path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_917",
      "type": "sentence_context",
      "content": "[`fsPromises.lchown(path, uid, gid)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} `gid` {...] Changes the ownership on a symbolic link.",
      "position": 1
    },
    {
      "id": "s_918",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_919",
      "type": "sentence",
      "content": "Changes the ownership on a symbolic link.",
      "position": 1
    },
    {
      "id": "w_920",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise}  Fulfills with `undefined` upon success. Changes the access and modification times of a file in the same way as\n[`fsPromises.utimes()`][], with the difference that if the path refers to a\nsymbolic link, then the link is not dereferenced: instead, the timestamps of\nthe symbolic link itself are changed.",
      "position": 0,
      "windowSize": 54
    },
    {
      "id": "sw_921",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success. Changes the access and modification times of a file in the same way as [`fsPromises. utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced:",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_922",
      "type": "sentence_window",
      "content": "Changes the access and modification times of a file in the same way as [`fsPromises. utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_923",
      "type": "sentence_context",
      "content": "[`fsPromises.lutimes(path, atime, mtime)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_924",
      "type": "sentence_context",
      "content": "[`fsPromises.lutimes(path, atime, mtime)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] Changes the access and modification times of a file in the same way as [`fsPromises.",
      "position": 1
    },
    {
      "id": "sc_925",
      "type": "sentence_context",
      "content": "[`fsPromises.lutimes(path, atime, mtime)`] [Previous: Changes the access and modification times of a fil...] utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.",
      "position": 2
    },
    {
      "id": "s_926",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_927",
      "type": "sentence",
      "content": "Changes the access and modification times of a file in the same way as [`fsPromises.",
      "position": 1
    },
    {
      "id": "s_928",
      "type": "sentence",
      "content": "utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.",
      "position": 2
    },
    {
      "id": "w_929",
      "type": "window",
      "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise}  Fulfills with `undefined` upon success. Creates a new link from the `existingPath` to the `newPath`. See the POSIX\nlink(2) documentation for more detail.",
      "position": 0,
      "windowSize": 29
    },
    {
      "id": "sw_930",
      "type": "sentence_window",
      "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success. Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_931",
      "type": "sentence_window",
      "content": "Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_932",
      "type": "sentence_context",
      "content": "[`fsPromises.link(existingPath, newPath)`] `existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_933",
      "type": "sentence_context",
      "content": "[`fsPromises.link(existingPath, newPath)`] [Previous: `existingPath` {string|Buffer|URL} `newPath` {stri...] Creates a new link from the `existingPath` to the `newPath`.",
      "position": 1
    },
    {
      "id": "sc_934",
      "type": "sentence_context",
      "content": "[`fsPromises.link(existingPath, newPath)`] [Previous: Creates a new link from the `existingPath` to the ...] See the POSIX link(2) documentation for more detail.",
      "position": 2
    },
    {
      "id": "s_935",
      "type": "sentence",
      "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_936",
      "type": "sentence",
      "content": "Creates a new link from the `existingPath` to the `newPath`.",
      "position": 1
    },
    {
      "id": "s_937",
      "type": "sentence",
      "content": "See the POSIX link(2) documentation for more detail.",
      "position": 2
    },
    {
      "id": "w_938",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise}  Fulfills with the {fs.Stats} object for the given\nsymbolic link `path`. Equivalent to [`fsPromises.stat()`][] unless `path` refers to a symbolic link,\nin which case the link itself is stat-ed, not the file that it refers to.\nRefer to the POSIX lstat(2) document for more detail.",
      "position": 0,
      "windowSize": 66
    },
    {
      "id": "sw_939",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_940",
      "type": "sentence_window",
      "content": "Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with the {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_941",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {Promise} Fulfills with the {fs. Stats} object for the given symbolic link `path`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_942",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with the {fs. Stats} object for the given symbolic link `path`. Equivalent to [`fsPromises.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_943",
      "type": "sentence_window",
      "content": "Stats} object for the given symbolic link `path`. Equivalent to [`fsPromises. stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_944",
      "type": "sentence_window",
      "content": "Equivalent to [`fsPromises. stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to. Refer to the POSIX lstat(2) document for more detail.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_945",
      "type": "sentence_window",
      "content": "stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to. Refer to the POSIX lstat(2) document for more detail.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_946",
      "type": "sentence_context",
      "content": "[`fsPromises.lstat(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_947",
      "type": "sentence_context",
      "content": "[`fsPromises.lstat(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_948",
      "type": "sentence_context",
      "content": "[`fsPromises.lstat(path[, options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_949",
      "type": "sentence_context",
      "content": "[`fsPromises.lstat(path[, options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with the {fs.",
      "position": 3
    },
    {
      "id": "sc_950",
      "type": "sentence_context",
      "content": "[`fsPromises.lstat(path[, options])`] [Previous: Returns: {Promise} Fulfills with the {fs....] Stats} object for the given symbolic link `path`.",
      "position": 4
    },
    {
      "id": "sc_951",
      "type": "sentence_context",
      "content": "[`fsPromises.lstat(path[, options])`] [Previous: Stats} object for the given symbolic link `path`....] Equivalent to [`fsPromises.",
      "position": 5
    },
    {
      "id": "sc_952",
      "type": "sentence_context",
      "content": "[`fsPromises.lstat(path[, options])`] [Previous: Equivalent to [`fsPromises....] stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to.",
      "position": 6
    },
    {
      "id": "sc_953",
      "type": "sentence_context",
      "content": "[`fsPromises.lstat(path[, options])`] [Previous: stat()`][] unless `path` refers to a symbolic link...] Refer to the POSIX lstat(2) document for more detail.",
      "position": 7
    },
    {
      "id": "s_954",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_955",
      "type": "sentence",
      "content": "Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_956",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_957",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with the {fs.",
      "position": 3
    },
    {
      "id": "s_958",
      "type": "sentence",
      "content": "Stats} object for the given symbolic link `path`.",
      "position": 4
    },
    {
      "id": "s_959",
      "type": "sentence",
      "content": "Equivalent to [`fsPromises.",
      "position": 5
    },
    {
      "id": "s_960",
      "type": "sentence",
      "content": "stat()`][] unless `path` refers to a symbolic link, in which case the link itself is stat-ed, not the file that it refers to.",
      "position": 6
    },
    {
      "id": "s_961",
      "type": "sentence",
      "content": "Refer to the POSIX lstat(2) document for more detail.",
      "position": 7
    },
    {
      "id": "w_962",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object|integer}\n* `recursive` {boolean} **Default:** `false`\n* `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. Returns: {Promise} Upon success, fulfills with `undefined` if `recursive`\nis `false`, or the first directory path created if `recursive` is `true`. Asynchronously creates a directory. The optional `options` argument can be an integer specifying `mode` (permission\nand sticky bits), or an object with a `mode` property and a `recursive`\nproperty indicating whether parent directories should be created. Calling\n`fsPromises.mkdir()` when `path` is a directory that exists results in a\nrejection only when `recursive` is false.",
      "position": 0,
      "windowSize": 86
    },
    {
      "id": "sw_963",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_964",
      "type": "sentence_window",
      "content": "**Default:** `0o777`. Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`. Asynchronously creates a directory.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_965",
      "type": "sentence_window",
      "content": "Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`. Asynchronously creates a directory. The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_966",
      "type": "sentence_window",
      "content": "Asynchronously creates a directory. The optional `options` argument can be an integer specifying `mode` (permission and sticky bits) or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_967",
      "type": "sentence_window",
      "content": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits) or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created. Calling `fsPromises.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_968",
      "type": "sentence_window",
      "content": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created. Calling `fsPromises. mkdir()` when `path` is a directory that exists results in a rejection only when `recursive` is false.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_969",
      "type": "sentence_window",
      "content": "Calling `fsPromises. mkdir()` when `path` is a directory that exists results in a rejection only when `recursive` is false.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_970",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdir(path[, options])`] `path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
      "position": 0
    },
    {
      "id": "sc_971",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdir(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object|integ...] **Default:** `0o777`.",
      "position": 1
    },
    {
      "id": "sc_972",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdir(path[, options])`] [Previous: **Default:** `0o777`....] Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`.",
      "position": 2
    },
    {
      "id": "sc_973",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdir(path[, options])`] [Previous: Returns: {Promise} Upon success, fulfills with `un...] Asynchronously creates a directory.",
      "position": 3
    },
    {
      "id": "sc_974",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdir(path[, options])`] [Previous: Asynchronously creates a directory....] The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)",
      "position": 4
    },
    {
      "id": "sc_975",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdir(path[, options])`] [Previous: The optional `options` argument can be an integer ...] or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
      "position": 5
    },
    {
      "id": "sc_976",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdir(path[, options])`] [Previous: or an object with a `mode` property and a `recursi...] Calling `fsPromises.",
      "position": 6
    },
    {
      "id": "sc_977",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdir(path[, options])`] mkdir()` when `path` is a directory that exists results in a rejection only when `recursive` is false.",
      "position": 7
    },
    {
      "id": "s_978",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
      "position": 0
    },
    {
      "id": "s_979",
      "type": "sentence",
      "content": "**Default:** `0o777`.",
      "position": 1
    },
    {
      "id": "s_980",
      "type": "sentence",
      "content": "Returns: {Promise} Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`.",
      "position": 2
    },
    {
      "id": "s_981",
      "type": "sentence",
      "content": "Asynchronously creates a directory.",
      "position": 3
    },
    {
      "id": "s_982",
      "type": "sentence",
      "content": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)",
      "position": 4
    },
    {
      "id": "s_983",
      "type": "sentence",
      "content": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
      "position": 5
    },
    {
      "id": "s_984",
      "type": "sentence",
      "content": "Calling `fsPromises.",
      "position": 6
    },
    {
      "id": "s_985",
      "type": "sentence",
      "content": "mkdir()` when `path` is a directory that exists results in a rejection only when `recursive` is false.",
      "position": 7
    },
    {
      "id": "w_986",
      "type": "window",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {Promise}  Fulfills with a string containing the file system path\nof the newly created temporary directory. Creates a unique temporary directory. A unique directory name is generated by\nappending six random characters to the end of the provided `prefix`. Due to\nplatform inconsistencies, avoid trailing `X` characters in `prefix`. Some\nplatforms, notably the BSDs, can return more than six random characters, and\nreplace trailing `X` characters in `prefix` with random characters. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use. The `fsPromises.mkdtemp()` method will append the six randomly selected\ncharacters directly to the `prefix` string. For instance, given a directory\n`/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the\n`prefix` must end with a trailing platform-specific path separator\n(`require('node:path').sep`).",
      "position": 0,
      "windowSize": 138
    },
    {
      "id": "sw_987",
      "type": "sentence_window",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a string containing the file system path of the newly created temporary directory. Creates a unique temporary directory. A unique directory name is generated by appending six random characters to the end of the",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_988",
      "type": "sentence_window",
      "content": "Creates a unique temporary directory. A unique directory name is generated by appending six random characters to the end of the provided `prefix`. Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_989",
      "type": "sentence_window",
      "content": "A unique directory name is generated by appending six random characters to the end of the provided `prefix`. Due to platform inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_990",
      "type": "sentence_window",
      "content": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_991",
      "type": "sentence_window",
      "content": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use. The `fsPromises.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_992",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use. The `fsPromises. mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_993",
      "type": "sentence_window",
      "content": "The `fsPromises. mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string. For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_994",
      "type": "sentence_window",
      "content": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string. For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_995",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtemp(prefix[, options])`] `prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a string containing the file system path of the newly created temporary directory.",
      "position": 0
    },
    {
      "id": "sc_996",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: `prefix` {string|Buffer|URL} `options` {string|Obj...] Creates a unique temporary directory.",
      "position": 1
    },
    {
      "id": "sc_997",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: Creates a unique temporary directory....] A unique directory name is generated by appending six random characters to the end of the provided `prefix`.",
      "position": 2
    },
    {
      "id": "sc_998",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: A unique directory name is generated by appending ...] Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
      "position": 3
    },
    {
      "id": "sc_999",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: Due to platform inconsistencies, avoid trailing `X...] Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
      "position": 4
    },
    {
      "id": "sc_1000",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: Some platforms, notably the BSDs, can return more ...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 5
    },
    {
      "id": "sc_1001",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: The optional `options` argument can be a string sp...] The `fsPromises.",
      "position": 6
    },
    {
      "id": "sc_1002",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtemp(prefix[, options])`] mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
      "position": 7
    },
    {
      "id": "sc_1003",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtemp(prefix[, options])`] [Previous: mkdtemp()` method will append the six randomly sel...] For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
      "position": 8
    },
    {
      "id": "s_1004",
      "type": "sentence",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a string containing the file system path of the newly created temporary directory.",
      "position": 0
    },
    {
      "id": "s_1005",
      "type": "sentence",
      "content": "Creates a unique temporary directory.",
      "position": 1
    },
    {
      "id": "s_1006",
      "type": "sentence",
      "content": "A unique directory name is generated by appending six random characters to the end of the provided `prefix`.",
      "position": 2
    },
    {
      "id": "s_1007",
      "type": "sentence",
      "content": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
      "position": 3
    },
    {
      "id": "s_1008",
      "type": "sentence",
      "content": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
      "position": 4
    },
    {
      "id": "s_1009",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 5
    },
    {
      "id": "s_1010",
      "type": "sentence",
      "content": "The `fsPromises.",
      "position": 6
    },
    {
      "id": "s_1011",
      "type": "sentence",
      "content": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
      "position": 7
    },
    {
      "id": "s_1012",
      "type": "sentence",
      "content": "For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
      "position": 8
    },
    {
      "id": "w_1013",
      "type": "window",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a Promise for an async-disposable Object:\n* `path` {string} The path of the created directory.\n* `remove` {AsyncFunction} A function which removes the created directory.\n* `[Symbol.asyncDispose]` {AsyncFunction} The same as `remove`. The resulting Promise holds an async-disposable object whose `path` property\nholds the created directory path. When the object is disposed, the directory\nand its contents will be removed asynchronously if it still exists. If the\ndirectory cannot be deleted, disposal will throw an error. The object has an\nasync `remove()` method which will perform the same task. Both this function and the disposal function on the resulting object are\nasync, so it should be used with `await` + `await using` as in\n`await using dir = await fsPromises.mkdtempDisposable('prefix')`. For detailed information, see the documentation of [`fsPromises.mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use.",
      "position": 0,
      "windowSize": 154
    },
    {
      "id": "sw_1014",
      "type": "sentence_window",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a Promise for an async-disposable Object: * `path` {string} The path of the created directory. * `remove` {AsyncFunction} A function which removes the created directory. * `[Symbol.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1015",
      "type": "sentence_window",
      "content": "* `remove` {AsyncFunction} A function which removes the created directory. * `[Symbol. asyncDispose]` {AsyncFunction} The same as `remove`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1016",
      "type": "sentence_window",
      "content": "* `[Symbol. asyncDispose]` {AsyncFunction} The same as `remove`. The resulting Promise holds an async-disposable object whose `path` property holds the created directory path.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1017",
      "type": "sentence_window",
      "content": "asyncDispose]` {AsyncFunction} The same as `remove`. The resulting Promise holds an async-disposable object whose `path` property holds the created directory path. When the object is disposed, the directory and its contents will be removed asynchronously if it still exists.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1018",
      "type": "sentence_window",
      "content": "The resulting Promise holds an async-disposable object whose `path` property holds the created directory path. When the object is disposed, the directory and its contents will be removed asynchronously if it still exists. If the directory cannot be deleted, disposal will throw an error.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1019",
      "type": "sentence_window",
      "content": "When the object is disposed, the directory and its contents will be removed asynchronously if it still exists. If the directory cannot be deleted, disposal will throw an error. The object has an async `remove()` method which will perform the same task.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1020",
      "type": "sentence_window",
      "content": "If the directory cannot be deleted, disposal will throw an error. The object has an async `remove()` method which will perform the same task. Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1021",
      "type": "sentence_window",
      "content": "The object has an async `remove()` method which will perform the same task. Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises. mkdtempDisposable('prefix')`.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1022",
      "type": "sentence_window",
      "content": "Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises. mkdtempDisposable('prefix')`. For detailed information, see the documentation of [`fsPromises.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1023",
      "type": "sentence_window",
      "content": "mkdtempDisposable('prefix')`. For detailed information, see the documentation of [`fsPromises. mkdtemp()`][].",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1024",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of [`fsPromises. mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1025",
      "type": "sentence_window",
      "content": "mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 11,
      "sentenceCount": 2
    },
    {
      "id": "sc_1026",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] `prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a Promise for an async-disposable Object: * `path` {string} The path of the created directory.",
      "position": 0
    },
    {
      "id": "sc_1027",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: `prefix` {string|Buffer|URL} `options` {string|Obj...] * `remove` {AsyncFunction} A function which removes the created directory.",
      "position": 1
    },
    {
      "id": "sc_1028",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: * `remove` {AsyncFunction} A function which remove...] * `[Symbol.",
      "position": 2
    },
    {
      "id": "sc_1029",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] asyncDispose]` {AsyncFunction} The same as `remove`.",
      "position": 3
    },
    {
      "id": "sc_1030",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: asyncDispose]` {AsyncFunction} The same as `remove...] The resulting Promise holds an async-disposable object whose `path` property holds the created directory path.",
      "position": 4
    },
    {
      "id": "sc_1031",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: The resulting Promise holds an async-disposable ob...] When the object is disposed, the directory and its contents will be removed asynchronously if it still exists.",
      "position": 5
    },
    {
      "id": "sc_1032",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: When the object is disposed, the directory and its...] If the directory cannot be deleted, disposal will throw an error.",
      "position": 6
    },
    {
      "id": "sc_1033",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: If the directory cannot be deleted, disposal will ...] The object has an async `remove()` method which will perform the same task.",
      "position": 7
    },
    {
      "id": "sc_1034",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: The object has an async `remove()` method which wi...] Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises.",
      "position": 8
    },
    {
      "id": "sc_1035",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: Both this function and the disposal function on th...] mkdtempDisposable('prefix')`.",
      "position": 9
    },
    {
      "id": "sc_1036",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: mkdtempDisposable('prefix')`....] For detailed information, see the documentation of [`fsPromises.",
      "position": 10
    },
    {
      "id": "sc_1037",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] [Previous: For detailed information, see the documentation of...] mkdtemp()`][].",
      "position": 11
    },
    {
      "id": "sc_1038",
      "type": "sentence_context",
      "content": "[`fsPromises.mkdtempDisposable(prefix[, options])`] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 12
    },
    {
      "id": "s_1039",
      "type": "sentence",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with a Promise for an async-disposable Object: * `path` {string} The path of the created directory.",
      "position": 0
    },
    {
      "id": "s_1040",
      "type": "sentence",
      "content": "* `remove` {AsyncFunction} A function which removes the created directory.",
      "position": 1
    },
    {
      "id": "s_1041",
      "type": "sentence",
      "content": "* `[Symbol.",
      "position": 2
    },
    {
      "id": "s_1042",
      "type": "sentence",
      "content": "asyncDispose]` {AsyncFunction} The same as `remove`.",
      "position": 3
    },
    {
      "id": "s_1043",
      "type": "sentence",
      "content": "The resulting Promise holds an async-disposable object whose `path` property holds the created directory path.",
      "position": 4
    },
    {
      "id": "s_1044",
      "type": "sentence",
      "content": "When the object is disposed, the directory and its contents will be removed asynchronously if it still exists.",
      "position": 5
    },
    {
      "id": "s_1045",
      "type": "sentence",
      "content": "If the directory cannot be deleted, disposal will throw an error.",
      "position": 6
    },
    {
      "id": "s_1046",
      "type": "sentence",
      "content": "The object has an async `remove()` method which will perform the same task.",
      "position": 7
    },
    {
      "id": "s_1047",
      "type": "sentence",
      "content": "Both this function and the disposal function on the resulting object are async, so it should be used with `await` + `await using` as in `await using dir = await fsPromises.",
      "position": 8
    },
    {
      "id": "s_1048",
      "type": "sentence",
      "content": "mkdtempDisposable('prefix')`.",
      "position": 9
    },
    {
      "id": "s_1049",
      "type": "sentence",
      "content": "For detailed information, see the documentation of [`fsPromises.",
      "position": 10
    },
    {
      "id": "s_1050",
      "type": "sentence",
      "content": "mkdtemp()`][].",
      "position": 11
    },
    {
      "id": "s_1051",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 12
    },
    {
      "id": "w_1052",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].\n**Default:** `'r'`. `mode` {string|integer} Sets the file mode (permission and sticky bits)\nif the file is created. **Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object. Opens a {FileHandle}. Refer to the POSIX open(2) documentation for more detail. Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented\nby [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n[this MSDN page][MSDN-Using-Streams].",
      "position": 0,
      "windowSize": 90
    },
    {
      "id": "sw_1053",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][]. **Default:** `'r'`. `mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1054",
      "type": "sentence_window",
      "content": "**Default:** `'r'`. `mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created. **Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1055",
      "type": "sentence_window",
      "content": "`mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created. **Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object. Opens a {FileHandle}.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1056",
      "type": "sentence_window",
      "content": "**Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object. Opens a {FileHandle}. Refer to the POSIX open(2) documentation for more detail.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1057",
      "type": "sentence_window",
      "content": "Opens a {FileHandle}. Refer to the POSIX open(2) documentation for more detail. Some characters (`< > : \" / \\ | ?",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1058",
      "type": "sentence_window",
      "content": "Refer to the POSIX open(2) documentation for more detail. Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1059",
      "type": "sentence_window",
      "content": "Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains a colon, Node.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1060",
      "type": "sentence_window",
      "content": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains a colon, Node. js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1061",
      "type": "sentence_window",
      "content": "Under NTFS, if the filename contains a colon, Node. js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
      "position": 8,
      "sentenceCount": 2
    },
    {
      "id": "sc_1062",
      "type": "sentence_context",
      "content": "[`fsPromises.open(path, flags[, mode])`] `path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_1063",
      "type": "sentence_context",
      "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: `path` {string|Buffer|URL} `flags` {string|number}...] **Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "sc_1064",
      "type": "sentence_context",
      "content": "[`fsPromises.open(path, flags[, mode])`] `mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created.",
      "position": 2
    },
    {
      "id": "sc_1065",
      "type": "sentence_context",
      "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: `mode` {string|integer} Sets the file mode (permis...] **Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object.",
      "position": 3
    },
    {
      "id": "sc_1066",
      "type": "sentence_context",
      "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: **Default:** `0o666` (readable and writable) Retur...] Opens a {FileHandle}.",
      "position": 4
    },
    {
      "id": "sc_1067",
      "type": "sentence_context",
      "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: Opens a {FileHandle}....] Refer to the POSIX open(2) documentation for more detail.",
      "position": 5
    },
    {
      "id": "sc_1068",
      "type": "sentence_context",
      "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: Refer to the POSIX open(2) documentation for more ...] Some characters (`< > : \" / \\ | ?",
      "position": 6
    },
    {
      "id": "sc_1069",
      "type": "sentence_context",
      "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: Some characters (`< > : \" / \\ | ?...] *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
      "position": 7
    },
    {
      "id": "sc_1070",
      "type": "sentence_context",
      "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: *`) are reserved under Windows as documented by [N...] Under NTFS, if the filename contains a colon, Node.",
      "position": 8
    },
    {
      "id": "sc_1071",
      "type": "sentence_context",
      "content": "[`fsPromises.open(path, flags[, mode])`] [Previous: Under NTFS, if the filename contains a colon, Node...] js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
      "position": 9
    },
    {
      "id": "s_1072",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_1073",
      "type": "sentence",
      "content": "**Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "s_1074",
      "type": "sentence",
      "content": "`mode` {string|integer} Sets the file mode (permission and sticky bits) if the file is created.",
      "position": 2
    },
    {
      "id": "s_1075",
      "type": "sentence",
      "content": "**Default:** `0o666` (readable and writable) Returns: {Promise} Fulfills with a {FileHandle} object.",
      "position": 3
    },
    {
      "id": "s_1076",
      "type": "sentence",
      "content": "Opens a {FileHandle}.",
      "position": 4
    },
    {
      "id": "s_1077",
      "type": "sentence",
      "content": "Refer to the POSIX open(2) documentation for more detail.",
      "position": 5
    },
    {
      "id": "s_1078",
      "type": "sentence",
      "content": "Some characters (`< > : \" / \\ | ?",
      "position": 6
    },
    {
      "id": "s_1079",
      "type": "sentence",
      "content": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
      "position": 7
    },
    {
      "id": "s_1080",
      "type": "sentence",
      "content": "Under NTFS, if the filename contains a colon, Node.",
      "position": 8
    },
    {
      "id": "s_1081",
      "type": "sentence",
      "content": "js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
      "position": 9
    },
    {
      "id": "w_1082",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `bufferSize` {number} Number of directory entries that are buffered\n  internally when reading from the directory. Higher values lead to better\n  performance but higher memory usage. **Default:** `32`\n* `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable}\n  containing all sub files and directories. **Default:** `false` Returns: {Promise}  Fulfills with an {fs.Dir}. Asynchronously open a directory for iterative scanning. See the POSIX\nopendir(3) documentation for more detail. Creates an {fs.Dir}, which contains all further functions for reading from\nand cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the\ndirectory and subsequent read operations. Example using async iteration: When using the async iterator, the {fs.Dir} object will be automatically\nclosed after the iterator exits.",
      "position": 0,
      "windowSize": 125
    },
    {
      "id": "sw_1083",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1084",
      "type": "sentence_window",
      "content": "Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable} containing all sub files and directories. **Default:** `false` Returns: {Promise} Fulfills with an {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1085",
      "type": "sentence_window",
      "content": "**Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable} containing all sub files and directories. **Default:** `false` Returns: {Promise} Fulfills with an {fs. Asynchronously open a directory for iterative scanning.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1086",
      "type": "sentence_window",
      "content": "**Default:** `false` Returns: {Promise} Fulfills with an {fs. Asynchronously open a directory for iterative scanning. See the POSIX opendir(3) documentation for more detail.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1087",
      "type": "sentence_window",
      "content": "Asynchronously open a directory for iterative scanning. See the POSIX opendir(3) documentation for more detail. Creates an {fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1088",
      "type": "sentence_window",
      "content": "See the POSIX opendir(3) documentation for more detail. Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1089",
      "type": "sentence_window",
      "content": "Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1090",
      "type": "sentence_window",
      "content": "Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations. Example using async iteration:",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1091",
      "type": "sentence_window",
      "content": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations. Example using async iteration: When using the async iterator, the {fs.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1092",
      "type": "sentence_window",
      "content": "Example using async iteration: When using the async iterator, the {fs. Dir} object will be automatically closed after the iterator exits.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1093",
      "type": "sentence_window",
      "content": "When using the async iterator, the {fs. Dir} object will be automatically closed after the iterator exits.",
      "position": 10,
      "sentenceCount": 2
    },
    {
      "id": "sc_1094",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
      "position": 0
    },
    {
      "id": "sc_1095",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `e...] Higher values lead to better performance but higher memory usage.",
      "position": 1
    },
    {
      "id": "sc_1096",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] [Previous: Higher values lead to better performance but highe...] **Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable} containing all sub files and directories.",
      "position": 2
    },
    {
      "id": "sc_1097",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] [Previous: **Default:** `32` * `recursive` {boolean} Resolved...] **Default:** `false` Returns: {Promise} Fulfills with an {fs.",
      "position": 3
    },
    {
      "id": "sc_1098",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] [Previous: **Default:** `false` Returns: {Promise} Fulfills w...] Asynchronously open a directory for iterative scanning.",
      "position": 4
    },
    {
      "id": "sc_1099",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] [Previous: Asynchronously open a directory for iterative scan...] See the POSIX opendir(3) documentation for more detail.",
      "position": 5
    },
    {
      "id": "sc_1100",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] [Previous: See the POSIX opendir(3) documentation for more de...] Creates an {fs.",
      "position": 6
    },
    {
      "id": "sc_1101",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] Dir}, which contains all further functions for reading from and cleaning up the directory.",
      "position": 7
    },
    {
      "id": "sc_1102",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] [Previous: Dir}, which contains all further functions for rea...] The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 8
    },
    {
      "id": "sc_1103",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] [Previous: The `encoding` option sets the encoding for the `p...] Example using async iteration:",
      "position": 9
    },
    {
      "id": "sc_1104",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] [Previous: Example using async iteration:...] When using the async iterator, the {fs.",
      "position": 10
    },
    {
      "id": "sc_1105",
      "type": "sentence_context",
      "content": "[`fsPromises.opendir(path[, options])`] [Previous: When using the async iterator, the {fs....] Dir} object will be automatically closed after the iterator exits.",
      "position": 11
    },
    {
      "id": "s_1106",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
      "position": 0
    },
    {
      "id": "s_1107",
      "type": "sentence",
      "content": "Higher values lead to better performance but higher memory usage.",
      "position": 1
    },
    {
      "id": "s_1108",
      "type": "sentence",
      "content": "**Default:** `32` * `recursive` {boolean} Resolved `Dir` will be an {AsyncIterable} containing all sub files and directories.",
      "position": 2
    },
    {
      "id": "s_1109",
      "type": "sentence",
      "content": "**Default:** `false` Returns: {Promise} Fulfills with an {fs.",
      "position": 3
    },
    {
      "id": "s_1110",
      "type": "sentence",
      "content": "Asynchronously open a directory for iterative scanning.",
      "position": 4
    },
    {
      "id": "s_1111",
      "type": "sentence",
      "content": "See the POSIX opendir(3) documentation for more detail.",
      "position": 5
    },
    {
      "id": "s_1112",
      "type": "sentence",
      "content": "Creates an {fs.",
      "position": 6
    },
    {
      "id": "s_1113",
      "type": "sentence",
      "content": "Dir}, which contains all further functions for reading from and cleaning up the directory.",
      "position": 7
    },
    {
      "id": "s_1114",
      "type": "sentence",
      "content": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 8
    },
    {
      "id": "s_1115",
      "type": "sentence",
      "content": "Example using async iteration:",
      "position": 9
    },
    {
      "id": "s_1116",
      "type": "sentence",
      "content": "When using the async iterator, the {fs.",
      "position": 10
    },
    {
      "id": "s_1117",
      "type": "sentence",
      "content": "Dir} object will be automatically closed after the iterator exits.",
      "position": 11
    },
    {
      "id": "w_1118",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'`\n* `withFileTypes` {boolean} **Default:** `false`\n* `recursive` {boolean} If `true`, reads the contents of a directory\n  recursively. In recursive mode, it will list all files, sub files, and\n  directories. **Default:** `false`. Returns: {Promise}  Fulfills with an array of the names of the files in\nthe directory excluding `'.'` and `'..'`. Reads the contents of a directory. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe filenames. If the `encoding` is set to `'buffer'`, the filenames returned\nwill be passed as {Buffer} objects. If `options.withFileTypes` is set to `true`, the returned array will contain\n{fs.Dirent} objects.",
      "position": 0,
      "windowSize": 116
    },
    {
      "id": "sw_1119",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively. In recursive mode, it will list all files, sub files, and directories. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1120",
      "type": "sentence_window",
      "content": "In recursive mode, it will list all files, sub files, and directories. **Default:** `false`. Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.'",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1121",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.' ` and `'..'",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1122",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.' ` and `'..' Reads the contents of a directory.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1123",
      "type": "sentence_window",
      "content": "` and `'..' Reads the contents of a directory. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1124",
      "type": "sentence_window",
      "content": "Reads the contents of a directory. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1125",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1126",
      "type": "sentence_window",
      "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options. withFileTypes` is set to `true`, the returned array will contain {fs.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1127",
      "type": "sentence_window",
      "content": "If `options. withFileTypes` is set to `true`, the returned array will contain {fs. Dirent} objects.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1128",
      "type": "sentence_window",
      "content": "withFileTypes` is set to `true`, the returned array will contain {fs. Dirent} objects.",
      "position": 9,
      "sentenceCount": 2
    },
    {
      "id": "sc_1129",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
      "position": 0
    },
    {
      "id": "sc_1130",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] In recursive mode, it will list all files, sub files, and directories.",
      "position": 1
    },
    {
      "id": "sc_1131",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] [Previous: In recursive mode, it will list all files, sub fil...] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_1132",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.'",
      "position": 3
    },
    {
      "id": "sc_1133",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] [Previous: Returns: {Promise} Fulfills with an array of the n...] ` and `'..'",
      "position": 4
    },
    {
      "id": "sc_1134",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] Reads the contents of a directory.",
      "position": 5
    },
    {
      "id": "sc_1135",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] [Previous: Reads the contents of a directory....] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames.",
      "position": 6
    },
    {
      "id": "sc_1136",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
      "position": 7
    },
    {
      "id": "sc_1137",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] [Previous: If the `encoding` is set to `'buffer'`, the filena...] If `options.",
      "position": 8
    },
    {
      "id": "sc_1138",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] withFileTypes` is set to `true`, the returned array will contain {fs.",
      "position": 9
    },
    {
      "id": "sc_1139",
      "type": "sentence_context",
      "content": "[`fsPromises.readdir(path[, options])`] [Previous: withFileTypes` is set to `true`, the returned arra...] Dirent} objects.",
      "position": 10
    },
    {
      "id": "s_1140",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
      "position": 0
    },
    {
      "id": "s_1141",
      "type": "sentence",
      "content": "In recursive mode, it will list all files, sub files, and directories.",
      "position": 1
    },
    {
      "id": "s_1142",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_1143",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with an array of the names of the files in the directory excluding `'.'",
      "position": 3
    },
    {
      "id": "s_1144",
      "type": "sentence",
      "content": "` and `'..'",
      "position": 4
    },
    {
      "id": "s_1145",
      "type": "sentence",
      "content": "Reads the contents of a directory.",
      "position": 5
    },
    {
      "id": "s_1146",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames.",
      "position": 6
    },
    {
      "id": "s_1147",
      "type": "sentence",
      "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
      "position": 7
    },
    {
      "id": "s_1148",
      "type": "sentence",
      "content": "If `options.",
      "position": 8
    },
    {
      "id": "s_1149",
      "type": "sentence",
      "content": "withFileTypes` is set to `true`, the returned array will contain {fs.",
      "position": 9
    },
    {
      "id": "s_1150",
      "type": "sentence",
      "content": "Dirent} objects.",
      "position": 10
    },
    {
      "id": "w_1151",
      "type": "window",
      "content": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` `options` {Object|string}\n* `encoding` {string|null} **Default:** `null`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`.\n* `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise}  Fulfills with the contents of the file. Asynchronously reads the entire contents of a file. If no encoding is specified (using `options.encoding`), the data is returned\nas a {Buffer} object. Otherwise, the data will be a string. If `options` is a string, then it specifies the encoding. When the `path` is a directory, the behavior of `fsPromises.readFile()` is\nplatform-specific. On macOS, Linux, and Windows, the promise will be rejected\nwith an error. On FreeBSD, a representation of the directory's contents will be\nreturned. An example of reading a `package.json` file located in the same directory of the\nrunning code: It is possible to abort an ongoing `readFile` using an {AbortSignal}. If a\nrequest is aborted the promise returned is rejected with an `AbortError`: Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.readFile` performs. Any specified {FileHandle} has to support reading.",
      "position": 0,
      "windowSize": 172
    },
    {
      "id": "sw_1152",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1153",
      "type": "sentence_window",
      "content": "**Default:** `'r'`. * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file. Asynchronously reads the entire contents of a file.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1154",
      "type": "sentence_window",
      "content": "* `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file. Asynchronously reads the entire contents of a file. If no encoding is specified (using `options.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1155",
      "type": "sentence_window",
      "content": "Asynchronously reads the entire contents of a file. If no encoding is specified (using `options. encoding`), the data is returned as a {Buffer} object.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1156",
      "type": "sentence_window",
      "content": "If no encoding is specified (using `options. encoding`), the data is returned as a {Buffer} object. Otherwise, the data will be a string.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1157",
      "type": "sentence_window",
      "content": "encoding`), the data is returned as a {Buffer} object. Otherwise, the data will be a string. If `options` is a string, then it specifies the encoding.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1158",
      "type": "sentence_window",
      "content": "Otherwise, the data will be a string. If `options` is a string, then it specifies the encoding. When the `path` is a directory, the behavior of `fsPromises.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1159",
      "type": "sentence_window",
      "content": "If `options` is a string, then it specifies the encoding. When the `path` is a directory, the behavior of `fsPromises. readFile()` is platform-specific.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1160",
      "type": "sentence_window",
      "content": "When the `path` is a directory, the behavior of `fsPromises. readFile()` is platform-specific. On macOS, Linux, and Windows, the promise will be rejected with an error.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1161",
      "type": "sentence_window",
      "content": "readFile()` is platform-specific. On macOS, Linux, and Windows, the promise will be rejected with an error. On FreeBSD, a representation of the directory's contents will be returned.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1162",
      "type": "sentence_window",
      "content": "On macOS, Linux, and Windows, the promise will be rejected with an error. On FreeBSD, a representation of the directory's contents will be returned. An example of reading a `package.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1163",
      "type": "sentence_window",
      "content": "On FreeBSD, a representation of the directory's contents will be returned. An example of reading a `package. json` file located in the same directory of the running code:",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_1164",
      "type": "sentence_window",
      "content": "An example of reading a `package. json` file located in the same directory of the running code: It is possible to abort an ongoing `readFile` using an {AbortSignal}.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_1165",
      "type": "sentence_window",
      "content": "json` file located in the same directory of the running code: It is possible to abort an ongoing `readFile` using an {AbortSignal}. If a request is aborted the promise returned is rejected with an `AbortError`:",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_1166",
      "type": "sentence_window",
      "content": "It is possible to abort an ongoing `readFile` using an {AbortSignal}. If a request is aborted the promise returned is rejected with an `AbortError`: Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_1167",
      "type": "sentence_window",
      "content": "If a request is aborted the promise returned is rejected with an `AbortError`: Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. readFile` performs.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_1168",
      "type": "sentence_window",
      "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. readFile` performs. Any specified {FileHandle} has to support reading.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_1169",
      "type": "sentence_window",
      "content": "readFile` performs. Any specified {FileHandle} has to support reading.",
      "position": 17,
      "sentenceCount": 2
    },
    {
      "id": "sc_1170",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] `path` {string|Buffer|URL|FileHandle} filename or `FileHandle` `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_1171",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: `path` {string|Buffer|URL|FileHandle} filename or ...] **Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "sc_1172",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] * `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file.",
      "position": 2
    },
    {
      "id": "sc_1173",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: * `signal` {AbortSignal} allows aborting an in-pro...] Asynchronously reads the entire contents of a file.",
      "position": 3
    },
    {
      "id": "sc_1174",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: Asynchronously reads the entire contents of a file...] If no encoding is specified (using `options.",
      "position": 4
    },
    {
      "id": "sc_1175",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: If no encoding is specified (using `options....] encoding`), the data is returned as a {Buffer} object.",
      "position": 5
    },
    {
      "id": "sc_1176",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: encoding`), the data is returned as a {Buffer} obj...] Otherwise, the data will be a string.",
      "position": 6
    },
    {
      "id": "sc_1177",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: Otherwise, the data will be a string....] If `options` is a string, then it specifies the encoding.",
      "position": 7
    },
    {
      "id": "sc_1178",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: If `options` is a string, then it specifies the en...] When the `path` is a directory, the behavior of `fsPromises.",
      "position": 8
    },
    {
      "id": "sc_1179",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: When the `path` is a directory, the behavior of `f...] readFile()` is platform-specific.",
      "position": 9
    },
    {
      "id": "sc_1180",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: readFile()` is platform-specific....] On macOS, Linux, and Windows, the promise will be rejected with an error.",
      "position": 10
    },
    {
      "id": "sc_1181",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: On macOS, Linux, and Windows, the promise will be ...] On FreeBSD, a representation of the directory's contents will be returned.",
      "position": 11
    },
    {
      "id": "sc_1182",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: On FreeBSD, a representation of the directory's co...] An example of reading a `package.",
      "position": 12
    },
    {
      "id": "sc_1183",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: An example of reading a `package....] json` file located in the same directory of the running code:",
      "position": 13
    },
    {
      "id": "sc_1184",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: json` file located in the same directory of the ru...] It is possible to abort an ongoing `readFile` using an {AbortSignal}.",
      "position": 14
    },
    {
      "id": "sc_1185",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: It is possible to abort an ongoing `readFile` usin...] If a request is aborted the promise returned is rejected with an `AbortError`:",
      "position": 15
    },
    {
      "id": "sc_1186",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: If a request is aborted the promise returned is re...] Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 16
    },
    {
      "id": "sc_1187",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] [Previous: Aborting an ongoing request does not abort individ...] readFile` performs.",
      "position": 17
    },
    {
      "id": "sc_1188",
      "type": "sentence_context",
      "content": "[`fsPromises.readFile(path[, options])`] Any specified {FileHandle} has to support reading.",
      "position": 18
    },
    {
      "id": "s_1189",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL|FileHandle} filename or `FileHandle` `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_1190",
      "type": "sentence",
      "content": "**Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "s_1191",
      "type": "sentence",
      "content": "* `signal` {AbortSignal} allows aborting an in-progress readFile Returns: {Promise} Fulfills with the contents of the file.",
      "position": 2
    },
    {
      "id": "s_1192",
      "type": "sentence",
      "content": "Asynchronously reads the entire contents of a file.",
      "position": 3
    },
    {
      "id": "s_1193",
      "type": "sentence",
      "content": "If no encoding is specified (using `options.",
      "position": 4
    },
    {
      "id": "s_1194",
      "type": "sentence",
      "content": "encoding`), the data is returned as a {Buffer} object.",
      "position": 5
    },
    {
      "id": "s_1195",
      "type": "sentence",
      "content": "Otherwise, the data will be a string.",
      "position": 6
    },
    {
      "id": "s_1196",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the encoding.",
      "position": 7
    },
    {
      "id": "s_1197",
      "type": "sentence",
      "content": "When the `path` is a directory, the behavior of `fsPromises.",
      "position": 8
    },
    {
      "id": "s_1198",
      "type": "sentence",
      "content": "readFile()` is platform-specific.",
      "position": 9
    },
    {
      "id": "s_1199",
      "type": "sentence",
      "content": "On macOS, Linux, and Windows, the promise will be rejected with an error.",
      "position": 10
    },
    {
      "id": "s_1200",
      "type": "sentence",
      "content": "On FreeBSD, a representation of the directory's contents will be returned.",
      "position": 11
    },
    {
      "id": "s_1201",
      "type": "sentence",
      "content": "An example of reading a `package.",
      "position": 12
    },
    {
      "id": "s_1202",
      "type": "sentence",
      "content": "json` file located in the same directory of the running code:",
      "position": 13
    },
    {
      "id": "s_1203",
      "type": "sentence",
      "content": "It is possible to abort an ongoing `readFile` using an {AbortSignal}.",
      "position": 14
    },
    {
      "id": "s_1204",
      "type": "sentence",
      "content": "If a request is aborted the promise returned is rejected with an `AbortError`:",
      "position": 15
    },
    {
      "id": "s_1205",
      "type": "sentence",
      "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 16
    },
    {
      "id": "s_1206",
      "type": "sentence",
      "content": "readFile` performs.",
      "position": 17
    },
    {
      "id": "s_1207",
      "type": "sentence",
      "content": "Any specified {FileHandle} has to support reading.",
      "position": 18
    },
    {
      "id": "w_1208",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the `linkString` upon success. Reads the contents of the symbolic link referred to by `path`. See the POSIX\nreadlink(2) documentation for more detail. The promise is fulfilled with the\n`linkString` upon success. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe link path returned. If the `encoding` is set to `'buffer'`, the link path\nreturned will be passed as a {Buffer} object.",
      "position": 0,
      "windowSize": 86
    },
    {
      "id": "sw_1209",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the `linkString` upon success. Reads the contents of the symbolic link referred to by `path`. See the POSIX readlink(2) documentation for more detail.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1210",
      "type": "sentence_window",
      "content": "Reads the contents of the symbolic link referred to by `path`. See the POSIX readlink(2) documentation for more detail. The promise is fulfilled with the `linkString` upon success.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1211",
      "type": "sentence_window",
      "content": "See the POSIX readlink(2) documentation for more detail. The promise is fulfilled with the `linkString` upon success. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1212",
      "type": "sentence_window",
      "content": "The promise is fulfilled with the `linkString` upon success. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1213",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_1214",
      "type": "sentence_context",
      "content": "[`fsPromises.readlink(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the `linkString` upon success.",
      "position": 0
    },
    {
      "id": "sc_1215",
      "type": "sentence_context",
      "content": "[`fsPromises.readlink(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Reads the contents of the symbolic link referred to by `path`.",
      "position": 1
    },
    {
      "id": "sc_1216",
      "type": "sentence_context",
      "content": "[`fsPromises.readlink(path[, options])`] [Previous: Reads the contents of the symbolic link referred t...] See the POSIX readlink(2) documentation for more detail.",
      "position": 2
    },
    {
      "id": "sc_1217",
      "type": "sentence_context",
      "content": "[`fsPromises.readlink(path[, options])`] [Previous: See the POSIX readlink(2) documentation for more d...] The promise is fulfilled with the `linkString` upon success.",
      "position": 3
    },
    {
      "id": "sc_1218",
      "type": "sentence_context",
      "content": "[`fsPromises.readlink(path[, options])`] [Previous: The promise is fulfilled with the `linkString` upo...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
      "position": 4
    },
    {
      "id": "sc_1219",
      "type": "sentence_context",
      "content": "[`fsPromises.readlink(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 5
    },
    {
      "id": "s_1220",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the `linkString` upon success.",
      "position": 0
    },
    {
      "id": "s_1221",
      "type": "sentence",
      "content": "Reads the contents of the symbolic link referred to by `path`.",
      "position": 1
    },
    {
      "id": "s_1222",
      "type": "sentence",
      "content": "See the POSIX readlink(2) documentation for more detail.",
      "position": 2
    },
    {
      "id": "s_1223",
      "type": "sentence",
      "content": "The promise is fulfilled with the `linkString` upon success.",
      "position": 3
    },
    {
      "id": "s_1224",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
      "position": 4
    },
    {
      "id": "s_1225",
      "type": "sentence",
      "content": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 5
    },
    {
      "id": "w_1226",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {Promise}  Fulfills with the resolved path upon success. Determines the actual location of `path` using the same semantics as the\n`fs.realpath.native()` function. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe path. If the `encoding` is set to `'buffer'`, the path returned will be\npassed as a {Buffer} object. On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on `/proc` in order for this function to work. Glibc does not have\nthis restriction.",
      "position": 0,
      "windowSize": 112
    },
    {
      "id": "sw_1227",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the resolved path upon success. Determines the actual location of `path` using the same semantics as the `fs. native()` function.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1228",
      "type": "sentence_window",
      "content": "Determines the actual location of `path` using the same semantics as the `fs. native()` function. Only paths that can be converted to UTF8 strings are supported.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1229",
      "type": "sentence_window",
      "content": "native()` function. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1230",
      "type": "sentence_window",
      "content": "Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1231",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1232",
      "type": "sentence_window",
      "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1233",
      "type": "sentence_window",
      "content": "On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1234",
      "type": "sentence_window",
      "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_1235",
      "type": "sentence_context",
      "content": "[`fsPromises.realpath(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the resolved path upon success.",
      "position": 0
    },
    {
      "id": "sc_1236",
      "type": "sentence_context",
      "content": "[`fsPromises.realpath(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Determines the actual location of `path` using the same semantics as the `fs.",
      "position": 1
    },
    {
      "id": "sc_1237",
      "type": "sentence_context",
      "content": "[`fsPromises.realpath(path[, options])`] [Previous: Determines the actual location of `path` using the...] native()` function.",
      "position": 2
    },
    {
      "id": "sc_1238",
      "type": "sentence_context",
      "content": "[`fsPromises.realpath(path[, options])`] Only paths that can be converted to UTF8 strings are supported.",
      "position": 3
    },
    {
      "id": "sc_1239",
      "type": "sentence_context",
      "content": "[`fsPromises.realpath(path[, options])`] [Previous: Only paths that can be converted to UTF8 strings a...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path.",
      "position": 4
    },
    {
      "id": "sc_1240",
      "type": "sentence_context",
      "content": "[`fsPromises.realpath(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 5
    },
    {
      "id": "sc_1241",
      "type": "sentence_context",
      "content": "[`fsPromises.realpath(path[, options])`] [Previous: If the `encoding` is set to `'buffer'`, the path r...] On Linux, when Node.",
      "position": 6
    },
    {
      "id": "sc_1242",
      "type": "sentence_context",
      "content": "[`fsPromises.realpath(path[, options])`] js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
      "position": 7
    },
    {
      "id": "sc_1243",
      "type": "sentence_context",
      "content": "[`fsPromises.realpath(path[, options])`] [Previous: js is linked against musl libc, the procfs file sy...] Glibc does not have this restriction.",
      "position": 8
    },
    {
      "id": "s_1244",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Promise} Fulfills with the resolved path upon success.",
      "position": 0
    },
    {
      "id": "s_1245",
      "type": "sentence",
      "content": "Determines the actual location of `path` using the same semantics as the `fs.",
      "position": 1
    },
    {
      "id": "s_1246",
      "type": "sentence",
      "content": "native()` function.",
      "position": 2
    },
    {
      "id": "s_1247",
      "type": "sentence",
      "content": "Only paths that can be converted to UTF8 strings are supported.",
      "position": 3
    },
    {
      "id": "s_1248",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path.",
      "position": 4
    },
    {
      "id": "s_1249",
      "type": "sentence",
      "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 5
    },
    {
      "id": "s_1250",
      "type": "sentence",
      "content": "On Linux, when Node.",
      "position": 6
    },
    {
      "id": "s_1251",
      "type": "sentence",
      "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
      "position": 7
    },
    {
      "id": "s_1252",
      "type": "sentence",
      "content": "Glibc does not have this restriction.",
      "position": 8
    },
    {
      "id": "sw_1253",
      "type": "sentence_window",
      "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success. Renames `oldPath` to `newPath`.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_1254",
      "type": "sentence_context",
      "content": "[`fsPromises.rename(oldPath, newPath)`] `oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_1255",
      "type": "sentence_context",
      "content": "[`fsPromises.rename(oldPath, newPath)`] [Previous: `oldPath` {string|Buffer|URL} `newPath` {string|Bu...] Renames `oldPath` to `newPath`.",
      "position": 1
    },
    {
      "id": "s_1256",
      "type": "sentence",
      "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_1257",
      "type": "sentence",
      "content": "Renames `oldPath` to `newPath`.",
      "position": 1
    },
    {
      "id": "w_1258",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to\nbe options for `recursive`, `maxBusyTries`, and `emfileWait` but they were\ndeprecated and removed. The `options` argument is still accepted for\nbackwards compatibility but it is not used. Returns: {Promise} Fulfills with `undefined` upon success. Removes the directory identified by `path`. Using `fsPromises.rmdir()` on a file (not a directory) results in the\npromise being rejected with an `ENOENT` error on Windows and an `ENOTDIR`\nerror on POSIX. To get a behavior similar to the `rm -rf` Unix command, use\n[`fsPromises.rm()`][] with options `{ recursive: true, force: true }`.",
      "position": 0,
      "windowSize": 94
    },
    {
      "id": "sw_1259",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1260",
      "type": "sentence_window",
      "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used. Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1261",
      "type": "sentence_window",
      "content": "The `options` argument is still accepted for backwards compatibility but it is not used. Returns: {Promise} Fulfills with `undefined` upon success. Removes the directory identified by `path`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1262",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Removes the directory identified by `path`. Using `fsPromises.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1263",
      "type": "sentence_window",
      "content": "Removes the directory identified by `path`. Using `fsPromises. rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1264",
      "type": "sentence_window",
      "content": "Using `fsPromises. rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1265",
      "type": "sentence_window",
      "content": "rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises. rm()`][] with options `{ recursive: true, force: true }`.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1266",
      "type": "sentence_window",
      "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises. rm()`][] with options `{ recursive: true, force: true }`.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_1267",
      "type": "sentence_context",
      "content": "[`fsPromises.rmdir(path[, options])`] `path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
      "position": 0
    },
    {
      "id": "sc_1268",
      "type": "sentence_context",
      "content": "[`fsPromises.rmdir(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} Ther...] There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
      "position": 1
    },
    {
      "id": "sc_1269",
      "type": "sentence_context",
      "content": "[`fsPromises.rmdir(path[, options])`] [Previous: There used to be options for `recursive`, `maxBusy...] The `options` argument is still accepted for backwards compatibility but it is not used.",
      "position": 2
    },
    {
      "id": "sc_1270",
      "type": "sentence_context",
      "content": "[`fsPromises.rmdir(path[, options])`] [Previous: The `options` argument is still accepted for backw...] Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 3
    },
    {
      "id": "sc_1271",
      "type": "sentence_context",
      "content": "[`fsPromises.rmdir(path[, options])`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Removes the directory identified by `path`.",
      "position": 4
    },
    {
      "id": "sc_1272",
      "type": "sentence_context",
      "content": "[`fsPromises.rmdir(path[, options])`] [Previous: Removes the directory identified by `path`....] Using `fsPromises.",
      "position": 5
    },
    {
      "id": "sc_1273",
      "type": "sentence_context",
      "content": "[`fsPromises.rmdir(path[, options])`] rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
      "position": 6
    },
    {
      "id": "sc_1274",
      "type": "sentence_context",
      "content": "[`fsPromises.rmdir(path[, options])`] [Previous: rmdir()` on a file (not a directory) results in th...] To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises.",
      "position": 7
    },
    {
      "id": "sc_1275",
      "type": "sentence_context",
      "content": "[`fsPromises.rmdir(path[, options])`] [Previous: To get a behavior similar to the `rm -rf` Unix com...] rm()`][] with options `{ recursive: true, force: true }`.",
      "position": 8
    },
    {
      "id": "s_1276",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
      "position": 0
    },
    {
      "id": "s_1277",
      "type": "sentence",
      "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
      "position": 1
    },
    {
      "id": "s_1278",
      "type": "sentence",
      "content": "The `options` argument is still accepted for backwards compatibility but it is not used.",
      "position": 2
    },
    {
      "id": "s_1279",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 3
    },
    {
      "id": "s_1280",
      "type": "sentence",
      "content": "Removes the directory identified by `path`.",
      "position": 4
    },
    {
      "id": "s_1281",
      "type": "sentence",
      "content": "Using `fsPromises.",
      "position": 5
    },
    {
      "id": "s_1282",
      "type": "sentence",
      "content": "rmdir()` on a file (not a directory) results in the promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
      "position": 6
    },
    {
      "id": "s_1283",
      "type": "sentence",
      "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fsPromises.",
      "position": 7
    },
    {
      "id": "s_1284",
      "type": "sentence",
      "content": "rm()`][] with options `{ recursive: true, force: true }`.",
      "position": 8
    },
    {
      "id": "w_1285",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `force` {boolean} When `true`, exceptions will be ignored if `path` does\n  not exist. **Default:** `false`.\n* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\n  `EPERM` error is encountered, Node.js will retry the operation with a linear\n  backoff wait of `retryDelay` milliseconds longer on each try. This option\n  represents the number of retries. This option is ignored if the `recursive`\n  option is not `true`. **Default:** `0`.\n* `recursive` {boolean} If `true`, perform a recursive directory removal. In\n  recursive mode operations are retried on failure. **Default:** `false`.\n* `retryDelay` {integer} The amount of time in milliseconds to wait between\n  retries. This option is ignored if the `recursive` option is not `true`.\n  **Default:** `100`. Returns: {Promise} Fulfills with `undefined` upon success. Removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 0,
      "windowSize": 139
    },
    {
      "id": "sw_1286",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist. **Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1287",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1288",
      "type": "sentence_window",
      "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1289",
      "type": "sentence_window",
      "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries. This option is ignored if the `recursive` option is not `true`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1290",
      "type": "sentence_window",
      "content": "This option represents the number of retries. This option is ignored if the `recursive` option is not `true`. **Default:** `0`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1291",
      "type": "sentence_window",
      "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive directory removal.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1292",
      "type": "sentence_window",
      "content": "**Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive directory removal. In recursive mode operations are retried on failure.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1293",
      "type": "sentence_window",
      "content": "* `recursive` {boolean} If `true`, perform a recursive directory removal. In recursive mode operations are retried on failure. **Default:** `false`.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1294",
      "type": "sentence_window",
      "content": "In recursive mode operations are retried on failure. **Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1295",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1296",
      "type": "sentence_window",
      "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`. **Default:** `100`.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1297",
      "type": "sentence_window",
      "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `100`. Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_1298",
      "type": "sentence_window",
      "content": "**Default:** `100`. Returns: {Promise} Fulfills with `undefined` upon success. Removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_1299",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success. Removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 13,
      "sentenceCount": 2
    },
    {
      "id": "sc_1300",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
      "position": 0
    },
    {
      "id": "sc_1301",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `f...] **Default:** `false`.",
      "position": 1
    },
    {
      "id": "sc_1302",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: **Default:** `false`....] * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
      "position": 2
    },
    {
      "id": "sc_1303",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, ...] js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
      "position": 3
    },
    {
      "id": "sc_1304",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: js will retry the operation with a linear backoff ...] This option represents the number of retries.",
      "position": 4
    },
    {
      "id": "sc_1305",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: This option represents the number of retries....] This option is ignored if the `recursive` option is not `true`.",
      "position": 5
    },
    {
      "id": "sc_1306",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `0`.",
      "position": 6
    },
    {
      "id": "sc_1307",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] * `recursive` {boolean} If `true`, perform a recursive directory removal.",
      "position": 7
    },
    {
      "id": "sc_1308",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: * `recursive` {boolean} If `true`, perform a recur...] In recursive mode operations are retried on failure.",
      "position": 8
    },
    {
      "id": "sc_1309",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: In recursive mode operations are retried on failur...] **Default:** `false`.",
      "position": 9
    },
    {
      "id": "sc_1310",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: **Default:** `false`....] * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
      "position": 10
    },
    {
      "id": "sc_1311",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: * `retryDelay` {integer} The amount of time in mil...] This option is ignored if the `recursive` option is not `true`.",
      "position": 11
    },
    {
      "id": "sc_1312",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `100`.",
      "position": 12
    },
    {
      "id": "sc_1313",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 13
    },
    {
      "id": "sc_1314",
      "type": "sentence_context",
      "content": "[`fsPromises.rm(path[, options])`] [Previous: Returns: {Promise} Fulfills with `undefined` upon ...] Removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 14
    },
    {
      "id": "s_1315",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
      "position": 0
    },
    {
      "id": "s_1316",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 1
    },
    {
      "id": "s_1317",
      "type": "sentence",
      "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
      "position": 2
    },
    {
      "id": "s_1318",
      "type": "sentence",
      "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
      "position": 3
    },
    {
      "id": "s_1319",
      "type": "sentence",
      "content": "This option represents the number of retries.",
      "position": 4
    },
    {
      "id": "s_1320",
      "type": "sentence",
      "content": "This option is ignored if the `recursive` option is not `true`.",
      "position": 5
    },
    {
      "id": "s_1321",
      "type": "sentence",
      "content": "**Default:** `0`.",
      "position": 6
    },
    {
      "id": "s_1322",
      "type": "sentence",
      "content": "* `recursive` {boolean} If `true`, perform a recursive directory removal.",
      "position": 7
    },
    {
      "id": "s_1323",
      "type": "sentence",
      "content": "In recursive mode operations are retried on failure.",
      "position": 8
    },
    {
      "id": "s_1324",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 9
    },
    {
      "id": "s_1325",
      "type": "sentence",
      "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
      "position": 10
    },
    {
      "id": "s_1326",
      "type": "sentence",
      "content": "This option is ignored if the `recursive` option is not `true`.",
      "position": 11
    },
    {
      "id": "s_1327",
      "type": "sentence",
      "content": "**Default:** `100`.",
      "position": 12
    },
    {
      "id": "s_1328",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 13
    },
    {
      "id": "s_1329",
      "type": "sentence",
      "content": "Removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 14
    },
    {
      "id": "w_1330",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise}  Fulfills with the {fs.Stats} object for the\ngiven `path`.",
      "position": 0,
      "windowSize": 32
    },
    {
      "id": "sw_1331",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1332",
      "type": "sentence_window",
      "content": "Stats} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with the {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1333",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {Promise} Fulfills with the {fs. Stats} object for the given `path`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1334",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with the {fs. Stats} object for the given `path`.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_1335",
      "type": "sentence_context",
      "content": "[`fsPromises.stat(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_1336",
      "type": "sentence_context",
      "content": "[`fsPromises.stat(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_1337",
      "type": "sentence_context",
      "content": "[`fsPromises.stat(path[, options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_1338",
      "type": "sentence_context",
      "content": "[`fsPromises.stat(path[, options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with the {fs.",
      "position": 3
    },
    {
      "id": "sc_1339",
      "type": "sentence_context",
      "content": "[`fsPromises.stat(path[, options])`] [Previous: Returns: {Promise} Fulfills with the {fs....] Stats} object for the given `path`.",
      "position": 4
    },
    {
      "id": "s_1340",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_1341",
      "type": "sentence",
      "content": "Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_1342",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_1343",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with the {fs.",
      "position": 3
    },
    {
      "id": "s_1344",
      "type": "sentence",
      "content": "Stats} object for the given `path`.",
      "position": 4
    },
    {
      "id": "w_1345",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.StatFs} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with the {fs.StatFs} object for the\ngiven `path`.",
      "position": 0,
      "windowSize": 31
    },
    {
      "id": "sw_1346",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. StatFs} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1347",
      "type": "sentence_window",
      "content": "StatFs} object should be `bigint`. **Default:** `false`. Returns: {Promise} Fulfills with the {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1348",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {Promise} Fulfills with the {fs. StatFs} object for the given `path`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1349",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with the {fs. StatFs} object for the given `path`.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_1350",
      "type": "sentence_context",
      "content": "[`fsPromises.statfs(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_1351",
      "type": "sentence_context",
      "content": "[`fsPromises.statfs(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] StatFs} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_1352",
      "type": "sentence_context",
      "content": "[`fsPromises.statfs(path[, options])`] [Previous: StatFs} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_1353",
      "type": "sentence_context",
      "content": "[`fsPromises.statfs(path[, options])`] [Previous: **Default:** `false`....] Returns: {Promise} Fulfills with the {fs.",
      "position": 3
    },
    {
      "id": "sc_1354",
      "type": "sentence_context",
      "content": "[`fsPromises.statfs(path[, options])`] [Previous: Returns: {Promise} Fulfills with the {fs....] StatFs} object for the given `path`.",
      "position": 4
    },
    {
      "id": "s_1355",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_1356",
      "type": "sentence",
      "content": "StatFs} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_1357",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_1358",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with the {fs.",
      "position": 3
    },
    {
      "id": "s_1359",
      "type": "sentence",
      "content": "StatFs} object for the given `path`.",
      "position": 4
    },
    {
      "id": "w_1360",
      "type": "window",
      "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: {Promise} Fulfills with `undefined` upon success. Creates a symbolic link. The `type` argument is only used on Windows platforms and can be one of `'dir'`,\n`'file'`, or `'junction'`. If the `type` argument is `null`, Node.js will\nautodetect `target` type and use `'file'` or `'dir'`. If the `target` does not\nexist, `'file'` will be used. Windows junction points require the destination\npath to be absolute. When using `'junction'`, the `target` argument will\nautomatically be normalized to absolute path. Junction points on NTFS volumes\ncan only point to directories.",
      "position": 0,
      "windowSize": 90
    },
    {
      "id": "sw_1361",
      "type": "sentence_window",
      "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: {Promise} Fulfills with `undefined` upon success. Creates a symbolic link. The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1362",
      "type": "sentence_window",
      "content": "Creates a symbolic link. The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`. If the `type` argument is `null`, Node.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1363",
      "type": "sentence_window",
      "content": "The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`. If the `type` argument is `null`, Node. js will autodetect `target` type and use `'file'` or `'dir'`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1364",
      "type": "sentence_window",
      "content": "If the `type` argument is `null`, Node. js will autodetect `target` type and use `'file'` or `'dir'`. If the `target` does not exist, `'file'` will be used.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1365",
      "type": "sentence_window",
      "content": "js will autodetect `target` type and use `'file'` or `'dir'`. If the `target` does not exist, `'file'` will be used. Windows junction points require the destination path to be absolute.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1366",
      "type": "sentence_window",
      "content": "If the `target` does not exist, `'file'` will be used. Windows junction points require the destination path to be absolute. When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1367",
      "type": "sentence_window",
      "content": "Windows junction points require the destination path to be absolute. When using `'junction'`, the `target` argument will automatically be normalized to absolute path. Junction points on NTFS volumes can only point to directories.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1368",
      "type": "sentence_window",
      "content": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path. Junction points on NTFS volumes can only point to directories.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_1369",
      "type": "sentence_context",
      "content": "[`fsPromises.symlink(target, path[, type])`] `target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_1370",
      "type": "sentence_context",
      "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: `target` {string|Buffer|URL} `path` {string|Buffer...] Creates a symbolic link.",
      "position": 1
    },
    {
      "id": "sc_1371",
      "type": "sentence_context",
      "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: Creates a symbolic link....] The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`.",
      "position": 2
    },
    {
      "id": "sc_1372",
      "type": "sentence_context",
      "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: The `type` argument is only used on Windows platfo...] If the `type` argument is `null`, Node.",
      "position": 3
    },
    {
      "id": "sc_1373",
      "type": "sentence_context",
      "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: If the `type` argument is `null`, Node....] js will autodetect `target` type and use `'file'` or `'dir'`.",
      "position": 4
    },
    {
      "id": "sc_1374",
      "type": "sentence_context",
      "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: js will autodetect `target` type and use `'file'` ...] If the `target` does not exist, `'file'` will be used.",
      "position": 5
    },
    {
      "id": "sc_1375",
      "type": "sentence_context",
      "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: If the `target` does not exist, `'file'` will be u...] Windows junction points require the destination path to be absolute.",
      "position": 6
    },
    {
      "id": "sc_1376",
      "type": "sentence_context",
      "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: Windows junction points require the destination pa...] When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
      "position": 7
    },
    {
      "id": "sc_1377",
      "type": "sentence_context",
      "content": "[`fsPromises.symlink(target, path[, type])`] [Previous: When using `'junction'`, the `target` argument wil...] Junction points on NTFS volumes can only point to directories.",
      "position": 8
    },
    {
      "id": "s_1378",
      "type": "sentence",
      "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_1379",
      "type": "sentence",
      "content": "Creates a symbolic link.",
      "position": 1
    },
    {
      "id": "s_1380",
      "type": "sentence",
      "content": "The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`.",
      "position": 2
    },
    {
      "id": "s_1381",
      "type": "sentence",
      "content": "If the `type` argument is `null`, Node.",
      "position": 3
    },
    {
      "id": "s_1382",
      "type": "sentence",
      "content": "js will autodetect `target` type and use `'file'` or `'dir'`.",
      "position": 4
    },
    {
      "id": "s_1383",
      "type": "sentence",
      "content": "If the `target` does not exist, `'file'` will be used.",
      "position": 5
    },
    {
      "id": "s_1384",
      "type": "sentence",
      "content": "Windows junction points require the destination path to be absolute.",
      "position": 6
    },
    {
      "id": "s_1385",
      "type": "sentence",
      "content": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
      "position": 7
    },
    {
      "id": "s_1386",
      "type": "sentence",
      "content": "Junction points on NTFS volumes can only point to directories.",
      "position": 8
    },
    {
      "id": "w_1387",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success. Truncates (shortens or extends the length) of the content at `path` to `len`\nbytes.",
      "position": 0,
      "windowSize": 26
    },
    {
      "id": "sw_1388",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success. Truncates (shortens or extends the length) of the content at `path` to `len` bytes.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_1389",
      "type": "sentence_context",
      "content": "[`fsPromises.truncate(path[, len])`] `path` {string|Buffer|URL} `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_1390",
      "type": "sentence_context",
      "content": "[`fsPromises.truncate(path[, len])`] [Previous: `path` {string|Buffer|URL} `len` {integer} **Defau...] Truncates (shortens or extends the length) of the content at `path` to `len` bytes.",
      "position": 1
    },
    {
      "id": "s_1391",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_1392",
      "type": "sentence",
      "content": "Truncates (shortens or extends the length) of the content at `path` to `len` bytes.",
      "position": 1
    },
    {
      "id": "w_1393",
      "type": "window",
      "content": "`path` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success. If `path` refers to a symbolic link, then the link is removed without affecting\nthe file or directory to which that link refers. If the `path` refers to a file\npath that is not a symbolic link, the file is deleted. See the POSIX unlink(2)\ndocumentation for more detail.",
      "position": 0,
      "windowSize": 55
    },
    {
      "id": "sw_1394",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success. If `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers. If the `path` refers to a file path that is not a symbolic link, the file is deleted.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1395",
      "type": "sentence_window",
      "content": "If `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers. If the `path` refers to a file path that is not a symbolic link, the file is deleted. See the POSIX unlink(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1396",
      "type": "sentence_window",
      "content": "If the `path` refers to a file path that is not a symbolic link, the file is deleted. See the POSIX unlink(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_1397",
      "type": "sentence_context",
      "content": "[`fsPromises.unlink(path)`] `path` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_1398",
      "type": "sentence_context",
      "content": "[`fsPromises.unlink(path)`] [Previous: `path` {string|Buffer|URL} Returns: {Promise} Fulf...] If `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers.",
      "position": 1
    },
    {
      "id": "sc_1399",
      "type": "sentence_context",
      "content": "[`fsPromises.unlink(path)`] [Previous: If `path` refers to a symbolic link, then the link...] If the `path` refers to a file path that is not a symbolic link, the file is deleted.",
      "position": 2
    },
    {
      "id": "sc_1400",
      "type": "sentence_context",
      "content": "[`fsPromises.unlink(path)`] [Previous: If the `path` refers to a file path that is not a ...] See the POSIX unlink(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_1401",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_1402",
      "type": "sentence",
      "content": "If `path` refers to a symbolic link, then the link is removed without affecting the file or directory to which that link refers.",
      "position": 1
    },
    {
      "id": "s_1403",
      "type": "sentence",
      "content": "If the `path` refers to a file path that is not a symbolic link, the file is deleted.",
      "position": 2
    },
    {
      "id": "s_1404",
      "type": "sentence",
      "content": "See the POSIX unlink(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "w_1405",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success. Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time, `Date`s, or a\nnumeric string like `'123456789.0'`. If the value can not be converted to a number, or is `NaN`, `Infinity`, or\n`-Infinity`, an `Error` will be thrown.",
      "position": 0,
      "windowSize": 67
    },
    {
      "id": "sw_1406",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success. Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules:",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1407",
      "type": "sentence_window",
      "content": "Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1408",
      "type": "sentence_window",
      "content": "The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789. If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1409",
      "type": "sentence_window",
      "content": "Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789. If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_1410",
      "type": "sentence_context",
      "content": "[`fsPromises.utimes(path, atime, mtime)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "sc_1411",
      "type": "sentence_context",
      "content": "[`fsPromises.utimes(path, atime, mtime)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] Change the file system timestamps of the object referenced by `path`.",
      "position": 1
    },
    {
      "id": "sc_1412",
      "type": "sentence_context",
      "content": "[`fsPromises.utimes(path, atime, mtime)`] [Previous: Change the file system timestamps of the object re...] The `atime` and `mtime` arguments follow these rules:",
      "position": 2
    },
    {
      "id": "sc_1413",
      "type": "sentence_context",
      "content": "[`fsPromises.utimes(path, atime, mtime)`] [Previous: The `atime` and `mtime` arguments follow these rul...] Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789.",
      "position": 3
    },
    {
      "id": "sc_1414",
      "type": "sentence_context",
      "content": "[`fsPromises.utimes(path, atime, mtime)`] [Previous: Values can be either numbers representing Unix epo...] If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
      "position": 4
    },
    {
      "id": "s_1415",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 0
    },
    {
      "id": "s_1416",
      "type": "sentence",
      "content": "Change the file system timestamps of the object referenced by `path`.",
      "position": 1
    },
    {
      "id": "s_1417",
      "type": "sentence",
      "content": "The `atime` and `mtime` arguments follow these rules:",
      "position": 2
    },
    {
      "id": "s_1418",
      "type": "sentence",
      "content": "Values can be either numbers representing Unix epoch time, `Date`s, or a numeric string like `'123456789.",
      "position": 3
    },
    {
      "id": "s_1419",
      "type": "sentence",
      "content": "If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
      "position": 4
    },
    {
      "id": "w_1420",
      "type": "window",
      "content": "`filename` {string|Buffer|URL} `options` {string|Object}\n* `persistent` {boolean} Indicates whether the process should continue to run\n  as long as files are being watched. **Default:** `true`.\n* `recursive` {boolean} Indicates whether all subdirectories should be\n  watched, or only the current directory. This applies when a directory is\n  specified, and only on supported platforms (See [caveats][]). **Default:**\n  `false`.\n* `encoding` {string} Specifies the character encoding to be used for the\n  filename passed to the listener. **Default:** `'utf8'`.\n* `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher\n  should stop.\n* `maxQueue` {number} Specifies the number of events to queue between iterations\n  of the {AsyncIterator} returned. **Default:** `2048`.\n* `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be\n  queued than `maxQueue` allows. `'ignore'` means overflow events are dropped and a\n  warning is emitted, while `'throw'` means to throw an exception. **Default:** `'ignore'`. Returns: {AsyncIterator} of objects with the properties:\n* `eventType` {string} The type of change\n* `filename` {string|Buffer|null} The name of the file changed. Returns an async iterator that watches for changes on `filename`, where `filename`\nis either a file or a directory. On most platforms, `'rename'` is emitted whenever a filename appears or\ndisappears in the directory. All the [caveats][] for `fs.watch()` also apply to `fsPromises.watch()`.",
      "position": 0,
      "windowSize": 208
    },
    {
      "id": "w_1421",
      "type": "window",
      "content": "a file or a directory. On most platforms, `'rename'` is emitted whenever a filename appears or\ndisappears in the directory. All the [caveats][] for `fs.watch()` also apply to `fsPromises.watch()`.",
      "position": 180,
      "windowSize": 28
    },
    {
      "id": "sw_1422",
      "type": "sentence_window",
      "content": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched. **Default:** `true`. * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1423",
      "type": "sentence_window",
      "content": "**Default:** `true`. * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1424",
      "type": "sentence_window",
      "content": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [caveats][]). **Default:** `false`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1425",
      "type": "sentence_window",
      "content": "This applies when a directory is specified, and only on supported platforms (See [caveats][]). **Default:** `false`. * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1426",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener. **Default:** `'utf8'`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1427",
      "type": "sentence_window",
      "content": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener. **Default:** `'utf8'`. * `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1428",
      "type": "sentence_window",
      "content": "**Default:** `'utf8'`. * `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop. * `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1429",
      "type": "sentence_window",
      "content": "* `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop. * `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned. **Default:** `2048`.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1430",
      "type": "sentence_window",
      "content": "* `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned. **Default:** `2048`. * `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1431",
      "type": "sentence_window",
      "content": "**Default:** `2048`. * `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows. `'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1432",
      "type": "sentence_window",
      "content": "* `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows. `'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception. **Default:** `'ignore'`.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1433",
      "type": "sentence_window",
      "content": "`'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception. **Default:** `'ignore'`. Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_1434",
      "type": "sentence_window",
      "content": "**Default:** `'ignore'`. Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed. Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_1435",
      "type": "sentence_window",
      "content": "Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed. Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory. On most platforms, `'rename'` is emitted whenever a filename appears",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_1436",
      "type": "sentence_window",
      "content": "Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory. On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory. All the [caveats][] for `fs.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_1437",
      "type": "sentence_window",
      "content": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory. All the [caveats][] for `fs. watch()` also apply to `fsPromises.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_1438",
      "type": "sentence_window",
      "content": "All the [caveats][] for `fs. watch()` also apply to `fsPromises.",
      "position": 16,
      "sentenceCount": 2
    },
    {
      "id": "sc_1439",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] `filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched.",
      "position": 0
    },
    {
      "id": "sc_1440",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: `filename` {string|Buffer|URL} `options` {string|O...] **Default:** `true`.",
      "position": 1
    },
    {
      "id": "sc_1441",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
      "position": 2
    },
    {
      "id": "sc_1442",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: * `recursive` {boolean} Indicates whether all subd...] This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
      "position": 3
    },
    {
      "id": "sc_1443",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: This applies when a directory is specified, and on...] **Default:** `false`.",
      "position": 4
    },
    {
      "id": "sc_1444",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: **Default:** `false`....] * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
      "position": 5
    },
    {
      "id": "sc_1445",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: * `encoding` {string} Specifies the character enco...] **Default:** `'utf8'`.",
      "position": 6
    },
    {
      "id": "sc_1446",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: **Default:** `'utf8'`....] * `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop.",
      "position": 7
    },
    {
      "id": "sc_1447",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: * `signal` {AbortSignal} An {AbortSignal} used to ...] * `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned.",
      "position": 8
    },
    {
      "id": "sc_1448",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: * `maxQueue` {number} Specifies the number of even...] **Default:** `2048`.",
      "position": 9
    },
    {
      "id": "sc_1449",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] * `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows.",
      "position": 10
    },
    {
      "id": "sc_1450",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: * `overflow` {string} Either `'ignore'` or `'throw...] `'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception.",
      "position": 11
    },
    {
      "id": "sc_1451",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: `'ignore'` means overflow events are dropped and a...] **Default:** `'ignore'`.",
      "position": 12
    },
    {
      "id": "sc_1452",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: **Default:** `'ignore'`....] Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed.",
      "position": 13
    },
    {
      "id": "sc_1453",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: Returns: {AsyncIterator} of objects with the prope...] Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory.",
      "position": 14
    },
    {
      "id": "sc_1454",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: Returns an async iterator that watches for changes...] On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory.",
      "position": 15
    },
    {
      "id": "sc_1455",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: On most platforms, `'rename'` is emitted whenever ...] All the [caveats][] for `fs.",
      "position": 16
    },
    {
      "id": "sc_1456",
      "type": "sentence_context",
      "content": "[`fsPromises.watch(filename[, options])`] [Previous: All the [caveats][] for `fs....] watch()` also apply to `fsPromises.",
      "position": 17
    },
    {
      "id": "s_1457",
      "type": "sentence",
      "content": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched.",
      "position": 0
    },
    {
      "id": "s_1458",
      "type": "sentence",
      "content": "**Default:** `true`.",
      "position": 1
    },
    {
      "id": "s_1459",
      "type": "sentence",
      "content": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
      "position": 2
    },
    {
      "id": "s_1460",
      "type": "sentence",
      "content": "This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
      "position": 3
    },
    {
      "id": "s_1461",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 4
    },
    {
      "id": "s_1462",
      "type": "sentence",
      "content": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
      "position": 5
    },
    {
      "id": "s_1463",
      "type": "sentence",
      "content": "**Default:** `'utf8'`.",
      "position": 6
    },
    {
      "id": "s_1464",
      "type": "sentence",
      "content": "* `signal` {AbortSignal} An {AbortSignal} used to signal when the watcher should stop.",
      "position": 7
    },
    {
      "id": "s_1465",
      "type": "sentence",
      "content": "* `maxQueue` {number} Specifies the number of events to queue between iterations of the {AsyncIterator} returned.",
      "position": 8
    },
    {
      "id": "s_1466",
      "type": "sentence",
      "content": "**Default:** `2048`.",
      "position": 9
    },
    {
      "id": "s_1467",
      "type": "sentence",
      "content": "* `overflow` {string} Either `'ignore'` or `'throw'` when there are more events to be queued than `maxQueue` allows.",
      "position": 10
    },
    {
      "id": "s_1468",
      "type": "sentence",
      "content": "`'ignore'` means overflow events are dropped and a warning is emitted, while `'throw'` means to throw an exception.",
      "position": 11
    },
    {
      "id": "s_1469",
      "type": "sentence",
      "content": "**Default:** `'ignore'`.",
      "position": 12
    },
    {
      "id": "s_1470",
      "type": "sentence",
      "content": "Returns: {AsyncIterator} of objects with the properties: * `eventType` {string} The type of change * `filename` {string|Buffer|null} The name of the file changed.",
      "position": 13
    },
    {
      "id": "s_1471",
      "type": "sentence",
      "content": "Returns an async iterator that watches for changes on `filename`, where `filename` is either a file or a directory.",
      "position": 14
    },
    {
      "id": "s_1472",
      "type": "sentence",
      "content": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory.",
      "position": 15
    },
    {
      "id": "s_1473",
      "type": "sentence",
      "content": "All the [caveats][] for `fs.",
      "position": 16
    },
    {
      "id": "s_1474",
      "type": "sentence",
      "content": "watch()` also apply to `fsPromises.",
      "position": 17
    },
    {
      "id": "w_1475",
      "type": "window",
      "content": "`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`.\n* `flush` {boolean} If all data is successfully written to the file, and\n  `flush` is `true`, `filehandle.sync()` is used to flush the data.\n  **Default:** `false`.\n* `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously writes data to a file, replacing the file if it already exists.\n`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object. The `encoding` option is ignored if `data` is a buffer. If `options` is a string, then it specifies the encoding. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. Any specified {FileHandle} has to support writing. It is unsafe to use `fsPromises.writeFile()` multiple times on the same file\nwithout waiting for the promise to be settled. Similarly to `fsPromises.readFile` - `fsPromises.writeFile` is a convenience\nmethod that performs multiple `write` calls internally to write the buffer\npassed to it. For performance sensitive code consider using\n[`fs.createWriteStream()`][] or [`filehandle.createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fsPromises.writeFile()`.\nCancelation is \"best effort\", and some amount of data is likely still\nto be written. Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.writeFile` performs.",
      "position": 0,
      "windowSize": 220
    },
    {
      "id": "w_1476",
      "type": "window",
      "content": "is possible to use an {AbortSignal} to cancel an `fsPromises.writeFile()`.\nCancelation is \"best effort\", and some amount of data is likely still\nto be written. Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.writeFile` performs.",
      "position": 180,
      "windowSize": 40
    },
    {
      "id": "sw_1477",
      "type": "sentence_window",
      "content": "`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. * `flush` {boolean}",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1478",
      "type": "sentence_window",
      "content": "**Default:** `'w'`. * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `filehandle. sync()` is used to flush the data.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1479",
      "type": "sentence_window",
      "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `filehandle. sync()` is used to flush the data. **Default:** `false`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1480",
      "type": "sentence_window",
      "content": "sync()` is used to flush the data. **Default:** `false`. * `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1481",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously writes data to a file, replacing the file if it already exists.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1482",
      "type": "sentence_window",
      "content": "* `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success. Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1483",
      "type": "sentence_window",
      "content": "Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object. The `encoding` option is ignored if `data` is a buffer.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1484",
      "type": "sentence_window",
      "content": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object. The `encoding` option is ignored if `data` is a buffer. If `options` is a string, then it specifies the encoding.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1485",
      "type": "sentence_window",
      "content": "The `encoding` option is ignored if `data` is a buffer. If `options` is a string, then it specifies the encoding. The `mode` option only affects the newly created file.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1486",
      "type": "sentence_window",
      "content": "If `options` is a string, then it specifies the encoding. The `mode` option only affects the newly created file. open()`][] for more details.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1487",
      "type": "sentence_window",
      "content": "The `mode` option only affects the newly created file. open()`][] for more details. Any specified {FileHandle} has to support writing.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1488",
      "type": "sentence_window",
      "content": "open()`][] for more details. Any specified {FileHandle} has to support writing. It is unsafe to use `fsPromises.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_1489",
      "type": "sentence_window",
      "content": "Any specified {FileHandle} has to support writing. It is unsafe to use `fsPromises. writeFile()` multiple times on the same file without waiting for the promise to be settled.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_1490",
      "type": "sentence_window",
      "content": "It is unsafe to use `fsPromises. writeFile()` multiple times on the same file without waiting for the promise to be settled. Similarly to `fsPromises.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_1491",
      "type": "sentence_window",
      "content": "writeFile()` multiple times on the same file without waiting for the promise to be settled. Similarly to `fsPromises. readFile` - `fsPromises.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_1492",
      "type": "sentence_window",
      "content": "Similarly to `fsPromises. readFile` - `fsPromises. writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_1493",
      "type": "sentence_window",
      "content": "readFile` - `fsPromises. writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it. For performance sensitive code consider using [`fs.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_1494",
      "type": "sentence_window",
      "content": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it. For performance sensitive code consider using [`fs. createWriteStream()`][] or [`filehandle.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_1495",
      "type": "sentence_window",
      "content": "For performance sensitive code consider using [`fs. createWriteStream()`][] or [`filehandle. createWriteStream()`][].",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_1496",
      "type": "sentence_window",
      "content": "createWriteStream()`][] or [`filehandle. createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fsPromises.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_1497",
      "type": "sentence_window",
      "content": "createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fsPromises. writeFile()`.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_1498",
      "type": "sentence_window",
      "content": "It is possible to use an {AbortSignal} to cancel an `fsPromises. writeFile()`. Cancelation is \"best effort\", and some amount of data is likely still to be written.",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_1499",
      "type": "sentence_window",
      "content": "writeFile()`. Cancelation is \"best effort\", and some amount of data is likely still to be written. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_1500",
      "type": "sentence_window",
      "content": "Cancelation is \"best effort\", and some amount of data is likely still to be written. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. writeFile` performs.",
      "position": 23,
      "sentenceCount": 3
    },
    {
      "id": "sw_1501",
      "type": "sentence_window",
      "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. writeFile` performs.",
      "position": 24,
      "sentenceCount": 2
    },
    {
      "id": "sc_1502",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] `file` {string|Buffer|URL|FileHandle} filename or `FileHandle` `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system",
      "position": 0
    },
    {
      "id": "sc_1503",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: `file` {string|Buffer|URL|FileHandle} filename or ...] **Default:** `'w'`.",
      "position": 1
    },
    {
      "id": "sc_1504",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `filehandle.",
      "position": 2
    },
    {
      "id": "sc_1505",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: * `flush` {boolean} If all data is successfully wr...] sync()` is used to flush the data.",
      "position": 3
    },
    {
      "id": "sc_1506",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: sync()` is used to flush the data....] **Default:** `false`.",
      "position": 4
    },
    {
      "id": "sc_1507",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: **Default:** `false`....] * `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 5
    },
    {
      "id": "sc_1508",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: * `signal` {AbortSignal} allows aborting an in-pro...] Asynchronously writes data to a file, replacing the file if it already exists.",
      "position": 6
    },
    {
      "id": "sc_1509",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: Asynchronously writes data to a file, replacing th...] `data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
      "position": 7
    },
    {
      "id": "sc_1510",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: `data` can be a string, a buffer, an {AsyncIterabl...] The `encoding` option is ignored if `data` is a buffer.",
      "position": 8
    },
    {
      "id": "sc_1511",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: The `encoding` option is ignored if `data` is a bu...] If `options` is a string, then it specifies the encoding.",
      "position": 9
    },
    {
      "id": "sc_1512",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: If `options` is a string, then it specifies the en...] The `mode` option only affects the newly created file.",
      "position": 10
    },
    {
      "id": "sc_1513",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
      "position": 11
    },
    {
      "id": "sc_1514",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: open()`][] for more details....] Any specified {FileHandle} has to support writing.",
      "position": 12
    },
    {
      "id": "sc_1515",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: Any specified {FileHandle} has to support writing....] It is unsafe to use `fsPromises.",
      "position": 13
    },
    {
      "id": "sc_1516",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: It is unsafe to use `fsPromises....] writeFile()` multiple times on the same file without waiting for the promise to be settled.",
      "position": 14
    },
    {
      "id": "sc_1517",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: writeFile()` multiple times on the same file witho...] Similarly to `fsPromises.",
      "position": 15
    },
    {
      "id": "sc_1518",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: Similarly to `fsPromises....] readFile` - `fsPromises.",
      "position": 16
    },
    {
      "id": "sc_1519",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: readFile` - `fsPromises....] writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
      "position": 17
    },
    {
      "id": "sc_1520",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: writeFile` is a convenience method that performs m...] For performance sensitive code consider using [`fs.",
      "position": 18
    },
    {
      "id": "sc_1521",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: For performance sensitive code consider using [`fs...] createWriteStream()`][] or [`filehandle.",
      "position": 19
    },
    {
      "id": "sc_1522",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: createWriteStream()`][] or [`filehandle....] createWriteStream()`][].",
      "position": 20
    },
    {
      "id": "sc_1523",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: createWriteStream()`][]....] It is possible to use an {AbortSignal} to cancel an `fsPromises.",
      "position": 21
    },
    {
      "id": "sc_1524",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: It is possible to use an {AbortSignal} to cancel a...] writeFile()`.",
      "position": 22
    },
    {
      "id": "sc_1525",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] Cancelation is \"best effort\", and some amount of data is likely still to be written.",
      "position": 23
    },
    {
      "id": "sc_1526",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: Cancelation is \"best effort\", and some amount of d...] Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 24
    },
    {
      "id": "sc_1527",
      "type": "sentence_context",
      "content": "[`fsPromises.writeFile(file, data[, options])`] [Previous: Aborting an ongoing request does not abort individ...] writeFile` performs.",
      "position": 25
    },
    {
      "id": "s_1528",
      "type": "sentence",
      "content": "`file` {string|Buffer|URL|FileHandle} filename or `FileHandle` `data` {string|Buffer|TypedArray|DataView|AsyncIterable|Iterable|Stream} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_1529",
      "type": "sentence",
      "content": "**Default:** `'w'`.",
      "position": 1
    },
    {
      "id": "s_1530",
      "type": "sentence",
      "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `filehandle.",
      "position": 2
    },
    {
      "id": "s_1531",
      "type": "sentence",
      "content": "sync()` is used to flush the data.",
      "position": 3
    },
    {
      "id": "s_1532",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 4
    },
    {
      "id": "s_1533",
      "type": "sentence",
      "content": "* `signal` {AbortSignal} allows aborting an in-progress writeFile Returns: {Promise} Fulfills with `undefined` upon success.",
      "position": 5
    },
    {
      "id": "s_1534",
      "type": "sentence",
      "content": "Asynchronously writes data to a file, replacing the file if it already exists.",
      "position": 6
    },
    {
      "id": "s_1535",
      "type": "sentence",
      "content": "`data` can be a string, a buffer, an {AsyncIterable}, or an {Iterable} object.",
      "position": 7
    },
    {
      "id": "s_1536",
      "type": "sentence",
      "content": "The `encoding` option is ignored if `data` is a buffer.",
      "position": 8
    },
    {
      "id": "s_1537",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the encoding.",
      "position": 9
    },
    {
      "id": "s_1538",
      "type": "sentence",
      "content": "The `mode` option only affects the newly created file.",
      "position": 10
    },
    {
      "id": "s_1539",
      "type": "sentence",
      "content": "open()`][] for more details.",
      "position": 11
    },
    {
      "id": "s_1540",
      "type": "sentence",
      "content": "Any specified {FileHandle} has to support writing.",
      "position": 12
    },
    {
      "id": "s_1541",
      "type": "sentence",
      "content": "It is unsafe to use `fsPromises.",
      "position": 13
    },
    {
      "id": "s_1542",
      "type": "sentence",
      "content": "writeFile()` multiple times on the same file without waiting for the promise to be settled.",
      "position": 14
    },
    {
      "id": "s_1543",
      "type": "sentence",
      "content": "Similarly to `fsPromises.",
      "position": 15
    },
    {
      "id": "s_1544",
      "type": "sentence",
      "content": "readFile` - `fsPromises.",
      "position": 16
    },
    {
      "id": "s_1545",
      "type": "sentence",
      "content": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
      "position": 17
    },
    {
      "id": "s_1546",
      "type": "sentence",
      "content": "For performance sensitive code consider using [`fs.",
      "position": 18
    },
    {
      "id": "s_1547",
      "type": "sentence",
      "content": "createWriteStream()`][] or [`filehandle.",
      "position": 19
    },
    {
      "id": "s_1548",
      "type": "sentence",
      "content": "createWriteStream()`][].",
      "position": 20
    },
    {
      "id": "s_1549",
      "type": "sentence",
      "content": "It is possible to use an {AbortSignal} to cancel an `fsPromises.",
      "position": 21
    },
    {
      "id": "s_1550",
      "type": "sentence",
      "content": "writeFile()`.",
      "position": 22
    },
    {
      "id": "s_1551",
      "type": "sentence",
      "content": "Cancelation is \"best effort\", and some amount of data is likely still to be written.",
      "position": 23
    },
    {
      "id": "s_1552",
      "type": "sentence",
      "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 24
    },
    {
      "id": "s_1553",
      "type": "sentence",
      "content": "writeFile` performs.",
      "position": 25
    },
    {
      "id": "w_1554",
      "type": "window",
      "content": "Type: {Object} Returns an object containing commonly used constants for file system\noperations. The object is the same as `fs.constants`. See [FS constants][]\nfor more details.",
      "position": 0,
      "windowSize": 24
    },
    {
      "id": "sw_1555",
      "type": "sentence_window",
      "content": "Type: {Object} Returns an object containing commonly used constants for file system operations. The object is the same as `fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1556",
      "type": "sentence_window",
      "content": "Returns an object containing commonly used constants for file system operations. The object is the same as `fs. constants`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1557",
      "type": "sentence_window",
      "content": "The object is the same as `fs. constants`. See [FS constants][] for more details.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1558",
      "type": "sentence_window",
      "content": "constants`. See [FS constants][] for more details.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_1559",
      "type": "sentence_context",
      "content": "[`fsPromises.constants`] Type: {Object}",
      "position": 0
    },
    {
      "id": "sc_1560",
      "type": "sentence_context",
      "content": "[`fsPromises.constants`] Returns an object containing commonly used constants for file system operations.",
      "position": 1
    },
    {
      "id": "sc_1561",
      "type": "sentence_context",
      "content": "[`fsPromises.constants`] [Previous: Returns an object containing commonly used constan...] The object is the same as `fs.",
      "position": 2
    },
    {
      "id": "sc_1562",
      "type": "sentence_context",
      "content": "[`fsPromises.constants`] [Previous: The object is the same as `fs....] constants`.",
      "position": 3
    },
    {
      "id": "sc_1563",
      "type": "sentence_context",
      "content": "[`fsPromises.constants`] See [FS constants][] for more details.",
      "position": 4
    },
    {
      "id": "s_1564",
      "type": "sentence",
      "content": "Type: {Object}",
      "position": 0
    },
    {
      "id": "s_1565",
      "type": "sentence",
      "content": "Returns an object containing commonly used constants for file system operations.",
      "position": 1
    },
    {
      "id": "s_1566",
      "type": "sentence",
      "content": "The object is the same as `fs.",
      "position": 2
    },
    {
      "id": "s_1567",
      "type": "sentence",
      "content": "constants`.",
      "position": 3
    },
    {
      "id": "s_1568",
      "type": "sentence",
      "content": "See [FS constants][] for more details.",
      "position": 4
    },
    {
      "id": "w_1569",
      "type": "window",
      "content": "The callback APIs perform all operations asynchronously, without blocking the\nevent loop, then invoke a callback function upon completion or error. The callback APIs use the underlying Node.js threadpool to perform file\nsystem operations off the event loop thread. These operations are not\nsynchronized or threadsafe. Care must be taken when performing multiple\nconcurrent modifications on the same file or data corruption may occur.",
      "position": 0,
      "windowSize": 60
    },
    {
      "id": "sw_1570",
      "type": "sentence_window",
      "content": "The callback APIs perform all operations asynchronously, without blocking the event loop, then invoke a callback function upon completion or error. The callback APIs use the underlying Node. js threadpool to perform file system operations off the event loop thread.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1571",
      "type": "sentence_window",
      "content": "The callback APIs use the underlying Node. js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1572",
      "type": "sentence_window",
      "content": "js threadpool to perform file system operations off the event loop thread. These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1573",
      "type": "sentence_window",
      "content": "These operations are not synchronized or threadsafe. Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_1574",
      "type": "sentence_context",
      "content": "[Callback API] The callback APIs perform all operations asynchronously, without blocking the event loop, then invoke a callback function upon completion or error.",
      "position": 0
    },
    {
      "id": "sc_1575",
      "type": "sentence_context",
      "content": "[Callback API] [Previous: The callback APIs perform all operations asynchron...] The callback APIs use the underlying Node.",
      "position": 1
    },
    {
      "id": "sc_1576",
      "type": "sentence_context",
      "content": "[Callback API] [Previous: The callback APIs use the underlying Node....] js threadpool to perform file system operations off the event loop thread.",
      "position": 2
    },
    {
      "id": "sc_1577",
      "type": "sentence_context",
      "content": "[Callback API] [Previous: js threadpool to perform file system operations of...] These operations are not synchronized or threadsafe.",
      "position": 3
    },
    {
      "id": "sc_1578",
      "type": "sentence_context",
      "content": "[Callback API] [Previous: These operations are not synchronized or threadsaf...] Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
      "position": 4
    },
    {
      "id": "s_1579",
      "type": "sentence",
      "content": "The callback APIs perform all operations asynchronously, without blocking the event loop, then invoke a callback function upon completion or error.",
      "position": 0
    },
    {
      "id": "s_1580",
      "type": "sentence",
      "content": "The callback APIs use the underlying Node.",
      "position": 1
    },
    {
      "id": "s_1581",
      "type": "sentence",
      "content": "js threadpool to perform file system operations off the event loop thread.",
      "position": 2
    },
    {
      "id": "s_1582",
      "type": "sentence",
      "content": "These operations are not synchronized or threadsafe.",
      "position": 3
    },
    {
      "id": "s_1583",
      "type": "sentence",
      "content": "Care must be taken when performing multiple concurrent modifications on the same file or data corruption may occur.",
      "position": 4
    },
    {
      "id": "w_1584",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.constants.F_OK` `callback` {Function}\n* `err` {Error} Tests a user's permissions for the file or directory specified by `path`.\nThe `mode` argument is an optional integer that specifies the accessibility\nchecks to be performed. `mode` should be either the value `fs.constants.F_OK`\nor a mask consisting of the bitwise OR of any of `fs.constants.R_OK`,\n`fs.constants.W_OK`, and `fs.constants.X_OK` (e.g.\n`fs.constants.W_OK | fs.constants.R_OK`). Check [File access constants][] for\npossible values of `mode`. The final argument, `callback`, is a callback function that is invoked with\na possible error argument. If any of the accessibility checks fail, the error\nargument will be an `Error` object. The following examples check if\n`package.json` exists, and if it is readable or writable. Do not use `fs.access()` to check for the accessibility of a file before calling\n`fs.open()`, `fs.readFile()`, or `fs.writeFile()`. Doing\nso introduces a race condition, since other processes may change the file's\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file is not accessible. **write (NOT RECOMMENDED)** **write (RECOMMENDED)** **read (NOT RECOMMENDED)** **read (RECOMMENDED)** The \"not recommended\" examples above check for accessibility and then use the\nfile; the \"recommended\" examples are better because they use the file directly\nand handle the error, if any. In general, check for the accessibility of a file only if the file will not be\nused directly, for example when its accessibility is a signal from another\nprocess. On Windows, access-control policies (ACLs) on a directory may limit access to\na file or directory. The `fs.access()` function, however, does not check the\nACL and therefore may report that a path is accessible even if the ACL restricts\nthe user from reading or writing to it.",
      "position": 0,
      "windowSize": 268
    },
    {
      "id": "w_1585",
      "type": "window",
      "content": "the\nfile; the \"recommended\" examples are better because they use the file directly\nand handle the error, if any. In general, check for the accessibility of a file only if the file will not be\nused directly, for example when its accessibility is a signal from another\nprocess. On Windows, access-control policies (ACLs) on a directory may limit access to\na file or directory. The `fs.access()` function, however, does not check the\nACL and therefore may report that a path is accessible even if the ACL restricts\nthe user from reading or writing to it.",
      "position": 180,
      "windowSize": 88
    },
    {
      "id": "sw_1586",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs. F_OK` `callback` {Function} * `err` {Error} Tests a user's permissions for the file or directory specified by `path`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1587",
      "type": "sentence_window",
      "content": "F_OK` `callback` {Function} * `err` {Error} Tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1588",
      "type": "sentence_window",
      "content": "Tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1589",
      "type": "sentence_window",
      "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1590",
      "type": "sentence_window",
      "content": "`mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1591",
      "type": "sentence_window",
      "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs. W_OK`, and `fs.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1592",
      "type": "sentence_window",
      "content": "R_OK`, `fs. W_OK`, and `fs. Check [File access constants][] for possible values of `mode`.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1593",
      "type": "sentence_window",
      "content": "W_OK`, and `fs. Check [File access constants][] for possible values of `mode`. The final argument, `callback`, is a callback function that is invoked with a possible error argument.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1594",
      "type": "sentence_window",
      "content": "Check [File access constants][] for possible values of `mode`. The final argument, `callback`, is a callback function that is invoked with a possible error argument. If any of the accessibility checks fail, the error argument will be an `Error` object.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1595",
      "type": "sentence_window",
      "content": "The final argument, `callback`, is a callback function that is invoked with a possible error argument. If any of the accessibility checks fail, the error argument will be an `Error` object. The following examples check if `package.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1596",
      "type": "sentence_window",
      "content": "If any of the accessibility checks fail, the error argument will be an `Error` object. The following examples check if `package. json` exists, and if it is readable or writable.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1597",
      "type": "sentence_window",
      "content": "The following examples check if `package. json` exists, and if it is readable or writable. Do not use `fs.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_1598",
      "type": "sentence_window",
      "content": "json` exists, and if it is readable or writable. Do not use `fs. access()` to check for the accessibility of a file before calling `fs.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_1599",
      "type": "sentence_window",
      "content": "Do not use `fs. access()` to check for the accessibility of a file before calling `fs. open()`, `fs.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_1600",
      "type": "sentence_window",
      "content": "access()` to check for the accessibility of a file before calling `fs. open()`, `fs. readFile()`, or `fs.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_1601",
      "type": "sentence_window",
      "content": "open()`, `fs. readFile()`, or `fs. writeFile()`.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_1602",
      "type": "sentence_window",
      "content": "readFile()`, or `fs. writeFile()`. Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_1603",
      "type": "sentence_window",
      "content": "writeFile()`. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_1604",
      "type": "sentence_window",
      "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible. **write (NOT RECOMMENDED)**",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_1605",
      "type": "sentence_window",
      "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible. **write (NOT RECOMMENDED)** **write (RECOMMENDED)**",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_1606",
      "type": "sentence_window",
      "content": "**write (NOT RECOMMENDED)** **write (RECOMMENDED)** **read (NOT RECOMMENDED)**",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_1607",
      "type": "sentence_window",
      "content": "**write (RECOMMENDED)** **read (NOT RECOMMENDED)** **read (RECOMMENDED)**",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_1608",
      "type": "sentence_window",
      "content": "**read (NOT RECOMMENDED)** **read (RECOMMENDED)** The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_1609",
      "type": "sentence_window",
      "content": "**read (RECOMMENDED)** The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any. In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a",
      "position": 23,
      "sentenceCount": 3
    },
    {
      "id": "sw_1610",
      "type": "sentence_window",
      "content": "The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any. In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another",
      "position": 24,
      "sentenceCount": 3
    },
    {
      "id": "sw_1611",
      "type": "sentence_window",
      "content": "In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process. On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory. access()` function, however, does not check the ACL and therefore may report that a",
      "position": 25,
      "sentenceCount": 3
    },
    {
      "id": "sw_1612",
      "type": "sentence_window",
      "content": "On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory. access()` function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it.",
      "position": 26,
      "sentenceCount": 2
    },
    {
      "id": "sc_1613",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] `path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
      "position": 0
    },
    {
      "id": "sc_1614",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: `path` {string|Buffer|URL} `mode` {integer} **Defa...] F_OK` `callback` {Function} * `err` {Error}",
      "position": 1
    },
    {
      "id": "sc_1615",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: F_OK` `callback` {Function} * `err` {Error}...] Tests a user's permissions for the file or directory specified by `path`.",
      "position": 2
    },
    {
      "id": "sc_1616",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: Tests a user's permissions for the file or directo...] The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
      "position": 3
    },
    {
      "id": "sc_1617",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: The `mode` argument is an optional integer that sp...] `mode` should be either the value `fs.",
      "position": 4
    },
    {
      "id": "sc_1618",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: `mode` should be either the value `fs....] F_OK` or a mask consisting of the bitwise OR of any of `fs.",
      "position": 5
    },
    {
      "id": "sc_1619",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: F_OK` or a mask consisting of the bitwise OR of an...] R_OK`, `fs.",
      "position": 6
    },
    {
      "id": "sc_1620",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] W_OK`, and `fs.",
      "position": 7
    },
    {
      "id": "sc_1621",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] Check [File access constants][] for possible values of `mode`.",
      "position": 8
    },
    {
      "id": "sc_1622",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: Check [File access constants][] for possible value...] The final argument, `callback`, is a callback function that is invoked with a possible error argument.",
      "position": 9
    },
    {
      "id": "sc_1623",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: The final argument, `callback`, is a callback func...] If any of the accessibility checks fail, the error argument will be an `Error` object.",
      "position": 10
    },
    {
      "id": "sc_1624",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: If any of the accessibility checks fail, the error...] The following examples check if `package.",
      "position": 11
    },
    {
      "id": "sc_1625",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: The following examples check if `package....] json` exists, and if it is readable or writable.",
      "position": 12
    },
    {
      "id": "sc_1626",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: json` exists, and if it is readable or writable....] Do not use `fs.",
      "position": 13
    },
    {
      "id": "sc_1627",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] access()` to check for the accessibility of a file before calling `fs.",
      "position": 14
    },
    {
      "id": "sc_1628",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: access()` to check for the accessibility of a file...] open()`, `fs.",
      "position": 15
    },
    {
      "id": "sc_1629",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] readFile()`, or `fs.",
      "position": 16
    },
    {
      "id": "sc_1630",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] writeFile()`.",
      "position": 17
    },
    {
      "id": "sc_1631",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
      "position": 18
    },
    {
      "id": "sc_1632",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: Doing so introduces a race condition, since other ...] Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
      "position": 19
    },
    {
      "id": "sc_1633",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: Instead, user code should open/read/write the file...] **write (NOT RECOMMENDED)**",
      "position": 20
    },
    {
      "id": "sc_1634",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: **write (NOT RECOMMENDED)**...] **write (RECOMMENDED)**",
      "position": 21
    },
    {
      "id": "sc_1635",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: **write (RECOMMENDED)**...] **read (NOT RECOMMENDED)**",
      "position": 22
    },
    {
      "id": "sc_1636",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: **read (NOT RECOMMENDED)**...] **read (RECOMMENDED)**",
      "position": 23
    },
    {
      "id": "sc_1637",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: **read (RECOMMENDED)**...] The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
      "position": 24
    },
    {
      "id": "sc_1638",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: The \"not recommended\" examples above check for acc...] In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process.",
      "position": 25
    },
    {
      "id": "sc_1639",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: In general, check for the accessibility of a file ...] On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory.",
      "position": 26
    },
    {
      "id": "sc_1640",
      "type": "sentence_context",
      "content": "[`fs.access(path[, mode], callback)`] [Previous: On Windows, access-control policies (ACLs) on a di...] access()` function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it.",
      "position": 27
    },
    {
      "id": "s_1641",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
      "position": 0
    },
    {
      "id": "s_1642",
      "type": "sentence",
      "content": "F_OK` `callback` {Function} * `err` {Error}",
      "position": 1
    },
    {
      "id": "s_1643",
      "type": "sentence",
      "content": "Tests a user's permissions for the file or directory specified by `path`.",
      "position": 2
    },
    {
      "id": "s_1644",
      "type": "sentence",
      "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
      "position": 3
    },
    {
      "id": "s_1645",
      "type": "sentence",
      "content": "`mode` should be either the value `fs.",
      "position": 4
    },
    {
      "id": "s_1646",
      "type": "sentence",
      "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs.",
      "position": 5
    },
    {
      "id": "s_1647",
      "type": "sentence",
      "content": "R_OK`, `fs.",
      "position": 6
    },
    {
      "id": "s_1648",
      "type": "sentence",
      "content": "W_OK`, and `fs.",
      "position": 7
    },
    {
      "id": "s_1649",
      "type": "sentence",
      "content": "Check [File access constants][] for possible values of `mode`.",
      "position": 8
    },
    {
      "id": "s_1650",
      "type": "sentence",
      "content": "The final argument, `callback`, is a callback function that is invoked with a possible error argument.",
      "position": 9
    },
    {
      "id": "s_1651",
      "type": "sentence",
      "content": "If any of the accessibility checks fail, the error argument will be an `Error` object.",
      "position": 10
    },
    {
      "id": "s_1652",
      "type": "sentence",
      "content": "The following examples check if `package.",
      "position": 11
    },
    {
      "id": "s_1653",
      "type": "sentence",
      "content": "json` exists, and if it is readable or writable.",
      "position": 12
    },
    {
      "id": "s_1654",
      "type": "sentence",
      "content": "Do not use `fs.",
      "position": 13
    },
    {
      "id": "s_1655",
      "type": "sentence",
      "content": "access()` to check for the accessibility of a file before calling `fs.",
      "position": 14
    },
    {
      "id": "s_1656",
      "type": "sentence",
      "content": "open()`, `fs.",
      "position": 15
    },
    {
      "id": "s_1657",
      "type": "sentence",
      "content": "readFile()`, or `fs.",
      "position": 16
    },
    {
      "id": "s_1658",
      "type": "sentence",
      "content": "writeFile()`.",
      "position": 17
    },
    {
      "id": "s_1659",
      "type": "sentence",
      "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
      "position": 18
    },
    {
      "id": "s_1660",
      "type": "sentence",
      "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not accessible.",
      "position": 19
    },
    {
      "id": "s_1661",
      "type": "sentence",
      "content": "**write (NOT RECOMMENDED)**",
      "position": 20
    },
    {
      "id": "s_1662",
      "type": "sentence",
      "content": "**write (RECOMMENDED)**",
      "position": 21
    },
    {
      "id": "s_1663",
      "type": "sentence",
      "content": "**read (NOT RECOMMENDED)**",
      "position": 22
    },
    {
      "id": "s_1664",
      "type": "sentence",
      "content": "**read (RECOMMENDED)**",
      "position": 23
    },
    {
      "id": "s_1665",
      "type": "sentence",
      "content": "The \"not recommended\" examples above check for accessibility and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
      "position": 24
    },
    {
      "id": "s_1666",
      "type": "sentence",
      "content": "In general, check for the accessibility of a file only if the file will not be used directly, for example when its accessibility is a signal from another process.",
      "position": 25
    },
    {
      "id": "s_1667",
      "type": "sentence",
      "content": "On Windows, access-control policies (ACLs) on a directory may limit access to a file or directory.",
      "position": 26
    },
    {
      "id": "s_1668",
      "type": "sentence",
      "content": "access()` function, however, does not check the ACL and therefore may report that a path is accessible even if the ACL restricts the user from reading or writing to it.",
      "position": 27
    },
    {
      "id": "w_1669",
      "type": "window",
      "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`.\n* `flush` {boolean} If `true`, the underlying file descriptor is flushed\n  prior to closing it. **Default:** `false`. `callback` {Function}\n* `err` {Error} Asynchronously append data to a file, creating the file if it does not yet\nexist. `data` can be a string or a {Buffer}. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened\nfor appending (using `fs.open()` or `fs.openSync()`). The file descriptor will\nnot be closed automatically.",
      "position": 0,
      "windowSize": 120
    },
    {
      "id": "sw_1670",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1671",
      "type": "sentence_window",
      "content": "**Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1672",
      "type": "sentence_window",
      "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`. `callback` {Function} * `err` {Error}",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1673",
      "type": "sentence_window",
      "content": "**Default:** `false`. `callback` {Function} * `err` {Error} Asynchronously append data to a file, creating the file if it does not yet exist.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1674",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} Asynchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1675",
      "type": "sentence_window",
      "content": "Asynchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}. The `mode` option only affects the newly created file.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1676",
      "type": "sentence_window",
      "content": "`data` can be a string or a {Buffer}. The `mode` option only affects the newly created file. open()`][] for more details.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1677",
      "type": "sentence_window",
      "content": "The `mode` option only affects the newly created file. open()`][] for more details. If `options` is a string, then it specifies the encoding:",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1678",
      "type": "sentence_window",
      "content": "open()`][] for more details. If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1679",
      "type": "sentence_window",
      "content": "If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs. open()` or `fs.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1680",
      "type": "sentence_window",
      "content": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs. open()` or `fs. openSync()`).",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1681",
      "type": "sentence_window",
      "content": "open()` or `fs. openSync()`). The file descriptor will not be closed automatically.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_1682",
      "type": "sentence_window",
      "content": "openSync()`). The file descriptor will not be closed automatically.",
      "position": 12,
      "sentenceCount": 2
    },
    {
      "id": "sc_1683",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] `path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_1684",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: `path` {string|Buffer|URL|number} filename or file...] **Default:** `'a'`.",
      "position": 1
    },
    {
      "id": "sc_1685",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
      "position": 2
    },
    {
      "id": "sc_1686",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: * `flush` {boolean} If `true`, the underlying file...] **Default:** `false`.",
      "position": 3
    },
    {
      "id": "sc_1687",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error}",
      "position": 4
    },
    {
      "id": "sc_1688",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: `callback` {Function} * `err` {Error}...] Asynchronously append data to a file, creating the file if it does not yet exist.",
      "position": 5
    },
    {
      "id": "sc_1689",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: Asynchronously append data to a file, creating the...] `data` can be a string or a {Buffer}.",
      "position": 6
    },
    {
      "id": "sc_1690",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: `data` can be a string or a {Buffer}....] The `mode` option only affects the newly created file.",
      "position": 7
    },
    {
      "id": "sc_1691",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
      "position": 8
    },
    {
      "id": "sc_1692",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: open()`][] for more details....] If `options` is a string, then it specifies the encoding:",
      "position": 9
    },
    {
      "id": "sc_1693",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: If `options` is a string, then it specifies the en...] The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
      "position": 10
    },
    {
      "id": "sc_1694",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] [Previous: The `path` may be specified as a numeric file desc...] open()` or `fs.",
      "position": 11
    },
    {
      "id": "sc_1695",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] openSync()`).",
      "position": 12
    },
    {
      "id": "sc_1696",
      "type": "sentence_context",
      "content": "[`fs.appendFile(path, data[, options], callback)`] The file descriptor will not be closed automatically.",
      "position": 13
    },
    {
      "id": "s_1697",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_1698",
      "type": "sentence",
      "content": "**Default:** `'a'`.",
      "position": 1
    },
    {
      "id": "s_1699",
      "type": "sentence",
      "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
      "position": 2
    },
    {
      "id": "s_1700",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 3
    },
    {
      "id": "s_1701",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error}",
      "position": 4
    },
    {
      "id": "s_1702",
      "type": "sentence",
      "content": "Asynchronously append data to a file, creating the file if it does not yet exist.",
      "position": 5
    },
    {
      "id": "s_1703",
      "type": "sentence",
      "content": "`data` can be a string or a {Buffer}.",
      "position": 6
    },
    {
      "id": "s_1704",
      "type": "sentence",
      "content": "The `mode` option only affects the newly created file.",
      "position": 7
    },
    {
      "id": "s_1705",
      "type": "sentence",
      "content": "open()`][] for more details.",
      "position": 8
    },
    {
      "id": "s_1706",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the encoding:",
      "position": 9
    },
    {
      "id": "s_1707",
      "type": "sentence",
      "content": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
      "position": 10
    },
    {
      "id": "s_1708",
      "type": "sentence",
      "content": "open()` or `fs.",
      "position": 11
    },
    {
      "id": "s_1709",
      "type": "sentence",
      "content": "openSync()`).",
      "position": 12
    },
    {
      "id": "s_1710",
      "type": "sentence",
      "content": "The file descriptor will not be closed automatically.",
      "position": 13
    },
    {
      "id": "w_1711",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `mode` {string|integer} `callback` {Function}\n* `err` {Error} Asynchronously changes the permissions of a file. No arguments other than a\npossible exception are given to the completion callback. See the POSIX chmod(2) documentation for more detail.",
      "position": 0,
      "windowSize": 35
    },
    {
      "id": "sw_1712",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `mode` {string|integer} `callback` {Function} * `err` {Error} Asynchronously changes the permissions of a file. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1713",
      "type": "sentence_window",
      "content": "Asynchronously changes the permissions of a file. No arguments other than a possible exception are given to the completion callback. See the POSIX chmod(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1714",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX chmod(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_1715",
      "type": "sentence_context",
      "content": "[`fs.chmod(path, mode, callback)`] `path` {string|Buffer|URL} `mode` {string|integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_1716",
      "type": "sentence_context",
      "content": "[`fs.chmod(path, mode, callback)`] [Previous: `path` {string|Buffer|URL} `mode` {string|integer}...] Asynchronously changes the permissions of a file.",
      "position": 1
    },
    {
      "id": "sc_1717",
      "type": "sentence_context",
      "content": "[`fs.chmod(path, mode, callback)`] [Previous: Asynchronously changes the permissions of a file....] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_1718",
      "type": "sentence_context",
      "content": "[`fs.chmod(path, mode, callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX chmod(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_1719",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `mode` {string|integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_1720",
      "type": "sentence",
      "content": "Asynchronously changes the permissions of a file.",
      "position": 1
    },
    {
      "id": "s_1721",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_1722",
      "type": "sentence",
      "content": "See the POSIX chmod(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "w_1723",
      "type": "window",
      "content": "The `mode` argument used in both the `fs.chmod()` and `fs.chmodSync()`\nmethods is a numeric bitmask created using a logical OR of the following\nconstants: An easier method of constructing the `mode` is to use a sequence of three\noctal digits (e.g. `765`). The left-most digit (`7` in the example), specifies\nthe permissions for the file owner. The middle digit (`6` in the example),\nspecifies permissions for the group. The right-most digit (`5` in the example),\nspecifies the permissions for others. For example, the octal value `0o765` means: The owner may read, write, and execute the file. The group may read and write the file. Others may read and execute the file. When using raw numbers where file modes are expected, any value larger than\n`0o777` may result in platform-specific behaviors that are not supported to work\nconsistently. Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are\nnot exposed in `fs.constants`. Caveats: on Windows only the write permission can be changed, and the\ndistinction among the permissions of group, owner, or others is not\nimplemented.",
      "position": 0,
      "windowSize": 162
    },
    {
      "id": "sw_1724",
      "type": "sentence_window",
      "content": "The `mode` argument used in both the `fs. chmod()` and `fs. chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants:",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1725",
      "type": "sentence_window",
      "content": "chmod()` and `fs. chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants: An easier method of constructing the `mode` is to use a sequence of three octal digits (e.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1726",
      "type": "sentence_window",
      "content": "chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants: An easier method of constructing the `mode` is to use a sequence of three octal digits (e. The left-most digit (`7` in the example), specifies the permissions for the file owner.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1727",
      "type": "sentence_window",
      "content": "An easier method of constructing the `mode` is to use a sequence of three octal digits (e. The left-most digit (`7` in the example), specifies the permissions for the file owner. The middle digit (`6` in the example), specifies permissions for the group.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1728",
      "type": "sentence_window",
      "content": "The left-most digit (`7` in the example), specifies the permissions for the file owner. The middle digit (`6` in the example), specifies permissions for the group. The right-most digit (`5` in the example), specifies the permissions for others.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1729",
      "type": "sentence_window",
      "content": "The middle digit (`6` in the example), specifies permissions for the group. The right-most digit (`5` in the example), specifies the permissions for others. For example, the octal value `0o765` means:",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1730",
      "type": "sentence_window",
      "content": "The right-most digit (`5` in the example), specifies the permissions for others. For example, the octal value `0o765` means: The owner may read, write, and execute the file.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1731",
      "type": "sentence_window",
      "content": "For example, the octal value `0o765` means: The owner may read, write, and execute the file. The group may read and write the file.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1732",
      "type": "sentence_window",
      "content": "The owner may read, write, and execute the file. The group may read and write the file. Others may read and execute the file.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1733",
      "type": "sentence_window",
      "content": "The group may read and write the file. Others may read and execute the file. When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1734",
      "type": "sentence_window",
      "content": "Others may read and execute the file. When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently. Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1735",
      "type": "sentence_window",
      "content": "When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently. Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs. constants`.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_1736",
      "type": "sentence_window",
      "content": "Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs. constants`. Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_1737",
      "type": "sentence_window",
      "content": "constants`. Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented.",
      "position": 13,
      "sentenceCount": 2
    },
    {
      "id": "sc_1738",
      "type": "sentence_context",
      "content": "[File modes] The `mode` argument used in both the `fs.",
      "position": 0
    },
    {
      "id": "sc_1739",
      "type": "sentence_context",
      "content": "[File modes] [Previous: The `mode` argument used in both the `fs....] chmod()` and `fs.",
      "position": 1
    },
    {
      "id": "sc_1740",
      "type": "sentence_context",
      "content": "[File modes] chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants:",
      "position": 2
    },
    {
      "id": "sc_1741",
      "type": "sentence_context",
      "content": "[File modes] [Previous: chmodSync()` methods is a numeric bitmask created ...] An easier method of constructing the `mode` is to use a sequence of three octal digits (e.",
      "position": 3
    },
    {
      "id": "sc_1742",
      "type": "sentence_context",
      "content": "[File modes] [Previous: An easier method of constructing the `mode` is to ...] The left-most digit (`7` in the example), specifies the permissions for the file owner.",
      "position": 4
    },
    {
      "id": "sc_1743",
      "type": "sentence_context",
      "content": "[File modes] [Previous: The left-most digit (`7` in the example), specifie...] The middle digit (`6` in the example), specifies permissions for the group.",
      "position": 5
    },
    {
      "id": "sc_1744",
      "type": "sentence_context",
      "content": "[File modes] [Previous: The middle digit (`6` in the example), specifies p...] The right-most digit (`5` in the example), specifies the permissions for others.",
      "position": 6
    },
    {
      "id": "sc_1745",
      "type": "sentence_context",
      "content": "[File modes] [Previous: The right-most digit (`5` in the example), specifi...] For example, the octal value `0o765` means:",
      "position": 7
    },
    {
      "id": "sc_1746",
      "type": "sentence_context",
      "content": "[File modes] [Previous: For example, the octal value `0o765` means:...] The owner may read, write, and execute the file.",
      "position": 8
    },
    {
      "id": "sc_1747",
      "type": "sentence_context",
      "content": "[File modes] [Previous: The owner may read, write, and execute the file....] The group may read and write the file.",
      "position": 9
    },
    {
      "id": "sc_1748",
      "type": "sentence_context",
      "content": "[File modes] [Previous: The group may read and write the file....] Others may read and execute the file.",
      "position": 10
    },
    {
      "id": "sc_1749",
      "type": "sentence_context",
      "content": "[File modes] [Previous: Others may read and execute the file....] When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently.",
      "position": 11
    },
    {
      "id": "sc_1750",
      "type": "sentence_context",
      "content": "[File modes] [Previous: When using raw numbers where file modes are expect...] Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs.",
      "position": 12
    },
    {
      "id": "sc_1751",
      "type": "sentence_context",
      "content": "[File modes] [Previous: Therefore constants like `S_ISVTX`, `S_ISGID`, or ...] constants`.",
      "position": 13
    },
    {
      "id": "sc_1752",
      "type": "sentence_context",
      "content": "[File modes] Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented.",
      "position": 14
    },
    {
      "id": "s_1753",
      "type": "sentence",
      "content": "The `mode` argument used in both the `fs.",
      "position": 0
    },
    {
      "id": "s_1754",
      "type": "sentence",
      "content": "chmod()` and `fs.",
      "position": 1
    },
    {
      "id": "s_1755",
      "type": "sentence",
      "content": "chmodSync()` methods is a numeric bitmask created using a logical OR of the following constants:",
      "position": 2
    },
    {
      "id": "s_1756",
      "type": "sentence",
      "content": "An easier method of constructing the `mode` is to use a sequence of three octal digits (e.",
      "position": 3
    },
    {
      "id": "s_1757",
      "type": "sentence",
      "content": "The left-most digit (`7` in the example), specifies the permissions for the file owner.",
      "position": 4
    },
    {
      "id": "s_1758",
      "type": "sentence",
      "content": "The middle digit (`6` in the example), specifies permissions for the group.",
      "position": 5
    },
    {
      "id": "s_1759",
      "type": "sentence",
      "content": "The right-most digit (`5` in the example), specifies the permissions for others.",
      "position": 6
    },
    {
      "id": "s_1760",
      "type": "sentence",
      "content": "For example, the octal value `0o765` means:",
      "position": 7
    },
    {
      "id": "s_1761",
      "type": "sentence",
      "content": "The owner may read, write, and execute the file.",
      "position": 8
    },
    {
      "id": "s_1762",
      "type": "sentence",
      "content": "The group may read and write the file.",
      "position": 9
    },
    {
      "id": "s_1763",
      "type": "sentence",
      "content": "Others may read and execute the file.",
      "position": 10
    },
    {
      "id": "s_1764",
      "type": "sentence",
      "content": "When using raw numbers where file modes are expected, any value larger than `0o777` may result in platform-specific behaviors that are not supported to work consistently.",
      "position": 11
    },
    {
      "id": "s_1765",
      "type": "sentence",
      "content": "Therefore constants like `S_ISVTX`, `S_ISGID`, or `S_ISUID` are not exposed in `fs.",
      "position": 12
    },
    {
      "id": "s_1766",
      "type": "sentence",
      "content": "constants`.",
      "position": 13
    },
    {
      "id": "s_1767",
      "type": "sentence",
      "content": "Caveats: on Windows only the write permission can be changed, and the distinction among the permissions of group, owner, or others is not implemented.",
      "position": 14
    },
    {
      "id": "w_1768",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function}\n* `err` {Error} Asynchronously changes owner and group of a file. No arguments other than a\npossible exception are given to the completion callback. See the POSIX chown(2) documentation for more detail.",
      "position": 0,
      "windowSize": 38
    },
    {
      "id": "sw_1769",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error} Asynchronously changes owner and group of a file. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1770",
      "type": "sentence_window",
      "content": "Asynchronously changes owner and group of a file. No arguments other than a possible exception are given to the completion callback. See the POSIX chown(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1771",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX chown(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_1772",
      "type": "sentence_context",
      "content": "[`fs.chown(path, uid, gid, callback)`] `path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_1773",
      "type": "sentence_context",
      "content": "[`fs.chown(path, uid, gid, callback)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} `gid` {...] Asynchronously changes owner and group of a file.",
      "position": 1
    },
    {
      "id": "sc_1774",
      "type": "sentence_context",
      "content": "[`fs.chown(path, uid, gid, callback)`] [Previous: Asynchronously changes owner and group of a file....] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_1775",
      "type": "sentence_context",
      "content": "[`fs.chown(path, uid, gid, callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX chown(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_1776",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_1777",
      "type": "sentence",
      "content": "Asynchronously changes owner and group of a file.",
      "position": 1
    },
    {
      "id": "s_1778",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_1779",
      "type": "sentence",
      "content": "See the POSIX chown(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "w_1780",
      "type": "window",
      "content": "`fd` {integer} `callback` {Function}\n* `err` {Error} Closes the file descriptor. No arguments other than a possible exception are\ngiven to the completion callback. Calling `fs.close()` on any file descriptor (`fd`) that is currently in use\nthrough any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
      "position": 0,
      "windowSize": 51
    },
    {
      "id": "sw_1781",
      "type": "sentence_window",
      "content": "`fd` {integer} `callback` {Function} * `err` {Error} Closes the file descriptor. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1782",
      "type": "sentence_window",
      "content": "Closes the file descriptor. No arguments other than a possible exception are given to the completion callback. Calling `fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1783",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. Calling `fs. close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1784",
      "type": "sentence_window",
      "content": "Calling `fs. close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1785",
      "type": "sentence_window",
      "content": "close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_1786",
      "type": "sentence_context",
      "content": "[`fs.close(fd[, callback])`] `fd` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_1787",
      "type": "sentence_context",
      "content": "[`fs.close(fd[, callback])`] [Previous: `fd` {integer} `callback` {Function} * `err` {Erro...] Closes the file descriptor.",
      "position": 1
    },
    {
      "id": "sc_1788",
      "type": "sentence_context",
      "content": "[`fs.close(fd[, callback])`] [Previous: Closes the file descriptor....] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_1789",
      "type": "sentence_context",
      "content": "[`fs.close(fd[, callback])`] [Previous: No arguments other than a possible exception are g...] Calling `fs.",
      "position": 3
    },
    {
      "id": "sc_1790",
      "type": "sentence_context",
      "content": "[`fs.close(fd[, callback])`] close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
      "position": 4
    },
    {
      "id": "sc_1791",
      "type": "sentence_context",
      "content": "[`fs.close(fd[, callback])`] [Previous: close()` on any file descriptor (`fd`) that is cur...] See the POSIX close(2) documentation for more detail.",
      "position": 5
    },
    {
      "id": "s_1792",
      "type": "sentence",
      "content": "`fd` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_1793",
      "type": "sentence",
      "content": "Closes the file descriptor.",
      "position": 1
    },
    {
      "id": "s_1794",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_1795",
      "type": "sentence",
      "content": "Calling `fs.",
      "position": 3
    },
    {
      "id": "s_1796",
      "type": "sentence",
      "content": "close()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
      "position": 4
    },
    {
      "id": "s_1797",
      "type": "sentence",
      "content": "See the POSIX close(2) documentation for more detail.",
      "position": 5
    },
    {
      "id": "w_1798",
      "type": "window",
      "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation. **Default:** `0`. `callback` {Function}\n* `err` {Error} Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it\nalready exists. No arguments other than a possible exception are given to the\ncallback function. Node.js makes no guarantees about the atomicity of the copy\noperation. If an error occurs after the destination file has been opened for\nwriting, Node.js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`). `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest` already\nexists. `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used. `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support\ncopy-on-write, then the operation will fail.",
      "position": 0,
      "windowSize": 164
    },
    {
      "id": "sw_1799",
      "type": "sentence_window",
      "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation. **Default:** `0`. `callback` {Function} * `err` {Error}",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1800",
      "type": "sentence_window",
      "content": "**Default:** `0`. `callback` {Function} * `err` {Error} Asynchronously copies `src` to `dest`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1801",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1802",
      "type": "sentence_window",
      "content": "Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists. No arguments other than a possible exception are given to the callback function.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1803",
      "type": "sentence_window",
      "content": "By default, `dest` is overwritten if it already exists. No arguments other than a possible exception are given to the callback function. js makes no guarantees about the atomicity of the copy operation.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1804",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the callback function. js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1805",
      "type": "sentence_window",
      "content": "js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node. js will attempt to remove the destination.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1806",
      "type": "sentence_window",
      "content": "If an error occurs after the destination file has been opened for writing, Node. js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior of the copy operation.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1807",
      "type": "sentence_window",
      "content": "js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1808",
      "type": "sentence_window",
      "content": "`mode` is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1809",
      "type": "sentence_window",
      "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs. COPYFILE_FICLONE`).",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1810",
      "type": "sentence_window",
      "content": "COPYFILE_EXCL | fs. COPYFILE_FICLONE`). COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_1811",
      "type": "sentence_window",
      "content": "COPYFILE_FICLONE`). COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_1812",
      "type": "sentence_window",
      "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_1813",
      "type": "sentence_window",
      "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_1814",
      "type": "sentence_window",
      "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_1815",
      "type": "sentence_window",
      "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.",
      "position": 16,
      "sentenceCount": 2
    },
    {
      "id": "sc_1816",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] `src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation.",
      "position": 0
    },
    {
      "id": "sc_1817",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: `src` {string|Buffer|URL} source filename to copy ...] **Default:** `0`.",
      "position": 1
    },
    {
      "id": "sc_1818",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] `callback` {Function} * `err` {Error}",
      "position": 2
    },
    {
      "id": "sc_1819",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: `callback` {Function} * `err` {Error}...] Asynchronously copies `src` to `dest`.",
      "position": 3
    },
    {
      "id": "sc_1820",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: Asynchronously copies `src` to `dest`....] By default, `dest` is overwritten if it already exists.",
      "position": 4
    },
    {
      "id": "sc_1821",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: By default, `dest` is overwritten if it already ex...] No arguments other than a possible exception are given to the callback function.",
      "position": 5
    },
    {
      "id": "sc_1822",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: No arguments other than a possible exception are g...] js makes no guarantees about the atomicity of the copy operation.",
      "position": 6
    },
    {
      "id": "sc_1823",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: js makes no guarantees about the atomicity of the ...] If an error occurs after the destination file has been opened for writing, Node.",
      "position": 7
    },
    {
      "id": "sc_1824",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: If an error occurs after the destination file has ...] js will attempt to remove the destination.",
      "position": 8
    },
    {
      "id": "sc_1825",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: js will attempt to remove the destination....] `mode` is an optional integer that specifies the behavior of the copy operation.",
      "position": 9
    },
    {
      "id": "sc_1826",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: `mode` is an optional integer that specifies the b...] It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
      "position": 10
    },
    {
      "id": "sc_1827",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: It is possible to create a mask consisting of the ...] COPYFILE_EXCL | fs.",
      "position": 11
    },
    {
      "id": "sc_1828",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] COPYFILE_FICLONE`).",
      "position": 12
    },
    {
      "id": "sc_1829",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
      "position": 13
    },
    {
      "id": "sc_1830",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: COPYFILE_EXCL`: The copy operation will fail if `d...] COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 14
    },
    {
      "id": "sc_1831",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: COPYFILE_FICLONE`: The copy operation will attempt...] If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
      "position": 15
    },
    {
      "id": "sc_1832",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: If the platform does not support copy-on-write, th...] COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 16
    },
    {
      "id": "sc_1833",
      "type": "sentence_context",
      "content": "[`fs.copyFile(src, dest[, mode], callback)`] [Previous: COPYFILE_FICLONE_FORCE`: The copy operation will a...] If the platform does not support copy-on-write, then the operation will fail.",
      "position": 17
    },
    {
      "id": "s_1834",
      "type": "sentence",
      "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation.",
      "position": 0
    },
    {
      "id": "s_1835",
      "type": "sentence",
      "content": "**Default:** `0`.",
      "position": 1
    },
    {
      "id": "s_1836",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error}",
      "position": 2
    },
    {
      "id": "s_1837",
      "type": "sentence",
      "content": "Asynchronously copies `src` to `dest`.",
      "position": 3
    },
    {
      "id": "s_1838",
      "type": "sentence",
      "content": "By default, `dest` is overwritten if it already exists.",
      "position": 4
    },
    {
      "id": "s_1839",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the callback function.",
      "position": 5
    },
    {
      "id": "s_1840",
      "type": "sentence",
      "content": "js makes no guarantees about the atomicity of the copy operation.",
      "position": 6
    },
    {
      "id": "s_1841",
      "type": "sentence",
      "content": "If an error occurs after the destination file has been opened for writing, Node.",
      "position": 7
    },
    {
      "id": "s_1842",
      "type": "sentence",
      "content": "js will attempt to remove the destination.",
      "position": 8
    },
    {
      "id": "s_1843",
      "type": "sentence",
      "content": "`mode` is an optional integer that specifies the behavior of the copy operation.",
      "position": 9
    },
    {
      "id": "s_1844",
      "type": "sentence",
      "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
      "position": 10
    },
    {
      "id": "s_1845",
      "type": "sentence",
      "content": "COPYFILE_EXCL | fs.",
      "position": 11
    },
    {
      "id": "s_1846",
      "type": "sentence",
      "content": "COPYFILE_FICLONE`).",
      "position": 12
    },
    {
      "id": "s_1847",
      "type": "sentence",
      "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
      "position": 13
    },
    {
      "id": "s_1848",
      "type": "sentence",
      "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 14
    },
    {
      "id": "s_1849",
      "type": "sentence",
      "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
      "position": 15
    },
    {
      "id": "s_1850",
      "type": "sentence",
      "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 16
    },
    {
      "id": "s_1851",
      "type": "sentence",
      "content": "If the platform does not support copy-on-write, then the operation will fail.",
      "position": 17
    },
    {
      "id": "w_1852",
      "type": "window",
      "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object}\n* `dereference` {boolean} dereference symlinks. **Default:** `false`.\n* `errorOnExist` {boolean} when `force` is `false`, and the destination\n  exists, throw an error. **Default:** `false`.\n* `filter` {Function} Function to filter copied files/directories. Return\n  `true` to copy the item, `false` to ignore it. When ignoring a directory,\n  all of its contents will be skipped as well. Can also return a `Promise`\n  that resolves to `true` or `false` **Default:** `undefined`.\n  * `src` {string} source path to copy.\n  * `dest` {string} destination path to copy to.\n  * Returns: {boolean|Promise} A value that is coercible to `boolean` or\n    a `Promise` that fulfils with such value.\n* `force` {boolean} overwrite existing file or directory. The copy\n  operation will ignore errors if you set this to false and the destination\n  exists. Use the `errorOnExist` option to change this behavior.\n  **Default:** `true`.\n* `mode` {integer} modifiers for copy operation. **Default:** `0`.\n  See `mode` flag of [`fs.copyFile()`][].\n* `preserveTimestamps` {boolean} When `true` timestamps from `src` will\n  be preserved. **Default:** `false`.\n* `recursive` {boolean} copy directories recursively **Default:** `false`\n* `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will\n  be skipped. **Default:** `false` `callback` {Function}\n* `err` {Error} Asynchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
      "position": 0,
      "windowSize": 241
    },
    {
      "id": "w_1853",
      "type": "window",
      "content": " be preserved. **Default:** `false`.\n* `recursive` {boolean} copy directories recursively **Default:** `false`\n* `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will\n  be skipped. **Default:** `false` `callback` {Function}\n* `err` {Error} Asynchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
      "position": 180,
      "windowSize": 61
    },
    {
      "id": "sw_1854",
      "type": "sentence_window",
      "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1855",
      "type": "sentence_window",
      "content": "`dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1856",
      "type": "sentence_window",
      "content": "`options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1857",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1858",
      "type": "sentence_window",
      "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`. * `filter` {Function} Function to filter copied files/directories.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1859",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1860",
      "type": "sentence_window",
      "content": "* `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1861",
      "type": "sentence_window",
      "content": "Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well. Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1862",
      "type": "sentence_window",
      "content": "When ignoring a directory, all of its contents will be skipped as well. Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`. * `src` {string} source path to copy.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1863",
      "type": "sentence_window",
      "content": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`. * `src` {string} source path to copy. * `dest` {string} destination path to copy to.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1864",
      "type": "sentence_window",
      "content": "* `src` {string} source path to copy. * `dest` {string} destination path to copy to. * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1865",
      "type": "sentence_window",
      "content": "* `dest` {string} destination path to copy to. * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value. * `force` {boolean} overwrite existing file or directory.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_1866",
      "type": "sentence_window",
      "content": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value. * `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_1867",
      "type": "sentence_window",
      "content": "* `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_1868",
      "type": "sentence_window",
      "content": "The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior. **Default:** `true`.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_1869",
      "type": "sentence_window",
      "content": "Use the `errorOnExist` option to change this behavior. **Default:** `true`. * `mode` {integer} modifiers for copy operation.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_1870",
      "type": "sentence_window",
      "content": "**Default:** `true`. * `mode` {integer} modifiers for copy operation. **Default:** `0`.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_1871",
      "type": "sentence_window",
      "content": "* `mode` {integer} modifiers for copy operation. **Default:** `0`. See `mode` flag of [`fs.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_1872",
      "type": "sentence_window",
      "content": "**Default:** `0`. See `mode` flag of [`fs. copyFile()`][].",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_1873",
      "type": "sentence_window",
      "content": "See `mode` flag of [`fs. copyFile()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_1874",
      "type": "sentence_window",
      "content": "copyFile()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_1875",
      "type": "sentence_window",
      "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_1876",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false` `callback` {Function} * `err` {Error}",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_1877",
      "type": "sentence_window",
      "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false` `callback` {Function} * `err` {Error} Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
      "position": 23,
      "sentenceCount": 3
    },
    {
      "id": "sw_1878",
      "type": "sentence_window",
      "content": "**Default:** `false` `callback` {Function} * `err` {Error} Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 24,
      "sentenceCount": 3
    },
    {
      "id": "sw_1879",
      "type": "sentence_window",
      "content": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 25,
      "sentenceCount": 2
    },
    {
      "id": "sc_1880",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] `src` {string|URL} source path to copy.",
      "position": 0
    },
    {
      "id": "sc_1881",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: `src` {string|URL} source path to copy....] `dest` {string|URL} destination path to copy to.",
      "position": 1
    },
    {
      "id": "sc_1882",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: `dest` {string|URL} destination path to copy to....] `options` {Object} * `dereference` {boolean} dereference symlinks.",
      "position": 2
    },
    {
      "id": "sc_1883",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: `options` {Object} * `dereference` {boolean} deref...] **Default:** `false`.",
      "position": 3
    },
    {
      "id": "sc_1884",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: **Default:** `false`....] * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
      "position": 4
    },
    {
      "id": "sc_1885",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `errorOnExist` {boolean} when `force` is `false`...] **Default:** `false`.",
      "position": 5
    },
    {
      "id": "sc_1886",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: **Default:** `false`....] * `filter` {Function} Function to filter copied files/directories.",
      "position": 6
    },
    {
      "id": "sc_1887",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `filter` {Function} Function to filter copied fi...] Return `true` to copy the item, `false` to ignore it.",
      "position": 7
    },
    {
      "id": "sc_1888",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: Return `true` to copy the item, `false` to ignore ...] When ignoring a directory, all of its contents will be skipped as well.",
      "position": 8
    },
    {
      "id": "sc_1889",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: When ignoring a directory, all of its contents wil...] Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
      "position": 9
    },
    {
      "id": "sc_1890",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: Can also return a `Promise` that resolves to `true...] * `src` {string} source path to copy.",
      "position": 10
    },
    {
      "id": "sc_1891",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `src` {string} source path to copy....] * `dest` {string} destination path to copy to.",
      "position": 11
    },
    {
      "id": "sc_1892",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `dest` {string} destination path to copy to....] * Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
      "position": 12
    },
    {
      "id": "sc_1893",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * Returns: {boolean|Promise} A value that is coerc...] * `force` {boolean} overwrite existing file or directory.",
      "position": 13
    },
    {
      "id": "sc_1894",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `force` {boolean} overwrite existing file or dir...] The copy operation will ignore errors if you set this to false and the destination exists.",
      "position": 14
    },
    {
      "id": "sc_1895",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: The copy operation will ignore errors if you set t...] Use the `errorOnExist` option to change this behavior.",
      "position": 15
    },
    {
      "id": "sc_1896",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: Use the `errorOnExist` option to change this behav...] **Default:** `true`.",
      "position": 16
    },
    {
      "id": "sc_1897",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] * `mode` {integer} modifiers for copy operation.",
      "position": 17
    },
    {
      "id": "sc_1898",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `mode` {integer} modifiers for copy operation....] **Default:** `0`.",
      "position": 18
    },
    {
      "id": "sc_1899",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] See `mode` flag of [`fs.",
      "position": 19
    },
    {
      "id": "sc_1900",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: See `mode` flag of [`fs....] copyFile()`][].",
      "position": 20
    },
    {
      "id": "sc_1901",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
      "position": 21
    },
    {
      "id": "sc_1902",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `preserveTimestamps` {boolean} When `true` times...] **Default:** `false`.",
      "position": 22
    },
    {
      "id": "sc_1903",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: **Default:** `false`....] * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
      "position": 23
    },
    {
      "id": "sc_1904",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: * `recursive` {boolean} copy directories recursive...] **Default:** `false` `callback` {Function} * `err` {Error}",
      "position": 24
    },
    {
      "id": "sc_1905",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: **Default:** `false` `callback` {Function} * `err`...] Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
      "position": 25
    },
    {
      "id": "sc_1906",
      "type": "sentence_context",
      "content": "[`fs.cp(src, dest[, options], callback)`] [Previous: Asynchronously copies the entire directory structu...] When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 26
    },
    {
      "id": "s_1907",
      "type": "sentence",
      "content": "`src` {string|URL} source path to copy.",
      "position": 0
    },
    {
      "id": "s_1908",
      "type": "sentence",
      "content": "`dest` {string|URL} destination path to copy to.",
      "position": 1
    },
    {
      "id": "s_1909",
      "type": "sentence",
      "content": "`options` {Object} * `dereference` {boolean} dereference symlinks.",
      "position": 2
    },
    {
      "id": "s_1910",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 3
    },
    {
      "id": "s_1911",
      "type": "sentence",
      "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
      "position": 4
    },
    {
      "id": "s_1912",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 5
    },
    {
      "id": "s_1913",
      "type": "sentence",
      "content": "* `filter` {Function} Function to filter copied files/directories.",
      "position": 6
    },
    {
      "id": "s_1914",
      "type": "sentence",
      "content": "Return `true` to copy the item, `false` to ignore it.",
      "position": 7
    },
    {
      "id": "s_1915",
      "type": "sentence",
      "content": "When ignoring a directory, all of its contents will be skipped as well.",
      "position": 8
    },
    {
      "id": "s_1916",
      "type": "sentence",
      "content": "Can also return a `Promise` that resolves to `true` or `false` **Default:** `undefined`.",
      "position": 9
    },
    {
      "id": "s_1917",
      "type": "sentence",
      "content": "* `src` {string} source path to copy.",
      "position": 10
    },
    {
      "id": "s_1918",
      "type": "sentence",
      "content": "* `dest` {string} destination path to copy to.",
      "position": 11
    },
    {
      "id": "s_1919",
      "type": "sentence",
      "content": "* Returns: {boolean|Promise} A value that is coercible to `boolean` or a `Promise` that fulfils with such value.",
      "position": 12
    },
    {
      "id": "s_1920",
      "type": "sentence",
      "content": "* `force` {boolean} overwrite existing file or directory.",
      "position": 13
    },
    {
      "id": "s_1921",
      "type": "sentence",
      "content": "The copy operation will ignore errors if you set this to false and the destination exists.",
      "position": 14
    },
    {
      "id": "s_1922",
      "type": "sentence",
      "content": "Use the `errorOnExist` option to change this behavior.",
      "position": 15
    },
    {
      "id": "s_1923",
      "type": "sentence",
      "content": "**Default:** `true`.",
      "position": 16
    },
    {
      "id": "s_1924",
      "type": "sentence",
      "content": "* `mode` {integer} modifiers for copy operation.",
      "position": 17
    },
    {
      "id": "s_1925",
      "type": "sentence",
      "content": "**Default:** `0`.",
      "position": 18
    },
    {
      "id": "s_1926",
      "type": "sentence",
      "content": "See `mode` flag of [`fs.",
      "position": 19
    },
    {
      "id": "s_1927",
      "type": "sentence",
      "content": "copyFile()`][].",
      "position": 20
    },
    {
      "id": "s_1928",
      "type": "sentence",
      "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
      "position": 21
    },
    {
      "id": "s_1929",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 22
    },
    {
      "id": "s_1930",
      "type": "sentence",
      "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
      "position": 23
    },
    {
      "id": "s_1931",
      "type": "sentence",
      "content": "**Default:** `false` `callback` {Function} * `err` {Error}",
      "position": 24
    },
    {
      "id": "s_1932",
      "type": "sentence",
      "content": "Asynchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
      "position": 25
    },
    {
      "id": "s_1933",
      "type": "sentence",
      "content": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 26
    },
    {
      "id": "w_1934",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `flags` {string} See [support of file system `flags`][]. **Default:**\n  `'r'`.\n* `encoding` {string} **Default:** `null`\n* `fd` {integer|FileHandle} **Default:** `null`\n* `mode` {integer} **Default:** `0o666`\n* `autoClose` {boolean} **Default:** `true`\n* `emitClose` {boolean} **Default:** `true`\n* `start` {integer}\n* `end` {integer} **Default:** `Infinity`\n* `highWaterMark` {integer} **Default:** `64 * 1024`\n* `fs` {Object|null} **Default:** `null`\n* `signal` {AbortSignal|null} **Default:** `null` Returns: {fs.ReadStream} `options` can include `start` and `end` values to read a range of bytes from\nthe file instead of the entire file. Both `start` and `end` are inclusive and\nstart counting at 0, allowed values are in the\n\\[0, [`Number.MAX_SAFE_INTEGER`][]] range. If `fd` is specified and `start` is\nomitted or `undefined`, `fs.createReadStream()` reads sequentially from the\ncurrent file position. The `encoding` can be any one of those accepted by\n{Buffer}. If `fd` is specified, `ReadStream` will ignore the `path` argument and will use\nthe specified file descriptor. This means that no `'open'` event will be\nemitted. `fd` should be blocking; non-blocking `fd`s should be passed to\n{net.Socket}. If `fd` points to a character device that only supports blocking reads\n(such as keyboard or sound card), read operations do not finish until data is\navailable. This can prevent the process from exiting and the stream from\nclosing naturally. By default, the stream will emit a `'close'` event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option, it is possible to override the corresponding `fs`\nimplementations for `open`, `read`, and `close`. When providing the `fs` option,\nan override for `read` is required. If no `fd` is provided, an override for\n`open` is also required. If `autoClose` is `true`, an override for `close` is\nalso required. If `autoClose` is false, then the file descriptor won't be closed, even if\nthere's an error. It",
      "position": 0,
      "windowSize": 280
    },
    {
      "id": "w_1935",
      "type": "window",
      "content": "can prevent the process from exiting and the stream from\nclosing naturally. By default, the stream will emit a `'close'` event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option, it is possible to override the corresponding `fs`\nimplementations for `open`, `read`, and `close`. When providing the `fs` option,\nan override for `read` is required. If no `fd` is provided, an override for\n`open` is also required. If `autoClose` is `true`, an override for `close` is\nalso required. If `autoClose` is false, then the file descriptor won't be closed, even if\nthere's an error. It is the application's responsibility to close it and make\nsure there's no file descriptor leak. If `autoClose` is set to true (default\nbehavior), on `'error'` or `'end'` the file descriptor will be closed\nautomatically. `mode` sets the file mode (permission and sticky bits), but only if the\nfile was created. An example to read the last 10 bytes of a file which is 100 bytes long: If `options` is a string, then it specifies the encoding.",
      "position": 180,
      "windowSize": 172
    },
    {
      "id": "sw_1936",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][]. **Default:** `'r'`. * `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:**",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_1937",
      "type": "sentence_window",
      "content": "**Default:** `'r'`. * `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 *",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_1938",
      "type": "sentence_window",
      "content": "* `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `fs`",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_1939",
      "type": "sentence_window",
      "content": "ReadStream} `options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file. Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_1940",
      "type": "sentence_window",
      "content": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file. Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_1941",
      "type": "sentence_window",
      "content": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range. If `fd` is specified and `start` is omitted or `undefined`, `fs.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_1942",
      "type": "sentence_window",
      "content": "MAX_SAFE_INTEGER`][]] range. If `fd` is specified and `start` is omitted or `undefined`, `fs. createReadStream()` reads sequentially from the current file position.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_1943",
      "type": "sentence_window",
      "content": "If `fd` is specified and `start` is omitted or `undefined`, `fs. createReadStream()` reads sequentially from the current file position. The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_1944",
      "type": "sentence_window",
      "content": "createReadStream()` reads sequentially from the current file position. The `encoding` can be any one of those accepted by {Buffer}. If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_1945",
      "type": "sentence_window",
      "content": "The `encoding` can be any one of those accepted by {Buffer}. If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor. This means that no `'open'` event will be emitted.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_1946",
      "type": "sentence_window",
      "content": "If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor. This means that no `'open'` event will be emitted. `fd` should be blocking; non-blocking `fd`s should be passed to {net.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_1947",
      "type": "sentence_window",
      "content": "This means that no `'open'` event will be emitted. `fd` should be blocking; non-blocking `fd`s should be passed to {net. If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_1948",
      "type": "sentence_window",
      "content": "`fd` should be blocking; non-blocking `fd`s should be passed to {net. If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available. This can prevent the process from exiting and the stream from closing naturally.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_1949",
      "type": "sentence_window",
      "content": "If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available. This can prevent the process from exiting and the stream from closing naturally. By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_1950",
      "type": "sentence_window",
      "content": "This can prevent the process from exiting and the stream from closing naturally. By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_1951",
      "type": "sentence_window",
      "content": "By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_1952",
      "type": "sentence_window",
      "content": "Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`. When providing the `fs` option, an override for `read` is required.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_1953",
      "type": "sentence_window",
      "content": "By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`. When providing the `fs` option, an override for `read` is required. If no `fd` is provided, an override for `open` is also required.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_1954",
      "type": "sentence_window",
      "content": "When providing the `fs` option, an override for `read` is required. If no `fd` is provided, an override for `open` is also required. If `autoClose` is `true`, an override for `close` is also required.",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_1955",
      "type": "sentence_window",
      "content": "If no `fd` is provided, an override for `open` is also required. If `autoClose` is `true`, an override for `close` is also required. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_1956",
      "type": "sentence_window",
      "content": "If `autoClose` is `true`, an override for `close` is also required. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_1957",
      "type": "sentence_window",
      "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak. If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_1958",
      "type": "sentence_window",
      "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak. If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically. `mode` sets the file mode (permission and sticky bits), but only if the file was created.",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_1959",
      "type": "sentence_window",
      "content": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically. `mode` sets the file mode (permission and sticky bits), but only if the file was created. An example to read the last 10 bytes of a file which is 100 bytes long:",
      "position": 23,
      "sentenceCount": 3
    },
    {
      "id": "sw_1960",
      "type": "sentence_window",
      "content": "`mode` sets the file mode (permission and sticky bits), but only if the file was created. An example to read the last 10 bytes of a file which is 100 bytes long: If `options` is a string, then it specifies the encoding.",
      "position": 24,
      "sentenceCount": 3
    },
    {
      "id": "sw_1961",
      "type": "sentence_window",
      "content": "An example to read the last 10 bytes of a file which is 100 bytes long: If `options` is a string, then it specifies the encoding.",
      "position": 25,
      "sentenceCount": 2
    },
    {
      "id": "sc_1962",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_1963",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] **Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "sc_1964",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] * `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer}",
      "position": 2
    },
    {
      "id": "sc_1965",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: * `encoding` {string} **Default:** `null` * `fd` {...] ReadStream}",
      "position": 3
    },
    {
      "id": "sc_1966",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] `options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file.",
      "position": 4
    },
    {
      "id": "sc_1967",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: `options` can include `start` and `end` values to ...] Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
      "position": 5
    },
    {
      "id": "sc_1968",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: Both `start` and `end` are inclusive and start cou...] MAX_SAFE_INTEGER`][]] range.",
      "position": 6
    },
    {
      "id": "sc_1969",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: MAX_SAFE_INTEGER`][]] range....] If `fd` is specified and `start` is omitted or `undefined`, `fs.",
      "position": 7
    },
    {
      "id": "sc_1970",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: If `fd` is specified and `start` is omitted or `un...] createReadStream()` reads sequentially from the current file position.",
      "position": 8
    },
    {
      "id": "sc_1971",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: createReadStream()` reads sequentially from the cu...] The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 9
    },
    {
      "id": "sc_1972",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: The `encoding` can be any one of those accepted by...] If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor.",
      "position": 10
    },
    {
      "id": "sc_1973",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: If `fd` is specified, `ReadStream` will ignore the...] This means that no `'open'` event will be emitted.",
      "position": 11
    },
    {
      "id": "sc_1974",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: This means that no `'open'` event will be emitted....] `fd` should be blocking; non-blocking `fd`s should be passed to {net.",
      "position": 12
    },
    {
      "id": "sc_1975",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: `fd` should be blocking; non-blocking `fd`s should...] If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
      "position": 13
    },
    {
      "id": "sc_1976",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: If `fd` points to a character device that only sup...] This can prevent the process from exiting and the stream from closing naturally.",
      "position": 14
    },
    {
      "id": "sc_1977",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: This can prevent the process from exiting and the ...] By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 15
    },
    {
      "id": "sc_1978",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: By default, the stream will emit a `'close'` event...] Set the `emitClose` option to `false` to change this behavior.",
      "position": 16
    },
    {
      "id": "sc_1979",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: Set the `emitClose` option to `false` to change th...] By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`.",
      "position": 17
    },
    {
      "id": "sc_1980",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: By providing the `fs` option, it is possible to ov...] When providing the `fs` option, an override for `read` is required.",
      "position": 18
    },
    {
      "id": "sc_1981",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: When providing the `fs` option, an override for `r...] If no `fd` is provided, an override for `open` is also required.",
      "position": 19
    },
    {
      "id": "sc_1982",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: If no `fd` is provided, an override for `open` is ...] If `autoClose` is `true`, an override for `close` is also required.",
      "position": 20
    },
    {
      "id": "sc_1983",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: If `autoClose` is `true`, an override for `close` ...] If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 21
    },
    {
      "id": "sc_1984",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: If `autoClose` is false, then the file descriptor ...] It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 22
    },
    {
      "id": "sc_1985",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: It is the application's responsibility to close it...] If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
      "position": 23
    },
    {
      "id": "sc_1986",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: If `autoClose` is set to true (default behavior), ...] `mode` sets the file mode (permission and sticky bits), but only if the file was created.",
      "position": 24
    },
    {
      "id": "sc_1987",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: `mode` sets the file mode (permission and sticky b...] An example to read the last 10 bytes of a file which is 100 bytes long:",
      "position": 25
    },
    {
      "id": "sc_1988",
      "type": "sentence_context",
      "content": "[`fs.createReadStream(path[, options])`] [Previous: An example to read the last 10 bytes of a file whi...] If `options` is a string, then it specifies the encoding.",
      "position": 26
    },
    {
      "id": "s_1989",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_1990",
      "type": "sentence",
      "content": "**Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "s_1991",
      "type": "sentence",
      "content": "* `encoding` {string} **Default:** `null` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `end` {integer} **Default:** `Infinity` * `highWaterMark` {integer} **Default:** `64 * 1024` * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:** `null` Returns: {fs.",
      "position": 2
    },
    {
      "id": "s_1992",
      "type": "sentence",
      "content": "ReadStream}",
      "position": 3
    },
    {
      "id": "s_1993",
      "type": "sentence",
      "content": "`options` can include `start` and `end` values to read a range of bytes from the file instead of the entire file.",
      "position": 4
    },
    {
      "id": "s_1994",
      "type": "sentence",
      "content": "Both `start` and `end` are inclusive and start counting at 0, allowed values are in the \\[0, [`Number.",
      "position": 5
    },
    {
      "id": "s_1995",
      "type": "sentence",
      "content": "MAX_SAFE_INTEGER`][]] range.",
      "position": 6
    },
    {
      "id": "s_1996",
      "type": "sentence",
      "content": "If `fd` is specified and `start` is omitted or `undefined`, `fs.",
      "position": 7
    },
    {
      "id": "s_1997",
      "type": "sentence",
      "content": "createReadStream()` reads sequentially from the current file position.",
      "position": 8
    },
    {
      "id": "s_1998",
      "type": "sentence",
      "content": "The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 9
    },
    {
      "id": "s_1999",
      "type": "sentence",
      "content": "If `fd` is specified, `ReadStream` will ignore the `path` argument and will use the specified file descriptor.",
      "position": 10
    },
    {
      "id": "s_2000",
      "type": "sentence",
      "content": "This means that no `'open'` event will be emitted.",
      "position": 11
    },
    {
      "id": "s_2001",
      "type": "sentence",
      "content": "`fd` should be blocking; non-blocking `fd`s should be passed to {net.",
      "position": 12
    },
    {
      "id": "s_2002",
      "type": "sentence",
      "content": "If `fd` points to a character device that only supports blocking reads (such as keyboard or sound card), read operations do not finish until data is available.",
      "position": 13
    },
    {
      "id": "s_2003",
      "type": "sentence",
      "content": "This can prevent the process from exiting and the stream from closing naturally.",
      "position": 14
    },
    {
      "id": "s_2004",
      "type": "sentence",
      "content": "By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 15
    },
    {
      "id": "s_2005",
      "type": "sentence",
      "content": "Set the `emitClose` option to `false` to change this behavior.",
      "position": 16
    },
    {
      "id": "s_2006",
      "type": "sentence",
      "content": "By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`.",
      "position": 17
    },
    {
      "id": "s_2007",
      "type": "sentence",
      "content": "When providing the `fs` option, an override for `read` is required.",
      "position": 18
    },
    {
      "id": "s_2008",
      "type": "sentence",
      "content": "If no `fd` is provided, an override for `open` is also required.",
      "position": 19
    },
    {
      "id": "s_2009",
      "type": "sentence",
      "content": "If `autoClose` is `true`, an override for `close` is also required.",
      "position": 20
    },
    {
      "id": "s_2010",
      "type": "sentence",
      "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 21
    },
    {
      "id": "s_2011",
      "type": "sentence",
      "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 22
    },
    {
      "id": "s_2012",
      "type": "sentence",
      "content": "If `autoClose` is set to true (default behavior), on `'error'` or `'end'` the file descriptor will be closed automatically.",
      "position": 23
    },
    {
      "id": "s_2013",
      "type": "sentence",
      "content": "`mode` sets the file mode (permission and sticky bits), but only if the file was created.",
      "position": 24
    },
    {
      "id": "s_2014",
      "type": "sentence",
      "content": "An example to read the last 10 bytes of a file which is 100 bytes long:",
      "position": 25
    },
    {
      "id": "s_2015",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the encoding.",
      "position": 26
    },
    {
      "id": "w_2016",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `flags` {string} See [support of file system `flags`][]. **Default:**\n  `'w'`.\n* `encoding` {string} **Default:** `'utf8'`\n* `fd` {integer|FileHandle} **Default:** `null`\n* `mode` {integer} **Default:** `0o666`\n* `autoClose` {boolean} **Default:** `true`\n* `emitClose` {boolean} **Default:** `true`\n* `start` {integer}\n* `fs` {Object|null} **Default:** `null`\n* `signal` {AbortSignal|null} **Default:** `null`\n* `highWaterMark` {number} **Default:** `16384`\n* `flush` {boolean} If `true`, the underlying file descriptor is flushed\n  prior to closing it. **Default:** `false`. Returns: {fs.WriteStream} `options` may also include a `start` option to allow writing data at some\nposition past the beginning of the file, allowed values are in the\n\\[0, [`Number.MAX_SAFE_INTEGER`][]] range. Modifying a file rather than\nreplacing it may require the `flags` option to be set to `r+` rather than the\ndefault `w`. The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'`\nthe file descriptor will be closed automatically. If `autoClose` is false,\nthen the file descriptor won't be closed, even if there's an error.\nIt is the application's responsibility to close it and make sure there's no\nfile descriptor leak. By default, the stream will emit a `'close'` event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option it is possible to override the corresponding `fs`\nimplementations for `open`, `write`, `writev`, and `close`. Overriding `write()`\nwithout `writev()` can reduce performance as some optimizations (`_writev()`)\nwill be disabled. When providing the `fs` option, overrides for at least one of\n`write` and `writev` are required. If no `fd` option is supplied, an override\nfor `open` is also required. If `autoClose` is `true`, an override for `close`\nis also required. Like {fs.ReadStream}, if `fd` is specified, {fs.WriteStream} will ignore the\n`path` argument and will use the specified",
      "position": 0,
      "windowSize": 280
    },
    {
      "id": "w_2017",
      "type": "window",
      "content": "event after it has been\ndestroyed.  Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option it is possible to override the corresponding `fs`\nimplementations for `open`, `write`, `writev`, and `close`. Overriding `write()`\nwithout `writev()` can reduce performance as some optimizations (`_writev()`)\nwill be disabled. When providing the `fs` option, overrides for at least one of\n`write` and `writev` are required. If no `fd` option is supplied, an override\nfor `open` is also required. If `autoClose` is `true`, an override for `close`\nis also required. Like {fs.ReadStream}, if `fd` is specified, {fs.WriteStream} will ignore the\n`path` argument and will use the specified file descriptor. This means that no\n`'open'` event will be emitted. `fd` should be blocking; non-blocking `fd`s\nshould be passed to {net.Socket}. If `options` is a string, then it specifies the encoding.",
      "position": 180,
      "windowSize": 130
    },
    {
      "id": "sw_2018",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][]. **Default:** `'w'`. * `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:**",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2019",
      "type": "sentence_window",
      "content": "**Default:** `'w'`. * `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:**",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2020",
      "type": "sentence_window",
      "content": "* `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:** `null` * `highWaterMark`",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2021",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {fs. WriteStream}",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2022",
      "type": "sentence_window",
      "content": "Returns: {fs. WriteStream} `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2023",
      "type": "sentence_window",
      "content": "WriteStream} `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2024",
      "type": "sentence_window",
      "content": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number. MAX_SAFE_INTEGER`][]] range. Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2025",
      "type": "sentence_window",
      "content": "MAX_SAFE_INTEGER`][]] range. Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`. The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2026",
      "type": "sentence_window",
      "content": "Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`. The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_2027",
      "type": "sentence_window",
      "content": "The `encoding` can be any one of those accepted by {Buffer}. If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_2028",
      "type": "sentence_window",
      "content": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_2029",
      "type": "sentence_window",
      "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error. It is the application's responsibility to close it and make sure there's no file descriptor leak. By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_2030",
      "type": "sentence_window",
      "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak. By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_2031",
      "type": "sentence_window",
      "content": "By default, the stream will emit a `'close'` event after it has been destroyed. Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_2032",
      "type": "sentence_window",
      "content": "Set the `emitClose` option to `false` to change this behavior. By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`. Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_2033",
      "type": "sentence_window",
      "content": "By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`. Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled. When providing the `fs` option, overrides for at least one of `write` and `writev` are",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_2034",
      "type": "sentence_window",
      "content": "Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled. When providing the `fs` option, overrides for at least one of `write` and `writev` are required. If no `fd` option is supplied, an override for `open` is also required.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_2035",
      "type": "sentence_window",
      "content": "When providing the `fs` option, overrides for at least one of `write` and `writev` are required. If no `fd` option is supplied, an override for `open` is also required. If `autoClose` is `true`, an override for `close` is also required.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_2036",
      "type": "sentence_window",
      "content": "If no `fd` option is supplied, an override for `open` is also required. If `autoClose` is `true`, an override for `close` is also required. ReadStream}, if `fd` is specified, {fs.",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_2037",
      "type": "sentence_window",
      "content": "If `autoClose` is `true`, an override for `close` is also required. ReadStream}, if `fd` is specified, {fs. WriteStream} will ignore the `path` argument and will use the specified file descriptor.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_2038",
      "type": "sentence_window",
      "content": "ReadStream}, if `fd` is specified, {fs. WriteStream} will ignore the `path` argument and will use the specified file descriptor. This means that no `'open'` event will be emitted.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_2039",
      "type": "sentence_window",
      "content": "WriteStream} will ignore the `path` argument and will use the specified file descriptor. This means that no `'open'` event will be emitted. `fd` should be blocking; non-blocking `fd`s should be passed to {net.",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_2040",
      "type": "sentence_window",
      "content": "This means that no `'open'` event will be emitted. `fd` should be blocking; non-blocking `fd`s should be passed to {net. If `options` is a string, then it specifies the encoding.",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_2041",
      "type": "sentence_window",
      "content": "`fd` should be blocking; non-blocking `fd`s should be passed to {net. If `options` is a string, then it specifies the encoding.",
      "position": 23,
      "sentenceCount": 2
    },
    {
      "id": "sc_2042",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_2043",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] **Default:** `'w'`.",
      "position": 1
    },
    {
      "id": "sc_2044",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] * `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `fs` {Object|null} **Default:** `null` * `signal`",
      "position": 2
    },
    {
      "id": "sc_2045",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: * `encoding` {string} **Default:** `'utf8'` * `fd`...] **Default:** `false`.",
      "position": 3
    },
    {
      "id": "sc_2046",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: **Default:** `false`....] Returns: {fs.",
      "position": 4
    },
    {
      "id": "sc_2047",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] WriteStream}",
      "position": 5
    },
    {
      "id": "sc_2048",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] `options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
      "position": 6
    },
    {
      "id": "sc_2049",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: `options` may also include a `start` option to all...] MAX_SAFE_INTEGER`][]] range.",
      "position": 7
    },
    {
      "id": "sc_2050",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: MAX_SAFE_INTEGER`][]] range....] Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`.",
      "position": 8
    },
    {
      "id": "sc_2051",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: Modifying a file rather than replacing it may requ...] The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 9
    },
    {
      "id": "sc_2052",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: The `encoding` can be any one of those accepted by...] If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
      "position": 10
    },
    {
      "id": "sc_2053",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: If `autoClose` is set to true (default behavior) o...] If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 11
    },
    {
      "id": "sc_2054",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: If `autoClose` is false, then the file descriptor ...] It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 12
    },
    {
      "id": "sc_2055",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: It is the application's responsibility to close it...] By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 13
    },
    {
      "id": "sc_2056",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: By default, the stream will emit a `'close'` event...] Set the `emitClose` option to `false` to change this behavior.",
      "position": 14
    },
    {
      "id": "sc_2057",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: Set the `emitClose` option to `false` to change th...] By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`.",
      "position": 15
    },
    {
      "id": "sc_2058",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: By providing the `fs` option it is possible to ove...] Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled.",
      "position": 16
    },
    {
      "id": "sc_2059",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: Overriding `write()` without `writev()` can reduce...] When providing the `fs` option, overrides for at least one of `write` and `writev` are required.",
      "position": 17
    },
    {
      "id": "sc_2060",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: When providing the `fs` option, overrides for at l...] If no `fd` option is supplied, an override for `open` is also required.",
      "position": 18
    },
    {
      "id": "sc_2061",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: If no `fd` option is supplied, an override for `op...] If `autoClose` is `true`, an override for `close` is also required.",
      "position": 19
    },
    {
      "id": "sc_2062",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: If `autoClose` is `true`, an override for `close` ...] ReadStream}, if `fd` is specified, {fs.",
      "position": 20
    },
    {
      "id": "sc_2063",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: ReadStream}, if `fd` is specified, {fs....] WriteStream} will ignore the `path` argument and will use the specified file descriptor.",
      "position": 21
    },
    {
      "id": "sc_2064",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: WriteStream} will ignore the `path` argument and w...] This means that no `'open'` event will be emitted.",
      "position": 22
    },
    {
      "id": "sc_2065",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: This means that no `'open'` event will be emitted....] `fd` should be blocking; non-blocking `fd`s should be passed to {net.",
      "position": 23
    },
    {
      "id": "sc_2066",
      "type": "sentence_context",
      "content": "[`fs.createWriteStream(path[, options])`] [Previous: `fd` should be blocking; non-blocking `fd`s should...] If `options` is a string, then it specifies the encoding.",
      "position": 24
    },
    {
      "id": "s_2067",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `flags` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_2068",
      "type": "sentence",
      "content": "**Default:** `'w'`.",
      "position": 1
    },
    {
      "id": "s_2069",
      "type": "sentence",
      "content": "* `encoding` {string} **Default:** `'utf8'` * `fd` {integer|FileHandle} **Default:** `null` * `mode` {integer} **Default:** `0o666` * `autoClose` {boolean} **Default:** `true` * `emitClose` {boolean} **Default:** `true` * `start` {integer} * `fs` {Object|null} **Default:** `null` * `signal` {AbortSignal|null} **Default:** `null` * `highWaterMark` {number} **Default:** `16384` * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
      "position": 2
    },
    {
      "id": "s_2070",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 3
    },
    {
      "id": "s_2071",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 4
    },
    {
      "id": "s_2072",
      "type": "sentence",
      "content": "WriteStream}",
      "position": 5
    },
    {
      "id": "s_2073",
      "type": "sentence",
      "content": "`options` may also include a `start` option to allow writing data at some position past the beginning of the file, allowed values are in the \\[0, [`Number.",
      "position": 6
    },
    {
      "id": "s_2074",
      "type": "sentence",
      "content": "MAX_SAFE_INTEGER`][]] range.",
      "position": 7
    },
    {
      "id": "s_2075",
      "type": "sentence",
      "content": "Modifying a file rather than replacing it may require the `flags` option to be set to `r+` rather than the default `w`.",
      "position": 8
    },
    {
      "id": "s_2076",
      "type": "sentence",
      "content": "The `encoding` can be any one of those accepted by {Buffer}.",
      "position": 9
    },
    {
      "id": "s_2077",
      "type": "sentence",
      "content": "If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically.",
      "position": 10
    },
    {
      "id": "s_2078",
      "type": "sentence",
      "content": "If `autoClose` is false, then the file descriptor won't be closed, even if there's an error.",
      "position": 11
    },
    {
      "id": "s_2079",
      "type": "sentence",
      "content": "It is the application's responsibility to close it and make sure there's no file descriptor leak.",
      "position": 12
    },
    {
      "id": "s_2080",
      "type": "sentence",
      "content": "By default, the stream will emit a `'close'` event after it has been destroyed.",
      "position": 13
    },
    {
      "id": "s_2081",
      "type": "sentence",
      "content": "Set the `emitClose` option to `false` to change this behavior.",
      "position": 14
    },
    {
      "id": "s_2082",
      "type": "sentence",
      "content": "By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`.",
      "position": 15
    },
    {
      "id": "s_2083",
      "type": "sentence",
      "content": "Overriding `write()` without `writev()` can reduce performance as some optimizations (`_writev()`) will be disabled.",
      "position": 16
    },
    {
      "id": "s_2084",
      "type": "sentence",
      "content": "When providing the `fs` option, overrides for at least one of `write` and `writev` are required.",
      "position": 17
    },
    {
      "id": "s_2085",
      "type": "sentence",
      "content": "If no `fd` option is supplied, an override for `open` is also required.",
      "position": 18
    },
    {
      "id": "s_2086",
      "type": "sentence",
      "content": "If `autoClose` is `true`, an override for `close` is also required.",
      "position": 19
    },
    {
      "id": "s_2087",
      "type": "sentence",
      "content": "ReadStream}, if `fd` is specified, {fs.",
      "position": 20
    },
    {
      "id": "s_2088",
      "type": "sentence",
      "content": "WriteStream} will ignore the `path` argument and will use the specified file descriptor.",
      "position": 21
    },
    {
      "id": "s_2089",
      "type": "sentence",
      "content": "This means that no `'open'` event will be emitted.",
      "position": 22
    },
    {
      "id": "s_2090",
      "type": "sentence",
      "content": "`fd` should be blocking; non-blocking `fd`s should be passed to {net.",
      "position": 23
    },
    {
      "id": "s_2091",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the encoding.",
      "position": 24
    },
    {
      "id": "w_2092",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `callback` {Function}\n* `exists` {boolean} Test whether or not the element at the given `path` exists by checking with the file system.\nThen call the `callback` argument with either true or false: **The parameters for this callback are not consistent with other Node.js\ncallbacks.** Normally, the first parameter to a Node.js callback is an `err`\nparameter, optionally followed by other parameters. The `fs.exists()` callback\nhas only one boolean parameter. This is one reason `fs.access()` is recommended\ninstead of `fs.exists()`. If `path` is a symbolic link, it is followed. Thus, if `path` exists but points\nto a non-existent element, the callback will receive the value `false`. Using `fs.exists()` to check for the existence of a file before calling\n`fs.open()`, `fs.readFile()`, or `fs.writeFile()` is not recommended. Doing\nso introduces a race condition, since other processes may change the file's\nstate between the two calls. Instead, user code should open/read/write the\nfile directly and handle the error raised if the file does not exist. **write (NOT RECOMMENDED)** **write (RECOMMENDED)** **read (NOT RECOMMENDED)** **read (RECOMMENDED)** The \"not recommended\" examples above check for existence and then use the\nfile; the \"recommended\" examples are better because they use the file directly\nand handle the error, if any. In general, check for the existence of a file only if the file won't be\nused directly, for example when its existence is a signal from another\nprocess.",
      "position": 0,
      "windowSize": 216
    },
    {
      "id": "w_2093",
      "type": "window",
      "content": "they use the file directly\nand handle the error, if any. In general, check for the existence of a file only if the file won't be\nused directly, for example when its existence is a signal from another\nprocess.",
      "position": 180,
      "windowSize": 36
    },
    {
      "id": "sw_2094",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `callback` {Function} * `exists` {boolean} Test whether or not the element at the given `path` exists by checking with the file system. Then call the `callback` argument with either true or false:",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2095",
      "type": "sentence_window",
      "content": "Test whether or not the element at the given `path` exists by checking with the file system. Then call the `callback` argument with either true or false: **The parameters for this callback are not consistent with other Node.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2096",
      "type": "sentence_window",
      "content": "Then call the `callback` argument with either true or false: **The parameters for this callback are not consistent with other Node. js callbacks.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2097",
      "type": "sentence_window",
      "content": "**The parameters for this callback are not consistent with other Node. js callbacks. ** Normally, the first parameter to a Node.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2098",
      "type": "sentence_window",
      "content": "js callbacks. ** Normally, the first parameter to a Node. js callback is an `err` parameter, optionally followed by other parameters.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2099",
      "type": "sentence_window",
      "content": "** Normally, the first parameter to a Node. js callback is an `err` parameter, optionally followed by other parameters. exists()` callback has only one boolean parameter.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2100",
      "type": "sentence_window",
      "content": "js callback is an `err` parameter, optionally followed by other parameters. exists()` callback has only one boolean parameter. This is one reason `fs.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2101",
      "type": "sentence_window",
      "content": "exists()` callback has only one boolean parameter. This is one reason `fs. access()` is recommended instead of `fs.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2102",
      "type": "sentence_window",
      "content": "This is one reason `fs. access()` is recommended instead of `fs. If `path` is a symbolic link, it is followed.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_2103",
      "type": "sentence_window",
      "content": "access()` is recommended instead of `fs. If `path` is a symbolic link, it is followed. Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_2104",
      "type": "sentence_window",
      "content": "If `path` is a symbolic link, it is followed. Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`. exists()` to check for the existence of a file before calling `fs.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_2105",
      "type": "sentence_window",
      "content": "Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`. exists()` to check for the existence of a file before calling `fs. open()`, `fs.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_2106",
      "type": "sentence_window",
      "content": "exists()` to check for the existence of a file before calling `fs. open()`, `fs. readFile()`, or `fs.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_2107",
      "type": "sentence_window",
      "content": "open()`, `fs. readFile()`, or `fs. writeFile()` is not recommended.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_2108",
      "type": "sentence_window",
      "content": "readFile()`, or `fs. writeFile()` is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_2109",
      "type": "sentence_window",
      "content": "writeFile()` is not recommended. Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_2110",
      "type": "sentence_window",
      "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls. Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist. **write (NOT RECOMMENDED)**",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_2111",
      "type": "sentence_window",
      "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist. **write (NOT RECOMMENDED)** **write (RECOMMENDED)**",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_2112",
      "type": "sentence_window",
      "content": "**write (NOT RECOMMENDED)** **write (RECOMMENDED)** **read (NOT RECOMMENDED)**",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_2113",
      "type": "sentence_window",
      "content": "**write (RECOMMENDED)** **read (NOT RECOMMENDED)** **read (RECOMMENDED)**",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_2114",
      "type": "sentence_window",
      "content": "**read (NOT RECOMMENDED)** **read (RECOMMENDED)** The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_2115",
      "type": "sentence_window",
      "content": "**read (RECOMMENDED)** The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any. In general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_2116",
      "type": "sentence_window",
      "content": "The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any. In general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another process.",
      "position": 22,
      "sentenceCount": 2
    },
    {
      "id": "sc_2117",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] `path` {string|Buffer|URL} `callback` {Function} * `exists` {boolean}",
      "position": 0
    },
    {
      "id": "sc_2118",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: `path` {string|Buffer|URL} `callback` {Function} *...] Test whether or not the element at the given `path` exists by checking with the file system.",
      "position": 1
    },
    {
      "id": "sc_2119",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: Test whether or not the element at the given `path...] Then call the `callback` argument with either true or false:",
      "position": 2
    },
    {
      "id": "sc_2120",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: Then call the `callback` argument with either true...] **The parameters for this callback are not consistent with other Node.",
      "position": 3
    },
    {
      "id": "sc_2121",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: **The parameters for this callback are not consist...] js callbacks.",
      "position": 4
    },
    {
      "id": "sc_2122",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] ** Normally, the first parameter to a Node.",
      "position": 5
    },
    {
      "id": "sc_2123",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: ** Normally, the first parameter to a Node....] js callback is an `err` parameter, optionally followed by other parameters.",
      "position": 6
    },
    {
      "id": "sc_2124",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: js callback is an `err` parameter, optionally foll...] exists()` callback has only one boolean parameter.",
      "position": 7
    },
    {
      "id": "sc_2125",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: exists()` callback has only one boolean parameter....] This is one reason `fs.",
      "position": 8
    },
    {
      "id": "sc_2126",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: This is one reason `fs....] access()` is recommended instead of `fs.",
      "position": 9
    },
    {
      "id": "sc_2127",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: access()` is recommended instead of `fs....] If `path` is a symbolic link, it is followed.",
      "position": 10
    },
    {
      "id": "sc_2128",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: If `path` is a symbolic link, it is followed....] Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`.",
      "position": 11
    },
    {
      "id": "sc_2129",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: Thus, if `path` exists but points to a non-existen...] exists()` to check for the existence of a file before calling `fs.",
      "position": 12
    },
    {
      "id": "sc_2130",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: exists()` to check for the existence of a file bef...] open()`, `fs.",
      "position": 13
    },
    {
      "id": "sc_2131",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] readFile()`, or `fs.",
      "position": 14
    },
    {
      "id": "sc_2132",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] writeFile()` is not recommended.",
      "position": 15
    },
    {
      "id": "sc_2133",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: writeFile()` is not recommended....] Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
      "position": 16
    },
    {
      "id": "sc_2134",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: Doing so introduces a race condition, since other ...] Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.",
      "position": 17
    },
    {
      "id": "sc_2135",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: Instead, user code should open/read/write the file...] **write (NOT RECOMMENDED)**",
      "position": 18
    },
    {
      "id": "sc_2136",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: **write (NOT RECOMMENDED)**...] **write (RECOMMENDED)**",
      "position": 19
    },
    {
      "id": "sc_2137",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: **write (RECOMMENDED)**...] **read (NOT RECOMMENDED)**",
      "position": 20
    },
    {
      "id": "sc_2138",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: **read (NOT RECOMMENDED)**...] **read (RECOMMENDED)**",
      "position": 21
    },
    {
      "id": "sc_2139",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: **read (RECOMMENDED)**...] The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
      "position": 22
    },
    {
      "id": "sc_2140",
      "type": "sentence_context",
      "content": "[`fs.exists(path, callback)`] [Previous: The \"not recommended\" examples above check for exi...] In general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another process.",
      "position": 23
    },
    {
      "id": "s_2141",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `callback` {Function} * `exists` {boolean}",
      "position": 0
    },
    {
      "id": "s_2142",
      "type": "sentence",
      "content": "Test whether or not the element at the given `path` exists by checking with the file system.",
      "position": 1
    },
    {
      "id": "s_2143",
      "type": "sentence",
      "content": "Then call the `callback` argument with either true or false:",
      "position": 2
    },
    {
      "id": "s_2144",
      "type": "sentence",
      "content": "**The parameters for this callback are not consistent with other Node.",
      "position": 3
    },
    {
      "id": "s_2145",
      "type": "sentence",
      "content": "js callbacks.",
      "position": 4
    },
    {
      "id": "s_2146",
      "type": "sentence",
      "content": "** Normally, the first parameter to a Node.",
      "position": 5
    },
    {
      "id": "s_2147",
      "type": "sentence",
      "content": "js callback is an `err` parameter, optionally followed by other parameters.",
      "position": 6
    },
    {
      "id": "s_2148",
      "type": "sentence",
      "content": "exists()` callback has only one boolean parameter.",
      "position": 7
    },
    {
      "id": "s_2149",
      "type": "sentence",
      "content": "This is one reason `fs.",
      "position": 8
    },
    {
      "id": "s_2150",
      "type": "sentence",
      "content": "access()` is recommended instead of `fs.",
      "position": 9
    },
    {
      "id": "s_2151",
      "type": "sentence",
      "content": "If `path` is a symbolic link, it is followed.",
      "position": 10
    },
    {
      "id": "s_2152",
      "type": "sentence",
      "content": "Thus, if `path` exists but points to a non-existent element, the callback will receive the value `false`.",
      "position": 11
    },
    {
      "id": "s_2153",
      "type": "sentence",
      "content": "exists()` to check for the existence of a file before calling `fs.",
      "position": 12
    },
    {
      "id": "s_2154",
      "type": "sentence",
      "content": "open()`, `fs.",
      "position": 13
    },
    {
      "id": "s_2155",
      "type": "sentence",
      "content": "readFile()`, or `fs.",
      "position": 14
    },
    {
      "id": "s_2156",
      "type": "sentence",
      "content": "writeFile()` is not recommended.",
      "position": 15
    },
    {
      "id": "s_2157",
      "type": "sentence",
      "content": "Doing so introduces a race condition, since other processes may change the file's state between the two calls.",
      "position": 16
    },
    {
      "id": "s_2158",
      "type": "sentence",
      "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file does not exist.",
      "position": 17
    },
    {
      "id": "s_2159",
      "type": "sentence",
      "content": "**write (NOT RECOMMENDED)**",
      "position": 18
    },
    {
      "id": "s_2160",
      "type": "sentence",
      "content": "**write (RECOMMENDED)**",
      "position": 19
    },
    {
      "id": "s_2161",
      "type": "sentence",
      "content": "**read (NOT RECOMMENDED)**",
      "position": 20
    },
    {
      "id": "s_2162",
      "type": "sentence",
      "content": "**read (RECOMMENDED)**",
      "position": 21
    },
    {
      "id": "s_2163",
      "type": "sentence",
      "content": "The \"not recommended\" examples above check for existence and then use the file; the \"recommended\" examples are better because they use the file directly and handle the error, if any.",
      "position": 22
    },
    {
      "id": "s_2164",
      "type": "sentence",
      "content": "In general, check for the existence of a file only if the file won't be used directly, for example when its existence is a signal from another process.",
      "position": 23
    },
    {
      "id": "w_2165",
      "type": "window",
      "content": "`fd` {integer} `mode` {string|integer} `callback` {Function}\n* `err` {Error} Sets the permissions on the file. No arguments other than a possible exception\nare given to the completion callback. See the POSIX fchmod(2) documentation for more detail.",
      "position": 0,
      "windowSize": 34
    },
    {
      "id": "sw_2166",
      "type": "sentence_window",
      "content": "`fd` {integer} `mode` {string|integer} `callback` {Function} * `err` {Error} Sets the permissions on the file. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2167",
      "type": "sentence_window",
      "content": "Sets the permissions on the file. No arguments other than a possible exception are given to the completion callback. See the POSIX fchmod(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2168",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX fchmod(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_2169",
      "type": "sentence_context",
      "content": "[`fs.fchmod(fd, mode, callback)`] `fd` {integer} `mode` {string|integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_2170",
      "type": "sentence_context",
      "content": "[`fs.fchmod(fd, mode, callback)`] [Previous: `fd` {integer} `mode` {string|integer} `callback` ...] Sets the permissions on the file.",
      "position": 1
    },
    {
      "id": "sc_2171",
      "type": "sentence_context",
      "content": "[`fs.fchmod(fd, mode, callback)`] [Previous: Sets the permissions on the file....] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_2172",
      "type": "sentence_context",
      "content": "[`fs.fchmod(fd, mode, callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX fchmod(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_2173",
      "type": "sentence",
      "content": "`fd` {integer} `mode` {string|integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_2174",
      "type": "sentence",
      "content": "Sets the permissions on the file.",
      "position": 1
    },
    {
      "id": "s_2175",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_2176",
      "type": "sentence",
      "content": "See the POSIX fchmod(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "w_2177",
      "type": "window",
      "content": "`fd` {integer} `uid` {integer} `gid` {integer} `callback` {Function}\n* `err` {Error} Sets the owner of the file. No arguments other than a possible exception are\ngiven to the completion callback. See the POSIX fchown(2) documentation for more detail.",
      "position": 0,
      "windowSize": 36
    },
    {
      "id": "sw_2178",
      "type": "sentence_window",
      "content": "`fd` {integer} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error} Sets the owner of the file. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2179",
      "type": "sentence_window",
      "content": "Sets the owner of the file. No arguments other than a possible exception are given to the completion callback. See the POSIX fchown(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2180",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX fchown(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_2181",
      "type": "sentence_context",
      "content": "[`fs.fchown(fd, uid, gid, callback)`] `fd` {integer} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_2182",
      "type": "sentence_context",
      "content": "[`fs.fchown(fd, uid, gid, callback)`] [Previous: `fd` {integer} `uid` {integer} `gid` {integer} `ca...] Sets the owner of the file.",
      "position": 1
    },
    {
      "id": "sc_2183",
      "type": "sentence_context",
      "content": "[`fs.fchown(fd, uid, gid, callback)`] [Previous: Sets the owner of the file....] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_2184",
      "type": "sentence_context",
      "content": "[`fs.fchown(fd, uid, gid, callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX fchown(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_2185",
      "type": "sentence",
      "content": "`fd` {integer} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_2186",
      "type": "sentence",
      "content": "Sets the owner of the file.",
      "position": 1
    },
    {
      "id": "s_2187",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_2188",
      "type": "sentence",
      "content": "See the POSIX fchown(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "w_2189",
      "type": "window",
      "content": "`fd` {integer} `callback` {Function}\n* `err` {Error} Forces all currently queued I/O operations associated with the file to the\noperating system's synchronized I/O completion state. Refer to the POSIX\nfdatasync(2) documentation for details. No arguments other than a possible\nexception are given to the completion callback.",
      "position": 0,
      "windowSize": 42
    },
    {
      "id": "sw_2190",
      "type": "sentence_window",
      "content": "`fd` {integer} `callback` {Function} * `err` {Error} Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2191",
      "type": "sentence_window",
      "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details. No arguments other than a possible exception are given to the completion callback.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2192",
      "type": "sentence_window",
      "content": "Refer to the POSIX fdatasync(2) documentation for details. No arguments other than a possible exception are given to the completion callback.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_2193",
      "type": "sentence_context",
      "content": "[`fs.fdatasync(fd, callback)`] `fd` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_2194",
      "type": "sentence_context",
      "content": "[`fs.fdatasync(fd, callback)`] [Previous: `fd` {integer} `callback` {Function} * `err` {Erro...] Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
      "position": 1
    },
    {
      "id": "sc_2195",
      "type": "sentence_context",
      "content": "[`fs.fdatasync(fd, callback)`] [Previous: Forces all currently queued I/O operations associa...] Refer to the POSIX fdatasync(2) documentation for details.",
      "position": 2
    },
    {
      "id": "sc_2196",
      "type": "sentence_context",
      "content": "[`fs.fdatasync(fd, callback)`] [Previous: Refer to the POSIX fdatasync(2) documentation for ...] No arguments other than a possible exception are given to the completion callback.",
      "position": 3
    },
    {
      "id": "s_2197",
      "type": "sentence",
      "content": "`fd` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_2198",
      "type": "sentence",
      "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
      "position": 1
    },
    {
      "id": "s_2199",
      "type": "sentence",
      "content": "Refer to the POSIX fdatasync(2) documentation for details.",
      "position": 2
    },
    {
      "id": "s_2200",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 3
    },
    {
      "id": "w_2201",
      "type": "window",
      "content": "`fd` {integer} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. `callback` {Function}\n* `err` {Error}\n* `stats` {fs.Stats} Invokes the callback with the {fs.Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
      "position": 0,
      "windowSize": 45
    },
    {
      "id": "sw_2202",
      "type": "sentence_window",
      "content": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2203",
      "type": "sentence_window",
      "content": "Stats} object should be `bigint`. **Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2204",
      "type": "sentence_window",
      "content": "**Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs. Invokes the callback with the {fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2205",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} * `stats` {fs. Invokes the callback with the {fs. Stats} for the file descriptor.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2206",
      "type": "sentence_window",
      "content": "Invokes the callback with the {fs. Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2207",
      "type": "sentence_window",
      "content": "Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_2208",
      "type": "sentence_context",
      "content": "[`fs.fstat(fd[, options], callback)`] `fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_2209",
      "type": "sentence_context",
      "content": "[`fs.fstat(fd[, options], callback)`] [Previous: `fd` {integer} `options` {Object} * `bigint` {bool...] Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_2210",
      "type": "sentence_context",
      "content": "[`fs.fstat(fd[, options], callback)`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_2211",
      "type": "sentence_context",
      "content": "[`fs.fstat(fd[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 3
    },
    {
      "id": "sc_2212",
      "type": "sentence_context",
      "content": "[`fs.fstat(fd[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `stats` {f...] Invokes the callback with the {fs.",
      "position": 4
    },
    {
      "id": "sc_2213",
      "type": "sentence_context",
      "content": "[`fs.fstat(fd[, options], callback)`] [Previous: Invokes the callback with the {fs....] Stats} for the file descriptor.",
      "position": 5
    },
    {
      "id": "sc_2214",
      "type": "sentence_context",
      "content": "[`fs.fstat(fd[, options], callback)`] [Previous: Stats} for the file descriptor....] See the POSIX fstat(2) documentation for more detail.",
      "position": 6
    },
    {
      "id": "s_2215",
      "type": "sentence",
      "content": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_2216",
      "type": "sentence",
      "content": "Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_2217",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_2218",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 3
    },
    {
      "id": "s_2219",
      "type": "sentence",
      "content": "Invokes the callback with the {fs.",
      "position": 4
    },
    {
      "id": "s_2220",
      "type": "sentence",
      "content": "Stats} for the file descriptor.",
      "position": 5
    },
    {
      "id": "s_2221",
      "type": "sentence",
      "content": "See the POSIX fstat(2) documentation for more detail.",
      "position": 6
    },
    {
      "id": "w_2222",
      "type": "window",
      "content": "`fd` {integer} `callback` {Function}\n* `err` {Error} Request that all data for the open file descriptor is flushed to the storage\ndevice. The specific implementation is operating system and device specific.\nRefer to the POSIX fsync(2) documentation for more detail. No arguments other\nthan a possible exception are given to the completion callback.",
      "position": 0,
      "windowSize": 49
    },
    {
      "id": "sw_2223",
      "type": "sentence_window",
      "content": "`fd` {integer} `callback` {Function} * `err` {Error} Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2224",
      "type": "sentence_window",
      "content": "Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2225",
      "type": "sentence_window",
      "content": "The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2226",
      "type": "sentence_window",
      "content": "Refer to the POSIX fsync(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_2227",
      "type": "sentence_context",
      "content": "[`fs.fsync(fd, callback)`] `fd` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_2228",
      "type": "sentence_context",
      "content": "[`fs.fsync(fd, callback)`] [Previous: `fd` {integer} `callback` {Function} * `err` {Erro...] Request that all data for the open file descriptor is flushed to the storage device.",
      "position": 1
    },
    {
      "id": "sc_2229",
      "type": "sentence_context",
      "content": "[`fs.fsync(fd, callback)`] [Previous: Request that all data for the open file descriptor...] The specific implementation is operating system and device specific.",
      "position": 2
    },
    {
      "id": "sc_2230",
      "type": "sentence_context",
      "content": "[`fs.fsync(fd, callback)`] [Previous: The specific implementation is operating system an...] Refer to the POSIX fsync(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "sc_2231",
      "type": "sentence_context",
      "content": "[`fs.fsync(fd, callback)`] [Previous: Refer to the POSIX fsync(2) documentation for more...] No arguments other than a possible exception are given to the completion callback.",
      "position": 4
    },
    {
      "id": "s_2232",
      "type": "sentence",
      "content": "`fd` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_2233",
      "type": "sentence",
      "content": "Request that all data for the open file descriptor is flushed to the storage device.",
      "position": 1
    },
    {
      "id": "s_2234",
      "type": "sentence",
      "content": "The specific implementation is operating system and device specific.",
      "position": 2
    },
    {
      "id": "s_2235",
      "type": "sentence",
      "content": "Refer to the POSIX fsync(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_2236",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 4
    },
    {
      "id": "w_2237",
      "type": "window",
      "content": "`fd` {integer} `len` {integer} **Default:** `0` `callback` {Function}\n* `err` {Error} Truncates the file descriptor. No arguments other than a possible exception are\ngiven to the completion callback. See the POSIX ftruncate(2) documentation for more detail. If the file referred to by the file descriptor was larger than `len` bytes, only\nthe first `len` bytes will be retained in the file. For example, the following program retains only the first four bytes of the\nfile: If the file previously was shorter than `len` bytes, it is extended, and the\nextended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
      "position": 0,
      "windowSize": 101
    },
    {
      "id": "sw_2238",
      "type": "sentence_window",
      "content": "`fd` {integer} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error} Truncates the file descriptor. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2239",
      "type": "sentence_window",
      "content": "Truncates the file descriptor. No arguments other than a possible exception are given to the completion callback. See the POSIX ftruncate(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2240",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX ftruncate(2) documentation for more detail. If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2241",
      "type": "sentence_window",
      "content": "See the POSIX ftruncate(2) documentation for more detail. If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file. For example, the following program retains only the first four bytes of the file:",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2242",
      "type": "sentence_window",
      "content": "If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file. For example, the following program retains only the first four bytes of the file: If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2243",
      "type": "sentence_window",
      "content": "For example, the following program retains only the first four bytes of the file: If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2244",
      "type": "sentence_window",
      "content": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`): If `len` is negative then `0` will be used.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_2245",
      "type": "sentence_context",
      "content": "[`fs.ftruncate(fd[, len], callback)`] `fd` {integer} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_2246",
      "type": "sentence_context",
      "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: `fd` {integer} `len` {integer} **Default:** `0` `c...] Truncates the file descriptor.",
      "position": 1
    },
    {
      "id": "sc_2247",
      "type": "sentence_context",
      "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: Truncates the file descriptor....] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_2248",
      "type": "sentence_context",
      "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX ftruncate(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "sc_2249",
      "type": "sentence_context",
      "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: See the POSIX ftruncate(2) documentation for more ...] If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
      "position": 4
    },
    {
      "id": "sc_2250",
      "type": "sentence_context",
      "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: If the file referred to by the file descriptor was...] For example, the following program retains only the first four bytes of the file:",
      "position": 5
    },
    {
      "id": "sc_2251",
      "type": "sentence_context",
      "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: For example, the following program retains only th...] If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
      "position": 6
    },
    {
      "id": "sc_2252",
      "type": "sentence_context",
      "content": "[`fs.ftruncate(fd[, len], callback)`] [Previous: If the file previously was shorter than `len` byte...] If `len` is negative then `0` will be used.",
      "position": 7
    },
    {
      "id": "s_2253",
      "type": "sentence",
      "content": "`fd` {integer} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_2254",
      "type": "sentence",
      "content": "Truncates the file descriptor.",
      "position": 1
    },
    {
      "id": "s_2255",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_2256",
      "type": "sentence",
      "content": "See the POSIX ftruncate(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_2257",
      "type": "sentence",
      "content": "If the file referred to by the file descriptor was larger than `len` bytes, only the first `len` bytes will be retained in the file.",
      "position": 4
    },
    {
      "id": "s_2258",
      "type": "sentence",
      "content": "For example, the following program retains only the first four bytes of the file:",
      "position": 5
    },
    {
      "id": "s_2259",
      "type": "sentence",
      "content": "If the file previously was shorter than `len` bytes, it is extended, and the extended part is filled with null bytes (`'\\0'`):",
      "position": 6
    },
    {
      "id": "s_2260",
      "type": "sentence",
      "content": "If `len` is negative then `0` will be used.",
      "position": 7
    },
    {
      "id": "w_2261",
      "type": "window",
      "content": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function}\n* `err` {Error} Change the file system timestamps of the object referenced by the supplied file\ndescriptor. See [`fs.utimes()`][].",
      "position": 0,
      "windowSize": 25
    },
    {
      "id": "sw_2262",
      "type": "sentence_window",
      "content": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error} Change the file system timestamps of the object referenced by the supplied file descriptor. utimes()`][].",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2263",
      "type": "sentence_window",
      "content": "Change the file system timestamps of the object referenced by the supplied file descriptor. utimes()`][].",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_2264",
      "type": "sentence_context",
      "content": "[`fs.futimes(fd, atime, mtime, callback)`] `fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_2265",
      "type": "sentence_context",
      "content": "[`fs.futimes(fd, atime, mtime, callback)`] [Previous: `fd` {integer} `atime` {number|string|Date} `mtime...] Change the file system timestamps of the object referenced by the supplied file descriptor.",
      "position": 1
    },
    {
      "id": "sc_2266",
      "type": "sentence_context",
      "content": "[`fs.futimes(fd, atime, mtime, callback)`] [Previous: Change the file system timestamps of the object re...] utimes()`][].",
      "position": 2
    },
    {
      "id": "s_2267",
      "type": "sentence",
      "content": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_2268",
      "type": "sentence",
      "content": "Change the file system timestamps of the object referenced by the supplied file descriptor.",
      "position": 1
    },
    {
      "id": "s_2269",
      "type": "sentence",
      "content": "utimes()`][].",
      "position": 2
    },
    {
      "id": "w_2270",
      "type": "window",
      "content": "`pattern` {string|string\\[]}\n `options` {Object}\n* `cwd` {string|URL} current working directory. **Default:** `process.cwd()`\n* `exclude` {Function|string\\[]} Function to filter out files/directories or a\n  list of glob patterns to be excluded. If a function is provided, return\n  `true` to exclude the item, `false` to include it. **Default:** `undefined`.\n* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents,\n  `false` otherwise. **Default:** `false`.\n `callback` {Function}\n* `err` {Error}\n Retrieves the files matching the specified pattern.",
      "position": 0,
      "windowSize": 73
    },
    {
      "id": "sw_2271",
      "type": "sentence_window",
      "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory. **Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2272",
      "type": "sentence_window",
      "content": "**Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2273",
      "type": "sentence_window",
      "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2274",
      "type": "sentence_window",
      "content": "If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2275",
      "type": "sentence_window",
      "content": "**Default:** `undefined`. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2276",
      "type": "sentence_window",
      "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`. `callback` {Function} * `err` {Error} Retrieves the files matching the specified pattern.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2277",
      "type": "sentence_window",
      "content": "**Default:** `false`. `callback` {Function} * `err` {Error} Retrieves the files matching the specified pattern.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_2278",
      "type": "sentence_context",
      "content": "[`fs.glob(pattern[, options], callback)`] `pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
      "position": 0
    },
    {
      "id": "sc_2279",
      "type": "sentence_context",
      "content": "[`fs.glob(pattern[, options], callback)`] [Previous: `pattern` {string|string\\[]} `options` {Object} * ...] **Default:** `process.",
      "position": 1
    },
    {
      "id": "sc_2280",
      "type": "sentence_context",
      "content": "[`fs.glob(pattern[, options], callback)`] [Previous: **Default:** `process....] cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
      "position": 2
    },
    {
      "id": "sc_2281",
      "type": "sentence_context",
      "content": "[`fs.glob(pattern[, options], callback)`] [Previous: cwd()` * `exclude` {Function|string\\[]} Function t...] If a function is provided, return `true` to exclude the item, `false` to include it.",
      "position": 3
    },
    {
      "id": "sc_2282",
      "type": "sentence_context",
      "content": "[`fs.glob(pattern[, options], callback)`] [Previous: If a function is provided, return `true` to exclud...] **Default:** `undefined`.",
      "position": 4
    },
    {
      "id": "sc_2283",
      "type": "sentence_context",
      "content": "[`fs.glob(pattern[, options], callback)`] [Previous: **Default:** `undefined`....] * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
      "position": 5
    },
    {
      "id": "sc_2284",
      "type": "sentence_context",
      "content": "[`fs.glob(pattern[, options], callback)`] [Previous: * `withFileTypes` {boolean} `true` if the glob sho...] **Default:** `false`.",
      "position": 6
    },
    {
      "id": "sc_2285",
      "type": "sentence_context",
      "content": "[`fs.glob(pattern[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} Retrieves the files matching the specified pattern.",
      "position": 7
    },
    {
      "id": "s_2286",
      "type": "sentence",
      "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
      "position": 0
    },
    {
      "id": "s_2287",
      "type": "sentence",
      "content": "**Default:** `process.",
      "position": 1
    },
    {
      "id": "s_2288",
      "type": "sentence",
      "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
      "position": 2
    },
    {
      "id": "s_2289",
      "type": "sentence",
      "content": "If a function is provided, return `true` to exclude the item, `false` to include it.",
      "position": 3
    },
    {
      "id": "s_2290",
      "type": "sentence",
      "content": "**Default:** `undefined`.",
      "position": 4
    },
    {
      "id": "s_2291",
      "type": "sentence",
      "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
      "position": 5
    },
    {
      "id": "s_2292",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 6
    },
    {
      "id": "s_2293",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error} Retrieves the files matching the specified pattern.",
      "position": 7
    },
    {
      "id": "w_2294",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} `callback` {Function}\n* `err` {Error|AggregateError} Changes the permissions on a symbolic link. No arguments other than a possible\nexception are given to the completion callback. This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
      "position": 0,
      "windowSize": 42
    },
    {
      "id": "sw_2295",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} `callback` {Function} * `err` {Error|AggregateError} Changes the permissions on a symbolic link. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2296",
      "type": "sentence_window",
      "content": "Changes the permissions on a symbolic link. No arguments other than a possible exception are given to the completion callback. This method is only implemented on macOS.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2297",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2298",
      "type": "sentence_window",
      "content": "This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_2299",
      "type": "sentence_context",
      "content": "[`fs.lchmod(path, mode, callback)`] `path` {string|Buffer|URL} `mode` {integer} `callback` {Function} * `err` {Error|AggregateError}",
      "position": 0
    },
    {
      "id": "sc_2300",
      "type": "sentence_context",
      "content": "[`fs.lchmod(path, mode, callback)`] [Previous: `path` {string|Buffer|URL} `mode` {integer} `callb...] Changes the permissions on a symbolic link.",
      "position": 1
    },
    {
      "id": "sc_2301",
      "type": "sentence_context",
      "content": "[`fs.lchmod(path, mode, callback)`] [Previous: Changes the permissions on a symbolic link....] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_2302",
      "type": "sentence_context",
      "content": "[`fs.lchmod(path, mode, callback)`] [Previous: No arguments other than a possible exception are g...] This method is only implemented on macOS.",
      "position": 3
    },
    {
      "id": "sc_2303",
      "type": "sentence_context",
      "content": "[`fs.lchmod(path, mode, callback)`] [Previous: This method is only implemented on macOS....] See the POSIX lchmod(2) documentation for more detail.",
      "position": 4
    },
    {
      "id": "s_2304",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `mode` {integer} `callback` {Function} * `err` {Error|AggregateError}",
      "position": 0
    },
    {
      "id": "s_2305",
      "type": "sentence",
      "content": "Changes the permissions on a symbolic link.",
      "position": 1
    },
    {
      "id": "s_2306",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_2307",
      "type": "sentence",
      "content": "This method is only implemented on macOS.",
      "position": 3
    },
    {
      "id": "s_2308",
      "type": "sentence",
      "content": "See the POSIX lchmod(2) documentation for more detail.",
      "position": 4
    },
    {
      "id": "w_2309",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function}\n* `err` {Error} Set the owner of the symbolic link. No arguments other than a possible\nexception are given to the completion callback. See the POSIX lchown(2) documentation for more detail.",
      "position": 0,
      "windowSize": 37
    },
    {
      "id": "sw_2310",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error} Set the owner of the symbolic link. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2311",
      "type": "sentence_window",
      "content": "Set the owner of the symbolic link. No arguments other than a possible exception are given to the completion callback. See the POSIX lchown(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2312",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX lchown(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_2313",
      "type": "sentence_context",
      "content": "[`fs.lchown(path, uid, gid, callback)`] `path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_2314",
      "type": "sentence_context",
      "content": "[`fs.lchown(path, uid, gid, callback)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} `gid` {...] Set the owner of the symbolic link.",
      "position": 1
    },
    {
      "id": "sc_2315",
      "type": "sentence_context",
      "content": "[`fs.lchown(path, uid, gid, callback)`] [Previous: Set the owner of the symbolic link....] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_2316",
      "type": "sentence_context",
      "content": "[`fs.lchown(path, uid, gid, callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX lchown(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_2317",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_2318",
      "type": "sentence",
      "content": "Set the owner of the symbolic link.",
      "position": 1
    },
    {
      "id": "s_2319",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_2320",
      "type": "sentence",
      "content": "See the POSIX lchown(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "w_2321",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function}\n* `err` {Error} Changes the access and modification times of a file in the same way as\n[`fs.utimes()`][], with the difference that if the path refers to a symbolic\nlink, then the link is not dereferenced: instead, the timestamps of the\nsymbolic link itself are changed. No arguments other than a possible exception are given to the completion\ncallback.",
      "position": 0,
      "windowSize": 62
    },
    {
      "id": "sw_2322",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error} Changes the access and modification times of a file in the same way as [`fs. utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2323",
      "type": "sentence_window",
      "content": "Changes the access and modification times of a file in the same way as [`fs. utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed. No arguments other than a possible exception are given to the completion callback.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2324",
      "type": "sentence_window",
      "content": "utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed. No arguments other than a possible exception are given to the completion callback.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_2325",
      "type": "sentence_context",
      "content": "[`fs.lutimes(path, atime, mtime, callback)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_2326",
      "type": "sentence_context",
      "content": "[`fs.lutimes(path, atime, mtime, callback)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] Changes the access and modification times of a file in the same way as [`fs.",
      "position": 1
    },
    {
      "id": "sc_2327",
      "type": "sentence_context",
      "content": "[`fs.lutimes(path, atime, mtime, callback)`] [Previous: Changes the access and modification times of a fil...] utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.",
      "position": 2
    },
    {
      "id": "sc_2328",
      "type": "sentence_context",
      "content": "[`fs.lutimes(path, atime, mtime, callback)`] [Previous: utimes()`][], with the difference that if the path...] No arguments other than a possible exception are given to the completion callback.",
      "position": 3
    },
    {
      "id": "s_2329",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_2330",
      "type": "sentence",
      "content": "Changes the access and modification times of a file in the same way as [`fs.",
      "position": 1
    },
    {
      "id": "s_2331",
      "type": "sentence",
      "content": "utimes()`][], with the difference that if the path refers to a symbolic link, then the link is not dereferenced: instead, the timestamps of the symbolic link itself are changed.",
      "position": 2
    },
    {
      "id": "s_2332",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 3
    },
    {
      "id": "w_2333",
      "type": "window",
      "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function}\n* `err` {Error} Creates a new link from the `existingPath` to the `newPath`. See the POSIX\nlink(2) documentation for more detail. No arguments other than a possible\nexception are given to the completion callback.",
      "position": 0,
      "windowSize": 37
    },
    {
      "id": "sw_2334",
      "type": "sentence_window",
      "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error} Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2335",
      "type": "sentence_window",
      "content": "Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2336",
      "type": "sentence_window",
      "content": "See the POSIX link(2) documentation for more detail. No arguments other than a possible exception are given to the completion callback.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_2337",
      "type": "sentence_context",
      "content": "[`fs.link(existingPath, newPath, callback)`] `existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_2338",
      "type": "sentence_context",
      "content": "[`fs.link(existingPath, newPath, callback)`] [Previous: `existingPath` {string|Buffer|URL} `newPath` {stri...] Creates a new link from the `existingPath` to the `newPath`.",
      "position": 1
    },
    {
      "id": "sc_2339",
      "type": "sentence_context",
      "content": "[`fs.link(existingPath, newPath, callback)`] [Previous: Creates a new link from the `existingPath` to the ...] See the POSIX link(2) documentation for more detail.",
      "position": 2
    },
    {
      "id": "sc_2340",
      "type": "sentence_context",
      "content": "[`fs.link(existingPath, newPath, callback)`] [Previous: See the POSIX link(2) documentation for more detai...] No arguments other than a possible exception are given to the completion callback.",
      "position": 3
    },
    {
      "id": "s_2341",
      "type": "sentence",
      "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_2342",
      "type": "sentence",
      "content": "Creates a new link from the `existingPath` to the `newPath`.",
      "position": 1
    },
    {
      "id": "s_2343",
      "type": "sentence",
      "content": "See the POSIX link(2) documentation for more detail.",
      "position": 2
    },
    {
      "id": "s_2344",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 3
    },
    {
      "id": "w_2345",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. `callback` {Function}\n* `err` {Error}\n* `stats` {fs.Stats} Retrieves the {fs.Stats} for the symbolic link referred to by the path.\nThe callback gets two arguments `(err, stats)` where `stats` is a {fs.Stats}\nobject. `lstat()` is identical to `stat()`, except that if `path` is a symbolic\nlink, then the link itself is stat-ed, not the file that it refers to. See the POSIX lstat(2) documentation for more details.",
      "position": 0,
      "windowSize": 83
    },
    {
      "id": "sw_2346",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2347",
      "type": "sentence_window",
      "content": "Stats} object should be `bigint`. **Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2348",
      "type": "sentence_window",
      "content": "**Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs. Retrieves the {fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2349",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} * `stats` {fs. Retrieves the {fs. Stats} for the symbolic link referred to by the path.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2350",
      "type": "sentence_window",
      "content": "Retrieves the {fs. Stats} for the symbolic link referred to by the path. The callback gets two arguments `(err, stats)` where `stats` is a {fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2351",
      "type": "sentence_window",
      "content": "Stats} for the symbolic link referred to by the path. The callback gets two arguments `(err, stats)` where `stats` is a {fs. Stats} object.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2352",
      "type": "sentence_window",
      "content": "The callback gets two arguments `(err, stats)` where `stats` is a {fs. Stats} object. `lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2353",
      "type": "sentence_window",
      "content": "Stats} object. `lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to. See the POSIX lstat(2) documentation for more details.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2354",
      "type": "sentence_window",
      "content": "`lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to. See the POSIX lstat(2) documentation for more details.",
      "position": 8,
      "sentenceCount": 2
    },
    {
      "id": "sc_2355",
      "type": "sentence_context",
      "content": "[`fs.lstat(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_2356",
      "type": "sentence_context",
      "content": "[`fs.lstat(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_2357",
      "type": "sentence_context",
      "content": "[`fs.lstat(path[, options], callback)`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_2358",
      "type": "sentence_context",
      "content": "[`fs.lstat(path[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 3
    },
    {
      "id": "sc_2359",
      "type": "sentence_context",
      "content": "[`fs.lstat(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `stats` {f...] Retrieves the {fs.",
      "position": 4
    },
    {
      "id": "sc_2360",
      "type": "sentence_context",
      "content": "[`fs.lstat(path[, options], callback)`] Stats} for the symbolic link referred to by the path.",
      "position": 5
    },
    {
      "id": "sc_2361",
      "type": "sentence_context",
      "content": "[`fs.lstat(path[, options], callback)`] [Previous: Stats} for the symbolic link referred to by the pa...] The callback gets two arguments `(err, stats)` where `stats` is a {fs.",
      "position": 6
    },
    {
      "id": "sc_2362",
      "type": "sentence_context",
      "content": "[`fs.lstat(path[, options], callback)`] [Previous: The callback gets two arguments `(err, stats)` whe...] Stats} object.",
      "position": 7
    },
    {
      "id": "sc_2363",
      "type": "sentence_context",
      "content": "[`fs.lstat(path[, options], callback)`] `lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to.",
      "position": 8
    },
    {
      "id": "sc_2364",
      "type": "sentence_context",
      "content": "[`fs.lstat(path[, options], callback)`] [Previous: `lstat()` is identical to `stat()`, except that if...] See the POSIX lstat(2) documentation for more details.",
      "position": 9
    },
    {
      "id": "s_2365",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_2366",
      "type": "sentence",
      "content": "Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_2367",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_2368",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 3
    },
    {
      "id": "s_2369",
      "type": "sentence",
      "content": "Retrieves the {fs.",
      "position": 4
    },
    {
      "id": "s_2370",
      "type": "sentence",
      "content": "Stats} for the symbolic link referred to by the path.",
      "position": 5
    },
    {
      "id": "s_2371",
      "type": "sentence",
      "content": "The callback gets two arguments `(err, stats)` where `stats` is a {fs.",
      "position": 6
    },
    {
      "id": "s_2372",
      "type": "sentence",
      "content": "Stats} object.",
      "position": 7
    },
    {
      "id": "s_2373",
      "type": "sentence",
      "content": "`lstat()` is identical to `stat()`, except that if `path` is a symbolic link, then the link itself is stat-ed, not the file that it refers to.",
      "position": 8
    },
    {
      "id": "s_2374",
      "type": "sentence",
      "content": "See the POSIX lstat(2) documentation for more details.",
      "position": 9
    },
    {
      "id": "w_2375",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object|integer}\n* `recursive` {boolean} **Default:** `false`\n* `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. `callback` {Function}\n* `err` {Error}\n* `path` {string|undefined} Present only if a directory is created with\n  `recursive` set to `true`. Asynchronously creates a directory. The callback is given a possible exception and, if `recursive` is `true`, the\nfirst directory path created, `(err[, path])`.\n`path` can still be `undefined` when `recursive` is `true`, if no directory was\ncreated (for instance, if it was previously created). The optional `options` argument can be an integer specifying `mode` (permission\nand sticky bits), or an object with a `mode` property and a `recursive`\nproperty indicating whether parent directories should be created. Calling\n`fs.mkdir()` when `path` is a directory that exists results in an error only\nwhen `recursive` is false. If `recursive` is false and the directory exists,\nan `EEXIST` error occurs. On Windows, using `fs.mkdir()` on the root directory even with recursion will\nresult in an error: See the POSIX mkdir(2) documentation for more details.",
      "position": 0,
      "windowSize": 156
    },
    {
      "id": "sw_2376",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. `callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2377",
      "type": "sentence_window",
      "content": "**Default:** `0o777`. `callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`. Asynchronously creates a directory.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2378",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`. Asynchronously creates a directory. The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2379",
      "type": "sentence_window",
      "content": "Asynchronously creates a directory. The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`. `path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created).",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2380",
      "type": "sentence_window",
      "content": "The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`. `path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created). The optional `options` argument can be an integer specifying `mode` (permission and",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2381",
      "type": "sentence_window",
      "content": "`path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created). The optional `options` argument can be an integer specifying `mode` (permission and sticky bits) or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2382",
      "type": "sentence_window",
      "content": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits) or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created. Calling `fs.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2383",
      "type": "sentence_window",
      "content": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created. Calling `fs. mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2384",
      "type": "sentence_window",
      "content": "Calling `fs. mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false. If `recursive` is false and the directory exists, an `EEXIST` error occurs.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_2385",
      "type": "sentence_window",
      "content": "mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false. If `recursive` is false and the directory exists, an `EEXIST` error occurs. On Windows, using `fs.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_2386",
      "type": "sentence_window",
      "content": "If `recursive` is false and the directory exists, an `EEXIST` error occurs. On Windows, using `fs. mkdir()` on the root directory even with recursion will result in an error:",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_2387",
      "type": "sentence_window",
      "content": "On Windows, using `fs. mkdir()` on the root directory even with recursion will result in an error: See the POSIX mkdir(2) documentation for more details.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_2388",
      "type": "sentence_window",
      "content": "mkdir()` on the root directory even with recursion will result in an error: See the POSIX mkdir(2) documentation for more details.",
      "position": 12,
      "sentenceCount": 2
    },
    {
      "id": "sc_2389",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
      "position": 0
    },
    {
      "id": "sc_2390",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object|integ...] **Default:** `0o777`.",
      "position": 1
    },
    {
      "id": "sc_2391",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: **Default:** `0o777`....] `callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`.",
      "position": 2
    },
    {
      "id": "sc_2392",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `path` {st...] Asynchronously creates a directory.",
      "position": 3
    },
    {
      "id": "sc_2393",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: Asynchronously creates a directory....] The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`.",
      "position": 4
    },
    {
      "id": "sc_2394",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: The callback is given a possible exception and, if...] `path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created).",
      "position": 5
    },
    {
      "id": "sc_2395",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: `path` can still be `undefined` when `recursive` i...] The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)",
      "position": 6
    },
    {
      "id": "sc_2396",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: The optional `options` argument can be an integer ...] or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
      "position": 7
    },
    {
      "id": "sc_2397",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: or an object with a `mode` property and a `recursi...] Calling `fs.",
      "position": 8
    },
    {
      "id": "sc_2398",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false.",
      "position": 9
    },
    {
      "id": "sc_2399",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: mkdir()` when `path` is a directory that exists re...] If `recursive` is false and the directory exists, an `EEXIST` error occurs.",
      "position": 10
    },
    {
      "id": "sc_2400",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: If `recursive` is false and the directory exists, ...] On Windows, using `fs.",
      "position": 11
    },
    {
      "id": "sc_2401",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: On Windows, using `fs....] mkdir()` on the root directory even with recursion will result in an error:",
      "position": 12
    },
    {
      "id": "sc_2402",
      "type": "sentence_context",
      "content": "[`fs.mkdir(path[, options], callback)`] [Previous: mkdir()` on the root directory even with recursion...] See the POSIX mkdir(2) documentation for more details.",
      "position": 13
    },
    {
      "id": "s_2403",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
      "position": 0
    },
    {
      "id": "s_2404",
      "type": "sentence",
      "content": "**Default:** `0o777`.",
      "position": 1
    },
    {
      "id": "s_2405",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error} * `path` {string|undefined} Present only if a directory is created with `recursive` set to `true`.",
      "position": 2
    },
    {
      "id": "s_2406",
      "type": "sentence",
      "content": "Asynchronously creates a directory.",
      "position": 3
    },
    {
      "id": "s_2407",
      "type": "sentence",
      "content": "The callback is given a possible exception and, if `recursive` is `true`, the first directory path created, `(err[, path])`.",
      "position": 4
    },
    {
      "id": "s_2408",
      "type": "sentence",
      "content": "`path` can still be `undefined` when `recursive` is `true`, if no directory was created (for instance, if it was previously created).",
      "position": 5
    },
    {
      "id": "s_2409",
      "type": "sentence",
      "content": "The optional `options` argument can be an integer specifying `mode` (permission and sticky bits)",
      "position": 6
    },
    {
      "id": "s_2410",
      "type": "sentence",
      "content": "or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created.",
      "position": 7
    },
    {
      "id": "s_2411",
      "type": "sentence",
      "content": "Calling `fs.",
      "position": 8
    },
    {
      "id": "s_2412",
      "type": "sentence",
      "content": "mkdir()` when `path` is a directory that exists results in an error only when `recursive` is false.",
      "position": 9
    },
    {
      "id": "s_2413",
      "type": "sentence",
      "content": "If `recursive` is false and the directory exists, an `EEXIST` error occurs.",
      "position": 10
    },
    {
      "id": "s_2414",
      "type": "sentence",
      "content": "On Windows, using `fs.",
      "position": 11
    },
    {
      "id": "s_2415",
      "type": "sentence",
      "content": "mkdir()` on the root directory even with recursion will result in an error:",
      "position": 12
    },
    {
      "id": "s_2416",
      "type": "sentence",
      "content": "See the POSIX mkdir(2) documentation for more details.",
      "position": 13
    },
    {
      "id": "w_2417",
      "type": "window",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` `callback` {Function}\n* `err` {Error}\n* `directory` {string} Creates a unique temporary directory. Generates six random characters to be appended behind a required\n`prefix` to create a unique temporary directory. Due to platform\ninconsistencies, avoid trailing `X` characters in `prefix`. Some platforms,\nnotably the BSDs, can return more than six random characters, and replace\ntrailing `X` characters in `prefix` with random characters. The created directory path is passed as a string to the callback's second\nparameter. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use. The `fs.mkdtemp()` method will append the six randomly selected characters\ndirectly to the `prefix` string. For instance, given a directory `/tmp`, if the\nintention is to create a temporary directory _within_ `/tmp`, the `prefix`\nmust end with a trailing platform-specific path separator\n(`require('node:path').sep`).",
      "position": 0,
      "windowSize": 139
    },
    {
      "id": "sw_2418",
      "type": "sentence_window",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `directory` {string} Creates a unique temporary directory. Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2419",
      "type": "sentence_window",
      "content": "Creates a unique temporary directory. Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory. Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2420",
      "type": "sentence_window",
      "content": "Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory. Due to platform inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2421",
      "type": "sentence_window",
      "content": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters. The created directory path is passed as a string to the callback's second parameter.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2422",
      "type": "sentence_window",
      "content": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters. The created directory path is passed as a string to the callback's second parameter. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2423",
      "type": "sentence_window",
      "content": "The created directory path is passed as a string to the callback's second parameter. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use. mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2424",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use. mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string. For instance, given a directory `/tmp`, if the intention is to create a temporary directory",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2425",
      "type": "sentence_window",
      "content": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string. For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_2426",
      "type": "sentence_context",
      "content": "[`fs.mkdtemp(prefix[, options], callback)`] `prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `directory` {string}",
      "position": 0
    },
    {
      "id": "sc_2427",
      "type": "sentence_context",
      "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: `prefix` {string|Buffer|URL} `options` {string|Obj...] Creates a unique temporary directory.",
      "position": 1
    },
    {
      "id": "sc_2428",
      "type": "sentence_context",
      "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: Creates a unique temporary directory....] Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.",
      "position": 2
    },
    {
      "id": "sc_2429",
      "type": "sentence_context",
      "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: Generates six random characters to be appended beh...] Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
      "position": 3
    },
    {
      "id": "sc_2430",
      "type": "sentence_context",
      "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: Due to platform inconsistencies, avoid trailing `X...] Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
      "position": 4
    },
    {
      "id": "sc_2431",
      "type": "sentence_context",
      "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: Some platforms, notably the BSDs, can return more ...] The created directory path is passed as a string to the callback's second parameter.",
      "position": 5
    },
    {
      "id": "sc_2432",
      "type": "sentence_context",
      "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: The created directory path is passed as a string t...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 6
    },
    {
      "id": "sc_2433",
      "type": "sentence_context",
      "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: The optional `options` argument can be a string sp...] mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
      "position": 7
    },
    {
      "id": "sc_2434",
      "type": "sentence_context",
      "content": "[`fs.mkdtemp(prefix[, options], callback)`] [Previous: mkdtemp()` method will append the six randomly sel...] For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
      "position": 8
    },
    {
      "id": "s_2435",
      "type": "sentence",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `directory` {string}",
      "position": 0
    },
    {
      "id": "s_2436",
      "type": "sentence",
      "content": "Creates a unique temporary directory.",
      "position": 1
    },
    {
      "id": "s_2437",
      "type": "sentence",
      "content": "Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.",
      "position": 2
    },
    {
      "id": "s_2438",
      "type": "sentence",
      "content": "Due to platform inconsistencies, avoid trailing `X` characters in `prefix`.",
      "position": 3
    },
    {
      "id": "s_2439",
      "type": "sentence",
      "content": "Some platforms, notably the BSDs, can return more than six random characters, and replace trailing `X` characters in `prefix` with random characters.",
      "position": 4
    },
    {
      "id": "s_2440",
      "type": "sentence",
      "content": "The created directory path is passed as a string to the callback's second parameter.",
      "position": 5
    },
    {
      "id": "s_2441",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 6
    },
    {
      "id": "s_2442",
      "type": "sentence",
      "content": "mkdtemp()` method will append the six randomly selected characters directly to the `prefix` string.",
      "position": 7
    },
    {
      "id": "s_2443",
      "type": "sentence",
      "content": "For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing platform-specific path separator (`require('node:path').",
      "position": 8
    },
    {
      "id": "w_2444",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].\n**Default:** `'r'`. `mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function}\n* `err` {Error}\n* `fd` {integer} Asynchronous file open. See the POSIX open(2) documentation for more details. `mode` sets the file mode (permission and sticky bits), but only if the file was\ncreated. On Windows, only the write permission can be manipulated; see\n[`fs.chmod()`][]. The callback gets two arguments `(err, fd)`. Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented\nby [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains\na colon, Node.js will open a file system stream, as described by\n[this MSDN page][MSDN-Using-Streams]. Functions based on `fs.open()` exhibit this behavior as well:\n`fs.writeFile()`, `fs.readFile()`, etc.",
      "position": 0,
      "windowSize": 119
    },
    {
      "id": "sw_2445",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][]. **Default:** `'r'`. `mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer}",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2446",
      "type": "sentence_window",
      "content": "**Default:** `'r'`. `mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer} Asynchronous file open.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2447",
      "type": "sentence_window",
      "content": "`mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer} Asynchronous file open. See the POSIX open(2) documentation for more details.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2448",
      "type": "sentence_window",
      "content": "Asynchronous file open. See the POSIX open(2) documentation for more details. `mode` sets the file mode (permission and sticky bits), but only if the file was created.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2449",
      "type": "sentence_window",
      "content": "See the POSIX open(2) documentation for more details. `mode` sets the file mode (permission and sticky bits), but only if the file was created. On Windows, only the write permission can be manipulated; see [`fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2450",
      "type": "sentence_window",
      "content": "`mode` sets the file mode (permission and sticky bits), but only if the file was created. On Windows, only the write permission can be manipulated; see [`fs. chmod()`][].",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2451",
      "type": "sentence_window",
      "content": "On Windows, only the write permission can be manipulated; see [`fs. chmod()`][]. The callback gets two arguments `(err, fd)`.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2452",
      "type": "sentence_window",
      "content": "chmod()`][]. The callback gets two arguments `(err, fd)`. Some characters (`< > : \" / \\ | ?",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2453",
      "type": "sentence_window",
      "content": "The callback gets two arguments `(err, fd)`. Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_2454",
      "type": "sentence_window",
      "content": "Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains a colon, Node.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_2455",
      "type": "sentence_window",
      "content": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][]. Under NTFS, if the filename contains a colon, Node. js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_2456",
      "type": "sentence_window",
      "content": "Under NTFS, if the filename contains a colon, Node. js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams]. Functions based on `fs.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_2457",
      "type": "sentence_window",
      "content": "js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams]. Functions based on `fs. open()` exhibit this behavior as well: `fs.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_2458",
      "type": "sentence_window",
      "content": "Functions based on `fs. open()` exhibit this behavior as well: `fs. writeFile()`, `fs.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_2459",
      "type": "sentence_window",
      "content": "open()` exhibit this behavior as well: `fs. writeFile()`, `fs. readFile()`, etc.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_2460",
      "type": "sentence_window",
      "content": "writeFile()`, `fs. readFile()`, etc.",
      "position": 15,
      "sentenceCount": 2
    },
    {
      "id": "sc_2461",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] `path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_2462",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: `path` {string|Buffer|URL} `flags` {string|number}...] **Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "sc_2463",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] `mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer}",
      "position": 2
    },
    {
      "id": "sc_2464",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: `mode` {string|integer} **Default:** `0o666` (read...] Asynchronous file open.",
      "position": 3
    },
    {
      "id": "sc_2465",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: Asynchronous file open....] See the POSIX open(2) documentation for more details.",
      "position": 4
    },
    {
      "id": "sc_2466",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: See the POSIX open(2) documentation for more detai...] `mode` sets the file mode (permission and sticky bits), but only if the file was created.",
      "position": 5
    },
    {
      "id": "sc_2467",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: `mode` sets the file mode (permission and sticky b...] On Windows, only the write permission can be manipulated; see [`fs.",
      "position": 6
    },
    {
      "id": "sc_2468",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: On Windows, only the write permission can be manip...] chmod()`][].",
      "position": 7
    },
    {
      "id": "sc_2469",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] The callback gets two arguments `(err, fd)`.",
      "position": 8
    },
    {
      "id": "sc_2470",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: The callback gets two arguments `(err, fd)`....] Some characters (`< > : \" / \\ | ?",
      "position": 9
    },
    {
      "id": "sc_2471",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: Some characters (`< > : \" / \\ | ?...] *`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
      "position": 10
    },
    {
      "id": "sc_2472",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: *`) are reserved under Windows as documented by [N...] Under NTFS, if the filename contains a colon, Node.",
      "position": 11
    },
    {
      "id": "sc_2473",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: Under NTFS, if the filename contains a colon, Node...] js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
      "position": 12
    },
    {
      "id": "sc_2474",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: js will open a file system stream, as described by...] Functions based on `fs.",
      "position": 13
    },
    {
      "id": "sc_2475",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: Functions based on `fs....] open()` exhibit this behavior as well: `fs.",
      "position": 14
    },
    {
      "id": "sc_2476",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] [Previous: open()` exhibit this behavior as well: `fs....] writeFile()`, `fs.",
      "position": 15
    },
    {
      "id": "sc_2477",
      "type": "sentence_context",
      "content": "[`fs.open(path[, flags[, mode]], callback)`] readFile()`, etc.",
      "position": 16
    },
    {
      "id": "s_2478",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `flags` {string|number} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_2479",
      "type": "sentence",
      "content": "**Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "s_2480",
      "type": "sentence",
      "content": "`mode` {string|integer} **Default:** `0o666` (readable and writable) `callback` {Function} * `err` {Error} * `fd` {integer}",
      "position": 2
    },
    {
      "id": "s_2481",
      "type": "sentence",
      "content": "Asynchronous file open.",
      "position": 3
    },
    {
      "id": "s_2482",
      "type": "sentence",
      "content": "See the POSIX open(2) documentation for more details.",
      "position": 4
    },
    {
      "id": "s_2483",
      "type": "sentence",
      "content": "`mode` sets the file mode (permission and sticky bits), but only if the file was created.",
      "position": 5
    },
    {
      "id": "s_2484",
      "type": "sentence",
      "content": "On Windows, only the write permission can be manipulated; see [`fs.",
      "position": 6
    },
    {
      "id": "s_2485",
      "type": "sentence",
      "content": "chmod()`][].",
      "position": 7
    },
    {
      "id": "s_2486",
      "type": "sentence",
      "content": "The callback gets two arguments `(err, fd)`.",
      "position": 8
    },
    {
      "id": "s_2487",
      "type": "sentence",
      "content": "Some characters (`< > : \" / \\ | ?",
      "position": 9
    },
    {
      "id": "s_2488",
      "type": "sentence",
      "content": "*`) are reserved under Windows as documented by [Naming Files, Paths, and Namespaces][].",
      "position": 10
    },
    {
      "id": "s_2489",
      "type": "sentence",
      "content": "Under NTFS, if the filename contains a colon, Node.",
      "position": 11
    },
    {
      "id": "s_2490",
      "type": "sentence",
      "content": "js will open a file system stream, as described by [this MSDN page][MSDN-Using-Streams].",
      "position": 12
    },
    {
      "id": "s_2491",
      "type": "sentence",
      "content": "Functions based on `fs.",
      "position": 13
    },
    {
      "id": "s_2492",
      "type": "sentence",
      "content": "open()` exhibit this behavior as well: `fs.",
      "position": 14
    },
    {
      "id": "s_2493",
      "type": "sentence",
      "content": "writeFile()`, `fs.",
      "position": 15
    },
    {
      "id": "s_2494",
      "type": "sentence",
      "content": "readFile()`, etc.",
      "position": 16
    },
    {
      "id": "w_2495",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `type` {string} An optional mime type for the blob. Returns: {Promise} Fulfills with a {Blob} upon success. Returns a {Blob} whose data is backed by the given file. The file must not be modified after the {Blob} is created. Any modifications\nwill cause reading the {Blob} data to fail with a `DOMException` error.\nSynchronous stat operations on the file when the `Blob` is created, and before\neach read in order to detect whether the file data has been modified on disk.",
      "position": 0,
      "windowSize": 82
    },
    {
      "id": "sw_2496",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `type` {string} An optional mime type for the blob. Returns: {Promise} Fulfills with a {Blob} upon success. Returns a {Blob} whose data is backed by the given file.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2497",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with a {Blob} upon success. Returns a {Blob} whose data is backed by the given file. The file must not be modified after the {Blob} is created.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2498",
      "type": "sentence_window",
      "content": "Returns a {Blob} whose data is backed by the given file. The file must not be modified after the {Blob} is created. Any modifications will cause reading the {Blob} data to fail with a `DOMException` error.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2499",
      "type": "sentence_window",
      "content": "The file must not be modified after the {Blob} is created. Any modifications will cause reading the {Blob} data to fail with a `DOMException` error. Synchronous stat operations on the file when the `Blob` is created, and before each read in order to detect whether the file data has been modified on disk.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2500",
      "type": "sentence_window",
      "content": "Any modifications will cause reading the {Blob} data to fail with a `DOMException` error. Synchronous stat operations on the file when the `Blob` is created, and before each read in order to detect whether the file data has been modified on disk.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_2501",
      "type": "sentence_context",
      "content": "[`fs.openAsBlob(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `type` {string} An optional mime type for the blob.",
      "position": 0
    },
    {
      "id": "sc_2502",
      "type": "sentence_context",
      "content": "[`fs.openAsBlob(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `t...] Returns: {Promise} Fulfills with a {Blob} upon success.",
      "position": 1
    },
    {
      "id": "sc_2503",
      "type": "sentence_context",
      "content": "[`fs.openAsBlob(path[, options])`] [Previous: Returns: {Promise} Fulfills with a {Blob} upon suc...] Returns a {Blob} whose data is backed by the given file.",
      "position": 2
    },
    {
      "id": "sc_2504",
      "type": "sentence_context",
      "content": "[`fs.openAsBlob(path[, options])`] [Previous: Returns a {Blob} whose data is backed by the given...] The file must not be modified after the {Blob} is created.",
      "position": 3
    },
    {
      "id": "sc_2505",
      "type": "sentence_context",
      "content": "[`fs.openAsBlob(path[, options])`] [Previous: The file must not be modified after the {Blob} is ...] Any modifications will cause reading the {Blob} data to fail with a `DOMException` error.",
      "position": 4
    },
    {
      "id": "sc_2506",
      "type": "sentence_context",
      "content": "[`fs.openAsBlob(path[, options])`] [Previous: Any modifications will cause reading the {Blob} da...] Synchronous stat operations on the file when the `Blob` is created, and before each read in order to detect whether the file data has been modified on disk.",
      "position": 5
    },
    {
      "id": "s_2507",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `type` {string} An optional mime type for the blob.",
      "position": 0
    },
    {
      "id": "s_2508",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with a {Blob} upon success.",
      "position": 1
    },
    {
      "id": "s_2509",
      "type": "sentence",
      "content": "Returns a {Blob} whose data is backed by the given file.",
      "position": 2
    },
    {
      "id": "s_2510",
      "type": "sentence",
      "content": "The file must not be modified after the {Blob} is created.",
      "position": 3
    },
    {
      "id": "s_2511",
      "type": "sentence",
      "content": "Any modifications will cause reading the {Blob} data to fail with a `DOMException` error.",
      "position": 4
    },
    {
      "id": "s_2512",
      "type": "sentence",
      "content": "Synchronous stat operations on the file when the `Blob` is created, and before each read in order to detect whether the file data has been modified on disk.",
      "position": 5
    },
    {
      "id": "w_2513",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `bufferSize` {number} Number of directory entries that are buffered\n  internally when reading from the directory. Higher values lead to better\n  performance but higher memory usage. **Default:** `32`\n* `recursive` {boolean} **Default:** `false` `callback` {Function}\n* `err` {Error}\n* `dir` {fs.Dir} Asynchronously open a directory. See the POSIX opendir(3) documentation for\nmore details. Creates an {fs.Dir}, which contains all further functions for reading from\nand cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the\ndirectory and subsequent read operations.",
      "position": 0,
      "windowSize": 89
    },
    {
      "id": "sw_2514",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} **Default:** `false` `callback`",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2515",
      "type": "sentence_window",
      "content": "Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} **Default:** `false` `callback` {Function} * `err` {Error} * `dir` {fs. Asynchronously open a directory.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2516",
      "type": "sentence_window",
      "content": "**Default:** `32` * `recursive` {boolean} **Default:** `false` `callback` {Function} * `err` {Error} * `dir` {fs. Asynchronously open a directory. See the POSIX opendir(3) documentation for more details.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2517",
      "type": "sentence_window",
      "content": "Asynchronously open a directory. See the POSIX opendir(3) documentation for more details. Creates an {fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2518",
      "type": "sentence_window",
      "content": "See the POSIX opendir(3) documentation for more details. Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2519",
      "type": "sentence_window",
      "content": "Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2520",
      "type": "sentence_window",
      "content": "Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_2521",
      "type": "sentence_context",
      "content": "[`fs.opendir(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
      "position": 0
    },
    {
      "id": "sc_2522",
      "type": "sentence_context",
      "content": "[`fs.opendir(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `e...] Higher values lead to better performance but higher memory usage.",
      "position": 1
    },
    {
      "id": "sc_2523",
      "type": "sentence_context",
      "content": "[`fs.opendir(path[, options], callback)`] [Previous: Higher values lead to better performance but highe...] **Default:** `32` * `recursive` {boolean} **Default:** `false` `callback` {Function} * `err` {Error} * `dir` {fs.",
      "position": 2
    },
    {
      "id": "sc_2524",
      "type": "sentence_context",
      "content": "[`fs.opendir(path[, options], callback)`] [Previous: **Default:** `32` * `recursive` {boolean} **Defaul...] Asynchronously open a directory.",
      "position": 3
    },
    {
      "id": "sc_2525",
      "type": "sentence_context",
      "content": "[`fs.opendir(path[, options], callback)`] [Previous: Asynchronously open a directory....] See the POSIX opendir(3) documentation for more details.",
      "position": 4
    },
    {
      "id": "sc_2526",
      "type": "sentence_context",
      "content": "[`fs.opendir(path[, options], callback)`] [Previous: See the POSIX opendir(3) documentation for more de...] Creates an {fs.",
      "position": 5
    },
    {
      "id": "sc_2527",
      "type": "sentence_context",
      "content": "[`fs.opendir(path[, options], callback)`] Dir}, which contains all further functions for reading from and cleaning up the directory.",
      "position": 6
    },
    {
      "id": "sc_2528",
      "type": "sentence_context",
      "content": "[`fs.opendir(path[, options], callback)`] [Previous: Dir}, which contains all further functions for rea...] The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 7
    },
    {
      "id": "s_2529",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
      "position": 0
    },
    {
      "id": "s_2530",
      "type": "sentence",
      "content": "Higher values lead to better performance but higher memory usage.",
      "position": 1
    },
    {
      "id": "s_2531",
      "type": "sentence",
      "content": "**Default:** `32` * `recursive` {boolean} **Default:** `false` `callback` {Function} * `err` {Error} * `dir` {fs.",
      "position": 2
    },
    {
      "id": "s_2532",
      "type": "sentence",
      "content": "Asynchronously open a directory.",
      "position": 3
    },
    {
      "id": "s_2533",
      "type": "sentence",
      "content": "See the POSIX opendir(3) documentation for more details.",
      "position": 4
    },
    {
      "id": "s_2534",
      "type": "sentence",
      "content": "Creates an {fs.",
      "position": 5
    },
    {
      "id": "s_2535",
      "type": "sentence",
      "content": "Dir}, which contains all further functions for reading from and cleaning up the directory.",
      "position": 6
    },
    {
      "id": "s_2536",
      "type": "sentence",
      "content": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 7
    },
    {
      "id": "w_2537",
      "type": "window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be\nwritten to. `offset` {integer} The position in `buffer` to write the data to. `length` {integer} The number of bytes to read. `position` {integer|bigint|null} Specifies where to begin reading from in the\nfile. If `position` is `null` or `-1 `, data will be read from the current\nfile position, and the file position will be updated. If `position` is\na non-negative integer, the file position will be unchanged. `callback` {Function}\n* `err` {Error}\n* `bytesRead` {integer}\n* `buffer` {Buffer} Read data from the file specified by `fd`. The callback is given the three arguments, `(err, bytesRead, buffer)`. If the file is not modified concurrently, the end-of-file is reached when the\nnumber of bytes read is zero. If this method is invoked as its [`util.promisify()`][]ed version, it returns\na promise for an `Object` with `bytesRead` and `buffer` properties. The `fs.read()` method reads data from the file specified\nby the file descriptor (`fd`).\nThe `length` argument indicates the maximum number\nof bytes that Node.js\nwill attempt to read from the kernel.\nHowever, the actual number of bytes read (`bytesRead`) can be lower\nthan the specified `length` for various reasons. For example: If the file is shorter than the specified `length`, `bytesRead`\nwill be set to the actual number of bytes read. If the file encounters EOF (End of File) before the buffer could\nbe filled, Node.js will read all available bytes until EOF is encountered,\nand the `bytesRead` parameter in the callback will indicate\nthe actual number of bytes read, which may be less than the specified `length`. If the file is on a slow network `filesystem`\nor encounters any other issue during reading,\n`bytesRead` can be lower than the specified `length`. Therefore, when using `fs.read()`, it's important to\ncheck the `bytesRead` value to\ndetermine",
      "position": 0,
      "windowSize": 280
    },
    {
      "id": "w_2538",
      "type": "window",
      "content": "various reasons. For example: If the file is shorter than the specified `length`, `bytesRead`\nwill be set to the actual number of bytes read. If the file encounters EOF (End of File) before the buffer could\nbe filled, Node.js will read all available bytes until EOF is encountered,\nand the `bytesRead` parameter in the callback will indicate\nthe actual number of bytes read, which may be less than the specified `length`. If the file is on a slow network `filesystem`\nor encounters any other issue during reading,\n`bytesRead` can be lower than the specified `length`. Therefore, when using `fs.read()`, it's important to\ncheck the `bytesRead` value to\ndetermine how many bytes were actually read from the file.\nDepending on your application\nlogic, you may need to handle cases where `bytesRead`\nis lower than the specified `length`,\nsuch as by wrapping the read call in a loop if you require\na minimum amount of bytes. This behavior is similar to the POSIX `preadv2` function.",
      "position": 180,
      "windowSize": 150
    },
    {
      "id": "sw_2539",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to. `offset` {integer} The position in `buffer` to write the data to. `length` {integer} The number of bytes to read.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2540",
      "type": "sentence_window",
      "content": "`offset` {integer} The position in `buffer` to write the data to. `length` {integer} The number of bytes to read. `position` {integer|bigint|null} Specifies where to begin reading from in the file.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2541",
      "type": "sentence_window",
      "content": "`length` {integer} The number of bytes to read. `position` {integer|bigint|null} Specifies where to begin reading from in the file. If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2542",
      "type": "sentence_window",
      "content": "`position` {integer|bigint|null} Specifies where to begin reading from in the file. If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated. If `position` is a non-negative integer, the file position will be unchanged.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2543",
      "type": "sentence_window",
      "content": "If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated. If `position` is a non-negative integer, the file position will be unchanged. `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2544",
      "type": "sentence_window",
      "content": "If `position` is a non-negative integer, the file position will be unchanged. `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Read data from the file specified by `fd`.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2545",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Read data from the file specified by `fd`. The callback is given the three arguments, `(err, bytesRead, buffer)`.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2546",
      "type": "sentence_window",
      "content": "Read data from the file specified by `fd`. The callback is given the three arguments, `(err, bytesRead, buffer)`. If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2547",
      "type": "sentence_window",
      "content": "The callback is given the three arguments, `(err, bytesRead, buffer)`. If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero. If this method is invoked as its [`util.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_2548",
      "type": "sentence_window",
      "content": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero. If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_2549",
      "type": "sentence_window",
      "content": "If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties. read()` method reads data from the file specified by the file descriptor (`fd`).",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_2550",
      "type": "sentence_window",
      "content": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties. read()` method reads data from the file specified by the file descriptor (`fd`). The `length` argument indicates the maximum number of bytes that Node.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_2551",
      "type": "sentence_window",
      "content": "read()` method reads data from the file specified by the file descriptor (`fd`). The `length` argument indicates the maximum number of bytes that Node. js will attempt to read from the kernel.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_2552",
      "type": "sentence_window",
      "content": "The `length` argument indicates the maximum number of bytes that Node. js will attempt to read from the kernel. However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_2553",
      "type": "sentence_window",
      "content": "js will attempt to read from the kernel. However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons. For example:",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_2554",
      "type": "sentence_window",
      "content": "However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons. For example: If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_2555",
      "type": "sentence_window",
      "content": "For example: If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read. If the file encounters EOF (End of File) before the buffer could be filled, Node.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_2556",
      "type": "sentence_window",
      "content": "If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read. If the file encounters EOF (End of File) before the buffer could be filled, Node. js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read,",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_2557",
      "type": "sentence_window",
      "content": "If the file encounters EOF (End of File) before the buffer could be filled, Node. js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read, which may be less than the specified `length`. If the file is on a slow network `filesystem` or encounters any",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_2558",
      "type": "sentence_window",
      "content": "js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read, which may be less than the specified `length`. If the file is on a slow network `filesystem` or encounters any other issue during reading, `bytesRead` can be lower than the specified `length`.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_2559",
      "type": "sentence_window",
      "content": "If the file is on a slow network `filesystem` or encounters any other issue during reading, `bytesRead` can be lower than the specified `length`. Therefore, when using `fs. read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_2560",
      "type": "sentence_window",
      "content": "Therefore, when using `fs. read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file. Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_2561",
      "type": "sentence_window",
      "content": "read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file. Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of bytes. This behavior is",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_2562",
      "type": "sentence_window",
      "content": "Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of bytes. This behavior is similar to the POSIX `preadv2` function.",
      "position": 23,
      "sentenceCount": 2
    },
    {
      "id": "sc_2563",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to.",
      "position": 0
    },
    {
      "id": "sc_2564",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] `offset` {integer} The position in `buffer` to write the data to.",
      "position": 1
    },
    {
      "id": "sc_2565",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: `offset` {integer} The position in `buffer` to wri...] `length` {integer} The number of bytes to read.",
      "position": 2
    },
    {
      "id": "sc_2566",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: `length` {integer} The number of bytes to read....] `position` {integer|bigint|null} Specifies where to begin reading from in the file.",
      "position": 3
    },
    {
      "id": "sc_2567",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: `position` {integer|bigint|null} Specifies where t...] If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated.",
      "position": 4
    },
    {
      "id": "sc_2568",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If `position` is `null` or `-1 `, data will be rea...] If `position` is a non-negative integer, the file position will be unchanged.",
      "position": 5
    },
    {
      "id": "sc_2569",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If `position` is a non-negative integer, the file ...] `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
      "position": 6
    },
    {
      "id": "sc_2570",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: `callback` {Function} * `err` {Error} * `bytesRead...] Read data from the file specified by `fd`.",
      "position": 7
    },
    {
      "id": "sc_2571",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: Read data from the file specified by `fd`....] The callback is given the three arguments, `(err, bytesRead, buffer)`.",
      "position": 8
    },
    {
      "id": "sc_2572",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: The callback is given the three arguments, `(err, ...] If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 9
    },
    {
      "id": "sc_2573",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If the file is not modified concurrently, the end-...] If this method is invoked as its [`util.",
      "position": 10
    },
    {
      "id": "sc_2574",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If this method is invoked as its [`util....] promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties.",
      "position": 11
    },
    {
      "id": "sc_2575",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: promisify()`][]ed version, it returns a promise fo...] read()` method reads data from the file specified by the file descriptor (`fd`).",
      "position": 12
    },
    {
      "id": "sc_2576",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: read()` method reads data from the file specified ...] The `length` argument indicates the maximum number of bytes that Node.",
      "position": 13
    },
    {
      "id": "sc_2577",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: The `length` argument indicates the maximum number...] js will attempt to read from the kernel.",
      "position": 14
    },
    {
      "id": "sc_2578",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: js will attempt to read from the kernel....] However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons.",
      "position": 15
    },
    {
      "id": "sc_2579",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: However, the actual number of bytes read (`bytesRe...] For example:",
      "position": 16
    },
    {
      "id": "sc_2580",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read.",
      "position": 17
    },
    {
      "id": "sc_2581",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If the file is shorter than the specified `length`...] If the file encounters EOF (End of File) before the buffer could be filled, Node.",
      "position": 18
    },
    {
      "id": "sc_2582",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If the file encounters EOF (End of File) before th...] js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read, which may be less than the specified `length`.",
      "position": 19
    },
    {
      "id": "sc_2583",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: js will read all available bytes until EOF is enco...] If the file is on a slow network `filesystem` or encounters any other issue during reading, `bytesRead` can be lower than the specified `length`.",
      "position": 20
    },
    {
      "id": "sc_2584",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: If the file is on a slow network `filesystem` or e...] Therefore, when using `fs.",
      "position": 21
    },
    {
      "id": "sc_2585",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: Therefore, when using `fs....] read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file.",
      "position": 22
    },
    {
      "id": "sc_2586",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: read()`, it's important to check the `bytesRead` v...] Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of bytes.",
      "position": 23
    },
    {
      "id": "sc_2587",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer, offset, length, position, callback)`] [Previous: Depending on your application logic, you may need ...] This behavior is similar to the POSIX `preadv2` function.",
      "position": 24
    },
    {
      "id": "s_2588",
      "type": "sentence",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to.",
      "position": 0
    },
    {
      "id": "s_2589",
      "type": "sentence",
      "content": "`offset` {integer} The position in `buffer` to write the data to.",
      "position": 1
    },
    {
      "id": "s_2590",
      "type": "sentence",
      "content": "`length` {integer} The number of bytes to read.",
      "position": 2
    },
    {
      "id": "s_2591",
      "type": "sentence",
      "content": "`position` {integer|bigint|null} Specifies where to begin reading from in the file.",
      "position": 3
    },
    {
      "id": "s_2592",
      "type": "sentence",
      "content": "If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated.",
      "position": 4
    },
    {
      "id": "s_2593",
      "type": "sentence",
      "content": "If `position` is a non-negative integer, the file position will be unchanged.",
      "position": 5
    },
    {
      "id": "s_2594",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
      "position": 6
    },
    {
      "id": "s_2595",
      "type": "sentence",
      "content": "Read data from the file specified by `fd`.",
      "position": 7
    },
    {
      "id": "s_2596",
      "type": "sentence",
      "content": "The callback is given the three arguments, `(err, bytesRead, buffer)`.",
      "position": 8
    },
    {
      "id": "s_2597",
      "type": "sentence",
      "content": "If the file is not modified concurrently, the end-of-file is reached when the number of bytes read is zero.",
      "position": 9
    },
    {
      "id": "s_2598",
      "type": "sentence",
      "content": "If this method is invoked as its [`util.",
      "position": 10
    },
    {
      "id": "s_2599",
      "type": "sentence",
      "content": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffer` properties.",
      "position": 11
    },
    {
      "id": "s_2600",
      "type": "sentence",
      "content": "read()` method reads data from the file specified by the file descriptor (`fd`).",
      "position": 12
    },
    {
      "id": "s_2601",
      "type": "sentence",
      "content": "The `length` argument indicates the maximum number of bytes that Node.",
      "position": 13
    },
    {
      "id": "s_2602",
      "type": "sentence",
      "content": "js will attempt to read from the kernel.",
      "position": 14
    },
    {
      "id": "s_2603",
      "type": "sentence",
      "content": "However, the actual number of bytes read (`bytesRead`) can be lower than the specified `length` for various reasons.",
      "position": 15
    },
    {
      "id": "s_2604",
      "type": "sentence",
      "content": "For example:",
      "position": 16
    },
    {
      "id": "s_2605",
      "type": "sentence",
      "content": "If the file is shorter than the specified `length`, `bytesRead` will be set to the actual number of bytes read.",
      "position": 17
    },
    {
      "id": "s_2606",
      "type": "sentence",
      "content": "If the file encounters EOF (End of File) before the buffer could be filled, Node.",
      "position": 18
    },
    {
      "id": "s_2607",
      "type": "sentence",
      "content": "js will read all available bytes until EOF is encountered, and the `bytesRead` parameter in the callback will indicate the actual number of bytes read, which may be less than the specified `length`.",
      "position": 19
    },
    {
      "id": "s_2608",
      "type": "sentence",
      "content": "If the file is on a slow network `filesystem` or encounters any other issue during reading, `bytesRead` can be lower than the specified `length`.",
      "position": 20
    },
    {
      "id": "s_2609",
      "type": "sentence",
      "content": "Therefore, when using `fs.",
      "position": 21
    },
    {
      "id": "s_2610",
      "type": "sentence",
      "content": "read()`, it's important to check the `bytesRead` value to determine how many bytes were actually read from the file.",
      "position": 22
    },
    {
      "id": "s_2611",
      "type": "sentence",
      "content": "Depending on your application logic, you may need to handle cases where `bytesRead` is lower than the specified `length`, such as by wrapping the read call in a loop if you require a minimum amount of bytes.",
      "position": 23
    },
    {
      "id": "s_2612",
      "type": "sentence",
      "content": "This behavior is similar to the POSIX `preadv2` function.",
      "position": 24
    },
    {
      "id": "w_2613",
      "type": "window",
      "content": "`fd` {integer} `options` {Object}\n* `buffer` {Buffer|TypedArray|DataView} **Default:** `Buffer.alloc(16384)`\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|bigint|null} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesRead` {integer}\n* `buffer` {Buffer} Similar to the [`fs.read()`][] function, this version takes an optional\n`options` object. If no `options` object is specified, it will default with the\nabove values.",
      "position": 0,
      "windowSize": 53
    },
    {
      "id": "sw_2614",
      "type": "sentence_window",
      "content": "`fd` {integer} `options` {Object} * `buffer` {Buffer|TypedArray|DataView} **Default:** `Buffer. alloc(16384)` * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2615",
      "type": "sentence_window",
      "content": "alloc(16384)` * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Similar to the [`fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2616",
      "type": "sentence_window",
      "content": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Similar to the [`fs. read()`][] function, this version takes an optional `options` object.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2617",
      "type": "sentence_window",
      "content": "Similar to the [`fs. read()`][] function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2618",
      "type": "sentence_window",
      "content": "read()`][] function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_2619",
      "type": "sentence_context",
      "content": "[`fs.read(fd[, options], callback)`] `fd` {integer} `options` {Object} * `buffer` {Buffer|TypedArray|DataView} **Default:** `Buffer.",
      "position": 0
    },
    {
      "id": "sc_2620",
      "type": "sentence_context",
      "content": "[`fs.read(fd[, options], callback)`] [Previous: `fd` {integer} `options` {Object} * `buffer` {Buff...] alloc(16384)` * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 1
    },
    {
      "id": "sc_2621",
      "type": "sentence_context",
      "content": "[`fs.read(fd[, options], callback)`] [Previous: alloc(16384)` * `offset` {integer} **Default:** `0...] byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
      "position": 2
    },
    {
      "id": "sc_2622",
      "type": "sentence_context",
      "content": "[`fs.read(fd[, options], callback)`] [Previous: byteLength - offset` * `position` {integer|bigint|...] Similar to the [`fs.",
      "position": 3
    },
    {
      "id": "sc_2623",
      "type": "sentence_context",
      "content": "[`fs.read(fd[, options], callback)`] read()`][] function, this version takes an optional `options` object.",
      "position": 4
    },
    {
      "id": "sc_2624",
      "type": "sentence_context",
      "content": "[`fs.read(fd[, options], callback)`] [Previous: read()`][] function, this version takes an optiona...] If no `options` object is specified, it will default with the above values.",
      "position": 5
    },
    {
      "id": "s_2625",
      "type": "sentence",
      "content": "`fd` {integer} `options` {Object} * `buffer` {Buffer|TypedArray|DataView} **Default:** `Buffer.",
      "position": 0
    },
    {
      "id": "s_2626",
      "type": "sentence",
      "content": "alloc(16384)` * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 1
    },
    {
      "id": "s_2627",
      "type": "sentence",
      "content": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
      "position": 2
    },
    {
      "id": "s_2628",
      "type": "sentence",
      "content": "Similar to the [`fs.",
      "position": 3
    },
    {
      "id": "s_2629",
      "type": "sentence",
      "content": "read()`][] function, this version takes an optional `options` object.",
      "position": 4
    },
    {
      "id": "s_2630",
      "type": "sentence",
      "content": "If no `options` object is specified, it will default with the above values.",
      "position": 5
    },
    {
      "id": "w_2631",
      "type": "window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be\nwritten to. `options` {Object}\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|bigint} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesRead` {integer}\n* `buffer` {Buffer} Similar to the [`fs.read()`][] function, this version takes an optional\n`options` object. If no `options` object is specified, it will default with the\nabove values.",
      "position": 0,
      "windowSize": 59
    },
    {
      "id": "sw_2632",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to. `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2633",
      "type": "sentence_window",
      "content": "`options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Similar to the [`fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2634",
      "type": "sentence_window",
      "content": "byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer} Similar to the [`fs. read()`][] function, this version takes an optional `options` object.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2635",
      "type": "sentence_window",
      "content": "Similar to the [`fs. read()`][] function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2636",
      "type": "sentence_window",
      "content": "read()`][] function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_2637",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer[, options], callback)`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to.",
      "position": 0
    },
    {
      "id": "sc_2638",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer[, options], callback)`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 1
    },
    {
      "id": "sc_2639",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer[, options], callback)`] [Previous: `options` {Object} * `offset` {integer} **Default:...] byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
      "position": 2
    },
    {
      "id": "sc_2640",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer[, options], callback)`] [Previous: byteLength - offset` * `position` {integer|bigint}...] Similar to the [`fs.",
      "position": 3
    },
    {
      "id": "sc_2641",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer[, options], callback)`] read()`][] function, this version takes an optional `options` object.",
      "position": 4
    },
    {
      "id": "sc_2642",
      "type": "sentence_context",
      "content": "[`fs.read(fd, buffer[, options], callback)`] [Previous: read()`][] function, this version takes an optiona...] If no `options` object is specified, it will default with the above values.",
      "position": 5
    },
    {
      "id": "s_2643",
      "type": "sentence",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} The buffer that the data will be written to.",
      "position": 0
    },
    {
      "id": "s_2644",
      "type": "sentence",
      "content": "`options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 1
    },
    {
      "id": "s_2645",
      "type": "sentence",
      "content": "byteLength - offset` * `position` {integer|bigint} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffer` {Buffer}",
      "position": 2
    },
    {
      "id": "s_2646",
      "type": "sentence",
      "content": "Similar to the [`fs.",
      "position": 3
    },
    {
      "id": "s_2647",
      "type": "sentence",
      "content": "read()`][] function, this version takes an optional `options` object.",
      "position": 4
    },
    {
      "id": "s_2648",
      "type": "sentence",
      "content": "If no `options` object is specified, it will default with the above values.",
      "position": 5
    },
    {
      "id": "w_2649",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'`\n* `withFileTypes` {boolean} **Default:** `false`\n* `recursive` {boolean} If `true`, reads the contents of a directory\n  recursively. In recursive mode, it will list all files, sub files and\n  directories. **Default:** `false`. `callback` {Function}\n* `err` {Error}\n* `files` {string\\[]|Buffer\\[]|fs.Dirent\\[]} Reads the contents of a directory. The callback gets two arguments `(err, files)`\nwhere `files` is an array of the names of the files in the directory excluding\n`'.'` and `'..'`. See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe filenames passed to the callback. If the `encoding` is set to `'buffer'`,\nthe filenames returned will be passed as {Buffer} objects. If `options.withFileTypes` is set to `true`, the `files` array will contain\n{fs.Dirent} objects.",
      "position": 0,
      "windowSize": 138
    },
    {
      "id": "sw_2650",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively. In recursive mode, it will list all files, sub files and directories. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2651",
      "type": "sentence_window",
      "content": "In recursive mode, it will list all files, sub files and directories. **Default:** `false`. `callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2652",
      "type": "sentence_window",
      "content": "**Default:** `false`. `callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs. Reads the contents of a directory.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2653",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs. Reads the contents of a directory. The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.'",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2654",
      "type": "sentence_window",
      "content": "Reads the contents of a directory. The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.' ` and `'..'",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2655",
      "type": "sentence_window",
      "content": "The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.' ` and `'..' See the POSIX readdir(3) documentation for more details.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2656",
      "type": "sentence_window",
      "content": "` and `'..' See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2657",
      "type": "sentence_window",
      "content": "See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer}",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2658",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_2659",
      "type": "sentence_window",
      "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options. withFileTypes` is set to `true`, the `files` array will contain {fs.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_2660",
      "type": "sentence_window",
      "content": "If `options. withFileTypes` is set to `true`, the `files` array will contain {fs. Dirent} objects.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_2661",
      "type": "sentence_window",
      "content": "withFileTypes` is set to `true`, the `files` array will contain {fs. Dirent} objects.",
      "position": 11,
      "sentenceCount": 2
    },
    {
      "id": "sc_2662",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
      "position": 0
    },
    {
      "id": "sc_2663",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] In recursive mode, it will list all files, sub files and directories.",
      "position": 1
    },
    {
      "id": "sc_2664",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] [Previous: In recursive mode, it will list all files, sub fil...] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_2665",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs.",
      "position": 3
    },
    {
      "id": "sc_2666",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `files` {s...] Reads the contents of a directory.",
      "position": 4
    },
    {
      "id": "sc_2667",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] [Previous: Reads the contents of a directory....] The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.'",
      "position": 5
    },
    {
      "id": "sc_2668",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] [Previous: The callback gets two arguments `(err, files)` whe...] ` and `'..'",
      "position": 6
    },
    {
      "id": "sc_2669",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] See the POSIX readdir(3) documentation for more details.",
      "position": 7
    },
    {
      "id": "sc_2670",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] [Previous: See the POSIX readdir(3) documentation for more de...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback.",
      "position": 8
    },
    {
      "id": "sc_2671",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
      "position": 9
    },
    {
      "id": "sc_2672",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] [Previous: If the `encoding` is set to `'buffer'`, the filena...] If `options.",
      "position": 10
    },
    {
      "id": "sc_2673",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] withFileTypes` is set to `true`, the `files` array will contain {fs.",
      "position": 11
    },
    {
      "id": "sc_2674",
      "type": "sentence_context",
      "content": "[`fs.readdir(path[, options], callback)`] [Previous: withFileTypes` is set to `true`, the `files` array...] Dirent} objects.",
      "position": 12
    },
    {
      "id": "s_2675",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
      "position": 0
    },
    {
      "id": "s_2676",
      "type": "sentence",
      "content": "In recursive mode, it will list all files, sub files and directories.",
      "position": 1
    },
    {
      "id": "s_2677",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_2678",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error} * `files` {string\\[]|Buffer\\[]|fs.",
      "position": 3
    },
    {
      "id": "s_2679",
      "type": "sentence",
      "content": "Reads the contents of a directory.",
      "position": 4
    },
    {
      "id": "s_2680",
      "type": "sentence",
      "content": "The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.'",
      "position": 5
    },
    {
      "id": "s_2681",
      "type": "sentence",
      "content": "` and `'..'",
      "position": 6
    },
    {
      "id": "s_2682",
      "type": "sentence",
      "content": "See the POSIX readdir(3) documentation for more details.",
      "position": 7
    },
    {
      "id": "s_2683",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames passed to the callback.",
      "position": 8
    },
    {
      "id": "s_2684",
      "type": "sentence",
      "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
      "position": 9
    },
    {
      "id": "s_2685",
      "type": "sentence",
      "content": "If `options.",
      "position": 10
    },
    {
      "id": "s_2686",
      "type": "sentence",
      "content": "withFileTypes` is set to `true`, the `files` array will contain {fs.",
      "position": 11
    },
    {
      "id": "s_2687",
      "type": "sentence",
      "content": "Dirent} objects.",
      "position": 12
    },
    {
      "id": "w_2688",
      "type": "window",
      "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string}\n* `encoding` {string|null} **Default:** `null`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`.\n* `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function}\n* `err` {Error|AggregateError}\n* `data` {string|Buffer} Asynchronously reads the entire contents of a file. The callback is passed two arguments `(err, data)`, where `data` is the\ncontents of the file. If no encoding is specified, then the raw buffer is returned. If `options` is a string, then it specifies the encoding: When the path is a directory, the behavior of `fs.readFile()` and\n[`fs.readFileSync()`][] is platform-specific. On macOS, Linux, and Windows, an\nerror will be returned. On FreeBSD, a representation of the directory's contents\nwill be returned. It is possible to abort an ongoing request using an `AbortSignal`. If a\nrequest is aborted the callback is called with an `AbortError`: The `fs.readFile()` function buffers the entire file. To minimize memory costs,\nwhen possible prefer streaming via `fs.createReadStream()`. Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.readFile` performs.",
      "position": 0,
      "windowSize": 166
    },
    {
      "id": "sw_2689",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. * `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data`",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2690",
      "type": "sentence_window",
      "content": "**Default:** `'r'`. * `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data` {string|Buffer} Asynchronously reads the entire contents of a file.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2691",
      "type": "sentence_window",
      "content": "* `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data` {string|Buffer} Asynchronously reads the entire contents of a file. The callback is passed two arguments `(err, data)`, where `data` is the contents of the file.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2692",
      "type": "sentence_window",
      "content": "Asynchronously reads the entire contents of a file. The callback is passed two arguments `(err, data)`, where `data` is the contents of the file. If no encoding is specified, then the raw buffer is returned.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2693",
      "type": "sentence_window",
      "content": "The callback is passed two arguments `(err, data)`, where `data` is the contents of the file. If no encoding is specified, then the raw buffer is returned. If `options` is a string, then it specifies the encoding:",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2694",
      "type": "sentence_window",
      "content": "If no encoding is specified, then the raw buffer is returned. If `options` is a string, then it specifies the encoding: When the path is a directory, the behavior of `fs.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2695",
      "type": "sentence_window",
      "content": "If `options` is a string, then it specifies the encoding: When the path is a directory, the behavior of `fs. readFile()` and [`fs.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2696",
      "type": "sentence_window",
      "content": "When the path is a directory, the behavior of `fs. readFile()` and [`fs. readFileSync()`][] is platform-specific.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2697",
      "type": "sentence_window",
      "content": "readFile()` and [`fs. readFileSync()`][] is platform-specific. On macOS, Linux, and Windows, an error will be returned.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_2698",
      "type": "sentence_window",
      "content": "readFileSync()`][] is platform-specific. On macOS, Linux, and Windows, an error will be returned. On FreeBSD, a representation of the directory's contents will be returned.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_2699",
      "type": "sentence_window",
      "content": "On macOS, Linux, and Windows, an error will be returned. On FreeBSD, a representation of the directory's contents will be returned. It is possible to abort an ongoing request using an `AbortSignal`.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_2700",
      "type": "sentence_window",
      "content": "On FreeBSD, a representation of the directory's contents will be returned. It is possible to abort an ongoing request using an `AbortSignal`. If a request is aborted the callback is called with an `AbortError`:",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_2701",
      "type": "sentence_window",
      "content": "It is possible to abort an ongoing request using an `AbortSignal`. If a request is aborted the callback is called with an `AbortError`: readFile()` function buffers the entire file.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_2702",
      "type": "sentence_window",
      "content": "If a request is aborted the callback is called with an `AbortError`: readFile()` function buffers the entire file. To minimize memory costs, when possible prefer streaming via `fs.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_2703",
      "type": "sentence_window",
      "content": "readFile()` function buffers the entire file. To minimize memory costs, when possible prefer streaming via `fs. createReadStream()`.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_2704",
      "type": "sentence_window",
      "content": "To minimize memory costs, when possible prefer streaming via `fs. createReadStream()`. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_2705",
      "type": "sentence_window",
      "content": "createReadStream()`. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. readFile` performs.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_2706",
      "type": "sentence_window",
      "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. readFile` performs.",
      "position": 17,
      "sentenceCount": 2
    },
    {
      "id": "sc_2707",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] `path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_2708",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: `path` {string|Buffer|URL|integer} filename or fil...] **Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "sc_2709",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] * `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data` {string|Buffer}",
      "position": 2
    },
    {
      "id": "sc_2710",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: * `signal` {AbortSignal} allows aborting an in-pro...] Asynchronously reads the entire contents of a file.",
      "position": 3
    },
    {
      "id": "sc_2711",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: Asynchronously reads the entire contents of a file...] The callback is passed two arguments `(err, data)`, where `data` is the contents of the file.",
      "position": 4
    },
    {
      "id": "sc_2712",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: The callback is passed two arguments `(err, data)`...] If no encoding is specified, then the raw buffer is returned.",
      "position": 5
    },
    {
      "id": "sc_2713",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: If no encoding is specified, then the raw buffer i...] If `options` is a string, then it specifies the encoding:",
      "position": 6
    },
    {
      "id": "sc_2714",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: If `options` is a string, then it specifies the en...] When the path is a directory, the behavior of `fs.",
      "position": 7
    },
    {
      "id": "sc_2715",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: When the path is a directory, the behavior of `fs....] readFile()` and [`fs.",
      "position": 8
    },
    {
      "id": "sc_2716",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: readFile()` and [`fs....] readFileSync()`][] is platform-specific.",
      "position": 9
    },
    {
      "id": "sc_2717",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: readFileSync()`][] is platform-specific....] On macOS, Linux, and Windows, an error will be returned.",
      "position": 10
    },
    {
      "id": "sc_2718",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: On macOS, Linux, and Windows, an error will be ret...] On FreeBSD, a representation of the directory's contents will be returned.",
      "position": 11
    },
    {
      "id": "sc_2719",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: On FreeBSD, a representation of the directory's co...] It is possible to abort an ongoing request using an `AbortSignal`.",
      "position": 12
    },
    {
      "id": "sc_2720",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: It is possible to abort an ongoing request using a...] If a request is aborted the callback is called with an `AbortError`:",
      "position": 13
    },
    {
      "id": "sc_2721",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: If a request is aborted the callback is called wit...] readFile()` function buffers the entire file.",
      "position": 14
    },
    {
      "id": "sc_2722",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: readFile()` function buffers the entire file....] To minimize memory costs, when possible prefer streaming via `fs.",
      "position": 15
    },
    {
      "id": "sc_2723",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: To minimize memory costs, when possible prefer str...] createReadStream()`.",
      "position": 16
    },
    {
      "id": "sc_2724",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 17
    },
    {
      "id": "sc_2725",
      "type": "sentence_context",
      "content": "[`fs.readFile(path[, options], callback)`] [Previous: Aborting an ongoing request does not abort individ...] readFile` performs.",
      "position": 18
    },
    {
      "id": "s_2726",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_2727",
      "type": "sentence",
      "content": "**Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "s_2728",
      "type": "sentence",
      "content": "* `signal` {AbortSignal} allows aborting an in-progress readFile `callback` {Function} * `err` {Error|AggregateError} * `data` {string|Buffer}",
      "position": 2
    },
    {
      "id": "s_2729",
      "type": "sentence",
      "content": "Asynchronously reads the entire contents of a file.",
      "position": 3
    },
    {
      "id": "s_2730",
      "type": "sentence",
      "content": "The callback is passed two arguments `(err, data)`, where `data` is the contents of the file.",
      "position": 4
    },
    {
      "id": "s_2731",
      "type": "sentence",
      "content": "If no encoding is specified, then the raw buffer is returned.",
      "position": 5
    },
    {
      "id": "s_2732",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the encoding:",
      "position": 6
    },
    {
      "id": "s_2733",
      "type": "sentence",
      "content": "When the path is a directory, the behavior of `fs.",
      "position": 7
    },
    {
      "id": "s_2734",
      "type": "sentence",
      "content": "readFile()` and [`fs.",
      "position": 8
    },
    {
      "id": "s_2735",
      "type": "sentence",
      "content": "readFileSync()`][] is platform-specific.",
      "position": 9
    },
    {
      "id": "s_2736",
      "type": "sentence",
      "content": "On macOS, Linux, and Windows, an error will be returned.",
      "position": 10
    },
    {
      "id": "s_2737",
      "type": "sentence",
      "content": "On FreeBSD, a representation of the directory's contents will be returned.",
      "position": 11
    },
    {
      "id": "s_2738",
      "type": "sentence",
      "content": "It is possible to abort an ongoing request using an `AbortSignal`.",
      "position": 12
    },
    {
      "id": "s_2739",
      "type": "sentence",
      "content": "If a request is aborted the callback is called with an `AbortError`:",
      "position": 13
    },
    {
      "id": "s_2740",
      "type": "sentence",
      "content": "readFile()` function buffers the entire file.",
      "position": 14
    },
    {
      "id": "s_2741",
      "type": "sentence",
      "content": "To minimize memory costs, when possible prefer streaming via `fs.",
      "position": 15
    },
    {
      "id": "s_2742",
      "type": "sentence",
      "content": "createReadStream()`.",
      "position": 16
    },
    {
      "id": "s_2743",
      "type": "sentence",
      "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 17
    },
    {
      "id": "s_2744",
      "type": "sentence",
      "content": "readFile` performs.",
      "position": 18
    },
    {
      "id": "w_2745",
      "type": "window",
      "content": "Any specified file descriptor has to support reading. If a file descriptor is specified as the `path`, it will not be closed\nautomatically. The reading will begin at the current position. For example, if the file\nalready had `'Hello World'` and six bytes are read with the file descriptor,\nthe call to `fs.readFile()` with the same file descriptor, would give\n`'World'`, rather than `'Hello World'`.",
      "position": 0,
      "windowSize": 61
    },
    {
      "id": "sw_2746",
      "type": "sentence_window",
      "content": "Any specified file descriptor has to support reading. If a file descriptor is specified as the `path`, it will not be closed automatically. The reading will begin at the current position.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2747",
      "type": "sentence_window",
      "content": "If a file descriptor is specified as the `path`, it will not be closed automatically. The reading will begin at the current position. For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2748",
      "type": "sentence_window",
      "content": "The reading will begin at the current position. For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs. readFile()` with the same file descriptor, would give `'World'`, rather than `'Hello World'`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2749",
      "type": "sentence_window",
      "content": "For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs. readFile()` with the same file descriptor, would give `'World'`, rather than `'Hello World'`.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_2750",
      "type": "sentence_context",
      "content": "[File descriptors] Any specified file descriptor has to support reading.",
      "position": 0
    },
    {
      "id": "sc_2751",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: Any specified file descriptor has to support readi...] If a file descriptor is specified as the `path`, it will not be closed automatically.",
      "position": 1
    },
    {
      "id": "sc_2752",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: If a file descriptor is specified as the `path`, i...] The reading will begin at the current position.",
      "position": 2
    },
    {
      "id": "sc_2753",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: The reading will begin at the current position....] For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs.",
      "position": 3
    },
    {
      "id": "sc_2754",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: For example, if the file already had `'Hello World...] readFile()` with the same file descriptor, would give `'World'`, rather than `'Hello World'`.",
      "position": 4
    },
    {
      "id": "s_2755",
      "type": "sentence",
      "content": "Any specified file descriptor has to support reading.",
      "position": 0
    },
    {
      "id": "s_2756",
      "type": "sentence",
      "content": "If a file descriptor is specified as the `path`, it will not be closed automatically.",
      "position": 1
    },
    {
      "id": "s_2757",
      "type": "sentence",
      "content": "The reading will begin at the current position.",
      "position": 2
    },
    {
      "id": "s_2758",
      "type": "sentence",
      "content": "For example, if the file already had `'Hello World'` and six bytes are read with the file descriptor, the call to `fs.",
      "position": 3
    },
    {
      "id": "s_2759",
      "type": "sentence",
      "content": "readFile()` with the same file descriptor, would give `'World'`, rather than `'Hello World'`.",
      "position": 4
    },
    {
      "id": "w_2760",
      "type": "window",
      "content": "The `fs.readFile()` method asynchronously reads the contents of a file into\nmemory one chunk at a time, allowing the event loop to turn between each chunk.\nThis allows the read operation to have less impact on other activity that may\nbe using the underlying libuv thread pool but means that it will take longer\nto read a complete file into memory. The additional read overhead can vary broadly on different systems and depends\non the type of file being read. If the file type is not a regular file (a pipe\nfor instance) and Node.js is unable to determine an actual file size, each read\noperation will load on 64 KiB of data. For regular files, each read will process\n512 KiB of data. For applications that require as-fast-as-possible reading of file contents, it\nis better to use `fs.read()` directly and for application code to manage\nreading the full contents of the file itself. The Node.js GitHub issue [#25741][] provides more information and a detailed\nanalysis on the performance of `fs.readFile()` for multiple file sizes in\ndifferent Node.js versions.",
      "position": 0,
      "windowSize": 167
    },
    {
      "id": "sw_2761",
      "type": "sentence_window",
      "content": "readFile()` method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk. This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory. The",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2762",
      "type": "sentence_window",
      "content": "This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory. The additional read overhead can vary broadly on different systems and depends on the type of file being read. If the file type is not a regular file (a",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2763",
      "type": "sentence_window",
      "content": "The additional read overhead can vary broadly on different systems and depends on the type of file being read. If the file type is not a regular file (a pipe for instance) and Node. js is unable to determine an actual file size, each read operation will load on 64 KiB of data.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2764",
      "type": "sentence_window",
      "content": "If the file type is not a regular file (a pipe for instance) and Node. js is unable to determine an actual file size, each read operation will load on 64 KiB of data. For regular files, each read will process 512 KiB of data.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2765",
      "type": "sentence_window",
      "content": "js is unable to determine an actual file size, each read operation will load on 64 KiB of data. For regular files, each read will process 512 KiB of data. For applications that require as-fast-as-possible reading of file contents, it is better to use `fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2766",
      "type": "sentence_window",
      "content": "For regular files, each read will process 512 KiB of data. For applications that require as-fast-as-possible reading of file contents, it is better to use `fs. read()` directly and for application code to manage reading the full contents of the file itself.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2767",
      "type": "sentence_window",
      "content": "For applications that require as-fast-as-possible reading of file contents, it is better to use `fs. read()` directly and for application code to manage reading the full contents of the file itself. js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2768",
      "type": "sentence_window",
      "content": "read()` directly and for application code to manage reading the full contents of the file itself. js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs. readFile()` for multiple file sizes in different Node.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2769",
      "type": "sentence_window",
      "content": "js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs. readFile()` for multiple file sizes in different Node. js versions.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_2770",
      "type": "sentence_window",
      "content": "readFile()` for multiple file sizes in different Node. js versions.",
      "position": 9,
      "sentenceCount": 2
    },
    {
      "id": "sc_2771",
      "type": "sentence_context",
      "content": "[Performance Considerations] readFile()` method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk.",
      "position": 0
    },
    {
      "id": "sc_2772",
      "type": "sentence_context",
      "content": "[Performance Considerations] [Previous: readFile()` method asynchronously reads the conten...] This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory.",
      "position": 1
    },
    {
      "id": "sc_2773",
      "type": "sentence_context",
      "content": "[Performance Considerations] [Previous: This allows the read operation to have less impact...] The additional read overhead can vary broadly on different systems and depends on the type of file being read.",
      "position": 2
    },
    {
      "id": "sc_2774",
      "type": "sentence_context",
      "content": "[Performance Considerations] [Previous: The additional read overhead can vary broadly on d...] If the file type is not a regular file (a pipe for instance) and Node.",
      "position": 3
    },
    {
      "id": "sc_2775",
      "type": "sentence_context",
      "content": "[Performance Considerations] [Previous: If the file type is not a regular file (a pipe for...] js is unable to determine an actual file size, each read operation will load on 64 KiB of data.",
      "position": 4
    },
    {
      "id": "sc_2776",
      "type": "sentence_context",
      "content": "[Performance Considerations] [Previous: js is unable to determine an actual file size, eac...] For regular files, each read will process 512 KiB of data.",
      "position": 5
    },
    {
      "id": "sc_2777",
      "type": "sentence_context",
      "content": "[Performance Considerations] [Previous: For regular files, each read will process 512 KiB ...] For applications that require as-fast-as-possible reading of file contents, it is better to use `fs.",
      "position": 6
    },
    {
      "id": "sc_2778",
      "type": "sentence_context",
      "content": "[Performance Considerations] [Previous: For applications that require as-fast-as-possible ...] read()` directly and for application code to manage reading the full contents of the file itself.",
      "position": 7
    },
    {
      "id": "sc_2779",
      "type": "sentence_context",
      "content": "[Performance Considerations] [Previous: read()` directly and for application code to manag...] js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs.",
      "position": 8
    },
    {
      "id": "sc_2780",
      "type": "sentence_context",
      "content": "[Performance Considerations] [Previous: js GitHub issue [#25741][] provides more informati...] readFile()` for multiple file sizes in different Node.",
      "position": 9
    },
    {
      "id": "sc_2781",
      "type": "sentence_context",
      "content": "[Performance Considerations] [Previous: readFile()` for multiple file sizes in different N...] js versions.",
      "position": 10
    },
    {
      "id": "s_2782",
      "type": "sentence",
      "content": "readFile()` method asynchronously reads the contents of a file into memory one chunk at a time, allowing the event loop to turn between each chunk.",
      "position": 0
    },
    {
      "id": "s_2783",
      "type": "sentence",
      "content": "This allows the read operation to have less impact on other activity that may be using the underlying libuv thread pool but means that it will take longer to read a complete file into memory.",
      "position": 1
    },
    {
      "id": "s_2784",
      "type": "sentence",
      "content": "The additional read overhead can vary broadly on different systems and depends on the type of file being read.",
      "position": 2
    },
    {
      "id": "s_2785",
      "type": "sentence",
      "content": "If the file type is not a regular file (a pipe for instance) and Node.",
      "position": 3
    },
    {
      "id": "s_2786",
      "type": "sentence",
      "content": "js is unable to determine an actual file size, each read operation will load on 64 KiB of data.",
      "position": 4
    },
    {
      "id": "s_2787",
      "type": "sentence",
      "content": "For regular files, each read will process 512 KiB of data.",
      "position": 5
    },
    {
      "id": "s_2788",
      "type": "sentence",
      "content": "For applications that require as-fast-as-possible reading of file contents, it is better to use `fs.",
      "position": 6
    },
    {
      "id": "s_2789",
      "type": "sentence",
      "content": "read()` directly and for application code to manage reading the full contents of the file itself.",
      "position": 7
    },
    {
      "id": "s_2790",
      "type": "sentence",
      "content": "js GitHub issue [#25741][] provides more information and a detailed analysis on the performance of `fs.",
      "position": 8
    },
    {
      "id": "s_2791",
      "type": "sentence",
      "content": "readFile()` for multiple file sizes in different Node.",
      "position": 9
    },
    {
      "id": "s_2792",
      "type": "sentence",
      "content": "js versions.",
      "position": 10
    },
    {
      "id": "w_2793",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` `callback` {Function}\n* `err` {Error}\n* `linkString` {string|Buffer} Reads the contents of the symbolic link referred to by `path`. The callback gets\ntwo arguments `(err, linkString)`. See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe link path passed to the callback. If the `encoding` is set to `'buffer'`,\nthe link path returned will be passed as a {Buffer} object.",
      "position": 0,
      "windowSize": 86
    },
    {
      "id": "sw_2794",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `linkString` {string|Buffer} Reads the contents of the symbolic link referred to by `path`. The callback gets two arguments `(err, linkString)`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2795",
      "type": "sentence_window",
      "content": "Reads the contents of the symbolic link referred to by `path`. The callback gets two arguments `(err, linkString)`. See the POSIX readlink(2) documentation for more details.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2796",
      "type": "sentence_window",
      "content": "The callback gets two arguments `(err, linkString)`. See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2797",
      "type": "sentence_window",
      "content": "See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer}",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2798",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_2799",
      "type": "sentence_context",
      "content": "[`fs.readlink(path[, options], callback)`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `linkString` {string|Buffer}",
      "position": 0
    },
    {
      "id": "sc_2800",
      "type": "sentence_context",
      "content": "[`fs.readlink(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Reads the contents of the symbolic link referred to by `path`.",
      "position": 1
    },
    {
      "id": "sc_2801",
      "type": "sentence_context",
      "content": "[`fs.readlink(path[, options], callback)`] [Previous: Reads the contents of the symbolic link referred t...] The callback gets two arguments `(err, linkString)`.",
      "position": 2
    },
    {
      "id": "sc_2802",
      "type": "sentence_context",
      "content": "[`fs.readlink(path[, options], callback)`] [Previous: The callback gets two arguments `(err, linkString)...] See the POSIX readlink(2) documentation for more details.",
      "position": 3
    },
    {
      "id": "sc_2803",
      "type": "sentence_context",
      "content": "[`fs.readlink(path[, options], callback)`] [Previous: See the POSIX readlink(2) documentation for more d...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback.",
      "position": 4
    },
    {
      "id": "sc_2804",
      "type": "sentence_context",
      "content": "[`fs.readlink(path[, options], callback)`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 5
    },
    {
      "id": "s_2805",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `linkString` {string|Buffer}",
      "position": 0
    },
    {
      "id": "s_2806",
      "type": "sentence",
      "content": "Reads the contents of the symbolic link referred to by `path`.",
      "position": 1
    },
    {
      "id": "s_2807",
      "type": "sentence",
      "content": "The callback gets two arguments `(err, linkString)`.",
      "position": 2
    },
    {
      "id": "s_2808",
      "type": "sentence",
      "content": "See the POSIX readlink(2) documentation for more details.",
      "position": 3
    },
    {
      "id": "s_2809",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path passed to the callback.",
      "position": 4
    },
    {
      "id": "s_2810",
      "type": "sentence",
      "content": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 5
    },
    {
      "id": "w_2811",
      "type": "window",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesRead` {integer}\n* `buffers` {ArrayBufferView\\[]} Read from a file specified by `fd` and write to an array of `ArrayBufferView`s\nusing `readv()`. `position` is the offset from the beginning of the file from where data\nshould be read. If `typeof position !== 'number'`, the data will be read\nfrom the current position. The callback will be given three arguments: `err`, `bytesRead`, and\n`buffers`. `bytesRead` is how many bytes were read from the file. If this method is invoked as its [`util.promisify()`][]ed version, it returns\na promise for an `Object` with `bytesRead` and `buffers` properties.",
      "position": 0,
      "windowSize": 99
    },
    {
      "id": "sw_2812",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffers` {ArrayBufferView\\[]} Read from a file specified by `fd` and write to an array of `ArrayBufferView`s using `readv()`. `position` is the offset from the beginning of the file from",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2813",
      "type": "sentence_window",
      "content": "Read from a file specified by `fd` and write to an array of `ArrayBufferView`s using `readv()`. `position` is the offset from the beginning of the file from where data should be read. If `typeof position !",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2814",
      "type": "sentence_window",
      "content": "`position` is the offset from the beginning of the file from where data should be read. If `typeof position ! == 'number'`, the data will be read from the current position.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2815",
      "type": "sentence_window",
      "content": "If `typeof position ! == 'number'`, the data will be read from the current position. The callback will be given three arguments: `err`, `bytesRead`, and `buffers`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2816",
      "type": "sentence_window",
      "content": "== 'number'`, the data will be read from the current position. The callback will be given three arguments: `err`, `bytesRead`, and `buffers`. `bytesRead` is how many bytes were read from the file.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2817",
      "type": "sentence_window",
      "content": "The callback will be given three arguments: `err`, `bytesRead`, and `buffers`. `bytesRead` is how many bytes were read from the file. If this method is invoked as its [`util.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2818",
      "type": "sentence_window",
      "content": "`bytesRead` is how many bytes were read from the file. If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffers` properties.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2819",
      "type": "sentence_window",
      "content": "If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffers` properties.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_2820",
      "type": "sentence_context",
      "content": "[`fs.readv(fd, buffers[, position], callback)`] `fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffers` {ArrayBufferView\\[]}",
      "position": 0
    },
    {
      "id": "sc_2821",
      "type": "sentence_context",
      "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: `fd` {integer} `buffers` {ArrayBufferView\\[]} `pos...] Read from a file specified by `fd` and write to an array of `ArrayBufferView`s using `readv()`.",
      "position": 1
    },
    {
      "id": "sc_2822",
      "type": "sentence_context",
      "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: Read from a file specified by `fd` and write to an...] `position` is the offset from the beginning of the file from where data should be read.",
      "position": 2
    },
    {
      "id": "sc_2823",
      "type": "sentence_context",
      "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: `position` is the offset from the beginning of the...] If `typeof position !",
      "position": 3
    },
    {
      "id": "sc_2824",
      "type": "sentence_context",
      "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: If `typeof position !...] == 'number'`, the data will be read from the current position.",
      "position": 4
    },
    {
      "id": "sc_2825",
      "type": "sentence_context",
      "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: == 'number'`, the data will be read from the curre...] The callback will be given three arguments: `err`, `bytesRead`, and `buffers`.",
      "position": 5
    },
    {
      "id": "sc_2826",
      "type": "sentence_context",
      "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: The callback will be given three arguments: `err`,...] `bytesRead` is how many bytes were read from the file.",
      "position": 6
    },
    {
      "id": "sc_2827",
      "type": "sentence_context",
      "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: `bytesRead` is how many bytes were read from the f...] If this method is invoked as its [`util.",
      "position": 7
    },
    {
      "id": "sc_2828",
      "type": "sentence_context",
      "content": "[`fs.readv(fd, buffers[, position], callback)`] [Previous: If this method is invoked as its [`util....] promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffers` properties.",
      "position": 8
    },
    {
      "id": "s_2829",
      "type": "sentence",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesRead` {integer} * `buffers` {ArrayBufferView\\[]}",
      "position": 0
    },
    {
      "id": "s_2830",
      "type": "sentence",
      "content": "Read from a file specified by `fd` and write to an array of `ArrayBufferView`s using `readv()`.",
      "position": 1
    },
    {
      "id": "s_2831",
      "type": "sentence",
      "content": "`position` is the offset from the beginning of the file from where data should be read.",
      "position": 2
    },
    {
      "id": "s_2832",
      "type": "sentence",
      "content": "If `typeof position !",
      "position": 3
    },
    {
      "id": "s_2833",
      "type": "sentence",
      "content": "== 'number'`, the data will be read from the current position.",
      "position": 4
    },
    {
      "id": "s_2834",
      "type": "sentence",
      "content": "The callback will be given three arguments: `err`, `bytesRead`, and `buffers`.",
      "position": 5
    },
    {
      "id": "s_2835",
      "type": "sentence",
      "content": "`bytesRead` is how many bytes were read from the file.",
      "position": 6
    },
    {
      "id": "s_2836",
      "type": "sentence",
      "content": "If this method is invoked as its [`util.",
      "position": 7
    },
    {
      "id": "s_2837",
      "type": "sentence",
      "content": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesRead` and `buffers` properties.",
      "position": 8
    },
    {
      "id": "w_2838",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` `callback` {Function}\n* `err` {Error}\n* `resolvedPath` {string|Buffer} Asynchronously computes the canonical pathname by resolving `.`, `..`, and\nsymbolic links. A canonical pathname is not necessarily unique. Hard links and bind mounts can\nexpose a file system entity through many pathnames. This function behaves like realpath(3), with some exceptions: No case conversion is performed on case-insensitive file systems.\n The maximum number of symbolic links is platform-independent and generally\n(much) higher than what the native realpath(3) implementation supports. The `callback` gets two arguments `(err, resolvedPath)`. May use `process.cwd`\nto resolve relative paths. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe path passed to the callback. If the `encoding` is set to `'buffer'`,\nthe path returned will be passed as a {Buffer} object. If `path` resolves to a socket or a pipe, the function will return a system\ndependent name for that object. A path that does not exist results in an ENOENT error.\n`error.path` is the absolute file path.",
      "position": 0,
      "windowSize": 184
    },
    {
      "id": "sw_2839",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer} Asynchronously computes the canonical pathname by resolving `. `, and symbolic links.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2840",
      "type": "sentence_window",
      "content": "Asynchronously computes the canonical pathname by resolving `. `, and symbolic links. A canonical pathname is not necessarily unique.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2841",
      "type": "sentence_window",
      "content": "`, and symbolic links. A canonical pathname is not necessarily unique. Hard links and bind mounts can expose a file system entity through many pathnames.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2842",
      "type": "sentence_window",
      "content": "A canonical pathname is not necessarily unique. Hard links and bind mounts can expose a file system entity through many pathnames. This function behaves like realpath(3), with some exceptions:",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2843",
      "type": "sentence_window",
      "content": "Hard links and bind mounts can expose a file system entity through many pathnames. This function behaves like realpath(3), with some exceptions: No case conversion is performed on case-insensitive file systems.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2844",
      "type": "sentence_window",
      "content": "This function behaves like realpath(3), with some exceptions: No case conversion is performed on case-insensitive file systems. The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2845",
      "type": "sentence_window",
      "content": "No case conversion is performed on case-insensitive file systems. The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports. The `callback` gets two arguments `(err, resolvedPath)`.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2846",
      "type": "sentence_window",
      "content": "The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports. The `callback` gets two arguments `(err, resolvedPath)`. May use `process.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2847",
      "type": "sentence_window",
      "content": "The `callback` gets two arguments `(err, resolvedPath)`. May use `process. cwd` to resolve relative paths.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_2848",
      "type": "sentence_window",
      "content": "May use `process. cwd` to resolve relative paths. Only paths that can be converted to UTF8 strings are supported.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_2849",
      "type": "sentence_window",
      "content": "cwd` to resolve relative paths. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_2850",
      "type": "sentence_window",
      "content": "Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_2851",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. If `path` resolves to a socket or a pipe, the function will",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_2852",
      "type": "sentence_window",
      "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. If `path` resolves to a socket or a pipe, the function will return a system dependent name for that object. A path that does not exist results in an ENOENT error.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_2853",
      "type": "sentence_window",
      "content": "If `path` resolves to a socket or a pipe, the function will return a system dependent name for that object. A path that does not exist results in an ENOENT error. path` is the absolute file path.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_2854",
      "type": "sentence_window",
      "content": "A path that does not exist results in an ENOENT error. path` is the absolute file path.",
      "position": 15,
      "sentenceCount": 2
    },
    {
      "id": "sc_2855",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}",
      "position": 0
    },
    {
      "id": "sc_2856",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Asynchronously computes the canonical pathname by resolving `.",
      "position": 1
    },
    {
      "id": "sc_2857",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: Asynchronously computes the canonical pathname by ...] `, and symbolic links.",
      "position": 2
    },
    {
      "id": "sc_2858",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: `, and symbolic links....] A canonical pathname is not necessarily unique.",
      "position": 3
    },
    {
      "id": "sc_2859",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: A canonical pathname is not necessarily unique....] Hard links and bind mounts can expose a file system entity through many pathnames.",
      "position": 4
    },
    {
      "id": "sc_2860",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: Hard links and bind mounts can expose a file syste...] This function behaves like realpath(3), with some exceptions:",
      "position": 5
    },
    {
      "id": "sc_2861",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: This function behaves like realpath(3), with some ...] No case conversion is performed on case-insensitive file systems.",
      "position": 6
    },
    {
      "id": "sc_2862",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: No case conversion is performed on case-insensitiv...] The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports.",
      "position": 7
    },
    {
      "id": "sc_2863",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: The maximum number of symbolic links is platform-i...] The `callback` gets two arguments `(err, resolvedPath)`.",
      "position": 8
    },
    {
      "id": "sc_2864",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: The `callback` gets two arguments `(err, resolvedP...] May use `process.",
      "position": 9
    },
    {
      "id": "sc_2865",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] cwd` to resolve relative paths.",
      "position": 10
    },
    {
      "id": "sc_2866",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: cwd` to resolve relative paths....] Only paths that can be converted to UTF8 strings are supported.",
      "position": 11
    },
    {
      "id": "sc_2867",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: Only paths that can be converted to UTF8 strings a...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
      "position": 12
    },
    {
      "id": "sc_2868",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 13
    },
    {
      "id": "sc_2869",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: If the `encoding` is set to `'buffer'`, the path r...] If `path` resolves to a socket or a pipe, the function will return a system dependent name for that object.",
      "position": 14
    },
    {
      "id": "sc_2870",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: If `path` resolves to a socket or a pipe, the func...] A path that does not exist results in an ENOENT error.",
      "position": 15
    },
    {
      "id": "sc_2871",
      "type": "sentence_context",
      "content": "[`fs.realpath(path[, options], callback)`] [Previous: A path that does not exist results in an ENOENT er...] path` is the absolute file path.",
      "position": 16
    },
    {
      "id": "s_2872",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}",
      "position": 0
    },
    {
      "id": "s_2873",
      "type": "sentence",
      "content": "Asynchronously computes the canonical pathname by resolving `.",
      "position": 1
    },
    {
      "id": "s_2874",
      "type": "sentence",
      "content": "`, and symbolic links.",
      "position": 2
    },
    {
      "id": "s_2875",
      "type": "sentence",
      "content": "A canonical pathname is not necessarily unique.",
      "position": 3
    },
    {
      "id": "s_2876",
      "type": "sentence",
      "content": "Hard links and bind mounts can expose a file system entity through many pathnames.",
      "position": 4
    },
    {
      "id": "s_2877",
      "type": "sentence",
      "content": "This function behaves like realpath(3), with some exceptions:",
      "position": 5
    },
    {
      "id": "s_2878",
      "type": "sentence",
      "content": "No case conversion is performed on case-insensitive file systems.",
      "position": 6
    },
    {
      "id": "s_2879",
      "type": "sentence",
      "content": "The maximum number of symbolic links is platform-independent and generally (much) higher than what the native realpath(3) implementation supports.",
      "position": 7
    },
    {
      "id": "s_2880",
      "type": "sentence",
      "content": "The `callback` gets two arguments `(err, resolvedPath)`.",
      "position": 8
    },
    {
      "id": "s_2881",
      "type": "sentence",
      "content": "May use `process.",
      "position": 9
    },
    {
      "id": "s_2882",
      "type": "sentence",
      "content": "cwd` to resolve relative paths.",
      "position": 10
    },
    {
      "id": "s_2883",
      "type": "sentence",
      "content": "Only paths that can be converted to UTF8 strings are supported.",
      "position": 11
    },
    {
      "id": "s_2884",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
      "position": 12
    },
    {
      "id": "s_2885",
      "type": "sentence",
      "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 13
    },
    {
      "id": "s_2886",
      "type": "sentence",
      "content": "If `path` resolves to a socket or a pipe, the function will return a system dependent name for that object.",
      "position": 14
    },
    {
      "id": "s_2887",
      "type": "sentence",
      "content": "A path that does not exist results in an ENOENT error.",
      "position": 15
    },
    {
      "id": "s_2888",
      "type": "sentence",
      "content": "path` is the absolute file path.",
      "position": 16
    },
    {
      "id": "w_2889",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` `callback` {Function}\n* `err` {Error}\n* `resolvedPath` {string|Buffer} Asynchronous realpath(3). The `callback` gets two arguments `(err, resolvedPath)`. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe path passed to the callback. If the `encoding` is set to `'buffer'`,\nthe path returned will be passed as a {Buffer} object. On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on `/proc` in order for this function to work. Glibc does not have\nthis restriction.",
      "position": 0,
      "windowSize": 108
    },
    {
      "id": "sw_2890",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer} Asynchronous realpath(3). The `callback` gets two arguments `(err, resolvedPath)`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2891",
      "type": "sentence_window",
      "content": "Asynchronous realpath(3). The `callback` gets two arguments `(err, resolvedPath)`. Only paths that can be converted to UTF8 strings are supported.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2892",
      "type": "sentence_window",
      "content": "The `callback` gets two arguments `(err, resolvedPath)`. Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2893",
      "type": "sentence_window",
      "content": "Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2894",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2895",
      "type": "sentence_window",
      "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2896",
      "type": "sentence_window",
      "content": "On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2897",
      "type": "sentence_window",
      "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_2898",
      "type": "sentence_context",
      "content": "[`fs.realpath.native(path[, options], callback)`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}",
      "position": 0
    },
    {
      "id": "sc_2899",
      "type": "sentence_context",
      "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Asynchronous realpath(3).",
      "position": 1
    },
    {
      "id": "sc_2900",
      "type": "sentence_context",
      "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: Asynchronous realpath(3)....] The `callback` gets two arguments `(err, resolvedPath)`.",
      "position": 2
    },
    {
      "id": "sc_2901",
      "type": "sentence_context",
      "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: The `callback` gets two arguments `(err, resolvedP...] Only paths that can be converted to UTF8 strings are supported.",
      "position": 3
    },
    {
      "id": "sc_2902",
      "type": "sentence_context",
      "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: Only paths that can be converted to UTF8 strings a...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
      "position": 4
    },
    {
      "id": "sc_2903",
      "type": "sentence_context",
      "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 5
    },
    {
      "id": "sc_2904",
      "type": "sentence_context",
      "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: If the `encoding` is set to `'buffer'`, the path r...] On Linux, when Node.",
      "position": 6
    },
    {
      "id": "sc_2905",
      "type": "sentence_context",
      "content": "[`fs.realpath.native(path[, options], callback)`] js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
      "position": 7
    },
    {
      "id": "sc_2906",
      "type": "sentence_context",
      "content": "[`fs.realpath.native(path[, options], callback)`] [Previous: js is linked against musl libc, the procfs file sy...] Glibc does not have this restriction.",
      "position": 8
    },
    {
      "id": "s_2907",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `resolvedPath` {string|Buffer}",
      "position": 0
    },
    {
      "id": "s_2908",
      "type": "sentence",
      "content": "Asynchronous realpath(3).",
      "position": 1
    },
    {
      "id": "s_2909",
      "type": "sentence",
      "content": "The `callback` gets two arguments `(err, resolvedPath)`.",
      "position": 2
    },
    {
      "id": "s_2910",
      "type": "sentence",
      "content": "Only paths that can be converted to UTF8 strings are supported.",
      "position": 3
    },
    {
      "id": "s_2911",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path passed to the callback.",
      "position": 4
    },
    {
      "id": "s_2912",
      "type": "sentence",
      "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 5
    },
    {
      "id": "s_2913",
      "type": "sentence",
      "content": "On Linux, when Node.",
      "position": 6
    },
    {
      "id": "s_2914",
      "type": "sentence",
      "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
      "position": 7
    },
    {
      "id": "s_2915",
      "type": "sentence",
      "content": "Glibc does not have this restriction.",
      "position": 8
    },
    {
      "id": "w_2916",
      "type": "window",
      "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function}\n* `err` {Error} Asynchronously rename file at `oldPath` to the pathname provided\nas `newPath`. In the case that `newPath` already exists, it will\nbe overwritten. If there is a directory at `newPath`, an error will\nbe raised instead. No arguments other than a possible exception are\ngiven to the completion callback. See also: rename(2).",
      "position": 0,
      "windowSize": 55
    },
    {
      "id": "sw_2917",
      "type": "sentence_window",
      "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error} Asynchronously rename file at `oldPath` to the pathname provided as `newPath`. In the case that `newPath` already exists, it will be overwritten.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2918",
      "type": "sentence_window",
      "content": "Asynchronously rename file at `oldPath` to the pathname provided as `newPath`. In the case that `newPath` already exists, it will be overwritten. If there is a directory at `newPath`, an error will be raised instead.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2919",
      "type": "sentence_window",
      "content": "In the case that `newPath` already exists, it will be overwritten. If there is a directory at `newPath`, an error will be raised instead. No arguments other than a possible exception are given to the completion callback.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2920",
      "type": "sentence_window",
      "content": "If there is a directory at `newPath`, an error will be raised instead. No arguments other than a possible exception are given to the completion callback. See also: rename(2).",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2921",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. See also: rename(2).",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_2922",
      "type": "sentence_context",
      "content": "[`fs.rename(oldPath, newPath, callback)`] `oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_2923",
      "type": "sentence_context",
      "content": "[`fs.rename(oldPath, newPath, callback)`] [Previous: `oldPath` {string|Buffer|URL} `newPath` {string|Bu...] Asynchronously rename file at `oldPath` to the pathname provided as `newPath`.",
      "position": 1
    },
    {
      "id": "sc_2924",
      "type": "sentence_context",
      "content": "[`fs.rename(oldPath, newPath, callback)`] [Previous: Asynchronously rename file at `oldPath` to the pat...] In the case that `newPath` already exists, it will be overwritten.",
      "position": 2
    },
    {
      "id": "sc_2925",
      "type": "sentence_context",
      "content": "[`fs.rename(oldPath, newPath, callback)`] [Previous: In the case that `newPath` already exists, it will...] If there is a directory at `newPath`, an error will be raised instead.",
      "position": 3
    },
    {
      "id": "sc_2926",
      "type": "sentence_context",
      "content": "[`fs.rename(oldPath, newPath, callback)`] [Previous: If there is a directory at `newPath`, an error wil...] No arguments other than a possible exception are given to the completion callback.",
      "position": 4
    },
    {
      "id": "sc_2927",
      "type": "sentence_context",
      "content": "[`fs.rename(oldPath, newPath, callback)`] [Previous: No arguments other than a possible exception are g...] See also: rename(2).",
      "position": 5
    },
    {
      "id": "s_2928",
      "type": "sentence",
      "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_2929",
      "type": "sentence",
      "content": "Asynchronously rename file at `oldPath` to the pathname provided as `newPath`.",
      "position": 1
    },
    {
      "id": "s_2930",
      "type": "sentence",
      "content": "In the case that `newPath` already exists, it will be overwritten.",
      "position": 2
    },
    {
      "id": "s_2931",
      "type": "sentence",
      "content": "If there is a directory at `newPath`, an error will be raised instead.",
      "position": 3
    },
    {
      "id": "s_2932",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 4
    },
    {
      "id": "s_2933",
      "type": "sentence",
      "content": "See also: rename(2).",
      "position": 5
    },
    {
      "id": "w_2934",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to\nbe options for `recursive`, `maxBusyTries`, and `emfileWait` but they were\ndeprecated and removed. The `options` argument is still accepted for\nbackwards compatibility but it is not used. `callback` {Function}\n* `err` {Error} Asynchronous rmdir(2). No arguments other than a possible exception are given\nto the completion callback. Using `fs.rmdir()` on a file (not a directory) results in an `ENOENT` error on\nWindows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs.rm()`][]\nwith options `{ recursive: true, force: true }`.",
      "position": 0,
      "windowSize": 95
    },
    {
      "id": "sw_2935",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2936",
      "type": "sentence_window",
      "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used. `callback` {Function} * `err` {Error}",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2937",
      "type": "sentence_window",
      "content": "The `options` argument is still accepted for backwards compatibility but it is not used. `callback` {Function} * `err` {Error} Asynchronous rmdir(2).",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2938",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} Asynchronous rmdir(2). No arguments other than a possible exception are given to the completion callback.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2939",
      "type": "sentence_window",
      "content": "Asynchronous rmdir(2). No arguments other than a possible exception are given to the completion callback. rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2940",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2941",
      "type": "sentence_window",
      "content": "rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs. rm()`][] with options `{ recursive: true, force: true }`.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2942",
      "type": "sentence_window",
      "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fs. rm()`][] with options `{ recursive: true, force: true }`.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_2943",
      "type": "sentence_context",
      "content": "[`fs.rmdir(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
      "position": 0
    },
    {
      "id": "sc_2944",
      "type": "sentence_context",
      "content": "[`fs.rmdir(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} Ther...] There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
      "position": 1
    },
    {
      "id": "sc_2945",
      "type": "sentence_context",
      "content": "[`fs.rmdir(path[, options], callback)`] [Previous: There used to be options for `recursive`, `maxBusy...] The `options` argument is still accepted for backwards compatibility but it is not used.",
      "position": 2
    },
    {
      "id": "sc_2946",
      "type": "sentence_context",
      "content": "[`fs.rmdir(path[, options], callback)`] [Previous: The `options` argument is still accepted for backw...] `callback` {Function} * `err` {Error}",
      "position": 3
    },
    {
      "id": "sc_2947",
      "type": "sentence_context",
      "content": "[`fs.rmdir(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error}...] Asynchronous rmdir(2).",
      "position": 4
    },
    {
      "id": "sc_2948",
      "type": "sentence_context",
      "content": "[`fs.rmdir(path[, options], callback)`] [Previous: Asynchronous rmdir(2)....] No arguments other than a possible exception are given to the completion callback.",
      "position": 5
    },
    {
      "id": "sc_2949",
      "type": "sentence_context",
      "content": "[`fs.rmdir(path[, options], callback)`] [Previous: No arguments other than a possible exception are g...] rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
      "position": 6
    },
    {
      "id": "sc_2950",
      "type": "sentence_context",
      "content": "[`fs.rmdir(path[, options], callback)`] [Previous: rmdir()` on a file (not a directory) results in an...] To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
      "position": 7
    },
    {
      "id": "sc_2951",
      "type": "sentence_context",
      "content": "[`fs.rmdir(path[, options], callback)`] [Previous: To get a behavior similar to the `rm -rf` Unix com...] rm()`][] with options `{ recursive: true, force: true }`.",
      "position": 8
    },
    {
      "id": "s_2952",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
      "position": 0
    },
    {
      "id": "s_2953",
      "type": "sentence",
      "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
      "position": 1
    },
    {
      "id": "s_2954",
      "type": "sentence",
      "content": "The `options` argument is still accepted for backwards compatibility but it is not used.",
      "position": 2
    },
    {
      "id": "s_2955",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error}",
      "position": 3
    },
    {
      "id": "s_2956",
      "type": "sentence",
      "content": "Asynchronous rmdir(2).",
      "position": 4
    },
    {
      "id": "s_2957",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 5
    },
    {
      "id": "s_2958",
      "type": "sentence",
      "content": "rmdir()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
      "position": 6
    },
    {
      "id": "s_2959",
      "type": "sentence",
      "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
      "position": 7
    },
    {
      "id": "s_2960",
      "type": "sentence",
      "content": "rm()`][] with options `{ recursive: true, force: true }`.",
      "position": 8
    },
    {
      "id": "w_2961",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `force` {boolean} When `true`, exceptions will be ignored if `path` does\n  not exist. **Default:** `false`.\n* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\n  `EPERM` error is encountered, Node.js will retry the operation with a linear\n  backoff wait of `retryDelay` milliseconds longer on each try. This option\n  represents the number of retries. This option is ignored if the `recursive`\n  option is not `true`. **Default:** `0`.\n* `recursive` {boolean} If `true`, perform a recursive removal. In\n  recursive mode operations are retried on failure. **Default:** `false`.\n* `retryDelay` {integer} The amount of time in milliseconds to wait between\n  retries. This option is ignored if the `recursive` option is not `true`.\n  **Default:** `100`. `callback` {Function}\n* `err` {Error} Asynchronously removes files and directories (modeled on the standard POSIX `rm`\nutility). No arguments other than a possible exception are given to the\ncompletion callback.",
      "position": 0,
      "windowSize": 147
    },
    {
      "id": "sw_2962",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist. **Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_2963",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_2964",
      "type": "sentence_window",
      "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_2965",
      "type": "sentence_window",
      "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries. This option is ignored if the `recursive` option is not `true`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_2966",
      "type": "sentence_window",
      "content": "This option represents the number of retries. This option is ignored if the `recursive` option is not `true`. **Default:** `0`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_2967",
      "type": "sentence_window",
      "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive removal.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_2968",
      "type": "sentence_window",
      "content": "**Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive removal. In recursive mode operations are retried on failure.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_2969",
      "type": "sentence_window",
      "content": "* `recursive` {boolean} If `true`, perform a recursive removal. In recursive mode operations are retried on failure. **Default:** `false`.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_2970",
      "type": "sentence_window",
      "content": "In recursive mode operations are retried on failure. **Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_2971",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_2972",
      "type": "sentence_window",
      "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`. **Default:** `100`.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_2973",
      "type": "sentence_window",
      "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `100`. `callback` {Function} * `err` {Error}",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_2974",
      "type": "sentence_window",
      "content": "**Default:** `100`. `callback` {Function} * `err` {Error} Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_2975",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility). No arguments other than a possible exception are given to the completion callback.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_2976",
      "type": "sentence_window",
      "content": "Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility). No arguments other than a possible exception are given to the completion callback.",
      "position": 14,
      "sentenceCount": 2
    },
    {
      "id": "sc_2977",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
      "position": 0
    },
    {
      "id": "sc_2978",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `f...] **Default:** `false`.",
      "position": 1
    },
    {
      "id": "sc_2979",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: **Default:** `false`....] * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
      "position": 2
    },
    {
      "id": "sc_2980",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, ...] js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
      "position": 3
    },
    {
      "id": "sc_2981",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: js will retry the operation with a linear backoff ...] This option represents the number of retries.",
      "position": 4
    },
    {
      "id": "sc_2982",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: This option represents the number of retries....] This option is ignored if the `recursive` option is not `true`.",
      "position": 5
    },
    {
      "id": "sc_2983",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `0`.",
      "position": 6
    },
    {
      "id": "sc_2984",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] * `recursive` {boolean} If `true`, perform a recursive removal.",
      "position": 7
    },
    {
      "id": "sc_2985",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: * `recursive` {boolean} If `true`, perform a recur...] In recursive mode operations are retried on failure.",
      "position": 8
    },
    {
      "id": "sc_2986",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: In recursive mode operations are retried on failur...] **Default:** `false`.",
      "position": 9
    },
    {
      "id": "sc_2987",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: **Default:** `false`....] * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
      "position": 10
    },
    {
      "id": "sc_2988",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: * `retryDelay` {integer} The amount of time in mil...] This option is ignored if the `recursive` option is not `true`.",
      "position": 11
    },
    {
      "id": "sc_2989",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `100`.",
      "position": 12
    },
    {
      "id": "sc_2990",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] `callback` {Function} * `err` {Error}",
      "position": 13
    },
    {
      "id": "sc_2991",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error}...] Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 14
    },
    {
      "id": "sc_2992",
      "type": "sentence_context",
      "content": "[`fs.rm(path[, options], callback)`] [Previous: Asynchronously removes files and directories (mode...] No arguments other than a possible exception are given to the completion callback.",
      "position": 15
    },
    {
      "id": "s_2993",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
      "position": 0
    },
    {
      "id": "s_2994",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 1
    },
    {
      "id": "s_2995",
      "type": "sentence",
      "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
      "position": 2
    },
    {
      "id": "s_2996",
      "type": "sentence",
      "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
      "position": 3
    },
    {
      "id": "s_2997",
      "type": "sentence",
      "content": "This option represents the number of retries.",
      "position": 4
    },
    {
      "id": "s_2998",
      "type": "sentence",
      "content": "This option is ignored if the `recursive` option is not `true`.",
      "position": 5
    },
    {
      "id": "s_2999",
      "type": "sentence",
      "content": "**Default:** `0`.",
      "position": 6
    },
    {
      "id": "s_3000",
      "type": "sentence",
      "content": "* `recursive` {boolean} If `true`, perform a recursive removal.",
      "position": 7
    },
    {
      "id": "s_3001",
      "type": "sentence",
      "content": "In recursive mode operations are retried on failure.",
      "position": 8
    },
    {
      "id": "s_3002",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 9
    },
    {
      "id": "s_3003",
      "type": "sentence",
      "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
      "position": 10
    },
    {
      "id": "s_3004",
      "type": "sentence",
      "content": "This option is ignored if the `recursive` option is not `true`.",
      "position": 11
    },
    {
      "id": "s_3005",
      "type": "sentence",
      "content": "**Default:** `100`.",
      "position": 12
    },
    {
      "id": "s_3006",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error}",
      "position": 13
    },
    {
      "id": "s_3007",
      "type": "sentence",
      "content": "Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 14
    },
    {
      "id": "s_3008",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 15
    },
    {
      "id": "w_3009",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. `callback` {Function}\n* `err` {Error}\n* `stats` {fs.Stats} Asynchronous stat(2). The callback gets two arguments `(err, stats)` where\n`stats` is an {fs.Stats} object. In case of an error, the `err.code` will be one of [Common System Errors][]. [`fs.stat()`][] follows symbolic links. Use [`fs.lstat()`][] to look at the\nlinks themselves. Using `fs.stat()` to check for the existence of a file before calling\n`fs.open()`, `fs.readFile()`, or `fs.writeFile()` is not recommended.\nInstead, user code should open/read/write the file directly and handle the\nerror raised if the file is not available. To check if a file exists without manipulating it afterwards, [`fs.access()`][]\nis recommended. For example, given the following directory structure: The next program will check for the stats of the given paths: The resulting output will resemble:",
      "position": 0,
      "windowSize": 137
    },
    {
      "id": "sw_3010",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3011",
      "type": "sentence_window",
      "content": "Stats} object should be `bigint`. **Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3012",
      "type": "sentence_window",
      "content": "**Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs. Asynchronous stat(2).",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3013",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} * `stats` {fs. Asynchronous stat(2). The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3014",
      "type": "sentence_window",
      "content": "Asynchronous stat(2). The callback gets two arguments `(err, stats)` where `stats` is an {fs. Stats} object.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3015",
      "type": "sentence_window",
      "content": "The callback gets two arguments `(err, stats)` where `stats` is an {fs. Stats} object. In case of an error, the `err.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3016",
      "type": "sentence_window",
      "content": "Stats} object. In case of an error, the `err. code` will be one of [Common System Errors][].",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3017",
      "type": "sentence_window",
      "content": "In case of an error, the `err. code` will be one of [Common System Errors][]. stat()`][] follows symbolic links.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3018",
      "type": "sentence_window",
      "content": "code` will be one of [Common System Errors][]. stat()`][] follows symbolic links. lstat()`][] to look at the links themselves.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3019",
      "type": "sentence_window",
      "content": "stat()`][] follows symbolic links. lstat()`][] to look at the links themselves. stat()` to check for the existence of a file before calling `fs.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3020",
      "type": "sentence_window",
      "content": "lstat()`][] to look at the links themselves. stat()` to check for the existence of a file before calling `fs. open()`, `fs.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3021",
      "type": "sentence_window",
      "content": "stat()` to check for the existence of a file before calling `fs. open()`, `fs. readFile()`, or `fs.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3022",
      "type": "sentence_window",
      "content": "open()`, `fs. readFile()`, or `fs. writeFile()` is not recommended.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_3023",
      "type": "sentence_window",
      "content": "readFile()`, or `fs. writeFile()` is not recommended. Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_3024",
      "type": "sentence_window",
      "content": "writeFile()` is not recommended. Instead, user code should open/read/write the file directly and handle the error raised if the file is not available. To check if a file exists without manipulating it afterwards, [`fs.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_3025",
      "type": "sentence_window",
      "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not available. To check if a file exists without manipulating it afterwards, [`fs. access()`][] is recommended.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_3026",
      "type": "sentence_window",
      "content": "To check if a file exists without manipulating it afterwards, [`fs. access()`][] is recommended. For example, given the following directory structure:",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_3027",
      "type": "sentence_window",
      "content": "access()`][] is recommended. For example, given the following directory structure: The next program will check for the stats of the given paths:",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_3028",
      "type": "sentence_window",
      "content": "For example, given the following directory structure: The next program will check for the stats of the given paths: The resulting output will resemble:",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_3029",
      "type": "sentence_window",
      "content": "The next program will check for the stats of the given paths: The resulting output will resemble:",
      "position": 19,
      "sentenceCount": 2
    },
    {
      "id": "sc_3030",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_3031",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_3032",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_3033",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 3
    },
    {
      "id": "sc_3034",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `stats` {f...] Asynchronous stat(2).",
      "position": 4
    },
    {
      "id": "sc_3035",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: Asynchronous stat(2)....] The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
      "position": 5
    },
    {
      "id": "sc_3036",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: The callback gets two arguments `(err, stats)` whe...] Stats} object.",
      "position": 6
    },
    {
      "id": "sc_3037",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] In case of an error, the `err.",
      "position": 7
    },
    {
      "id": "sc_3038",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: In case of an error, the `err....] code` will be one of [Common System Errors][].",
      "position": 8
    },
    {
      "id": "sc_3039",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: code` will be one of [Common System Errors][]....] stat()`][] follows symbolic links.",
      "position": 9
    },
    {
      "id": "sc_3040",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: stat()`][] follows symbolic links....] lstat()`][] to look at the links themselves.",
      "position": 10
    },
    {
      "id": "sc_3041",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: lstat()`][] to look at the links themselves....] stat()` to check for the existence of a file before calling `fs.",
      "position": 11
    },
    {
      "id": "sc_3042",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: stat()` to check for the existence of a file befor...] open()`, `fs.",
      "position": 12
    },
    {
      "id": "sc_3043",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] readFile()`, or `fs.",
      "position": 13
    },
    {
      "id": "sc_3044",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] writeFile()` is not recommended.",
      "position": 14
    },
    {
      "id": "sc_3045",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: writeFile()` is not recommended....] Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.",
      "position": 15
    },
    {
      "id": "sc_3046",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: Instead, user code should open/read/write the file...] To check if a file exists without manipulating it afterwards, [`fs.",
      "position": 16
    },
    {
      "id": "sc_3047",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: To check if a file exists without manipulating it ...] access()`][] is recommended.",
      "position": 17
    },
    {
      "id": "sc_3048",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: access()`][] is recommended....] For example, given the following directory structure:",
      "position": 18
    },
    {
      "id": "sc_3049",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: For example, given the following directory structu...] The next program will check for the stats of the given paths:",
      "position": 19
    },
    {
      "id": "sc_3050",
      "type": "sentence_context",
      "content": "[`fs.stat(path[, options], callback)`] [Previous: The next program will check for the stats of the g...] The resulting output will resemble:",
      "position": 20
    },
    {
      "id": "s_3051",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_3052",
      "type": "sentence",
      "content": "Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_3053",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_3054",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 3
    },
    {
      "id": "s_3055",
      "type": "sentence",
      "content": "Asynchronous stat(2).",
      "position": 4
    },
    {
      "id": "s_3056",
      "type": "sentence",
      "content": "The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
      "position": 5
    },
    {
      "id": "s_3057",
      "type": "sentence",
      "content": "Stats} object.",
      "position": 6
    },
    {
      "id": "s_3058",
      "type": "sentence",
      "content": "In case of an error, the `err.",
      "position": 7
    },
    {
      "id": "s_3059",
      "type": "sentence",
      "content": "code` will be one of [Common System Errors][].",
      "position": 8
    },
    {
      "id": "s_3060",
      "type": "sentence",
      "content": "stat()`][] follows symbolic links.",
      "position": 9
    },
    {
      "id": "s_3061",
      "type": "sentence",
      "content": "lstat()`][] to look at the links themselves.",
      "position": 10
    },
    {
      "id": "s_3062",
      "type": "sentence",
      "content": "stat()` to check for the existence of a file before calling `fs.",
      "position": 11
    },
    {
      "id": "s_3063",
      "type": "sentence",
      "content": "open()`, `fs.",
      "position": 12
    },
    {
      "id": "s_3064",
      "type": "sentence",
      "content": "readFile()`, or `fs.",
      "position": 13
    },
    {
      "id": "s_3065",
      "type": "sentence",
      "content": "writeFile()` is not recommended.",
      "position": 14
    },
    {
      "id": "s_3066",
      "type": "sentence",
      "content": "Instead, user code should open/read/write the file directly and handle the error raised if the file is not available.",
      "position": 15
    },
    {
      "id": "s_3067",
      "type": "sentence",
      "content": "To check if a file exists without manipulating it afterwards, [`fs.",
      "position": 16
    },
    {
      "id": "s_3068",
      "type": "sentence",
      "content": "access()`][] is recommended.",
      "position": 17
    },
    {
      "id": "s_3069",
      "type": "sentence",
      "content": "For example, given the following directory structure:",
      "position": 18
    },
    {
      "id": "s_3070",
      "type": "sentence",
      "content": "The next program will check for the stats of the given paths:",
      "position": 19
    },
    {
      "id": "s_3071",
      "type": "sentence",
      "content": "The resulting output will resemble:",
      "position": 20
    },
    {
      "id": "w_3072",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.StatFs} object should be `bigint`. **Default:** `false`. `callback` {Function}\n* `err` {Error}\n* `stats` {fs.StatFs} Asynchronous statfs(2). Returns information about the mounted file system which\ncontains `path`. The callback gets two arguments `(err, stats)` where `stats`\nis an {fs.StatFs} object. In case of an error, the `err.code` will be one of [Common System Errors][].",
      "position": 0,
      "windowSize": 64
    },
    {
      "id": "sw_3073",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. StatFs} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3074",
      "type": "sentence_window",
      "content": "StatFs} object should be `bigint`. **Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3075",
      "type": "sentence_window",
      "content": "**Default:** `false`. `callback` {Function} * `err` {Error} * `stats` {fs. Asynchronous statfs(2).",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3076",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} * `stats` {fs. Asynchronous statfs(2). Returns information about the mounted file system which contains `path`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3077",
      "type": "sentence_window",
      "content": "Asynchronous statfs(2). Returns information about the mounted file system which contains `path`. The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3078",
      "type": "sentence_window",
      "content": "Returns information about the mounted file system which contains `path`. The callback gets two arguments `(err, stats)` where `stats` is an {fs. StatFs} object.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3079",
      "type": "sentence_window",
      "content": "The callback gets two arguments `(err, stats)` where `stats` is an {fs. StatFs} object. In case of an error, the `err.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3080",
      "type": "sentence_window",
      "content": "StatFs} object. In case of an error, the `err. code` will be one of [Common System Errors][].",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3081",
      "type": "sentence_window",
      "content": "In case of an error, the `err. code` will be one of [Common System Errors][].",
      "position": 8,
      "sentenceCount": 2
    },
    {
      "id": "sc_3082",
      "type": "sentence_context",
      "content": "[`fs.statfs(path[, options], callback)`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_3083",
      "type": "sentence_context",
      "content": "[`fs.statfs(path[, options], callback)`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] StatFs} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_3084",
      "type": "sentence_context",
      "content": "[`fs.statfs(path[, options], callback)`] [Previous: StatFs} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_3085",
      "type": "sentence_context",
      "content": "[`fs.statfs(path[, options], callback)`] [Previous: **Default:** `false`....] `callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 3
    },
    {
      "id": "sc_3086",
      "type": "sentence_context",
      "content": "[`fs.statfs(path[, options], callback)`] [Previous: `callback` {Function} * `err` {Error} * `stats` {f...] Asynchronous statfs(2).",
      "position": 4
    },
    {
      "id": "sc_3087",
      "type": "sentence_context",
      "content": "[`fs.statfs(path[, options], callback)`] [Previous: Asynchronous statfs(2)....] Returns information about the mounted file system which contains `path`.",
      "position": 5
    },
    {
      "id": "sc_3088",
      "type": "sentence_context",
      "content": "[`fs.statfs(path[, options], callback)`] [Previous: Returns information about the mounted file system ...] The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
      "position": 6
    },
    {
      "id": "sc_3089",
      "type": "sentence_context",
      "content": "[`fs.statfs(path[, options], callback)`] [Previous: The callback gets two arguments `(err, stats)` whe...] StatFs} object.",
      "position": 7
    },
    {
      "id": "sc_3090",
      "type": "sentence_context",
      "content": "[`fs.statfs(path[, options], callback)`] In case of an error, the `err.",
      "position": 8
    },
    {
      "id": "sc_3091",
      "type": "sentence_context",
      "content": "[`fs.statfs(path[, options], callback)`] [Previous: In case of an error, the `err....] code` will be one of [Common System Errors][].",
      "position": 9
    },
    {
      "id": "s_3092",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_3093",
      "type": "sentence",
      "content": "StatFs} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_3094",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_3095",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error} * `stats` {fs.",
      "position": 3
    },
    {
      "id": "s_3096",
      "type": "sentence",
      "content": "Asynchronous statfs(2).",
      "position": 4
    },
    {
      "id": "s_3097",
      "type": "sentence",
      "content": "Returns information about the mounted file system which contains `path`.",
      "position": 5
    },
    {
      "id": "s_3098",
      "type": "sentence",
      "content": "The callback gets two arguments `(err, stats)` where `stats` is an {fs.",
      "position": 6
    },
    {
      "id": "s_3099",
      "type": "sentence",
      "content": "StatFs} object.",
      "position": 7
    },
    {
      "id": "s_3100",
      "type": "sentence",
      "content": "In case of an error, the `err.",
      "position": 8
    },
    {
      "id": "s_3101",
      "type": "sentence",
      "content": "code` will be one of [Common System Errors][].",
      "position": 9
    },
    {
      "id": "w_3102",
      "type": "window",
      "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` `callback` {Function}\n* `err` {Error} Creates the link called `path` pointing to `target`. No arguments other than a\npossible exception are given to the completion callback. See the POSIX symlink(2) documentation for more details. The `type` argument is only available on Windows and ignored on other platforms.\nIt can be set to `'dir'`, `'file'`, or `'junction'`. If the `type` argument is\n`null`, Node.js will autodetect `target` type and use `'file'` or `'dir'`.\nIf the `target` does not exist, `'file'` will be used. Windows junction points\nrequire the destination path to be absolute. When using `'junction'`, the\n`target` argument will automatically be normalized to absolute path. Junction\npoints on NTFS volumes can only point to directories. Relative targets are relative to the link's parent directory. The above example creates a symbolic link `mewtwo` which points to `mew` in the\nsame directory:",
      "position": 0,
      "windowSize": 139
    },
    {
      "id": "sw_3103",
      "type": "sentence_window",
      "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` `callback` {Function} * `err` {Error} Creates the link called `path` pointing to `target`. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3104",
      "type": "sentence_window",
      "content": "Creates the link called `path` pointing to `target`. No arguments other than a possible exception are given to the completion callback. See the POSIX symlink(2) documentation for more details.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3105",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. See the POSIX symlink(2) documentation for more details. The `type` argument is only available on Windows and ignored on other platforms.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3106",
      "type": "sentence_window",
      "content": "See the POSIX symlink(2) documentation for more details. The `type` argument is only available on Windows and ignored on other platforms. It can be set to `'dir'`, `'file'`, or `'junction'`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3107",
      "type": "sentence_window",
      "content": "The `type` argument is only available on Windows and ignored on other platforms. It can be set to `'dir'`, `'file'`, or `'junction'`. If the `type` argument is `null`, Node.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3108",
      "type": "sentence_window",
      "content": "It can be set to `'dir'`, `'file'`, or `'junction'`. If the `type` argument is `null`, Node. js will autodetect `target` type and use `'file'` or `'dir'`.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3109",
      "type": "sentence_window",
      "content": "If the `type` argument is `null`, Node. js will autodetect `target` type and use `'file'` or `'dir'`. If the `target` does not exist, `'file'` will be used.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3110",
      "type": "sentence_window",
      "content": "js will autodetect `target` type and use `'file'` or `'dir'`. If the `target` does not exist, `'file'` will be used. Windows junction points require the destination path to be absolute.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3111",
      "type": "sentence_window",
      "content": "If the `target` does not exist, `'file'` will be used. Windows junction points require the destination path to be absolute. When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3112",
      "type": "sentence_window",
      "content": "Windows junction points require the destination path to be absolute. When using `'junction'`, the `target` argument will automatically be normalized to absolute path. Junction points on NTFS volumes can only point to directories.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3113",
      "type": "sentence_window",
      "content": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path. Junction points on NTFS volumes can only point to directories. Relative targets are relative to the link's parent directory.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3114",
      "type": "sentence_window",
      "content": "Junction points on NTFS volumes can only point to directories. Relative targets are relative to the link's parent directory. The above example creates a symbolic link `mewtwo` which points to `mew` in the same directory:",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3115",
      "type": "sentence_window",
      "content": "Relative targets are relative to the link's parent directory. The above example creates a symbolic link `mewtwo` which points to `mew` in the same directory:",
      "position": 12,
      "sentenceCount": 2
    },
    {
      "id": "sc_3116",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] `target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_3117",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: `target` {string|Buffer|URL} `path` {string|Buffer...] Creates the link called `path` pointing to `target`.",
      "position": 1
    },
    {
      "id": "sc_3118",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: Creates the link called `path` pointing to `target...] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_3119",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: No arguments other than a possible exception are g...] See the POSIX symlink(2) documentation for more details.",
      "position": 3
    },
    {
      "id": "sc_3120",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: See the POSIX symlink(2) documentation for more de...] The `type` argument is only available on Windows and ignored on other platforms.",
      "position": 4
    },
    {
      "id": "sc_3121",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: The `type` argument is only available on Windows a...] It can be set to `'dir'`, `'file'`, or `'junction'`.",
      "position": 5
    },
    {
      "id": "sc_3122",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: It can be set to `'dir'`, `'file'`, or `'junction'...] If the `type` argument is `null`, Node.",
      "position": 6
    },
    {
      "id": "sc_3123",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: If the `type` argument is `null`, Node....] js will autodetect `target` type and use `'file'` or `'dir'`.",
      "position": 7
    },
    {
      "id": "sc_3124",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: js will autodetect `target` type and use `'file'` ...] If the `target` does not exist, `'file'` will be used.",
      "position": 8
    },
    {
      "id": "sc_3125",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: If the `target` does not exist, `'file'` will be u...] Windows junction points require the destination path to be absolute.",
      "position": 9
    },
    {
      "id": "sc_3126",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: Windows junction points require the destination pa...] When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
      "position": 10
    },
    {
      "id": "sc_3127",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: When using `'junction'`, the `target` argument wil...] Junction points on NTFS volumes can only point to directories.",
      "position": 11
    },
    {
      "id": "sc_3128",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: Junction points on NTFS volumes can only point to ...] Relative targets are relative to the link's parent directory.",
      "position": 12
    },
    {
      "id": "sc_3129",
      "type": "sentence_context",
      "content": "[`fs.symlink(target, path[, type], callback)`] [Previous: Relative targets are relative to the link's parent...] The above example creates a symbolic link `mewtwo` which points to `mew` in the same directory:",
      "position": 13
    },
    {
      "id": "s_3130",
      "type": "sentence",
      "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_3131",
      "type": "sentence",
      "content": "Creates the link called `path` pointing to `target`.",
      "position": 1
    },
    {
      "id": "s_3132",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_3133",
      "type": "sentence",
      "content": "See the POSIX symlink(2) documentation for more details.",
      "position": 3
    },
    {
      "id": "s_3134",
      "type": "sentence",
      "content": "The `type` argument is only available on Windows and ignored on other platforms.",
      "position": 4
    },
    {
      "id": "s_3135",
      "type": "sentence",
      "content": "It can be set to `'dir'`, `'file'`, or `'junction'`.",
      "position": 5
    },
    {
      "id": "s_3136",
      "type": "sentence",
      "content": "If the `type` argument is `null`, Node.",
      "position": 6
    },
    {
      "id": "s_3137",
      "type": "sentence",
      "content": "js will autodetect `target` type and use `'file'` or `'dir'`.",
      "position": 7
    },
    {
      "id": "s_3138",
      "type": "sentence",
      "content": "If the `target` does not exist, `'file'` will be used.",
      "position": 8
    },
    {
      "id": "s_3139",
      "type": "sentence",
      "content": "Windows junction points require the destination path to be absolute.",
      "position": 9
    },
    {
      "id": "s_3140",
      "type": "sentence",
      "content": "When using `'junction'`, the `target` argument will automatically be normalized to absolute path.",
      "position": 10
    },
    {
      "id": "s_3141",
      "type": "sentence",
      "content": "Junction points on NTFS volumes can only point to directories.",
      "position": 11
    },
    {
      "id": "s_3142",
      "type": "sentence",
      "content": "Relative targets are relative to the link's parent directory.",
      "position": 12
    },
    {
      "id": "s_3143",
      "type": "sentence",
      "content": "The above example creates a symbolic link `mewtwo` which points to `mew` in the same directory:",
      "position": 13
    },
    {
      "id": "w_3144",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` `callback` {Function}\n* `err` {Error|AggregateError} Truncates the file. No arguments other than a possible exception are\ngiven to the completion callback. A file descriptor can also be passed as the\nfirst argument. In this case, `fs.ftruncate()` is called. Passing a file descriptor is deprecated and may result in an error being thrown\nin the future. See the POSIX truncate(2) documentation for more details.",
      "position": 0,
      "windowSize": 65
    },
    {
      "id": "sw_3145",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error|AggregateError} Truncates the file. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3146",
      "type": "sentence_window",
      "content": "Truncates the file. No arguments other than a possible exception are given to the completion callback. A file descriptor can also be passed as the first argument.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3147",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. A file descriptor can also be passed as the first argument. In this case, `fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3148",
      "type": "sentence_window",
      "content": "A file descriptor can also be passed as the first argument. In this case, `fs. ftruncate()` is called.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3149",
      "type": "sentence_window",
      "content": "In this case, `fs. ftruncate()` is called. Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3150",
      "type": "sentence_window",
      "content": "ftruncate()` is called. Passing a file descriptor is deprecated and may result in an error being thrown in the future. See the POSIX truncate(2) documentation for more details.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3151",
      "type": "sentence_window",
      "content": "Passing a file descriptor is deprecated and may result in an error being thrown in the future. See the POSIX truncate(2) documentation for more details.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_3152",
      "type": "sentence_context",
      "content": "[`fs.truncate(path[, len], callback)`] `path` {string|Buffer|URL} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error|AggregateError}",
      "position": 0
    },
    {
      "id": "sc_3153",
      "type": "sentence_context",
      "content": "[`fs.truncate(path[, len], callback)`] [Previous: `path` {string|Buffer|URL} `len` {integer} **Defau...] Truncates the file.",
      "position": 1
    },
    {
      "id": "sc_3154",
      "type": "sentence_context",
      "content": "[`fs.truncate(path[, len], callback)`] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_3155",
      "type": "sentence_context",
      "content": "[`fs.truncate(path[, len], callback)`] [Previous: No arguments other than a possible exception are g...] A file descriptor can also be passed as the first argument.",
      "position": 3
    },
    {
      "id": "sc_3156",
      "type": "sentence_context",
      "content": "[`fs.truncate(path[, len], callback)`] [Previous: A file descriptor can also be passed as the first ...] In this case, `fs.",
      "position": 4
    },
    {
      "id": "sc_3157",
      "type": "sentence_context",
      "content": "[`fs.truncate(path[, len], callback)`] ftruncate()` is called.",
      "position": 5
    },
    {
      "id": "sc_3158",
      "type": "sentence_context",
      "content": "[`fs.truncate(path[, len], callback)`] [Previous: ftruncate()` is called....] Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
      "position": 6
    },
    {
      "id": "sc_3159",
      "type": "sentence_context",
      "content": "[`fs.truncate(path[, len], callback)`] [Previous: Passing a file descriptor is deprecated and may re...] See the POSIX truncate(2) documentation for more details.",
      "position": 7
    },
    {
      "id": "s_3160",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` `callback` {Function} * `err` {Error|AggregateError}",
      "position": 0
    },
    {
      "id": "s_3161",
      "type": "sentence",
      "content": "Truncates the file.",
      "position": 1
    },
    {
      "id": "s_3162",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_3163",
      "type": "sentence",
      "content": "A file descriptor can also be passed as the first argument.",
      "position": 3
    },
    {
      "id": "s_3164",
      "type": "sentence",
      "content": "In this case, `fs.",
      "position": 4
    },
    {
      "id": "s_3165",
      "type": "sentence",
      "content": "ftruncate()` is called.",
      "position": 5
    },
    {
      "id": "s_3166",
      "type": "sentence",
      "content": "Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
      "position": 6
    },
    {
      "id": "s_3167",
      "type": "sentence",
      "content": "See the POSIX truncate(2) documentation for more details.",
      "position": 7
    },
    {
      "id": "w_3168",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `callback` {Function}\n* `err` {Error} Asynchronously removes a file or symbolic link. No arguments other than a\npossible exception are given to the completion callback. `fs.unlink()` will not work on a directory, empty or otherwise. To remove a\ndirectory, use [`fs.rmdir()`][]. See the POSIX unlink(2) documentation for more details.",
      "position": 0,
      "windowSize": 48
    },
    {
      "id": "sw_3169",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `callback` {Function} * `err` {Error} Asynchronously removes a file or symbolic link. No arguments other than a possible exception are given to the completion callback.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3170",
      "type": "sentence_window",
      "content": "Asynchronously removes a file or symbolic link. No arguments other than a possible exception are given to the completion callback. unlink()` will not work on a directory, empty or otherwise.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3171",
      "type": "sentence_window",
      "content": "No arguments other than a possible exception are given to the completion callback. unlink()` will not work on a directory, empty or otherwise. To remove a directory, use [`fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3172",
      "type": "sentence_window",
      "content": "unlink()` will not work on a directory, empty or otherwise. To remove a directory, use [`fs. rmdir()`][].",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3173",
      "type": "sentence_window",
      "content": "To remove a directory, use [`fs. rmdir()`][]. See the POSIX unlink(2) documentation for more details.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3174",
      "type": "sentence_window",
      "content": "rmdir()`][]. See the POSIX unlink(2) documentation for more details.",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_3175",
      "type": "sentence_context",
      "content": "[`fs.unlink(path, callback)`] `path` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_3176",
      "type": "sentence_context",
      "content": "[`fs.unlink(path, callback)`] [Previous: `path` {string|Buffer|URL} `callback` {Function} *...] Asynchronously removes a file or symbolic link.",
      "position": 1
    },
    {
      "id": "sc_3177",
      "type": "sentence_context",
      "content": "[`fs.unlink(path, callback)`] [Previous: Asynchronously removes a file or symbolic link....] No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "sc_3178",
      "type": "sentence_context",
      "content": "[`fs.unlink(path, callback)`] [Previous: No arguments other than a possible exception are g...] unlink()` will not work on a directory, empty or otherwise.",
      "position": 3
    },
    {
      "id": "sc_3179",
      "type": "sentence_context",
      "content": "[`fs.unlink(path, callback)`] [Previous: unlink()` will not work on a directory, empty or o...] To remove a directory, use [`fs.",
      "position": 4
    },
    {
      "id": "sc_3180",
      "type": "sentence_context",
      "content": "[`fs.unlink(path, callback)`] [Previous: To remove a directory, use [`fs....] rmdir()`][].",
      "position": 5
    },
    {
      "id": "sc_3181",
      "type": "sentence_context",
      "content": "[`fs.unlink(path, callback)`] See the POSIX unlink(2) documentation for more details.",
      "position": 6
    },
    {
      "id": "s_3182",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_3183",
      "type": "sentence",
      "content": "Asynchronously removes a file or symbolic link.",
      "position": 1
    },
    {
      "id": "s_3184",
      "type": "sentence",
      "content": "No arguments other than a possible exception are given to the completion callback.",
      "position": 2
    },
    {
      "id": "s_3185",
      "type": "sentence",
      "content": "unlink()` will not work on a directory, empty or otherwise.",
      "position": 3
    },
    {
      "id": "s_3186",
      "type": "sentence",
      "content": "To remove a directory, use [`fs.",
      "position": 4
    },
    {
      "id": "s_3187",
      "type": "sentence",
      "content": "rmdir()`][].",
      "position": 5
    },
    {
      "id": "s_3188",
      "type": "sentence",
      "content": "See the POSIX unlink(2) documentation for more details.",
      "position": 6
    },
    {
      "id": "w_3189",
      "type": "window",
      "content": "`filename` {string|Buffer|URL} `listener` {Function} Optional, a listener previously attached using\n`fs.watchFile()` Stop watching for changes on `filename`. If `listener` is specified, only that\nparticular listener is removed. Otherwise, _all_ listeners are removed,\neffectively stopping watching of `filename`. Calling `fs.unwatchFile()` with a filename that is not being watched is a\nno-op, not an error. Using [`fs.watch()`][] is more efficient than `fs.watchFile()` and\n`fs.unwatchFile()`. `fs.watch()` should be used instead of `fs.watchFile()`\nand `fs.unwatchFile()` when possible.",
      "position": 0,
      "windowSize": 67
    },
    {
      "id": "sw_3190",
      "type": "sentence_window",
      "content": "`filename` {string|Buffer|URL} `listener` {Function} Optional, a listener previously attached using `fs. watchFile()` Stop watching for changes on `filename`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3191",
      "type": "sentence_window",
      "content": "watchFile()` Stop watching for changes on `filename`. If `listener` is specified, only that particular listener is removed.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3192",
      "type": "sentence_window",
      "content": "Stop watching for changes on `filename`. If `listener` is specified, only that particular listener is removed. Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3193",
      "type": "sentence_window",
      "content": "If `listener` is specified, only that particular listener is removed. Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`. Calling `fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3194",
      "type": "sentence_window",
      "content": "Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`. Calling `fs. unwatchFile()` with a filename that is not being watched is a no-op, not an error.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3195",
      "type": "sentence_window",
      "content": "Calling `fs. unwatchFile()` with a filename that is not being watched is a no-op, not an error. Using [`fs.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3196",
      "type": "sentence_window",
      "content": "unwatchFile()` with a filename that is not being watched is a no-op, not an error. Using [`fs. watch()`][] is more efficient than `fs.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3197",
      "type": "sentence_window",
      "content": "Using [`fs. watch()`][] is more efficient than `fs. watchFile()` and `fs.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3198",
      "type": "sentence_window",
      "content": "watch()`][] is more efficient than `fs. watchFile()` and `fs. unwatchFile()`.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3199",
      "type": "sentence_window",
      "content": "watchFile()` and `fs. unwatchFile()`. watch()` should be used instead of `fs.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3200",
      "type": "sentence_window",
      "content": "unwatchFile()`. watch()` should be used instead of `fs. watchFile()` and `fs.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3201",
      "type": "sentence_window",
      "content": "watch()` should be used instead of `fs. watchFile()` and `fs. unwatchFile()` when possible.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3202",
      "type": "sentence_window",
      "content": "watchFile()` and `fs. unwatchFile()` when possible.",
      "position": 12,
      "sentenceCount": 2
    },
    {
      "id": "sc_3203",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] `filename` {string|Buffer|URL} `listener` {Function} Optional, a listener previously attached using `fs.",
      "position": 0
    },
    {
      "id": "sc_3204",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: `filename` {string|Buffer|URL} `listener` {Functio...] watchFile()`",
      "position": 1
    },
    {
      "id": "sc_3205",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] Stop watching for changes on `filename`.",
      "position": 2
    },
    {
      "id": "sc_3206",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: Stop watching for changes on `filename`....] If `listener` is specified, only that particular listener is removed.",
      "position": 3
    },
    {
      "id": "sc_3207",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: If `listener` is specified, only that particular l...] Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`.",
      "position": 4
    },
    {
      "id": "sc_3208",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: Otherwise, _all_ listeners are removed, effectivel...] Calling `fs.",
      "position": 5
    },
    {
      "id": "sc_3209",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] unwatchFile()` with a filename that is not being watched is a no-op, not an error.",
      "position": 6
    },
    {
      "id": "sc_3210",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: unwatchFile()` with a filename that is not being w...] Using [`fs.",
      "position": 7
    },
    {
      "id": "sc_3211",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] watch()`][] is more efficient than `fs.",
      "position": 8
    },
    {
      "id": "sc_3212",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: watch()`][] is more efficient than `fs....] watchFile()` and `fs.",
      "position": 9
    },
    {
      "id": "sc_3213",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: watchFile()` and `fs....] unwatchFile()`.",
      "position": 10
    },
    {
      "id": "sc_3214",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] watch()` should be used instead of `fs.",
      "position": 11
    },
    {
      "id": "sc_3215",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: watch()` should be used instead of `fs....] watchFile()` and `fs.",
      "position": 12
    },
    {
      "id": "sc_3216",
      "type": "sentence_context",
      "content": "[`fs.unwatchFile(filename[, listener])`] [Previous: watchFile()` and `fs....] unwatchFile()` when possible.",
      "position": 13
    },
    {
      "id": "s_3217",
      "type": "sentence",
      "content": "`filename` {string|Buffer|URL} `listener` {Function} Optional, a listener previously attached using `fs.",
      "position": 0
    },
    {
      "id": "s_3218",
      "type": "sentence",
      "content": "watchFile()`",
      "position": 1
    },
    {
      "id": "s_3219",
      "type": "sentence",
      "content": "Stop watching for changes on `filename`.",
      "position": 2
    },
    {
      "id": "s_3220",
      "type": "sentence",
      "content": "If `listener` is specified, only that particular listener is removed.",
      "position": 3
    },
    {
      "id": "s_3221",
      "type": "sentence",
      "content": "Otherwise, _all_ listeners are removed, effectively stopping watching of `filename`.",
      "position": 4
    },
    {
      "id": "s_3222",
      "type": "sentence",
      "content": "Calling `fs.",
      "position": 5
    },
    {
      "id": "s_3223",
      "type": "sentence",
      "content": "unwatchFile()` with a filename that is not being watched is a no-op, not an error.",
      "position": 6
    },
    {
      "id": "s_3224",
      "type": "sentence",
      "content": "Using [`fs.",
      "position": 7
    },
    {
      "id": "s_3225",
      "type": "sentence",
      "content": "watch()`][] is more efficient than `fs.",
      "position": 8
    },
    {
      "id": "s_3226",
      "type": "sentence",
      "content": "watchFile()` and `fs.",
      "position": 9
    },
    {
      "id": "s_3227",
      "type": "sentence",
      "content": "unwatchFile()`.",
      "position": 10
    },
    {
      "id": "s_3228",
      "type": "sentence",
      "content": "watch()` should be used instead of `fs.",
      "position": 11
    },
    {
      "id": "s_3229",
      "type": "sentence",
      "content": "watchFile()` and `fs.",
      "position": 12
    },
    {
      "id": "s_3230",
      "type": "sentence",
      "content": "unwatchFile()` when possible.",
      "position": 13
    },
    {
      "id": "w_3231",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function}\n* `err` {Error} Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time in seconds,\n`Date`s, or a numeric string like `'123456789.0'`. If the value can not be converted to a number, or is `NaN`, `Infinity`, or\n`-Infinity`, an `Error` will be thrown.",
      "position": 0,
      "windowSize": 66
    },
    {
      "id": "sw_3232",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error} Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules:",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3233",
      "type": "sentence_window",
      "content": "Change the file system timestamps of the object referenced by `path`. The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3234",
      "type": "sentence_window",
      "content": "The `atime` and `mtime` arguments follow these rules: Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789. If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3235",
      "type": "sentence_window",
      "content": "Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789. If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_3236",
      "type": "sentence_context",
      "content": "[`fs.utimes(path, atime, mtime, callback)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_3237",
      "type": "sentence_context",
      "content": "[`fs.utimes(path, atime, mtime, callback)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] Change the file system timestamps of the object referenced by `path`.",
      "position": 1
    },
    {
      "id": "sc_3238",
      "type": "sentence_context",
      "content": "[`fs.utimes(path, atime, mtime, callback)`] [Previous: Change the file system timestamps of the object re...] The `atime` and `mtime` arguments follow these rules:",
      "position": 2
    },
    {
      "id": "sc_3239",
      "type": "sentence_context",
      "content": "[`fs.utimes(path, atime, mtime, callback)`] [Previous: The `atime` and `mtime` arguments follow these rul...] Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789.",
      "position": 3
    },
    {
      "id": "sc_3240",
      "type": "sentence_context",
      "content": "[`fs.utimes(path, atime, mtime, callback)`] [Previous: Values can be either numbers representing Unix epo...] If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
      "position": 4
    },
    {
      "id": "s_3241",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_3242",
      "type": "sentence",
      "content": "Change the file system timestamps of the object referenced by `path`.",
      "position": 1
    },
    {
      "id": "s_3243",
      "type": "sentence",
      "content": "The `atime` and `mtime` arguments follow these rules:",
      "position": 2
    },
    {
      "id": "s_3244",
      "type": "sentence",
      "content": "Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789.",
      "position": 3
    },
    {
      "id": "s_3245",
      "type": "sentence",
      "content": "If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.",
      "position": 4
    },
    {
      "id": "w_3246",
      "type": "window",
      "content": "`filename` {string|Buffer|URL} `options` {string|Object}\n* `persistent` {boolean} Indicates whether the process should continue to run\n  as long as files are being watched. **Default:** `true`.\n* `recursive` {boolean} Indicates whether all subdirectories should be\n  watched, or only the current directory. This applies when a directory is\n  specified, and only on supported platforms (See [caveats][]). **Default:**\n  `false`.\n* `encoding` {string} Specifies the character encoding to be used for the\n  filename passed to the listener. **Default:** `'utf8'`.\n* `signal` {AbortSignal} allows closing the watcher with an AbortSignal. `listener` {Function|undefined} **Default:** `undefined`\n* `eventType` {string}\n* `filename` {string|Buffer|null} Returns: {fs.FSWatcher} Watch for changes on `filename`, where `filename` is either a file or a\ndirectory. The second argument is optional. If `options` is provided as a string, it\nspecifies the `encoding`. Otherwise `options` should be passed as an object. The listener callback gets two arguments `(eventType, filename)`. `eventType`\nis either `'rename'` or `'change'`, and `filename` is the name of the file\nwhich triggered the event. On most platforms, `'rename'` is emitted whenever a filename appears or\ndisappears in the directory. The listener callback is attached to the `'change'` event fired by\n{fs.FSWatcher}, but it is not the same thing as the `'change'` value of\n`eventType`. If a `signal` is passed, aborting the corresponding AbortController will close\nthe returned {fs.FSWatcher}.",
      "position": 0,
      "windowSize": 205
    },
    {
      "id": "w_3247",
      "type": "window",
      "content": "but it is not the same thing as the `'change'` value of\n`eventType`. If a `signal` is passed, aborting the corresponding AbortController will close\nthe returned {fs.FSWatcher}.",
      "position": 180,
      "windowSize": 25
    },
    {
      "id": "sw_3248",
      "type": "sentence_window",
      "content": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched. **Default:** `true`. * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3249",
      "type": "sentence_window",
      "content": "**Default:** `true`. * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3250",
      "type": "sentence_window",
      "content": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory. This applies when a directory is specified, and only on supported platforms (See [caveats][]). **Default:** `false`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3251",
      "type": "sentence_window",
      "content": "This applies when a directory is specified, and only on supported platforms (See [caveats][]). **Default:** `false`. * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3252",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener. **Default:** `'utf8'`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3253",
      "type": "sentence_window",
      "content": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener. **Default:** `'utf8'`. * `signal` {AbortSignal} allows closing the watcher with an AbortSignal.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3254",
      "type": "sentence_window",
      "content": "**Default:** `'utf8'`. * `signal` {AbortSignal} allows closing the watcher with an AbortSignal. `listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3255",
      "type": "sentence_window",
      "content": "* `signal` {AbortSignal} allows closing the watcher with an AbortSignal. `listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs. Watch for changes on `filename`, where `filename` is either a file or a directory.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3256",
      "type": "sentence_window",
      "content": "`listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs. Watch for changes on `filename`, where `filename` is either a file or a directory. The second argument is optional.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3257",
      "type": "sentence_window",
      "content": "Watch for changes on `filename`, where `filename` is either a file or a directory. The second argument is optional. If `options` is provided as a string, it specifies the `encoding`.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3258",
      "type": "sentence_window",
      "content": "The second argument is optional. If `options` is provided as a string, it specifies the `encoding`. Otherwise `options` should be passed as an object.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3259",
      "type": "sentence_window",
      "content": "If `options` is provided as a string, it specifies the `encoding`. Otherwise `options` should be passed as an object. The listener callback gets two arguments `(eventType, filename)`.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3260",
      "type": "sentence_window",
      "content": "Otherwise `options` should be passed as an object. The listener callback gets two arguments `(eventType, filename)`. `eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_3261",
      "type": "sentence_window",
      "content": "The listener callback gets two arguments `(eventType, filename)`. `eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event. On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_3262",
      "type": "sentence_window",
      "content": "`eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event. On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory. The listener callback is attached to the `'change'` event fired by {fs.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_3263",
      "type": "sentence_window",
      "content": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory. The listener callback is attached to the `'change'` event fired by {fs. FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_3264",
      "type": "sentence_window",
      "content": "The listener callback is attached to the `'change'` event fired by {fs. FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`. If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_3265",
      "type": "sentence_window",
      "content": "FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`. If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs. FSWatcher}.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_3266",
      "type": "sentence_window",
      "content": "If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs. FSWatcher}.",
      "position": 18,
      "sentenceCount": 2
    },
    {
      "id": "sc_3267",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] `filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched.",
      "position": 0
    },
    {
      "id": "sc_3268",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: `filename` {string|Buffer|URL} `options` {string|O...] **Default:** `true`.",
      "position": 1
    },
    {
      "id": "sc_3269",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] * `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
      "position": 2
    },
    {
      "id": "sc_3270",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: * `recursive` {boolean} Indicates whether all subd...] This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
      "position": 3
    },
    {
      "id": "sc_3271",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: This applies when a directory is specified, and on...] **Default:** `false`.",
      "position": 4
    },
    {
      "id": "sc_3272",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: **Default:** `false`....] * `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
      "position": 5
    },
    {
      "id": "sc_3273",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: * `encoding` {string} Specifies the character enco...] **Default:** `'utf8'`.",
      "position": 6
    },
    {
      "id": "sc_3274",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: **Default:** `'utf8'`....] * `signal` {AbortSignal} allows closing the watcher with an AbortSignal.",
      "position": 7
    },
    {
      "id": "sc_3275",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: * `signal` {AbortSignal} allows closing the watche...] `listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs.",
      "position": 8
    },
    {
      "id": "sc_3276",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: `listener` {Function|undefined} **Default:** `unde...] Watch for changes on `filename`, where `filename` is either a file or a directory.",
      "position": 9
    },
    {
      "id": "sc_3277",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: Watch for changes on `filename`, where `filename` ...] The second argument is optional.",
      "position": 10
    },
    {
      "id": "sc_3278",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: The second argument is optional....] If `options` is provided as a string, it specifies the `encoding`.",
      "position": 11
    },
    {
      "id": "sc_3279",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: If `options` is provided as a string, it specifies...] Otherwise `options` should be passed as an object.",
      "position": 12
    },
    {
      "id": "sc_3280",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: Otherwise `options` should be passed as an object....] The listener callback gets two arguments `(eventType, filename)`.",
      "position": 13
    },
    {
      "id": "sc_3281",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: The listener callback gets two arguments `(eventTy...] `eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event.",
      "position": 14
    },
    {
      "id": "sc_3282",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: `eventType` is either `'rename'` or `'change'`, an...] On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory.",
      "position": 15
    },
    {
      "id": "sc_3283",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: On most platforms, `'rename'` is emitted whenever ...] The listener callback is attached to the `'change'` event fired by {fs.",
      "position": 16
    },
    {
      "id": "sc_3284",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: The listener callback is attached to the `'change'...] FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`.",
      "position": 17
    },
    {
      "id": "sc_3285",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: FSWatcher}, but it is not the same thing as the `'...] If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs.",
      "position": 18
    },
    {
      "id": "sc_3286",
      "type": "sentence_context",
      "content": "[`fs.watch(filename[, options][, listener])`] [Previous: If a `signal` is passed, aborting the correspondin...] FSWatcher}.",
      "position": 19
    },
    {
      "id": "s_3287",
      "type": "sentence",
      "content": "`filename` {string|Buffer|URL} `options` {string|Object} * `persistent` {boolean} Indicates whether the process should continue to run as long as files are being watched.",
      "position": 0
    },
    {
      "id": "s_3288",
      "type": "sentence",
      "content": "**Default:** `true`.",
      "position": 1
    },
    {
      "id": "s_3289",
      "type": "sentence",
      "content": "* `recursive` {boolean} Indicates whether all subdirectories should be watched, or only the current directory.",
      "position": 2
    },
    {
      "id": "s_3290",
      "type": "sentence",
      "content": "This applies when a directory is specified, and only on supported platforms (See [caveats][]).",
      "position": 3
    },
    {
      "id": "s_3291",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 4
    },
    {
      "id": "s_3292",
      "type": "sentence",
      "content": "* `encoding` {string} Specifies the character encoding to be used for the filename passed to the listener.",
      "position": 5
    },
    {
      "id": "s_3293",
      "type": "sentence",
      "content": "**Default:** `'utf8'`.",
      "position": 6
    },
    {
      "id": "s_3294",
      "type": "sentence",
      "content": "* `signal` {AbortSignal} allows closing the watcher with an AbortSignal.",
      "position": 7
    },
    {
      "id": "s_3295",
      "type": "sentence",
      "content": "`listener` {Function|undefined} **Default:** `undefined` * `eventType` {string} * `filename` {string|Buffer|null} Returns: {fs.",
      "position": 8
    },
    {
      "id": "s_3296",
      "type": "sentence",
      "content": "Watch for changes on `filename`, where `filename` is either a file or a directory.",
      "position": 9
    },
    {
      "id": "s_3297",
      "type": "sentence",
      "content": "The second argument is optional.",
      "position": 10
    },
    {
      "id": "s_3298",
      "type": "sentence",
      "content": "If `options` is provided as a string, it specifies the `encoding`.",
      "position": 11
    },
    {
      "id": "s_3299",
      "type": "sentence",
      "content": "Otherwise `options` should be passed as an object.",
      "position": 12
    },
    {
      "id": "s_3300",
      "type": "sentence",
      "content": "The listener callback gets two arguments `(eventType, filename)`.",
      "position": 13
    },
    {
      "id": "s_3301",
      "type": "sentence",
      "content": "`eventType` is either `'rename'` or `'change'`, and `filename` is the name of the file which triggered the event.",
      "position": 14
    },
    {
      "id": "s_3302",
      "type": "sentence",
      "content": "On most platforms, `'rename'` is emitted whenever a filename appears or disappears in the directory.",
      "position": 15
    },
    {
      "id": "s_3303",
      "type": "sentence",
      "content": "The listener callback is attached to the `'change'` event fired by {fs.",
      "position": 16
    },
    {
      "id": "s_3304",
      "type": "sentence",
      "content": "FSWatcher}, but it is not the same thing as the `'change'` value of `eventType`.",
      "position": 17
    },
    {
      "id": "s_3305",
      "type": "sentence",
      "content": "If a `signal` is passed, aborting the corresponding AbortController will close the returned {fs.",
      "position": 18
    },
    {
      "id": "s_3306",
      "type": "sentence",
      "content": "FSWatcher}.",
      "position": 19
    },
    {
      "id": "w_3307",
      "type": "window",
      "content": "The `fs.watch` API is not 100% consistent across platforms, and is\nunavailable in some situations. On Windows, no events will be emitted if the watched directory is moved or\nrenamed. An `EPERM` error is reported when the watched directory is deleted. The `fs.watch` API does not provide any protection with respect\nto malicious actions on the file system. For example, on Windows it is\nimplemented by monitoring changes in a directory versus specific files. This\nallows substitution of a file and fs reporting changes on the new file\nwith the same filename.",
      "position": 0,
      "windowSize": 86
    },
    {
      "id": "sw_3308",
      "type": "sentence_window",
      "content": "watch` API is not 100% consistent across platforms, and is unavailable in some situations. On Windows, no events will be emitted if the watched directory is moved or renamed. An `EPERM` error is reported when the watched directory is deleted.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3309",
      "type": "sentence_window",
      "content": "On Windows, no events will be emitted if the watched directory is moved or renamed. An `EPERM` error is reported when the watched directory is deleted. watch` API does not provide any protection with respect to malicious actions on the file system.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3310",
      "type": "sentence_window",
      "content": "An `EPERM` error is reported when the watched directory is deleted. watch` API does not provide any protection with respect to malicious actions on the file system. For example, on Windows it is implemented by monitoring changes in a directory versus specific files.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3311",
      "type": "sentence_window",
      "content": "watch` API does not provide any protection with respect to malicious actions on the file system. For example, on Windows it is implemented by monitoring changes in a directory versus specific files. This allows substitution of a file and fs reporting changes on the new file with the same filename.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3312",
      "type": "sentence_window",
      "content": "For example, on Windows it is implemented by monitoring changes in a directory versus specific files. This allows substitution of a file and fs reporting changes on the new file with the same filename.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_3313",
      "type": "sentence_context",
      "content": "[Caveats] watch` API is not 100% consistent across platforms, and is unavailable in some situations.",
      "position": 0
    },
    {
      "id": "sc_3314",
      "type": "sentence_context",
      "content": "[Caveats] [Previous: watch` API is not 100% consistent across platforms...] On Windows, no events will be emitted if the watched directory is moved or renamed.",
      "position": 1
    },
    {
      "id": "sc_3315",
      "type": "sentence_context",
      "content": "[Caveats] [Previous: On Windows, no events will be emitted if the watch...] An `EPERM` error is reported when the watched directory is deleted.",
      "position": 2
    },
    {
      "id": "sc_3316",
      "type": "sentence_context",
      "content": "[Caveats] [Previous: An `EPERM` error is reported when the watched dire...] watch` API does not provide any protection with respect to malicious actions on the file system.",
      "position": 3
    },
    {
      "id": "sc_3317",
      "type": "sentence_context",
      "content": "[Caveats] [Previous: watch` API does not provide any protection with re...] For example, on Windows it is implemented by monitoring changes in a directory versus specific files.",
      "position": 4
    },
    {
      "id": "sc_3318",
      "type": "sentence_context",
      "content": "[Caveats] [Previous: For example, on Windows it is implemented by monit...] This allows substitution of a file and fs reporting changes on the new file with the same filename.",
      "position": 5
    },
    {
      "id": "s_3319",
      "type": "sentence",
      "content": "watch` API is not 100% consistent across platforms, and is unavailable in some situations.",
      "position": 0
    },
    {
      "id": "s_3320",
      "type": "sentence",
      "content": "On Windows, no events will be emitted if the watched directory is moved or renamed.",
      "position": 1
    },
    {
      "id": "s_3321",
      "type": "sentence",
      "content": "An `EPERM` error is reported when the watched directory is deleted.",
      "position": 2
    },
    {
      "id": "s_3322",
      "type": "sentence",
      "content": "watch` API does not provide any protection with respect to malicious actions on the file system.",
      "position": 3
    },
    {
      "id": "s_3323",
      "type": "sentence",
      "content": "For example, on Windows it is implemented by monitoring changes in a directory versus specific files.",
      "position": 4
    },
    {
      "id": "s_3324",
      "type": "sentence",
      "content": "This allows substitution of a file and fs reporting changes on the new file with the same filename.",
      "position": 5
    },
    {
      "id": "w_3325",
      "type": "window",
      "content": "This feature depends on the underlying operating system providing a way\nto be notified of file system changes. On Linux systems, this uses [`inotify(7)`][]. On BSD systems, this uses [`kqueue(2)`][]. On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for\ndirectories. On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][]. On Windows systems, this feature depends on [`ReadDirectoryChangesW`][]. On AIX systems, this feature depends on [`AHAFS`][], which must be enabled. On IBM i systems, this feature is not supported. If the underlying functionality is not available for some reason, then\n`fs.watch()` will not be able to function and may throw an exception.\nFor example, watching files or directories can be unreliable, and in some\ncases impossible, on network file systems (NFS, SMB, etc) or host file systems\nwhen using virtualization software such as Vagrant or Docker. It is still possible to use `fs.watchFile()`, which uses stat polling, but\nthis method is slower and less reliable.",
      "position": 0,
      "windowSize": 150
    },
    {
      "id": "sw_3326",
      "type": "sentence_window",
      "content": "This feature depends on the underlying operating system providing a way to be notified of file system changes. On Linux systems, this uses [`inotify(7)`][]. On BSD systems, this uses [`kqueue(2)`][].",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3327",
      "type": "sentence_window",
      "content": "On Linux systems, this uses [`inotify(7)`][]. On BSD systems, this uses [`kqueue(2)`][]. On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3328",
      "type": "sentence_window",
      "content": "On BSD systems, this uses [`kqueue(2)`][]. On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories. On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][].",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3329",
      "type": "sentence_window",
      "content": "On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories. On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][]. On Windows systems, this feature depends on [`ReadDirectoryChangesW`][].",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3330",
      "type": "sentence_window",
      "content": "On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][]. On Windows systems, this feature depends on [`ReadDirectoryChangesW`][]. On AIX systems, this feature depends on [`AHAFS`][], which must be enabled.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3331",
      "type": "sentence_window",
      "content": "On Windows systems, this feature depends on [`ReadDirectoryChangesW`][]. On AIX systems, this feature depends on [`AHAFS`][], which must be enabled. On IBM i systems, this feature is not supported.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3332",
      "type": "sentence_window",
      "content": "On AIX systems, this feature depends on [`AHAFS`][], which must be enabled. On IBM i systems, this feature is not supported. If the underlying functionality is not available for some reason, then `fs.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3333",
      "type": "sentence_window",
      "content": "On IBM i systems, this feature is not supported. If the underlying functionality is not available for some reason, then `fs. watch()` will not be able to function and may throw an exception.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3334",
      "type": "sentence_window",
      "content": "If the underlying functionality is not available for some reason, then `fs. watch()` will not be able to function and may throw an exception. For example, watching files or directories can be unreliable",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3335",
      "type": "sentence_window",
      "content": "watch()` will not be able to function and may throw an exception. For example, watching files or directories can be unreliable and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3336",
      "type": "sentence_window",
      "content": "For example, watching files or directories can be unreliable and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker. It is still possible to use `fs.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3337",
      "type": "sentence_window",
      "content": "and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker. It is still possible to use `fs. watchFile()`, which uses stat polling, but this method is slower and less reliable.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3338",
      "type": "sentence_window",
      "content": "It is still possible to use `fs. watchFile()`, which uses stat polling, but this method is slower and less reliable.",
      "position": 12,
      "sentenceCount": 2
    },
    {
      "id": "sc_3339",
      "type": "sentence_context",
      "content": "[Availability] This feature depends on the underlying operating system providing a way to be notified of file system changes.",
      "position": 0
    },
    {
      "id": "sc_3340",
      "type": "sentence_context",
      "content": "[Availability] [Previous: This feature depends on the underlying operating s...] On Linux systems, this uses [`inotify(7)`][].",
      "position": 1
    },
    {
      "id": "sc_3341",
      "type": "sentence_context",
      "content": "[Availability] [Previous: On Linux systems, this uses [`inotify(7)`][]....] On BSD systems, this uses [`kqueue(2)`][].",
      "position": 2
    },
    {
      "id": "sc_3342",
      "type": "sentence_context",
      "content": "[Availability] [Previous: On BSD systems, this uses [`kqueue(2)`][]....] On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories.",
      "position": 3
    },
    {
      "id": "sc_3343",
      "type": "sentence_context",
      "content": "[Availability] [Previous: On macOS, this uses [`kqueue(2)`][] for files and ...] On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][].",
      "position": 4
    },
    {
      "id": "sc_3344",
      "type": "sentence_context",
      "content": "[Availability] [Previous: On SunOS systems (including Solaris and SmartOS), ...] On Windows systems, this feature depends on [`ReadDirectoryChangesW`][].",
      "position": 5
    },
    {
      "id": "sc_3345",
      "type": "sentence_context",
      "content": "[Availability] [Previous: On Windows systems, this feature depends on [`Read...] On AIX systems, this feature depends on [`AHAFS`][], which must be enabled.",
      "position": 6
    },
    {
      "id": "sc_3346",
      "type": "sentence_context",
      "content": "[Availability] [Previous: On AIX systems, this feature depends on [`AHAFS`][...] On IBM i systems, this feature is not supported.",
      "position": 7
    },
    {
      "id": "sc_3347",
      "type": "sentence_context",
      "content": "[Availability] [Previous: On IBM i systems, this feature is not supported....] If the underlying functionality is not available for some reason, then `fs.",
      "position": 8
    },
    {
      "id": "sc_3348",
      "type": "sentence_context",
      "content": "[Availability] [Previous: If the underlying functionality is not available f...] watch()` will not be able to function and may throw an exception.",
      "position": 9
    },
    {
      "id": "sc_3349",
      "type": "sentence_context",
      "content": "[Availability] [Previous: watch()` will not be able to function and may thro...] For example, watching files or directories can be unreliable",
      "position": 10
    },
    {
      "id": "sc_3350",
      "type": "sentence_context",
      "content": "[Availability] [Previous: For example, watching files or directories can be ...] and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker.",
      "position": 11
    },
    {
      "id": "sc_3351",
      "type": "sentence_context",
      "content": "[Availability] [Previous: and in some cases impossible, on network file syst...] It is still possible to use `fs.",
      "position": 12
    },
    {
      "id": "sc_3352",
      "type": "sentence_context",
      "content": "[Availability] [Previous: It is still possible to use `fs....] watchFile()`, which uses stat polling, but this method is slower and less reliable.",
      "position": 13
    },
    {
      "id": "s_3353",
      "type": "sentence",
      "content": "This feature depends on the underlying operating system providing a way to be notified of file system changes.",
      "position": 0
    },
    {
      "id": "s_3354",
      "type": "sentence",
      "content": "On Linux systems, this uses [`inotify(7)`][].",
      "position": 1
    },
    {
      "id": "s_3355",
      "type": "sentence",
      "content": "On BSD systems, this uses [`kqueue(2)`][].",
      "position": 2
    },
    {
      "id": "s_3356",
      "type": "sentence",
      "content": "On macOS, this uses [`kqueue(2)`][] for files and [`FSEvents`][] for directories.",
      "position": 3
    },
    {
      "id": "s_3357",
      "type": "sentence",
      "content": "On SunOS systems (including Solaris and SmartOS), this uses [`event ports`][].",
      "position": 4
    },
    {
      "id": "s_3358",
      "type": "sentence",
      "content": "On Windows systems, this feature depends on [`ReadDirectoryChangesW`][].",
      "position": 5
    },
    {
      "id": "s_3359",
      "type": "sentence",
      "content": "On AIX systems, this feature depends on [`AHAFS`][], which must be enabled.",
      "position": 6
    },
    {
      "id": "s_3360",
      "type": "sentence",
      "content": "On IBM i systems, this feature is not supported.",
      "position": 7
    },
    {
      "id": "s_3361",
      "type": "sentence",
      "content": "If the underlying functionality is not available for some reason, then `fs.",
      "position": 8
    },
    {
      "id": "s_3362",
      "type": "sentence",
      "content": "watch()` will not be able to function and may throw an exception.",
      "position": 9
    },
    {
      "id": "s_3363",
      "type": "sentence",
      "content": "For example, watching files or directories can be unreliable",
      "position": 10
    },
    {
      "id": "s_3364",
      "type": "sentence",
      "content": "and in some cases impossible, on network file systems (NFS, SMB, etc) or host file systems when using virtualization software such as Vagrant or Docker.",
      "position": 11
    },
    {
      "id": "s_3365",
      "type": "sentence",
      "content": "It is still possible to use `fs.",
      "position": 12
    },
    {
      "id": "s_3366",
      "type": "sentence",
      "content": "watchFile()`, which uses stat polling, but this method is slower and less reliable.",
      "position": 13
    },
    {
      "id": "w_3367",
      "type": "window",
      "content": "On Linux and macOS systems, `fs.watch()` resolves the path to an [inode][] and\nwatches the inode. If the watched path is deleted and recreated, it is assigned\na new inode. The watch will emit an event for the delete but will continue\nwatching the _original_ inode. Events for the new inode will not be emitted.\nThis is expected behavior. AIX files retain the same inode for the lifetime of a file. Saving and closing a\nwatched file on AIX will result in two notifications (one for adding new\ncontent, and one for truncation).",
      "position": 0,
      "windowSize": 87
    },
    {
      "id": "sw_3368",
      "type": "sentence_window",
      "content": "On Linux and macOS systems, `fs. watch()` resolves the path to an [inode][] and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3369",
      "type": "sentence_window",
      "content": "watch()` resolves the path to an [inode][] and watches the inode. If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the _original_ inode.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3370",
      "type": "sentence_window",
      "content": "If the watched path is deleted and recreated, it is assigned a new inode. The watch will emit an event for the delete but will continue watching the _original_ inode. Events for the new inode will not be emitted.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3371",
      "type": "sentence_window",
      "content": "The watch will emit an event for the delete but will continue watching the _original_ inode. Events for the new inode will not be emitted. This is expected behavior.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3372",
      "type": "sentence_window",
      "content": "Events for the new inode will not be emitted. This is expected behavior. AIX files retain the same inode for the lifetime of a file.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3373",
      "type": "sentence_window",
      "content": "This is expected behavior. AIX files retain the same inode for the lifetime of a file. Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation).",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3374",
      "type": "sentence_window",
      "content": "AIX files retain the same inode for the lifetime of a file. Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation).",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_3375",
      "type": "sentence_context",
      "content": "[Inodes] On Linux and macOS systems, `fs.",
      "position": 0
    },
    {
      "id": "sc_3376",
      "type": "sentence_context",
      "content": "[Inodes] [Previous: On Linux and macOS systems, `fs....] watch()` resolves the path to an [inode][] and watches the inode.",
      "position": 1
    },
    {
      "id": "sc_3377",
      "type": "sentence_context",
      "content": "[Inodes] [Previous: watch()` resolves the path to an [inode][] and wat...] If the watched path is deleted and recreated, it is assigned a new inode.",
      "position": 2
    },
    {
      "id": "sc_3378",
      "type": "sentence_context",
      "content": "[Inodes] [Previous: If the watched path is deleted and recreated, it i...] The watch will emit an event for the delete but will continue watching the _original_ inode.",
      "position": 3
    },
    {
      "id": "sc_3379",
      "type": "sentence_context",
      "content": "[Inodes] [Previous: The watch will emit an event for the delete but wi...] Events for the new inode will not be emitted.",
      "position": 4
    },
    {
      "id": "sc_3380",
      "type": "sentence_context",
      "content": "[Inodes] [Previous: Events for the new inode will not be emitted....] This is expected behavior.",
      "position": 5
    },
    {
      "id": "sc_3381",
      "type": "sentence_context",
      "content": "[Inodes] [Previous: This is expected behavior....] AIX files retain the same inode for the lifetime of a file.",
      "position": 6
    },
    {
      "id": "sc_3382",
      "type": "sentence_context",
      "content": "[Inodes] [Previous: AIX files retain the same inode for the lifetime o...] Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation).",
      "position": 7
    },
    {
      "id": "s_3383",
      "type": "sentence",
      "content": "On Linux and macOS systems, `fs.",
      "position": 0
    },
    {
      "id": "s_3384",
      "type": "sentence",
      "content": "watch()` resolves the path to an [inode][] and watches the inode.",
      "position": 1
    },
    {
      "id": "s_3385",
      "type": "sentence",
      "content": "If the watched path is deleted and recreated, it is assigned a new inode.",
      "position": 2
    },
    {
      "id": "s_3386",
      "type": "sentence",
      "content": "The watch will emit an event for the delete but will continue watching the _original_ inode.",
      "position": 3
    },
    {
      "id": "s_3387",
      "type": "sentence",
      "content": "Events for the new inode will not be emitted.",
      "position": 4
    },
    {
      "id": "s_3388",
      "type": "sentence",
      "content": "This is expected behavior.",
      "position": 5
    },
    {
      "id": "s_3389",
      "type": "sentence",
      "content": "AIX files retain the same inode for the lifetime of a file.",
      "position": 6
    },
    {
      "id": "s_3390",
      "type": "sentence",
      "content": "Saving and closing a watched file on AIX will result in two notifications (one for adding new content, and one for truncation).",
      "position": 7
    },
    {
      "id": "w_3391",
      "type": "window",
      "content": "Providing `filename` argument in the callback is only supported on Linux,\nmacOS, Windows, and AIX. Even on supported platforms, `filename` is not always\nguaranteed to be provided. Therefore, don't assume that `filename` argument is\nalways provided in the callback, and have some fallback logic if it is `null`.",
      "position": 0,
      "windowSize": 45
    },
    {
      "id": "sw_3392",
      "type": "sentence_window",
      "content": "Providing `filename` argument in the callback is only supported on Linux, macOS, Windows, and AIX. Even on supported platforms, `filename` is not always guaranteed to be provided. Therefore, don't assume that `filename` argument is always provided in the callback, and have some fallback logic if it is `null`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3393",
      "type": "sentence_window",
      "content": "Even on supported platforms, `filename` is not always guaranteed to be provided. Therefore, don't assume that `filename` argument is always provided in the callback, and have some fallback logic if it is `null`.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_3394",
      "type": "sentence_context",
      "content": "[Filename argument] Providing `filename` argument in the callback is only supported on Linux, macOS, Windows, and AIX.",
      "position": 0
    },
    {
      "id": "sc_3395",
      "type": "sentence_context",
      "content": "[Filename argument] [Previous: Providing `filename` argument in the callback is o...] Even on supported platforms, `filename` is not always guaranteed to be provided.",
      "position": 1
    },
    {
      "id": "sc_3396",
      "type": "sentence_context",
      "content": "[Filename argument] [Previous: Even on supported platforms, `filename` is not alw...] Therefore, don't assume that `filename` argument is always provided in the callback, and have some fallback logic if it is `null`.",
      "position": 2
    },
    {
      "id": "s_3397",
      "type": "sentence",
      "content": "Providing `filename` argument in the callback is only supported on Linux, macOS, Windows, and AIX.",
      "position": 0
    },
    {
      "id": "s_3398",
      "type": "sentence",
      "content": "Even on supported platforms, `filename` is not always guaranteed to be provided.",
      "position": 1
    },
    {
      "id": "s_3399",
      "type": "sentence",
      "content": "Therefore, don't assume that `filename` argument is always provided in the callback, and have some fallback logic if it is `null`.",
      "position": 2
    },
    {
      "id": "w_3400",
      "type": "window",
      "content": "`filename` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} **Default:** `false`\n* `persistent` {boolean} **Default:** `true`\n* `interval` {integer} **Default:** `5007` `listener` {Function}\n* `current` {fs.Stats}\n* `previous` {fs.Stats} Returns: {fs.StatWatcher} Watch for changes on `filename`. The callback `listener` will be called each\ntime the file is accessed. The `options` argument may be omitted. If provided, it should be an object. The\n`options` object may contain a boolean named `persistent` that indicates\nwhether the process should continue to run as long as files are being watched.\nThe `options` object may specify an `interval` property indicating how often the\ntarget should be polled in milliseconds. The `listener` gets two arguments the current stat object and the previous\nstat object: These stat objects are instances of `fs.Stat`. If the `bigint` option is `true`,\nthe numeric values in these objects are specified as `BigInt`s. To be notified when the file was modified, not just accessed, it is necessary\nto compare `curr.mtimeMs` and `prev.mtimeMs`. When an `fs.watchFile` operation results in an `ENOENT` error, it\nwill invoke the listener once, with all the fields zeroed (or, for dates, the\nUnix Epoch). If the file is created later on, the listener will be called\nagain, with the latest stat objects. This is a change in functionality since\nv0.10. Using [`fs.watch()`][] is more efficient than `fs.watchFile` and\n`fs.unwatchFile`. `fs.watch` should be used instead of `fs.watchFile` and\n`fs.unwatchFile` when possible. When a file being watched by `fs.watchFile()` disappears and reappears,\nthen the contents of `previous` in the second callback event (the file's\nreappearance) will be the same as the contents of `previous` in the first\ncallback event (its disappearance). This happens when: the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name",
      "position": 0,
      "windowSize": 273
    },
    {
      "id": "w_3401",
      "type": "window",
      "content": "called\nagain, with the latest stat objects. This is a change in functionality since\nv0.10. Using [`fs.watch()`][] is more efficient than `fs.watchFile` and\n`fs.unwatchFile`. `fs.watch` should be used instead of `fs.watchFile` and\n`fs.unwatchFile` when possible. When a file being watched by `fs.watchFile()` disappears and reappears,\nthen the contents of `previous` in the second callback event (the file's\nreappearance) will be the same as the contents of `previous` in the first\ncallback event (its disappearance). This happens when: the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name",
      "position": 180,
      "windowSize": 93
    },
    {
      "id": "sw_3402",
      "type": "sentence_window",
      "content": "`filename` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} **Default:** `false` * `persistent` {boolean} **Default:** `true` * `interval` {integer} **Default:** `5007` `listener` {Function} * `current` {fs. Stats} * `previous` {fs. Stats} Returns: {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3403",
      "type": "sentence_window",
      "content": "Stats} * `previous` {fs. Stats} Returns: {fs. StatWatcher}",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3404",
      "type": "sentence_window",
      "content": "Stats} Returns: {fs. StatWatcher} Watch for changes on `filename`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3405",
      "type": "sentence_window",
      "content": "StatWatcher} Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3406",
      "type": "sentence_window",
      "content": "Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed. The `options` argument may be omitted.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3407",
      "type": "sentence_window",
      "content": "The callback `listener` will be called each time the file is accessed. The `options` argument may be omitted. If provided, it should be an object.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3408",
      "type": "sentence_window",
      "content": "The `options` argument may be omitted. If provided, it should be an object. The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3409",
      "type": "sentence_window",
      "content": "If provided, it should be an object. The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched. The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3410",
      "type": "sentence_window",
      "content": "The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched. The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds. The `listener` gets two arguments the current stat object and the",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3411",
      "type": "sentence_window",
      "content": "The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds. The `listener` gets two arguments the current stat object and the previous stat object: These stat objects are instances of `fs.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3412",
      "type": "sentence_window",
      "content": "The `listener` gets two arguments the current stat object and the previous stat object: These stat objects are instances of `fs. If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3413",
      "type": "sentence_window",
      "content": "These stat objects are instances of `fs. If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s. To be notified when the file was modified, not just accessed, it is necessary to compare `curr.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3414",
      "type": "sentence_window",
      "content": "If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s. To be notified when the file was modified, not just accessed, it is necessary to compare `curr. mtimeMs` and `prev.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_3415",
      "type": "sentence_window",
      "content": "To be notified when the file was modified, not just accessed, it is necessary to compare `curr. mtimeMs` and `prev. When an `fs.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_3416",
      "type": "sentence_window",
      "content": "mtimeMs` and `prev. When an `fs. watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch).",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_3417",
      "type": "sentence_window",
      "content": "When an `fs. watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). If the file is created later on, the listener will be called again, with the latest stat objects.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_3418",
      "type": "sentence_window",
      "content": "watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch). If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_3419",
      "type": "sentence_window",
      "content": "If the file is created later on, the listener will be called again, with the latest stat objects. This is a change in functionality since v0. Using [`fs.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_3420",
      "type": "sentence_window",
      "content": "This is a change in functionality since v0. Using [`fs. watch()`][] is more efficient than `fs.",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_3421",
      "type": "sentence_window",
      "content": "Using [`fs. watch()`][] is more efficient than `fs. watchFile` and `fs.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_3422",
      "type": "sentence_window",
      "content": "watch()`][] is more efficient than `fs. watchFile` and `fs. unwatchFile`.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_3423",
      "type": "sentence_window",
      "content": "watchFile` and `fs. unwatchFile`. watch` should be used instead of `fs.",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_3424",
      "type": "sentence_window",
      "content": "unwatchFile`. watch` should be used instead of `fs. watchFile` and `fs.",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_3425",
      "type": "sentence_window",
      "content": "watch` should be used instead of `fs. watchFile` and `fs. unwatchFile` when possible.",
      "position": 23,
      "sentenceCount": 3
    },
    {
      "id": "sw_3426",
      "type": "sentence_window",
      "content": "watchFile` and `fs. unwatchFile` when possible. When a file being watched by `fs.",
      "position": 24,
      "sentenceCount": 3
    },
    {
      "id": "sw_3427",
      "type": "sentence_window",
      "content": "unwatchFile` when possible. When a file being watched by `fs. watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance).",
      "position": 25,
      "sentenceCount": 3
    },
    {
      "id": "sw_3428",
      "type": "sentence_window",
      "content": "When a file being watched by `fs. watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance). This happens when:",
      "position": 26,
      "sentenceCount": 3
    },
    {
      "id": "sw_3429",
      "type": "sentence_window",
      "content": "watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance). This happens when: the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its",
      "position": 27,
      "sentenceCount": 3
    },
    {
      "id": "sw_3430",
      "type": "sentence_window",
      "content": "This happens when: the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name",
      "position": 28,
      "sentenceCount": 2
    },
    {
      "id": "sc_3431",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] `filename` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} **Default:** `false` * `persistent` {boolean} **Default:** `true` * `interval` {integer} **Default:** `5007` `listener` {Function} * `current` {fs.",
      "position": 0
    },
    {
      "id": "sc_3432",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: `filename` {string|Buffer|URL} `options` {Object} ...] Stats} * `previous` {fs.",
      "position": 1
    },
    {
      "id": "sc_3433",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: Stats} * `previous` {fs....] Stats} Returns: {fs.",
      "position": 2
    },
    {
      "id": "sc_3434",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] StatWatcher}",
      "position": 3
    },
    {
      "id": "sc_3435",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] Watch for changes on `filename`.",
      "position": 4
    },
    {
      "id": "sc_3436",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: Watch for changes on `filename`....] The callback `listener` will be called each time the file is accessed.",
      "position": 5
    },
    {
      "id": "sc_3437",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: The callback `listener` will be called each time t...] The `options` argument may be omitted.",
      "position": 6
    },
    {
      "id": "sc_3438",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: The `options` argument may be omitted....] If provided, it should be an object.",
      "position": 7
    },
    {
      "id": "sc_3439",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: If provided, it should be an object....] The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched.",
      "position": 8
    },
    {
      "id": "sc_3440",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: The `options` object may contain a boolean named `...] The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds.",
      "position": 9
    },
    {
      "id": "sc_3441",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: The `options` object may specify an `interval` pro...] The `listener` gets two arguments the current stat object and the previous stat object:",
      "position": 10
    },
    {
      "id": "sc_3442",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: The `listener` gets two arguments the current stat...] These stat objects are instances of `fs.",
      "position": 11
    },
    {
      "id": "sc_3443",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: These stat objects are instances of `fs....] If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s.",
      "position": 12
    },
    {
      "id": "sc_3444",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: If the `bigint` option is `true`, the numeric valu...] To be notified when the file was modified, not just accessed, it is necessary to compare `curr.",
      "position": 13
    },
    {
      "id": "sc_3445",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: To be notified when the file was modified, not jus...] mtimeMs` and `prev.",
      "position": 14
    },
    {
      "id": "sc_3446",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] When an `fs.",
      "position": 15
    },
    {
      "id": "sc_3447",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch).",
      "position": 16
    },
    {
      "id": "sc_3448",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: watchFile` operation results in an `ENOENT` error,...] If the file is created later on, the listener will be called again, with the latest stat objects.",
      "position": 17
    },
    {
      "id": "sc_3449",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: If the file is created later on, the listener will...] This is a change in functionality since v0.",
      "position": 18
    },
    {
      "id": "sc_3450",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: This is a change in functionality since v0....] Using [`fs.",
      "position": 19
    },
    {
      "id": "sc_3451",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] watch()`][] is more efficient than `fs.",
      "position": 20
    },
    {
      "id": "sc_3452",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: watch()`][] is more efficient than `fs....] watchFile` and `fs.",
      "position": 21
    },
    {
      "id": "sc_3453",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] unwatchFile`.",
      "position": 22
    },
    {
      "id": "sc_3454",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] watch` should be used instead of `fs.",
      "position": 23
    },
    {
      "id": "sc_3455",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: watch` should be used instead of `fs....] watchFile` and `fs.",
      "position": 24
    },
    {
      "id": "sc_3456",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] unwatchFile` when possible.",
      "position": 25
    },
    {
      "id": "sc_3457",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: unwatchFile` when possible....] When a file being watched by `fs.",
      "position": 26
    },
    {
      "id": "sc_3458",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: When a file being watched by `fs....] watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance).",
      "position": 27
    },
    {
      "id": "sc_3459",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] [Previous: watchFile()` disappears and reappears, then the co...] This happens when:",
      "position": 28
    },
    {
      "id": "sc_3460",
      "type": "sentence_context",
      "content": "[`fs.watchFile(filename[, options], listener)`] the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name",
      "position": 29
    },
    {
      "id": "s_3461",
      "type": "sentence",
      "content": "`filename` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} **Default:** `false` * `persistent` {boolean} **Default:** `true` * `interval` {integer} **Default:** `5007` `listener` {Function} * `current` {fs.",
      "position": 0
    },
    {
      "id": "s_3462",
      "type": "sentence",
      "content": "Stats} * `previous` {fs.",
      "position": 1
    },
    {
      "id": "s_3463",
      "type": "sentence",
      "content": "Stats} Returns: {fs.",
      "position": 2
    },
    {
      "id": "s_3464",
      "type": "sentence",
      "content": "StatWatcher}",
      "position": 3
    },
    {
      "id": "s_3465",
      "type": "sentence",
      "content": "Watch for changes on `filename`.",
      "position": 4
    },
    {
      "id": "s_3466",
      "type": "sentence",
      "content": "The callback `listener` will be called each time the file is accessed.",
      "position": 5
    },
    {
      "id": "s_3467",
      "type": "sentence",
      "content": "The `options` argument may be omitted.",
      "position": 6
    },
    {
      "id": "s_3468",
      "type": "sentence",
      "content": "If provided, it should be an object.",
      "position": 7
    },
    {
      "id": "s_3469",
      "type": "sentence",
      "content": "The `options` object may contain a boolean named `persistent` that indicates whether the process should continue to run as long as files are being watched.",
      "position": 8
    },
    {
      "id": "s_3470",
      "type": "sentence",
      "content": "The `options` object may specify an `interval` property indicating how often the target should be polled in milliseconds.",
      "position": 9
    },
    {
      "id": "s_3471",
      "type": "sentence",
      "content": "The `listener` gets two arguments the current stat object and the previous stat object:",
      "position": 10
    },
    {
      "id": "s_3472",
      "type": "sentence",
      "content": "These stat objects are instances of `fs.",
      "position": 11
    },
    {
      "id": "s_3473",
      "type": "sentence",
      "content": "If the `bigint` option is `true`, the numeric values in these objects are specified as `BigInt`s.",
      "position": 12
    },
    {
      "id": "s_3474",
      "type": "sentence",
      "content": "To be notified when the file was modified, not just accessed, it is necessary to compare `curr.",
      "position": 13
    },
    {
      "id": "s_3475",
      "type": "sentence",
      "content": "mtimeMs` and `prev.",
      "position": 14
    },
    {
      "id": "s_3476",
      "type": "sentence",
      "content": "When an `fs.",
      "position": 15
    },
    {
      "id": "s_3477",
      "type": "sentence",
      "content": "watchFile` operation results in an `ENOENT` error, it will invoke the listener once, with all the fields zeroed (or, for dates, the Unix Epoch).",
      "position": 16
    },
    {
      "id": "s_3478",
      "type": "sentence",
      "content": "If the file is created later on, the listener will be called again, with the latest stat objects.",
      "position": 17
    },
    {
      "id": "s_3479",
      "type": "sentence",
      "content": "This is a change in functionality since v0.",
      "position": 18
    },
    {
      "id": "s_3480",
      "type": "sentence",
      "content": "Using [`fs.",
      "position": 19
    },
    {
      "id": "s_3481",
      "type": "sentence",
      "content": "watch()`][] is more efficient than `fs.",
      "position": 20
    },
    {
      "id": "s_3482",
      "type": "sentence",
      "content": "watchFile` and `fs.",
      "position": 21
    },
    {
      "id": "s_3483",
      "type": "sentence",
      "content": "unwatchFile`.",
      "position": 22
    },
    {
      "id": "s_3484",
      "type": "sentence",
      "content": "watch` should be used instead of `fs.",
      "position": 23
    },
    {
      "id": "s_3485",
      "type": "sentence",
      "content": "watchFile` and `fs.",
      "position": 24
    },
    {
      "id": "s_3486",
      "type": "sentence",
      "content": "unwatchFile` when possible.",
      "position": 25
    },
    {
      "id": "s_3487",
      "type": "sentence",
      "content": "When a file being watched by `fs.",
      "position": 26
    },
    {
      "id": "s_3488",
      "type": "sentence",
      "content": "watchFile()` disappears and reappears, then the contents of `previous` in the second callback event (the file's reappearance) will be the same as the contents of `previous` in the first callback event (its disappearance).",
      "position": 27
    },
    {
      "id": "s_3489",
      "type": "sentence",
      "content": "This happens when:",
      "position": 28
    },
    {
      "id": "s_3490",
      "type": "sentence",
      "content": "the file is deleted, followed by a restore the file is renamed and then renamed a second time back to its original name",
      "position": 29
    },
    {
      "id": "w_3491",
      "type": "window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesWritten` {integer}\n* `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the file specified by `fd`. `offset` determines the part of the buffer to be written, and `length` is\nan integer specifying the number of bytes to write. `position` refers to the offset from the beginning of the file where this data\nshould be written. If `typeof position !== 'number'`, the data will be written\nat the current position. See pwrite(2). The callback will be given three arguments `(err, bytesWritten, buffer)` where\n`bytesWritten` specifies how many _bytes_ were written from `buffer`. If this method is invoked as its [`util.promisify()`][]ed version, it returns\na promise for an `Object` with `bytesWritten` and `buffer` properties. It is unsafe to use `fs.write()` multiple times on the same file without waiting\nfor the callback. For this scenario, [`fs.createWriteStream()`][] is\nrecommended. On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.",
      "position": 0,
      "windowSize": 175
    },
    {
      "id": "sw_3492",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer. byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the file specified by `fd`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3493",
      "type": "sentence_window",
      "content": "byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the file specified by `fd`. `offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3494",
      "type": "sentence_window",
      "content": "Write `buffer` to the file specified by `fd`. `offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write. `position` refers to the offset from the beginning of the file where this data should be written.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3495",
      "type": "sentence_window",
      "content": "`offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write. `position` refers to the offset from the beginning of the file where this data should be written. If `typeof position !",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3496",
      "type": "sentence_window",
      "content": "`position` refers to the offset from the beginning of the file where this data should be written. If `typeof position ! == 'number'`, the data will be written at the current position.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3497",
      "type": "sentence_window",
      "content": "If `typeof position ! == 'number'`, the data will be written at the current position. See pwrite(2).",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3498",
      "type": "sentence_window",
      "content": "== 'number'`, the data will be written at the current position. See pwrite(2). The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3499",
      "type": "sentence_window",
      "content": "See pwrite(2). The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`. If this method is invoked as its [`util.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3500",
      "type": "sentence_window",
      "content": "The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`. If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3501",
      "type": "sentence_window",
      "content": "If this method is invoked as its [`util. promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties. It is unsafe to use `fs.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3502",
      "type": "sentence_window",
      "content": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties. It is unsafe to use `fs. write()` multiple times on the same file without waiting for the callback.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3503",
      "type": "sentence_window",
      "content": "It is unsafe to use `fs. write()` multiple times on the same file without waiting for the callback. For this scenario, [`fs.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3504",
      "type": "sentence_window",
      "content": "write()` multiple times on the same file without waiting for the callback. For this scenario, [`fs. createWriteStream()`][] is recommended.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_3505",
      "type": "sentence_window",
      "content": "For this scenario, [`fs. createWriteStream()`][] is recommended. On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_3506",
      "type": "sentence_window",
      "content": "createWriteStream()`][] is recommended. On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_3507",
      "type": "sentence_window",
      "content": "On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 15,
      "sentenceCount": 2
    },
    {
      "id": "sc_3508",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "sc_3509",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}",
      "position": 1
    },
    {
      "id": "sc_3510",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: byteLength - offset` `position` {integer|null} **D...] Write `buffer` to the file specified by `fd`.",
      "position": 2
    },
    {
      "id": "sc_3511",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: Write `buffer` to the file specified by `fd`....] `offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write.",
      "position": 3
    },
    {
      "id": "sc_3512",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: `offset` determines the part of the buffer to be w...] `position` refers to the offset from the beginning of the file where this data should be written.",
      "position": 4
    },
    {
      "id": "sc_3513",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: `position` refers to the offset from the beginning...] If `typeof position !",
      "position": 5
    },
    {
      "id": "sc_3514",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: If `typeof position !...] == 'number'`, the data will be written at the current position.",
      "position": 6
    },
    {
      "id": "sc_3515",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: == 'number'`, the data will be written at the curr...] See pwrite(2).",
      "position": 7
    },
    {
      "id": "sc_3516",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`.",
      "position": 8
    },
    {
      "id": "sc_3517",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: The callback will be given three arguments `(err, ...] If this method is invoked as its [`util.",
      "position": 9
    },
    {
      "id": "sc_3518",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: If this method is invoked as its [`util....] promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties.",
      "position": 10
    },
    {
      "id": "sc_3519",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: promisify()`][]ed version, it returns a promise fo...] It is unsafe to use `fs.",
      "position": 11
    },
    {
      "id": "sc_3520",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: It is unsafe to use `fs....] write()` multiple times on the same file without waiting for the callback.",
      "position": 12
    },
    {
      "id": "sc_3521",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: write()` multiple times on the same file without w...] For this scenario, [`fs.",
      "position": 13
    },
    {
      "id": "sc_3522",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: For this scenario, [`fs....] createWriteStream()`][] is recommended.",
      "position": 14
    },
    {
      "id": "sc_3523",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: createWriteStream()`][] is recommended....] On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 15
    },
    {
      "id": "sc_3524",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer, offset[, length[, position]], callback)`] [Previous: On Linux, positional writes don't work when the fi...] The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 16
    },
    {
      "id": "s_3525",
      "type": "sentence",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "s_3526",
      "type": "sentence",
      "content": "byteLength - offset` `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}",
      "position": 1
    },
    {
      "id": "s_3527",
      "type": "sentence",
      "content": "Write `buffer` to the file specified by `fd`.",
      "position": 2
    },
    {
      "id": "s_3528",
      "type": "sentence",
      "content": "`offset` determines the part of the buffer to be written, and `length` is an integer specifying the number of bytes to write.",
      "position": 3
    },
    {
      "id": "s_3529",
      "type": "sentence",
      "content": "`position` refers to the offset from the beginning of the file where this data should be written.",
      "position": 4
    },
    {
      "id": "s_3530",
      "type": "sentence",
      "content": "If `typeof position !",
      "position": 5
    },
    {
      "id": "s_3531",
      "type": "sentence",
      "content": "== 'number'`, the data will be written at the current position.",
      "position": 6
    },
    {
      "id": "s_3532",
      "type": "sentence",
      "content": "See pwrite(2).",
      "position": 7
    },
    {
      "id": "s_3533",
      "type": "sentence",
      "content": "The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`.",
      "position": 8
    },
    {
      "id": "s_3534",
      "type": "sentence",
      "content": "If this method is invoked as its [`util.",
      "position": 9
    },
    {
      "id": "s_3535",
      "type": "sentence",
      "content": "promisify()`][]ed version, it returns a promise for an `Object` with `bytesWritten` and `buffer` properties.",
      "position": 10
    },
    {
      "id": "s_3536",
      "type": "sentence",
      "content": "It is unsafe to use `fs.",
      "position": 11
    },
    {
      "id": "s_3537",
      "type": "sentence",
      "content": "write()` multiple times on the same file without waiting for the callback.",
      "position": 12
    },
    {
      "id": "s_3538",
      "type": "sentence",
      "content": "For this scenario, [`fs.",
      "position": 13
    },
    {
      "id": "s_3539",
      "type": "sentence",
      "content": "createWriteStream()`][] is recommended.",
      "position": 14
    },
    {
      "id": "s_3540",
      "type": "sentence",
      "content": "On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 15
    },
    {
      "id": "s_3541",
      "type": "sentence",
      "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 16
    },
    {
      "id": "w_3542",
      "type": "window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object}\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|null} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesWritten` {integer}\n* `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the file specified by `fd`. Similar to the above `fs.write` function, this version takes an\noptional `options` object. If no `options` object is specified, it will\ndefault with the above values.",
      "position": 0,
      "windowSize": 60
    },
    {
      "id": "sw_3543",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3544",
      "type": "sentence_window",
      "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView} Write `buffer` to the file specified by `fd`. Similar to the above `fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3545",
      "type": "sentence_window",
      "content": "Write `buffer` to the file specified by `fd`. Similar to the above `fs. write` function, this version takes an optional `options` object.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3546",
      "type": "sentence_window",
      "content": "Similar to the above `fs. write` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3547",
      "type": "sentence_window",
      "content": "write` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_3548",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer[, options], callback)`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "sc_3549",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer[, options], callback)`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] byteLength - offset` * `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}",
      "position": 1
    },
    {
      "id": "sc_3550",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer[, options], callback)`] [Previous: byteLength - offset` * `position` {integer|null} *...] Write `buffer` to the file specified by `fd`.",
      "position": 2
    },
    {
      "id": "sc_3551",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer[, options], callback)`] [Previous: Write `buffer` to the file specified by `fd`....] Similar to the above `fs.",
      "position": 3
    },
    {
      "id": "sc_3552",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer[, options], callback)`] [Previous: Similar to the above `fs....] write` function, this version takes an optional `options` object.",
      "position": 4
    },
    {
      "id": "sc_3553",
      "type": "sentence_context",
      "content": "[`fs.write(fd, buffer[, options], callback)`] [Previous: write` function, this version takes an optional `o...] If no `options` object is specified, it will default with the above values.",
      "position": 5
    },
    {
      "id": "s_3554",
      "type": "sentence",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "s_3555",
      "type": "sentence",
      "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffer` {Buffer|TypedArray|DataView}",
      "position": 1
    },
    {
      "id": "s_3556",
      "type": "sentence",
      "content": "Write `buffer` to the file specified by `fd`.",
      "position": 2
    },
    {
      "id": "s_3557",
      "type": "sentence",
      "content": "Similar to the above `fs.",
      "position": 3
    },
    {
      "id": "s_3558",
      "type": "sentence",
      "content": "write` function, this version takes an optional `options` object.",
      "position": 4
    },
    {
      "id": "s_3559",
      "type": "sentence",
      "content": "If no `options` object is specified, it will default with the above values.",
      "position": 5
    },
    {
      "id": "w_3560",
      "type": "window",
      "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` `callback` {Function}\n* `err` {Error}\n* `written` {integer}\n* `string` {string} Write `string` to the file specified by `fd`. If `string` is not a string,\nan exception is thrown. `position` refers to the offset from the beginning of the file where this data\nshould be written. If `typeof position !== 'number'` the data will be written at\nthe current position. See pwrite(2). `encoding` is the expected string encoding. The callback will receive the arguments `(err, written, string)` where `written`\nspecifies how many _bytes_ the passed string required to be written. Bytes\nwritten is not necessarily the same as string characters written. See\n[`Buffer.byteLength`][]. It is unsafe to use `fs.write()` multiple times on the same file without waiting\nfor the callback. For this scenario, [`fs.createWriteStream()`][] is\nrecommended. On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file. On Windows, if the file descriptor is connected to the console (e.g. `fd == 1`\nor `stdout`) a string containing non-ASCII characters will not be rendered\nproperly by default, regardless of the encoding used.\nIt is possible to configure the console to render UTF-8 properly by changing the\nactive codepage with the `chcp 65001` command. See the [chcp][] docs for more\ndetails.",
      "position": 0,
      "windowSize": 213
    },
    {
      "id": "w_3561",
      "type": "window",
      "content": "rendered\nproperly by default, regardless of the encoding used.\nIt is possible to configure the console to render UTF-8 properly by changing the\nactive codepage with the `chcp 65001` command. See the [chcp][] docs for more\ndetails.",
      "position": 180,
      "windowSize": 33
    },
    {
      "id": "sw_3562",
      "type": "sentence_window",
      "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `written` {integer} * `string` {string} Write `string` to the file specified by `fd`. If `string` is not a string, an exception is thrown.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3563",
      "type": "sentence_window",
      "content": "Write `string` to the file specified by `fd`. If `string` is not a string, an exception is thrown. `position` refers to the offset from the beginning of the file where this data should be written.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3564",
      "type": "sentence_window",
      "content": "If `string` is not a string, an exception is thrown. `position` refers to the offset from the beginning of the file where this data should be written. If `typeof position !",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3565",
      "type": "sentence_window",
      "content": "`position` refers to the offset from the beginning of the file where this data should be written. If `typeof position ! == 'number'` the data will be written at the current position.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3566",
      "type": "sentence_window",
      "content": "If `typeof position ! == 'number'` the data will be written at the current position. See pwrite(2).",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3567",
      "type": "sentence_window",
      "content": "== 'number'` the data will be written at the current position. See pwrite(2). `encoding` is the expected string encoding.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3568",
      "type": "sentence_window",
      "content": "See pwrite(2). `encoding` is the expected string encoding. The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3569",
      "type": "sentence_window",
      "content": "`encoding` is the expected string encoding. The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written. Bytes written is not necessarily the same as string characters written.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3570",
      "type": "sentence_window",
      "content": "The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written. Bytes written is not necessarily the same as string characters written. See [`Buffer.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3571",
      "type": "sentence_window",
      "content": "Bytes written is not necessarily the same as string characters written. See [`Buffer. byteLength`][].",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3572",
      "type": "sentence_window",
      "content": "See [`Buffer. byteLength`][]. It is unsafe to use `fs.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3573",
      "type": "sentence_window",
      "content": "byteLength`][]. It is unsafe to use `fs. write()` multiple times on the same file without waiting for the callback.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3574",
      "type": "sentence_window",
      "content": "It is unsafe to use `fs. write()` multiple times on the same file without waiting for the callback. For this scenario, [`fs.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_3575",
      "type": "sentence_window",
      "content": "write()` multiple times on the same file without waiting for the callback. For this scenario, [`fs. createWriteStream()`][] is recommended.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_3576",
      "type": "sentence_window",
      "content": "For this scenario, [`fs. createWriteStream()`][] is recommended. On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_3577",
      "type": "sentence_window",
      "content": "createWriteStream()`][] is recommended. On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_3578",
      "type": "sentence_window",
      "content": "On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file. On Windows, if the file descriptor is connected to the console (e.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_3579",
      "type": "sentence_window",
      "content": "The kernel ignores the position argument and always appends the data to the end of the file. On Windows, if the file descriptor is connected to the console (e. `fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_3580",
      "type": "sentence_window",
      "content": "On Windows, if the file descriptor is connected to the console (e. `fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used. It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command.",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_3581",
      "type": "sentence_window",
      "content": "`fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used. It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command. See the [chcp][] docs for more details.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_3582",
      "type": "sentence_window",
      "content": "It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command. See the [chcp][] docs for more details.",
      "position": 20,
      "sentenceCount": 2
    },
    {
      "id": "sc_3583",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] `fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `written` {integer} * `string` {string}",
      "position": 0
    },
    {
      "id": "sc_3584",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: `fd` {integer} `string` {string} `position` {integ...] Write `string` to the file specified by `fd`.",
      "position": 1
    },
    {
      "id": "sc_3585",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: Write `string` to the file specified by `fd`....] If `string` is not a string, an exception is thrown.",
      "position": 2
    },
    {
      "id": "sc_3586",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: If `string` is not a string, an exception is throw...] `position` refers to the offset from the beginning of the file where this data should be written.",
      "position": 3
    },
    {
      "id": "sc_3587",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: `position` refers to the offset from the beginning...] If `typeof position !",
      "position": 4
    },
    {
      "id": "sc_3588",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: If `typeof position !...] == 'number'` the data will be written at the current position.",
      "position": 5
    },
    {
      "id": "sc_3589",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: == 'number'` the data will be written at the curre...] See pwrite(2).",
      "position": 6
    },
    {
      "id": "sc_3590",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] `encoding` is the expected string encoding.",
      "position": 7
    },
    {
      "id": "sc_3591",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: `encoding` is the expected string encoding....] The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written.",
      "position": 8
    },
    {
      "id": "sc_3592",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: The callback will receive the arguments `(err, wri...] Bytes written is not necessarily the same as string characters written.",
      "position": 9
    },
    {
      "id": "sc_3593",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: Bytes written is not necessarily the same as strin...] See [`Buffer.",
      "position": 10
    },
    {
      "id": "sc_3594",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] byteLength`][].",
      "position": 11
    },
    {
      "id": "sc_3595",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] It is unsafe to use `fs.",
      "position": 12
    },
    {
      "id": "sc_3596",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: It is unsafe to use `fs....] write()` multiple times on the same file without waiting for the callback.",
      "position": 13
    },
    {
      "id": "sc_3597",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: write()` multiple times on the same file without w...] For this scenario, [`fs.",
      "position": 14
    },
    {
      "id": "sc_3598",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: For this scenario, [`fs....] createWriteStream()`][] is recommended.",
      "position": 15
    },
    {
      "id": "sc_3599",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: createWriteStream()`][] is recommended....] On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 16
    },
    {
      "id": "sc_3600",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: On Linux, positional writes don't work when the fi...] The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 17
    },
    {
      "id": "sc_3601",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: The kernel ignores the position argument and alway...] On Windows, if the file descriptor is connected to the console (e.",
      "position": 18
    },
    {
      "id": "sc_3602",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: On Windows, if the file descriptor is connected to...] `fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used.",
      "position": 19
    },
    {
      "id": "sc_3603",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: `fd == 1` or `stdout`) a string containing non-ASC...] It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command.",
      "position": 20
    },
    {
      "id": "sc_3604",
      "type": "sentence_context",
      "content": "[`fs.write(fd, string[, position[, encoding]], callback)`] [Previous: It is possible to configure the console to render ...] See the [chcp][] docs for more details.",
      "position": 21
    },
    {
      "id": "s_3605",
      "type": "sentence",
      "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` `callback` {Function} * `err` {Error} * `written` {integer} * `string` {string}",
      "position": 0
    },
    {
      "id": "s_3606",
      "type": "sentence",
      "content": "Write `string` to the file specified by `fd`.",
      "position": 1
    },
    {
      "id": "s_3607",
      "type": "sentence",
      "content": "If `string` is not a string, an exception is thrown.",
      "position": 2
    },
    {
      "id": "s_3608",
      "type": "sentence",
      "content": "`position` refers to the offset from the beginning of the file where this data should be written.",
      "position": 3
    },
    {
      "id": "s_3609",
      "type": "sentence",
      "content": "If `typeof position !",
      "position": 4
    },
    {
      "id": "s_3610",
      "type": "sentence",
      "content": "== 'number'` the data will be written at the current position.",
      "position": 5
    },
    {
      "id": "s_3611",
      "type": "sentence",
      "content": "See pwrite(2).",
      "position": 6
    },
    {
      "id": "s_3612",
      "type": "sentence",
      "content": "`encoding` is the expected string encoding.",
      "position": 7
    },
    {
      "id": "s_3613",
      "type": "sentence",
      "content": "The callback will receive the arguments `(err, written, string)` where `written` specifies how many _bytes_ the passed string required to be written.",
      "position": 8
    },
    {
      "id": "s_3614",
      "type": "sentence",
      "content": "Bytes written is not necessarily the same as string characters written.",
      "position": 9
    },
    {
      "id": "s_3615",
      "type": "sentence",
      "content": "See [`Buffer.",
      "position": 10
    },
    {
      "id": "s_3616",
      "type": "sentence",
      "content": "byteLength`][].",
      "position": 11
    },
    {
      "id": "s_3617",
      "type": "sentence",
      "content": "It is unsafe to use `fs.",
      "position": 12
    },
    {
      "id": "s_3618",
      "type": "sentence",
      "content": "write()` multiple times on the same file without waiting for the callback.",
      "position": 13
    },
    {
      "id": "s_3619",
      "type": "sentence",
      "content": "For this scenario, [`fs.",
      "position": 14
    },
    {
      "id": "s_3620",
      "type": "sentence",
      "content": "createWriteStream()`][] is recommended.",
      "position": 15
    },
    {
      "id": "s_3621",
      "type": "sentence",
      "content": "On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 16
    },
    {
      "id": "s_3622",
      "type": "sentence",
      "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 17
    },
    {
      "id": "s_3623",
      "type": "sentence",
      "content": "On Windows, if the file descriptor is connected to the console (e.",
      "position": 18
    },
    {
      "id": "s_3624",
      "type": "sentence",
      "content": "`fd == 1` or `stdout`) a string containing non-ASCII characters will not be rendered properly by default, regardless of the encoding used.",
      "position": 19
    },
    {
      "id": "s_3625",
      "type": "sentence",
      "content": "It is possible to configure the console to render UTF-8 properly by changing the active codepage with the `chcp 65001` command.",
      "position": 20
    },
    {
      "id": "s_3626",
      "type": "sentence",
      "content": "See the [chcp][] docs for more details.",
      "position": 21
    },
    {
      "id": "w_3627",
      "type": "window",
      "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`.\n* `flush` {boolean} If all data is successfully written to the file, and\n  `flush` is `true`, `fs.fsync()` is used to flush the data.\n  **Default:** `false`.\n* `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function}\n* `err` {Error|AggregateError} When `file` is a filename, asynchronously writes data to the file, replacing the\nfile if it already exists. `data` can be a string or a buffer. When `file` is a file descriptor, the behavior is similar to calling\n`fs.write()` directly (which is recommended). See the notes below on using\na file descriptor. The `encoding` option is ignored if `data` is a buffer. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. If `options` is a string, then it specifies the encoding: It is unsafe to use `fs.writeFile()` multiple times on the same file without\nwaiting for the callback. For this scenario, [`fs.createWriteStream()`][] is\nrecommended. Similarly to `fs.readFile` - `fs.writeFile` is a convenience method that\nperforms multiple `write` calls internally to write the buffer passed to it.\nFor performance sensitive code consider using [`fs.createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fs.writeFile()`.\nCancelation is \"best effort\", and some amount of data is likely still\nto be written. Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.writeFile` performs.",
      "position": 0,
      "windowSize": 236
    },
    {
      "id": "w_3628",
      "type": "window",
      "content": "calls internally to write the buffer passed to it.\nFor performance sensitive code consider using [`fs.createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fs.writeFile()`.\nCancelation is \"best effort\", and some amount of data is likely still\nto be written. Aborting an ongoing request does not abort individual operating\nsystem requests but rather the internal buffering `fs.writeFile` performs.",
      "position": 180,
      "windowSize": 56
    },
    {
      "id": "sw_3629",
      "type": "sentence_window",
      "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. * `flush` {boolean} If all data is successfully",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3630",
      "type": "sentence_window",
      "content": "**Default:** `'w'`. * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs. fsync()` is used to flush the data.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3631",
      "type": "sentence_window",
      "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs. fsync()` is used to flush the data. **Default:** `false`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3632",
      "type": "sentence_window",
      "content": "fsync()` is used to flush the data. **Default:** `false`. * `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError}",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3633",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError} When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3634",
      "type": "sentence_window",
      "content": "* `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError} When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists. `data` can be a string or a buffer.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3635",
      "type": "sentence_window",
      "content": "When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists. `data` can be a string or a buffer. When `file` is a file descriptor, the behavior is similar to calling `fs.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3636",
      "type": "sentence_window",
      "content": "`data` can be a string or a buffer. When `file` is a file descriptor, the behavior is similar to calling `fs. write()` directly (which is recommended).",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3637",
      "type": "sentence_window",
      "content": "When `file` is a file descriptor, the behavior is similar to calling `fs. write()` directly (which is recommended). See the notes below on using a file descriptor.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3638",
      "type": "sentence_window",
      "content": "write()` directly (which is recommended). See the notes below on using a file descriptor. The `encoding` option is ignored if `data` is a buffer.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3639",
      "type": "sentence_window",
      "content": "See the notes below on using a file descriptor. The `encoding` option is ignored if `data` is a buffer. The `mode` option only affects the newly created file.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3640",
      "type": "sentence_window",
      "content": "The `encoding` option is ignored if `data` is a buffer. The `mode` option only affects the newly created file. open()`][] for more details.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3641",
      "type": "sentence_window",
      "content": "The `mode` option only affects the newly created file. open()`][] for more details. If `options` is a string, then it specifies the encoding:",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_3642",
      "type": "sentence_window",
      "content": "open()`][] for more details. If `options` is a string, then it specifies the encoding: It is unsafe to use `fs.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_3643",
      "type": "sentence_window",
      "content": "If `options` is a string, then it specifies the encoding: It is unsafe to use `fs. writeFile()` multiple times on the same file without waiting for the callback.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_3644",
      "type": "sentence_window",
      "content": "It is unsafe to use `fs. writeFile()` multiple times on the same file without waiting for the callback. For this scenario, [`fs.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_3645",
      "type": "sentence_window",
      "content": "writeFile()` multiple times on the same file without waiting for the callback. For this scenario, [`fs. createWriteStream()`][] is recommended.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_3646",
      "type": "sentence_window",
      "content": "For this scenario, [`fs. createWriteStream()`][] is recommended. Similarly to `fs.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_3647",
      "type": "sentence_window",
      "content": "createWriteStream()`][] is recommended. Similarly to `fs. readFile` - `fs.",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_3648",
      "type": "sentence_window",
      "content": "Similarly to `fs. readFile` - `fs. writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_3649",
      "type": "sentence_window",
      "content": "readFile` - `fs. writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it. For performance sensitive code consider using [`fs.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_3650",
      "type": "sentence_window",
      "content": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it. For performance sensitive code consider using [`fs. createWriteStream()`][].",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_3651",
      "type": "sentence_window",
      "content": "For performance sensitive code consider using [`fs. createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fs.",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_3652",
      "type": "sentence_window",
      "content": "createWriteStream()`][]. It is possible to use an {AbortSignal} to cancel an `fs. writeFile()`.",
      "position": 23,
      "sentenceCount": 3
    },
    {
      "id": "sw_3653",
      "type": "sentence_window",
      "content": "It is possible to use an {AbortSignal} to cancel an `fs. writeFile()`. Cancelation is \"best effort\", and some amount of data is likely still to be written.",
      "position": 24,
      "sentenceCount": 3
    },
    {
      "id": "sw_3654",
      "type": "sentence_window",
      "content": "writeFile()`. Cancelation is \"best effort\", and some amount of data is likely still to be written. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 25,
      "sentenceCount": 3
    },
    {
      "id": "sw_3655",
      "type": "sentence_window",
      "content": "Cancelation is \"best effort\", and some amount of data is likely still to be written. Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. writeFile` performs.",
      "position": 26,
      "sentenceCount": 3
    },
    {
      "id": "sw_3656",
      "type": "sentence_window",
      "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs. writeFile` performs.",
      "position": 27,
      "sentenceCount": 2
    },
    {
      "id": "sc_3657",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] `file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_3658",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: `file` {string|Buffer|URL|integer} filename or fil...] **Default:** `'w'`.",
      "position": 1
    },
    {
      "id": "sc_3659",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs.",
      "position": 2
    },
    {
      "id": "sc_3660",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: * `flush` {boolean} If all data is successfully wr...] fsync()` is used to flush the data.",
      "position": 3
    },
    {
      "id": "sc_3661",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: fsync()` is used to flush the data....] **Default:** `false`.",
      "position": 4
    },
    {
      "id": "sc_3662",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: **Default:** `false`....] * `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError}",
      "position": 5
    },
    {
      "id": "sc_3663",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: * `signal` {AbortSignal} allows aborting an in-pro...] When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists.",
      "position": 6
    },
    {
      "id": "sc_3664",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: When `file` is a filename, asynchronously writes d...] `data` can be a string or a buffer.",
      "position": 7
    },
    {
      "id": "sc_3665",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: `data` can be a string or a buffer....] When `file` is a file descriptor, the behavior is similar to calling `fs.",
      "position": 8
    },
    {
      "id": "sc_3666",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: When `file` is a file descriptor, the behavior is ...] write()` directly (which is recommended).",
      "position": 9
    },
    {
      "id": "sc_3667",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: write()` directly (which is recommended)....] See the notes below on using a file descriptor.",
      "position": 10
    },
    {
      "id": "sc_3668",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: See the notes below on using a file descriptor....] The `encoding` option is ignored if `data` is a buffer.",
      "position": 11
    },
    {
      "id": "sc_3669",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: The `encoding` option is ignored if `data` is a bu...] The `mode` option only affects the newly created file.",
      "position": 12
    },
    {
      "id": "sc_3670",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
      "position": 13
    },
    {
      "id": "sc_3671",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: open()`][] for more details....] If `options` is a string, then it specifies the encoding:",
      "position": 14
    },
    {
      "id": "sc_3672",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: If `options` is a string, then it specifies the en...] It is unsafe to use `fs.",
      "position": 15
    },
    {
      "id": "sc_3673",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: It is unsafe to use `fs....] writeFile()` multiple times on the same file without waiting for the callback.",
      "position": 16
    },
    {
      "id": "sc_3674",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: writeFile()` multiple times on the same file witho...] For this scenario, [`fs.",
      "position": 17
    },
    {
      "id": "sc_3675",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: For this scenario, [`fs....] createWriteStream()`][] is recommended.",
      "position": 18
    },
    {
      "id": "sc_3676",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: createWriteStream()`][] is recommended....] Similarly to `fs.",
      "position": 19
    },
    {
      "id": "sc_3677",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] readFile` - `fs.",
      "position": 20
    },
    {
      "id": "sc_3678",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
      "position": 21
    },
    {
      "id": "sc_3679",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: writeFile` is a convenience method that performs m...] For performance sensitive code consider using [`fs.",
      "position": 22
    },
    {
      "id": "sc_3680",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: For performance sensitive code consider using [`fs...] createWriteStream()`][].",
      "position": 23
    },
    {
      "id": "sc_3681",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: createWriteStream()`][]....] It is possible to use an {AbortSignal} to cancel an `fs.",
      "position": 24
    },
    {
      "id": "sc_3682",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: It is possible to use an {AbortSignal} to cancel a...] writeFile()`.",
      "position": 25
    },
    {
      "id": "sc_3683",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] Cancelation is \"best effort\", and some amount of data is likely still to be written.",
      "position": 26
    },
    {
      "id": "sc_3684",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: Cancelation is \"best effort\", and some amount of d...] Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 27
    },
    {
      "id": "sc_3685",
      "type": "sentence_context",
      "content": "[`fs.writeFile(file, data[, options], callback)`] [Previous: Aborting an ongoing request does not abort individ...] writeFile` performs.",
      "position": 28
    },
    {
      "id": "s_3686",
      "type": "sentence",
      "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_3687",
      "type": "sentence",
      "content": "**Default:** `'w'`.",
      "position": 1
    },
    {
      "id": "s_3688",
      "type": "sentence",
      "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs.",
      "position": 2
    },
    {
      "id": "s_3689",
      "type": "sentence",
      "content": "fsync()` is used to flush the data.",
      "position": 3
    },
    {
      "id": "s_3690",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 4
    },
    {
      "id": "s_3691",
      "type": "sentence",
      "content": "* `signal` {AbortSignal} allows aborting an in-progress writeFile `callback` {Function} * `err` {Error|AggregateError}",
      "position": 5
    },
    {
      "id": "s_3692",
      "type": "sentence",
      "content": "When `file` is a filename, asynchronously writes data to the file, replacing the file if it already exists.",
      "position": 6
    },
    {
      "id": "s_3693",
      "type": "sentence",
      "content": "`data` can be a string or a buffer.",
      "position": 7
    },
    {
      "id": "s_3694",
      "type": "sentence",
      "content": "When `file` is a file descriptor, the behavior is similar to calling `fs.",
      "position": 8
    },
    {
      "id": "s_3695",
      "type": "sentence",
      "content": "write()` directly (which is recommended).",
      "position": 9
    },
    {
      "id": "s_3696",
      "type": "sentence",
      "content": "See the notes below on using a file descriptor.",
      "position": 10
    },
    {
      "id": "s_3697",
      "type": "sentence",
      "content": "The `encoding` option is ignored if `data` is a buffer.",
      "position": 11
    },
    {
      "id": "s_3698",
      "type": "sentence",
      "content": "The `mode` option only affects the newly created file.",
      "position": 12
    },
    {
      "id": "s_3699",
      "type": "sentence",
      "content": "open()`][] for more details.",
      "position": 13
    },
    {
      "id": "s_3700",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the encoding:",
      "position": 14
    },
    {
      "id": "s_3701",
      "type": "sentence",
      "content": "It is unsafe to use `fs.",
      "position": 15
    },
    {
      "id": "s_3702",
      "type": "sentence",
      "content": "writeFile()` multiple times on the same file without waiting for the callback.",
      "position": 16
    },
    {
      "id": "s_3703",
      "type": "sentence",
      "content": "For this scenario, [`fs.",
      "position": 17
    },
    {
      "id": "s_3704",
      "type": "sentence",
      "content": "createWriteStream()`][] is recommended.",
      "position": 18
    },
    {
      "id": "s_3705",
      "type": "sentence",
      "content": "Similarly to `fs.",
      "position": 19
    },
    {
      "id": "s_3706",
      "type": "sentence",
      "content": "readFile` - `fs.",
      "position": 20
    },
    {
      "id": "s_3707",
      "type": "sentence",
      "content": "writeFile` is a convenience method that performs multiple `write` calls internally to write the buffer passed to it.",
      "position": 21
    },
    {
      "id": "s_3708",
      "type": "sentence",
      "content": "For performance sensitive code consider using [`fs.",
      "position": 22
    },
    {
      "id": "s_3709",
      "type": "sentence",
      "content": "createWriteStream()`][].",
      "position": 23
    },
    {
      "id": "s_3710",
      "type": "sentence",
      "content": "It is possible to use an {AbortSignal} to cancel an `fs.",
      "position": 24
    },
    {
      "id": "s_3711",
      "type": "sentence",
      "content": "writeFile()`.",
      "position": 25
    },
    {
      "id": "s_3712",
      "type": "sentence",
      "content": "Cancelation is \"best effort\", and some amount of data is likely still to be written.",
      "position": 26
    },
    {
      "id": "s_3713",
      "type": "sentence",
      "content": "Aborting an ongoing request does not abort individual operating system requests but rather the internal buffering `fs.",
      "position": 27
    },
    {
      "id": "s_3714",
      "type": "sentence",
      "content": "writeFile` performs.",
      "position": 28
    },
    {
      "id": "w_3715",
      "type": "window",
      "content": "When `file` is a file descriptor, the behavior is almost identical to directly\ncalling `fs.write()` like: The difference from directly calling `fs.write()` is that under some unusual\nconditions, `fs.write()` might write only part of the buffer and need to be\nretried to write the remaining data, whereas `fs.writeFile()` retries until\nthe data is entirely written (or an error occurs). The implications of this are a common source of confusion. In\nthe file descriptor case, the file is not replaced! The data is not necessarily\nwritten to the beginning of the file, and the file's original data may remain\nbefore and/or after the newly written data. For example, if `fs.writeFile()` is called twice in a row, first to write the\nstring `'Hello'`, then to write the string `', World'`, the file would contain\n`'Hello, World'`, and might contain some of the file's original data (depending\non the size of the original file, and the position of the file descriptor). If\na file name had been used instead of a descriptor, the file would be guaranteed\nto contain only `', World'`.",
      "position": 0,
      "windowSize": 167
    },
    {
      "id": "sw_3716",
      "type": "sentence_window",
      "content": "When `file` is a file descriptor, the behavior is almost identical to directly calling `fs. write()` like: The difference from directly calling `fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3717",
      "type": "sentence_window",
      "content": "write()` like: The difference from directly calling `fs. write()` is that under some unusual conditions, `fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3718",
      "type": "sentence_window",
      "content": "The difference from directly calling `fs. write()` is that under some unusual conditions, `fs. write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3719",
      "type": "sentence_window",
      "content": "write()` is that under some unusual conditions, `fs. write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs. writeFile()` retries until the data is entirely written (or an error occurs).",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3720",
      "type": "sentence_window",
      "content": "write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs. writeFile()` retries until the data is entirely written (or an error occurs). The implications of this are a common source of confusion.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3721",
      "type": "sentence_window",
      "content": "writeFile()` retries until the data is entirely written (or an error occurs). The implications of this are a common source of confusion. In the file descriptor case, the file is not replaced!",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3722",
      "type": "sentence_window",
      "content": "The implications of this are a common source of confusion. In the file descriptor case, the file is not replaced! The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3723",
      "type": "sentence_window",
      "content": "In the file descriptor case, the file is not replaced! The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data. For example, if `fs.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3724",
      "type": "sentence_window",
      "content": "The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data. For example, if `fs. writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'`",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3725",
      "type": "sentence_window",
      "content": "For example, if `fs. writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'` and might contain some of the file's original data (depending on the size of the original file",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3726",
      "type": "sentence_window",
      "content": "writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'` and might contain some of the file's original data (depending on the size of the original file and the position of the file descriptor).",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3727",
      "type": "sentence_window",
      "content": "and might contain some of the file's original data (depending on the size of the original file and the position of the file descriptor). If a file name had been used instead of a descriptor, the file would be guaranteed to contain only `', World'`.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3728",
      "type": "sentence_window",
      "content": "and the position of the file descriptor). If a file name had been used instead of a descriptor, the file would be guaranteed to contain only `', World'`.",
      "position": 12,
      "sentenceCount": 2
    },
    {
      "id": "sc_3729",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] When `file` is a file descriptor, the behavior is almost identical to directly calling `fs.",
      "position": 0
    },
    {
      "id": "sc_3730",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: When `file` is a file descriptor, the behavior is ...] write()` like:",
      "position": 1
    },
    {
      "id": "sc_3731",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] The difference from directly calling `fs.",
      "position": 2
    },
    {
      "id": "sc_3732",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: The difference from directly calling `fs....] write()` is that under some unusual conditions, `fs.",
      "position": 3
    },
    {
      "id": "sc_3733",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: write()` is that under some unusual conditions, `f...] write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs.",
      "position": 4
    },
    {
      "id": "sc_3734",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: write()` might write only part of the buffer and n...] writeFile()` retries until the data is entirely written (or an error occurs).",
      "position": 5
    },
    {
      "id": "sc_3735",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: writeFile()` retries until the data is entirely wr...] The implications of this are a common source of confusion.",
      "position": 6
    },
    {
      "id": "sc_3736",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: The implications of this are a common source of co...] In the file descriptor case, the file is not replaced!",
      "position": 7
    },
    {
      "id": "sc_3737",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: In the file descriptor case, the file is not repla...] The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.",
      "position": 8
    },
    {
      "id": "sc_3738",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: The data is not necessarily written to the beginni...] For example, if `fs.",
      "position": 9
    },
    {
      "id": "sc_3739",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'`",
      "position": 10
    },
    {
      "id": "sc_3740",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: writeFile()` is called twice in a row, first to wr...] and might contain some of the file's original data (depending on the size of the original file",
      "position": 11
    },
    {
      "id": "sc_3741",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: and might contain some of the file's original data...] and the position of the file descriptor).",
      "position": 12
    },
    {
      "id": "sc_3742",
      "type": "sentence_context",
      "content": "[Using `fs.writeFile()` with file descriptors] [Previous: and the position of the file descriptor)....] If a file name had been used instead of a descriptor, the file would be guaranteed to contain only `', World'`.",
      "position": 13
    },
    {
      "id": "s_3743",
      "type": "sentence",
      "content": "When `file` is a file descriptor, the behavior is almost identical to directly calling `fs.",
      "position": 0
    },
    {
      "id": "s_3744",
      "type": "sentence",
      "content": "write()` like:",
      "position": 1
    },
    {
      "id": "s_3745",
      "type": "sentence",
      "content": "The difference from directly calling `fs.",
      "position": 2
    },
    {
      "id": "s_3746",
      "type": "sentence",
      "content": "write()` is that under some unusual conditions, `fs.",
      "position": 3
    },
    {
      "id": "s_3747",
      "type": "sentence",
      "content": "write()` might write only part of the buffer and need to be retried to write the remaining data, whereas `fs.",
      "position": 4
    },
    {
      "id": "s_3748",
      "type": "sentence",
      "content": "writeFile()` retries until the data is entirely written (or an error occurs).",
      "position": 5
    },
    {
      "id": "s_3749",
      "type": "sentence",
      "content": "The implications of this are a common source of confusion.",
      "position": 6
    },
    {
      "id": "s_3750",
      "type": "sentence",
      "content": "In the file descriptor case, the file is not replaced!",
      "position": 7
    },
    {
      "id": "s_3751",
      "type": "sentence",
      "content": "The data is not necessarily written to the beginning of the file, and the file's original data may remain before and/or after the newly written data.",
      "position": 8
    },
    {
      "id": "s_3752",
      "type": "sentence",
      "content": "For example, if `fs.",
      "position": 9
    },
    {
      "id": "s_3753",
      "type": "sentence",
      "content": "writeFile()` is called twice in a row, first to write the string `'Hello'`, then to write the string `', World'`, the file would contain `'Hello, World'`",
      "position": 10
    },
    {
      "id": "s_3754",
      "type": "sentence",
      "content": "and might contain some of the file's original data (depending on the size of the original file",
      "position": 11
    },
    {
      "id": "s_3755",
      "type": "sentence",
      "content": "and the position of the file descriptor).",
      "position": 12
    },
    {
      "id": "s_3756",
      "type": "sentence",
      "content": "If a file name had been used instead of a descriptor, the file would be guaranteed to contain only `', World'`.",
      "position": 13
    },
    {
      "id": "w_3757",
      "type": "window",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function}\n* `err` {Error}\n* `bytesWritten` {integer}\n* `buffers` {ArrayBufferView\\[]} Write an array of `ArrayBufferView`s to the file specified by `fd` using\n`writev()`. `position` is the offset from the beginning of the file where this data\nshould be written. If `typeof position !== 'number'`, the data will be written\nat the current position. The callback will be given three arguments: `err`, `bytesWritten`, and\n`buffers`. `bytesWritten` is how many bytes were written from `buffers`. If this method is [`util.promisify()`][]ed, it returns a promise for an\n`Object` with `bytesWritten` and `buffers` properties. It is unsafe to use `fs.writev()` multiple times on the same file without\nwaiting for the callback. For this scenario, use [`fs.createWriteStream()`][]. On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file.",
      "position": 0,
      "windowSize": 141
    },
    {
      "id": "sw_3758",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffers` {ArrayBufferView\\[]} Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`. `position` is the offset from the beginning of the file where this data",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3759",
      "type": "sentence_window",
      "content": "Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`. `position` is the offset from the beginning of the file where this data should be written. If `typeof position !",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3760",
      "type": "sentence_window",
      "content": "`position` is the offset from the beginning of the file where this data should be written. If `typeof position ! == 'number'`, the data will be written at the current position.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3761",
      "type": "sentence_window",
      "content": "If `typeof position ! == 'number'`, the data will be written at the current position. The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3762",
      "type": "sentence_window",
      "content": "== 'number'`, the data will be written at the current position. The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`. `bytesWritten` is how many bytes were written from `buffers`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3763",
      "type": "sentence_window",
      "content": "The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`. `bytesWritten` is how many bytes were written from `buffers`. If this method is [`util.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3764",
      "type": "sentence_window",
      "content": "`bytesWritten` is how many bytes were written from `buffers`. If this method is [`util. promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3765",
      "type": "sentence_window",
      "content": "If this method is [`util. promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties. It is unsafe to use `fs.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3766",
      "type": "sentence_window",
      "content": "promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties. It is unsafe to use `fs. writev()` multiple times on the same file without waiting for the callback.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3767",
      "type": "sentence_window",
      "content": "It is unsafe to use `fs. writev()` multiple times on the same file without waiting for the callback. For this scenario, use [`fs.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3768",
      "type": "sentence_window",
      "content": "writev()` multiple times on the same file without waiting for the callback. For this scenario, use [`fs. createWriteStream()`][].",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3769",
      "type": "sentence_window",
      "content": "For this scenario, use [`fs. createWriteStream()`][]. On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3770",
      "type": "sentence_window",
      "content": "createWriteStream()`][]. On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_3771",
      "type": "sentence_window",
      "content": "On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 13,
      "sentenceCount": 2
    },
    {
      "id": "sc_3772",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] `fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffers` {ArrayBufferView\\[]}",
      "position": 0
    },
    {
      "id": "sc_3773",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: `fd` {integer} `buffers` {ArrayBufferView\\[]} `pos...] Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`.",
      "position": 1
    },
    {
      "id": "sc_3774",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: Write an array of `ArrayBufferView`s to the file s...] `position` is the offset from the beginning of the file where this data should be written.",
      "position": 2
    },
    {
      "id": "sc_3775",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: `position` is the offset from the beginning of the...] If `typeof position !",
      "position": 3
    },
    {
      "id": "sc_3776",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: If `typeof position !...] == 'number'`, the data will be written at the current position.",
      "position": 4
    },
    {
      "id": "sc_3777",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: == 'number'`, the data will be written at the curr...] The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`.",
      "position": 5
    },
    {
      "id": "sc_3778",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: The callback will be given three arguments: `err`,...] `bytesWritten` is how many bytes were written from `buffers`.",
      "position": 6
    },
    {
      "id": "sc_3779",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: `bytesWritten` is how many bytes were written from...] If this method is [`util.",
      "position": 7
    },
    {
      "id": "sc_3780",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: If this method is [`util....] promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties.",
      "position": 8
    },
    {
      "id": "sc_3781",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: promisify()`][]ed, it returns a promise for an `Ob...] It is unsafe to use `fs.",
      "position": 9
    },
    {
      "id": "sc_3782",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: It is unsafe to use `fs....] writev()` multiple times on the same file without waiting for the callback.",
      "position": 10
    },
    {
      "id": "sc_3783",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: writev()` multiple times on the same file without ...] For this scenario, use [`fs.",
      "position": 11
    },
    {
      "id": "sc_3784",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: For this scenario, use [`fs....] createWriteStream()`][].",
      "position": 12
    },
    {
      "id": "sc_3785",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: createWriteStream()`][]....] On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 13
    },
    {
      "id": "sc_3786",
      "type": "sentence_context",
      "content": "[`fs.writev(fd, buffers[, position], callback)`] [Previous: On Linux, positional writes don't work when the fi...] The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 14
    },
    {
      "id": "s_3787",
      "type": "sentence",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` `callback` {Function} * `err` {Error} * `bytesWritten` {integer} * `buffers` {ArrayBufferView\\[]}",
      "position": 0
    },
    {
      "id": "s_3788",
      "type": "sentence",
      "content": "Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`.",
      "position": 1
    },
    {
      "id": "s_3789",
      "type": "sentence",
      "content": "`position` is the offset from the beginning of the file where this data should be written.",
      "position": 2
    },
    {
      "id": "s_3790",
      "type": "sentence",
      "content": "If `typeof position !",
      "position": 3
    },
    {
      "id": "s_3791",
      "type": "sentence",
      "content": "== 'number'`, the data will be written at the current position.",
      "position": 4
    },
    {
      "id": "s_3792",
      "type": "sentence",
      "content": "The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`.",
      "position": 5
    },
    {
      "id": "s_3793",
      "type": "sentence",
      "content": "`bytesWritten` is how many bytes were written from `buffers`.",
      "position": 6
    },
    {
      "id": "s_3794",
      "type": "sentence",
      "content": "If this method is [`util.",
      "position": 7
    },
    {
      "id": "s_3795",
      "type": "sentence",
      "content": "promisify()`][]ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties.",
      "position": 8
    },
    {
      "id": "s_3796",
      "type": "sentence",
      "content": "It is unsafe to use `fs.",
      "position": 9
    },
    {
      "id": "s_3797",
      "type": "sentence",
      "content": "writev()` multiple times on the same file without waiting for the callback.",
      "position": 10
    },
    {
      "id": "s_3798",
      "type": "sentence",
      "content": "For this scenario, use [`fs.",
      "position": 11
    },
    {
      "id": "s_3799",
      "type": "sentence",
      "content": "createWriteStream()`][].",
      "position": 12
    },
    {
      "id": "s_3800",
      "type": "sentence",
      "content": "On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 13
    },
    {
      "id": "s_3801",
      "type": "sentence",
      "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 14
    },
    {
      "id": "sc_3802",
      "type": "sentence_context",
      "content": "[Synchronous API] The synchronous APIs perform all operations synchronously, blocking the event loop until the operation completes or fails.",
      "position": 0
    },
    {
      "id": "s_3803",
      "type": "sentence",
      "content": "The synchronous APIs perform all operations synchronously, blocking the event loop until the operation completes or fails.",
      "position": 0
    },
    {
      "id": "w_3804",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.constants.F_OK` Synchronously tests a user's permissions for the file or directory specified\nby `path`. The `mode` argument is an optional integer that specifies the\naccessibility checks to be performed. `mode` should be either the value\n`fs.constants.F_OK` or a mask consisting of the bitwise OR of any of\n`fs.constants.R_OK`, `fs.constants.W_OK`, and `fs.constants.X_OK` (e.g.\n`fs.constants.W_OK | fs.constants.R_OK`). Check [File access constants][] for\npossible values of `mode`. If any of the accessibility checks fail, an `Error` will be thrown. Otherwise,\nthe method will return `undefined`.",
      "position": 0,
      "windowSize": 80
    },
    {
      "id": "sw_3805",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs. Synchronously tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3806",
      "type": "sentence_window",
      "content": "Synchronously tests a user's permissions for the file or directory specified by `path`. The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3807",
      "type": "sentence_window",
      "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed. `mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3808",
      "type": "sentence_window",
      "content": "`mode` should be either the value `fs. F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3809",
      "type": "sentence_window",
      "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs. R_OK`, `fs. W_OK`, and `fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3810",
      "type": "sentence_window",
      "content": "R_OK`, `fs. W_OK`, and `fs. Check [File access constants][] for possible values of `mode`.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3811",
      "type": "sentence_window",
      "content": "W_OK`, and `fs. Check [File access constants][] for possible values of `mode`. If any of the accessibility checks fail, an `Error` will be thrown.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3812",
      "type": "sentence_window",
      "content": "Check [File access constants][] for possible values of `mode`. If any of the accessibility checks fail, an `Error` will be thrown. Otherwise, the method will return `undefined`.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3813",
      "type": "sentence_window",
      "content": "If any of the accessibility checks fail, an `Error` will be thrown. Otherwise, the method will return `undefined`.",
      "position": 8,
      "sentenceCount": 2
    },
    {
      "id": "sc_3814",
      "type": "sentence_context",
      "content": "[`fs.accessSync(path[, mode])`] `path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
      "position": 0
    },
    {
      "id": "sc_3815",
      "type": "sentence_context",
      "content": "[`fs.accessSync(path[, mode])`] [Previous: `path` {string|Buffer|URL} `mode` {integer} **Defa...] Synchronously tests a user's permissions for the file or directory specified by `path`.",
      "position": 1
    },
    {
      "id": "sc_3816",
      "type": "sentence_context",
      "content": "[`fs.accessSync(path[, mode])`] [Previous: Synchronously tests a user's permissions for the f...] The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
      "position": 2
    },
    {
      "id": "sc_3817",
      "type": "sentence_context",
      "content": "[`fs.accessSync(path[, mode])`] [Previous: The `mode` argument is an optional integer that sp...] `mode` should be either the value `fs.",
      "position": 3
    },
    {
      "id": "sc_3818",
      "type": "sentence_context",
      "content": "[`fs.accessSync(path[, mode])`] [Previous: `mode` should be either the value `fs....] F_OK` or a mask consisting of the bitwise OR of any of `fs.",
      "position": 4
    },
    {
      "id": "sc_3819",
      "type": "sentence_context",
      "content": "[`fs.accessSync(path[, mode])`] [Previous: F_OK` or a mask consisting of the bitwise OR of an...] R_OK`, `fs.",
      "position": 5
    },
    {
      "id": "sc_3820",
      "type": "sentence_context",
      "content": "[`fs.accessSync(path[, mode])`] W_OK`, and `fs.",
      "position": 6
    },
    {
      "id": "sc_3821",
      "type": "sentence_context",
      "content": "[`fs.accessSync(path[, mode])`] Check [File access constants][] for possible values of `mode`.",
      "position": 7
    },
    {
      "id": "sc_3822",
      "type": "sentence_context",
      "content": "[`fs.accessSync(path[, mode])`] [Previous: Check [File access constants][] for possible value...] If any of the accessibility checks fail, an `Error` will be thrown.",
      "position": 8
    },
    {
      "id": "sc_3823",
      "type": "sentence_context",
      "content": "[`fs.accessSync(path[, mode])`] [Previous: If any of the accessibility checks fail, an `Error...] Otherwise, the method will return `undefined`.",
      "position": 9
    },
    {
      "id": "s_3824",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `mode` {integer} **Default:** `fs.",
      "position": 0
    },
    {
      "id": "s_3825",
      "type": "sentence",
      "content": "Synchronously tests a user's permissions for the file or directory specified by `path`.",
      "position": 1
    },
    {
      "id": "s_3826",
      "type": "sentence",
      "content": "The `mode` argument is an optional integer that specifies the accessibility checks to be performed.",
      "position": 2
    },
    {
      "id": "s_3827",
      "type": "sentence",
      "content": "`mode` should be either the value `fs.",
      "position": 3
    },
    {
      "id": "s_3828",
      "type": "sentence",
      "content": "F_OK` or a mask consisting of the bitwise OR of any of `fs.",
      "position": 4
    },
    {
      "id": "s_3829",
      "type": "sentence",
      "content": "R_OK`, `fs.",
      "position": 5
    },
    {
      "id": "s_3830",
      "type": "sentence",
      "content": "W_OK`, and `fs.",
      "position": 6
    },
    {
      "id": "s_3831",
      "type": "sentence",
      "content": "Check [File access constants][] for possible values of `mode`.",
      "position": 7
    },
    {
      "id": "s_3832",
      "type": "sentence",
      "content": "If any of the accessibility checks fail, an `Error` will be thrown.",
      "position": 8
    },
    {
      "id": "s_3833",
      "type": "sentence",
      "content": "Otherwise, the method will return `undefined`.",
      "position": 9
    },
    {
      "id": "w_3834",
      "type": "window",
      "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`.\n* `flush` {boolean} If `true`, the underlying file descriptor is flushed\n  prior to closing it. **Default:** `false`. Synchronously append data to a file, creating the file if it does not yet\nexist. `data` can be a string or a {Buffer}. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened\nfor appending (using `fs.open()` or `fs.openSync()`). The file descriptor will\nnot be closed automatically.",
      "position": 0,
      "windowSize": 116
    },
    {
      "id": "sw_3835",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3836",
      "type": "sentence_window",
      "content": "**Default:** `'a'`. * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3837",
      "type": "sentence_window",
      "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it. **Default:** `false`. Synchronously append data to a file, creating the file if it does not yet exist.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3838",
      "type": "sentence_window",
      "content": "**Default:** `false`. Synchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3839",
      "type": "sentence_window",
      "content": "Synchronously append data to a file, creating the file if it does not yet exist. `data` can be a string or a {Buffer}. The `mode` option only affects the newly created file.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3840",
      "type": "sentence_window",
      "content": "`data` can be a string or a {Buffer}. The `mode` option only affects the newly created file. open()`][] for more details.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3841",
      "type": "sentence_window",
      "content": "The `mode` option only affects the newly created file. open()`][] for more details. If `options` is a string, then it specifies the encoding:",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3842",
      "type": "sentence_window",
      "content": "open()`][] for more details. If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3843",
      "type": "sentence_window",
      "content": "If `options` is a string, then it specifies the encoding: The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs. open()` or `fs.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3844",
      "type": "sentence_window",
      "content": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs. open()` or `fs. openSync()`).",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3845",
      "type": "sentence_window",
      "content": "open()` or `fs. openSync()`). The file descriptor will not be closed automatically.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3846",
      "type": "sentence_window",
      "content": "openSync()`). The file descriptor will not be closed automatically.",
      "position": 11,
      "sentenceCount": 2
    },
    {
      "id": "sc_3847",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] `path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_3848",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: `path` {string|Buffer|URL|number} filename or file...] **Default:** `'a'`.",
      "position": 1
    },
    {
      "id": "sc_3849",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] * `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
      "position": 2
    },
    {
      "id": "sc_3850",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: * `flush` {boolean} If `true`, the underlying file...] **Default:** `false`.",
      "position": 3
    },
    {
      "id": "sc_3851",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: **Default:** `false`....] Synchronously append data to a file, creating the file if it does not yet exist.",
      "position": 4
    },
    {
      "id": "sc_3852",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: Synchronously append data to a file, creating the ...] `data` can be a string or a {Buffer}.",
      "position": 5
    },
    {
      "id": "sc_3853",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: `data` can be a string or a {Buffer}....] The `mode` option only affects the newly created file.",
      "position": 6
    },
    {
      "id": "sc_3854",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
      "position": 7
    },
    {
      "id": "sc_3855",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: open()`][] for more details....] If `options` is a string, then it specifies the encoding:",
      "position": 8
    },
    {
      "id": "sc_3856",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: If `options` is a string, then it specifies the en...] The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
      "position": 9
    },
    {
      "id": "sc_3857",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] [Previous: The `path` may be specified as a numeric file desc...] open()` or `fs.",
      "position": 10
    },
    {
      "id": "sc_3858",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] openSync()`).",
      "position": 11
    },
    {
      "id": "sc_3859",
      "type": "sentence_context",
      "content": "[`fs.appendFileSync(path, data[, options])`] The file descriptor will not be closed automatically.",
      "position": 12
    },
    {
      "id": "s_3860",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL|number} filename or file descriptor `data` {string|Buffer} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_3861",
      "type": "sentence",
      "content": "**Default:** `'a'`.",
      "position": 1
    },
    {
      "id": "s_3862",
      "type": "sentence",
      "content": "* `flush` {boolean} If `true`, the underlying file descriptor is flushed prior to closing it.",
      "position": 2
    },
    {
      "id": "s_3863",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 3
    },
    {
      "id": "s_3864",
      "type": "sentence",
      "content": "Synchronously append data to a file, creating the file if it does not yet exist.",
      "position": 4
    },
    {
      "id": "s_3865",
      "type": "sentence",
      "content": "`data` can be a string or a {Buffer}.",
      "position": 5
    },
    {
      "id": "s_3866",
      "type": "sentence",
      "content": "The `mode` option only affects the newly created file.",
      "position": 6
    },
    {
      "id": "s_3867",
      "type": "sentence",
      "content": "open()`][] for more details.",
      "position": 7
    },
    {
      "id": "s_3868",
      "type": "sentence",
      "content": "If `options` is a string, then it specifies the encoding:",
      "position": 8
    },
    {
      "id": "s_3869",
      "type": "sentence",
      "content": "The `path` may be specified as a numeric file descriptor that has been opened for appending (using `fs.",
      "position": 9
    },
    {
      "id": "s_3870",
      "type": "sentence",
      "content": "open()` or `fs.",
      "position": 10
    },
    {
      "id": "s_3871",
      "type": "sentence",
      "content": "openSync()`).",
      "position": 11
    },
    {
      "id": "s_3872",
      "type": "sentence",
      "content": "The file descriptor will not be closed automatically.",
      "position": 12
    },
    {
      "id": "w_3873",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `mode` {string|integer} For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.chmod()`][]. See the POSIX chmod(2) documentation for more detail.",
      "position": 0,
      "windowSize": 25
    },
    {
      "id": "sw_3874",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `mode` {string|integer} For detailed information, see the documentation of the asynchronous version of this API: [`fs. chmod()`][].",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3875",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. chmod()`][]. See the POSIX chmod(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3876",
      "type": "sentence_window",
      "content": "chmod()`][]. See the POSIX chmod(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_3877",
      "type": "sentence_context",
      "content": "[`fs.chmodSync(path, mode)`] `path` {string|Buffer|URL} `mode` {string|integer}",
      "position": 0
    },
    {
      "id": "sc_3878",
      "type": "sentence_context",
      "content": "[`fs.chmodSync(path, mode)`] [Previous: `path` {string|Buffer|URL} `mode` {string|integer}...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "sc_3879",
      "type": "sentence_context",
      "content": "[`fs.chmodSync(path, mode)`] [Previous: For detailed information, see the documentation of...] chmod()`][].",
      "position": 2
    },
    {
      "id": "sc_3880",
      "type": "sentence_context",
      "content": "[`fs.chmodSync(path, mode)`] See the POSIX chmod(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_3881",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `mode` {string|integer}",
      "position": 0
    },
    {
      "id": "s_3882",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "s_3883",
      "type": "sentence",
      "content": "chmod()`][].",
      "position": 2
    },
    {
      "id": "s_3884",
      "type": "sentence",
      "content": "See the POSIX chmod(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "w_3885",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Synchronously changes owner and group of a file. Returns `undefined`.\nThis is the synchronous version of [`fs.chown()`][]. See the POSIX chown(2) documentation for more detail.",
      "position": 0,
      "windowSize": 30
    },
    {
      "id": "sw_3886",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer} Synchronously changes owner and group of a file. Returns `undefined`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3887",
      "type": "sentence_window",
      "content": "Synchronously changes owner and group of a file. Returns `undefined`. This is the synchronous version of [`fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3888",
      "type": "sentence_window",
      "content": "Returns `undefined`. This is the synchronous version of [`fs. chown()`][].",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3889",
      "type": "sentence_window",
      "content": "This is the synchronous version of [`fs. chown()`][]. See the POSIX chown(2) documentation for more detail.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3890",
      "type": "sentence_window",
      "content": "chown()`][]. See the POSIX chown(2) documentation for more detail.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_3891",
      "type": "sentence_context",
      "content": "[`fs.chownSync(path, uid, gid)`] `path` {string|Buffer|URL} `uid` {integer} `gid` {integer}",
      "position": 0
    },
    {
      "id": "sc_3892",
      "type": "sentence_context",
      "content": "[`fs.chownSync(path, uid, gid)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} `gid` {...] Synchronously changes owner and group of a file.",
      "position": 1
    },
    {
      "id": "sc_3893",
      "type": "sentence_context",
      "content": "[`fs.chownSync(path, uid, gid)`] [Previous: Synchronously changes owner and group of a file....] Returns `undefined`.",
      "position": 2
    },
    {
      "id": "sc_3894",
      "type": "sentence_context",
      "content": "[`fs.chownSync(path, uid, gid)`] This is the synchronous version of [`fs.",
      "position": 3
    },
    {
      "id": "sc_3895",
      "type": "sentence_context",
      "content": "[`fs.chownSync(path, uid, gid)`] [Previous: This is the synchronous version of [`fs....] chown()`][].",
      "position": 4
    },
    {
      "id": "sc_3896",
      "type": "sentence_context",
      "content": "[`fs.chownSync(path, uid, gid)`] See the POSIX chown(2) documentation for more detail.",
      "position": 5
    },
    {
      "id": "s_3897",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `uid` {integer} `gid` {integer}",
      "position": 0
    },
    {
      "id": "s_3898",
      "type": "sentence",
      "content": "Synchronously changes owner and group of a file.",
      "position": 1
    },
    {
      "id": "s_3899",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 2
    },
    {
      "id": "s_3900",
      "type": "sentence",
      "content": "This is the synchronous version of [`fs.",
      "position": 3
    },
    {
      "id": "s_3901",
      "type": "sentence",
      "content": "chown()`][].",
      "position": 4
    },
    {
      "id": "s_3902",
      "type": "sentence",
      "content": "See the POSIX chown(2) documentation for more detail.",
      "position": 5
    },
    {
      "id": "w_3903",
      "type": "window",
      "content": "`fd` {integer} Closes the file descriptor. Returns `undefined`. Calling `fs.closeSync()` on any file descriptor (`fd`) that is currently in use\nthrough any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
      "position": 0,
      "windowSize": 37
    },
    {
      "id": "sw_3904",
      "type": "sentence_window",
      "content": "`fd` {integer} Closes the file descriptor. Returns `undefined`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3905",
      "type": "sentence_window",
      "content": "Closes the file descriptor. Returns `undefined`. Calling `fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3906",
      "type": "sentence_window",
      "content": "Returns `undefined`. Calling `fs. closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3907",
      "type": "sentence_window",
      "content": "Calling `fs. closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3908",
      "type": "sentence_window",
      "content": "closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior. See the POSIX close(2) documentation for more detail.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_3909",
      "type": "sentence_context",
      "content": "[`fs.closeSync(fd)`] `fd` {integer}",
      "position": 0
    },
    {
      "id": "sc_3910",
      "type": "sentence_context",
      "content": "[`fs.closeSync(fd)`] Closes the file descriptor.",
      "position": 1
    },
    {
      "id": "sc_3911",
      "type": "sentence_context",
      "content": "[`fs.closeSync(fd)`] [Previous: Closes the file descriptor....] Returns `undefined`.",
      "position": 2
    },
    {
      "id": "sc_3912",
      "type": "sentence_context",
      "content": "[`fs.closeSync(fd)`] Calling `fs.",
      "position": 3
    },
    {
      "id": "sc_3913",
      "type": "sentence_context",
      "content": "[`fs.closeSync(fd)`] closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
      "position": 4
    },
    {
      "id": "sc_3914",
      "type": "sentence_context",
      "content": "[`fs.closeSync(fd)`] [Previous: closeSync()` on any file descriptor (`fd`) that is...] See the POSIX close(2) documentation for more detail.",
      "position": 5
    },
    {
      "id": "s_3915",
      "type": "sentence",
      "content": "`fd` {integer}",
      "position": 0
    },
    {
      "id": "s_3916",
      "type": "sentence",
      "content": "Closes the file descriptor.",
      "position": 1
    },
    {
      "id": "s_3917",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 2
    },
    {
      "id": "s_3918",
      "type": "sentence",
      "content": "Calling `fs.",
      "position": 3
    },
    {
      "id": "s_3919",
      "type": "sentence",
      "content": "closeSync()` on any file descriptor (`fd`) that is currently in use through any other `fs` operation may lead to undefined behavior.",
      "position": 4
    },
    {
      "id": "s_3920",
      "type": "sentence",
      "content": "See the POSIX close(2) documentation for more detail.",
      "position": 5
    },
    {
      "id": "w_3921",
      "type": "window",
      "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation. **Default:** `0`. Synchronously copies `src` to `dest`. By default, `dest` is overwritten if it\nalready exists. Returns `undefined`. Node.js makes no guarantees about the\natomicity of the copy operation. If an error occurs after the destination file\nhas been opened for writing, Node.js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior\nof the copy operation. It is possible to create a mask consisting of the bitwise\nOR of two or more values (e.g.\n`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`). `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest` already\nexists. `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create a\ncopy-on-write reflink. If the platform does not support copy-on-write, then a\nfallback copy mechanism is used. `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\ncreate a copy-on-write reflink. If the platform does not support\ncopy-on-write, then the operation will fail.",
      "position": 0,
      "windowSize": 150
    },
    {
      "id": "sw_3922",
      "type": "sentence_window",
      "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation. **Default:** `0`. Synchronously copies `src` to `dest`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3923",
      "type": "sentence_window",
      "content": "**Default:** `0`. Synchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3924",
      "type": "sentence_window",
      "content": "Synchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists. Returns `undefined`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3925",
      "type": "sentence_window",
      "content": "By default, `dest` is overwritten if it already exists. Returns `undefined`. js makes no guarantees about the atomicity of the copy operation.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3926",
      "type": "sentence_window",
      "content": "Returns `undefined`. js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3927",
      "type": "sentence_window",
      "content": "js makes no guarantees about the atomicity of the copy operation. If an error occurs after the destination file has been opened for writing, Node. js will attempt to remove the destination.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3928",
      "type": "sentence_window",
      "content": "If an error occurs after the destination file has been opened for writing, Node. js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior of the copy operation.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3929",
      "type": "sentence_window",
      "content": "js will attempt to remove the destination. `mode` is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3930",
      "type": "sentence_window",
      "content": "`mode` is an optional integer that specifies the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3931",
      "type": "sentence_window",
      "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e. COPYFILE_EXCL | fs. COPYFILE_FICLONE`).",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3932",
      "type": "sentence_window",
      "content": "COPYFILE_EXCL | fs. COPYFILE_FICLONE`). COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3933",
      "type": "sentence_window",
      "content": "COPYFILE_FICLONE`). COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3934",
      "type": "sentence_window",
      "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists. COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_3935",
      "type": "sentence_window",
      "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_3936",
      "type": "sentence_window",
      "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used. COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_3937",
      "type": "sentence_window",
      "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink. If the platform does not support copy-on-write, then the operation will fail.",
      "position": 15,
      "sentenceCount": 2
    },
    {
      "id": "sc_3938",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] `src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation.",
      "position": 0
    },
    {
      "id": "sc_3939",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: `src` {string|Buffer|URL} source filename to copy ...] **Default:** `0`.",
      "position": 1
    },
    {
      "id": "sc_3940",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] Synchronously copies `src` to `dest`.",
      "position": 2
    },
    {
      "id": "sc_3941",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: Synchronously copies `src` to `dest`....] By default, `dest` is overwritten if it already exists.",
      "position": 3
    },
    {
      "id": "sc_3942",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: By default, `dest` is overwritten if it already ex...] Returns `undefined`.",
      "position": 4
    },
    {
      "id": "sc_3943",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] js makes no guarantees about the atomicity of the copy operation.",
      "position": 5
    },
    {
      "id": "sc_3944",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: js makes no guarantees about the atomicity of the ...] If an error occurs after the destination file has been opened for writing, Node.",
      "position": 6
    },
    {
      "id": "sc_3945",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: If an error occurs after the destination file has ...] js will attempt to remove the destination.",
      "position": 7
    },
    {
      "id": "sc_3946",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: js will attempt to remove the destination....] `mode` is an optional integer that specifies the behavior of the copy operation.",
      "position": 8
    },
    {
      "id": "sc_3947",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: `mode` is an optional integer that specifies the b...] It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
      "position": 9
    },
    {
      "id": "sc_3948",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: It is possible to create a mask consisting of the ...] COPYFILE_EXCL | fs.",
      "position": 10
    },
    {
      "id": "sc_3949",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] COPYFILE_FICLONE`).",
      "position": 11
    },
    {
      "id": "sc_3950",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
      "position": 12
    },
    {
      "id": "sc_3951",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: COPYFILE_EXCL`: The copy operation will fail if `d...] COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 13
    },
    {
      "id": "sc_3952",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: COPYFILE_FICLONE`: The copy operation will attempt...] If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
      "position": 14
    },
    {
      "id": "sc_3953",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: If the platform does not support copy-on-write, th...] COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 15
    },
    {
      "id": "sc_3954",
      "type": "sentence_context",
      "content": "[`fs.copyFileSync(src, dest[, mode])`] [Previous: COPYFILE_FICLONE_FORCE`: The copy operation will a...] If the platform does not support copy-on-write, then the operation will fail.",
      "position": 16
    },
    {
      "id": "s_3955",
      "type": "sentence",
      "content": "`src` {string|Buffer|URL} source filename to copy `dest` {string|Buffer|URL} destination filename of the copy operation `mode` {integer} modifiers for copy operation.",
      "position": 0
    },
    {
      "id": "s_3956",
      "type": "sentence",
      "content": "**Default:** `0`.",
      "position": 1
    },
    {
      "id": "s_3957",
      "type": "sentence",
      "content": "Synchronously copies `src` to `dest`.",
      "position": 2
    },
    {
      "id": "s_3958",
      "type": "sentence",
      "content": "By default, `dest` is overwritten if it already exists.",
      "position": 3
    },
    {
      "id": "s_3959",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 4
    },
    {
      "id": "s_3960",
      "type": "sentence",
      "content": "js makes no guarantees about the atomicity of the copy operation.",
      "position": 5
    },
    {
      "id": "s_3961",
      "type": "sentence",
      "content": "If an error occurs after the destination file has been opened for writing, Node.",
      "position": 6
    },
    {
      "id": "s_3962",
      "type": "sentence",
      "content": "js will attempt to remove the destination.",
      "position": 7
    },
    {
      "id": "s_3963",
      "type": "sentence",
      "content": "`mode` is an optional integer that specifies the behavior of the copy operation.",
      "position": 8
    },
    {
      "id": "s_3964",
      "type": "sentence",
      "content": "It is possible to create a mask consisting of the bitwise OR of two or more values (e.",
      "position": 9
    },
    {
      "id": "s_3965",
      "type": "sentence",
      "content": "COPYFILE_EXCL | fs.",
      "position": 10
    },
    {
      "id": "s_3966",
      "type": "sentence",
      "content": "COPYFILE_FICLONE`).",
      "position": 11
    },
    {
      "id": "s_3967",
      "type": "sentence",
      "content": "COPYFILE_EXCL`: The copy operation will fail if `dest` already exists.",
      "position": 12
    },
    {
      "id": "s_3968",
      "type": "sentence",
      "content": "COPYFILE_FICLONE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 13
    },
    {
      "id": "s_3969",
      "type": "sentence",
      "content": "If the platform does not support copy-on-write, then a fallback copy mechanism is used.",
      "position": 14
    },
    {
      "id": "s_3970",
      "type": "sentence",
      "content": "COPYFILE_FICLONE_FORCE`: The copy operation will attempt to create a copy-on-write reflink.",
      "position": 15
    },
    {
      "id": "s_3971",
      "type": "sentence",
      "content": "If the platform does not support copy-on-write, then the operation will fail.",
      "position": 16
    },
    {
      "id": "w_3972",
      "type": "window",
      "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object}\n* `dereference` {boolean} dereference symlinks. **Default:** `false`.\n* `errorOnExist` {boolean} when `force` is `false`, and the destination\n  exists, throw an error. **Default:** `false`.\n* `filter` {Function} Function to filter copied files/directories. Return\n  `true` to copy the item, `false` to ignore it. When ignoring a directory,\n  all of its contents will be skipped as well. **Default:** `undefined`\n  * `src` {string} source path to copy.\n  * `dest` {string} destination path to copy to.\n  * Returns: {boolean} Any non-`Promise` value that is coercible\n    to `boolean`.\n* `force` {boolean} overwrite existing file or directory. The copy\n  operation will ignore errors if you set this to false and the destination\n  exists. Use the `errorOnExist` option to change this behavior.\n  **Default:** `true`.\n* `mode` {integer} modifiers for copy operation. **Default:** `0`.\n  See `mode` flag of [`fs.copyFileSync()`][].\n* `preserveTimestamps` {boolean} When `true` timestamps from `src` will\n  be preserved. **Default:** `false`.\n* `recursive` {boolean} copy directories recursively **Default:** `false`\n* `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will\n  be skipped. **Default:** `false` Synchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
      "position": 0,
      "windowSize": 218
    },
    {
      "id": "w_3973",
      "type": "window",
      "content": "symlinks will\n  be skipped. **Default:** `false` Synchronously copies the entire directory structure from `src` to `dest`,\nincluding subdirectories and files. When copying a directory to another directory, globs are not supported and\nbehavior is similar to `cp dir1/ dir2/`.",
      "position": 180,
      "windowSize": 38
    },
    {
      "id": "sw_3974",
      "type": "sentence_window",
      "content": "`src` {string|URL} source path to copy. `dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_3975",
      "type": "sentence_window",
      "content": "`dest` {string|URL} destination path to copy to. `options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_3976",
      "type": "sentence_window",
      "content": "`options` {Object} * `dereference` {boolean} dereference symlinks. **Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_3977",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_3978",
      "type": "sentence_window",
      "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error. **Default:** `false`. * `filter` {Function} Function to filter copied files/directories.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_3979",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_3980",
      "type": "sentence_window",
      "content": "* `filter` {Function} Function to filter copied files/directories. Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_3981",
      "type": "sentence_window",
      "content": "Return `true` to copy the item, `false` to ignore it. When ignoring a directory, all of its contents will be skipped as well. **Default:** `undefined` * `src` {string} source path to copy.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_3982",
      "type": "sentence_window",
      "content": "When ignoring a directory, all of its contents will be skipped as well. **Default:** `undefined` * `src` {string} source path to copy. * `dest` {string} destination path to copy to.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_3983",
      "type": "sentence_window",
      "content": "**Default:** `undefined` * `src` {string} source path to copy. * `dest` {string} destination path to copy to. * Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_3984",
      "type": "sentence_window",
      "content": "* `dest` {string} destination path to copy to. * Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`. * `force` {boolean} overwrite existing file or directory.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_3985",
      "type": "sentence_window",
      "content": "* Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`. * `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_3986",
      "type": "sentence_window",
      "content": "* `force` {boolean} overwrite existing file or directory. The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_3987",
      "type": "sentence_window",
      "content": "The copy operation will ignore errors if you set this to false and the destination exists. Use the `errorOnExist` option to change this behavior. **Default:** `true`.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_3988",
      "type": "sentence_window",
      "content": "Use the `errorOnExist` option to change this behavior. **Default:** `true`. * `mode` {integer} modifiers for copy operation.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_3989",
      "type": "sentence_window",
      "content": "**Default:** `true`. * `mode` {integer} modifiers for copy operation. **Default:** `0`.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_3990",
      "type": "sentence_window",
      "content": "* `mode` {integer} modifiers for copy operation. **Default:** `0`. See `mode` flag of [`fs.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_3991",
      "type": "sentence_window",
      "content": "**Default:** `0`. See `mode` flag of [`fs. copyFileSync()`][].",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_3992",
      "type": "sentence_window",
      "content": "See `mode` flag of [`fs. copyFileSync()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_3993",
      "type": "sentence_window",
      "content": "copyFileSync()`][]. * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_3994",
      "type": "sentence_window",
      "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved. **Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_3995",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false`",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_3996",
      "type": "sentence_window",
      "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped. **Default:** `false` Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_3997",
      "type": "sentence_window",
      "content": "**Default:** `false` Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 23,
      "sentenceCount": 3
    },
    {
      "id": "sw_3998",
      "type": "sentence_window",
      "content": "Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files. When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 24,
      "sentenceCount": 2
    },
    {
      "id": "sc_3999",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] `src` {string|URL} source path to copy.",
      "position": 0
    },
    {
      "id": "sc_4000",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: `src` {string|URL} source path to copy....] `dest` {string|URL} destination path to copy to.",
      "position": 1
    },
    {
      "id": "sc_4001",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: `dest` {string|URL} destination path to copy to....] `options` {Object} * `dereference` {boolean} dereference symlinks.",
      "position": 2
    },
    {
      "id": "sc_4002",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: `options` {Object} * `dereference` {boolean} deref...] **Default:** `false`.",
      "position": 3
    },
    {
      "id": "sc_4003",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: **Default:** `false`....] * `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
      "position": 4
    },
    {
      "id": "sc_4004",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `errorOnExist` {boolean} when `force` is `false`...] **Default:** `false`.",
      "position": 5
    },
    {
      "id": "sc_4005",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: **Default:** `false`....] * `filter` {Function} Function to filter copied files/directories.",
      "position": 6
    },
    {
      "id": "sc_4006",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `filter` {Function} Function to filter copied fi...] Return `true` to copy the item, `false` to ignore it.",
      "position": 7
    },
    {
      "id": "sc_4007",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: Return `true` to copy the item, `false` to ignore ...] When ignoring a directory, all of its contents will be skipped as well.",
      "position": 8
    },
    {
      "id": "sc_4008",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: When ignoring a directory, all of its contents wil...] **Default:** `undefined` * `src` {string} source path to copy.",
      "position": 9
    },
    {
      "id": "sc_4009",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: **Default:** `undefined` * `src` {string} source p...] * `dest` {string} destination path to copy to.",
      "position": 10
    },
    {
      "id": "sc_4010",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `dest` {string} destination path to copy to....] * Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`.",
      "position": 11
    },
    {
      "id": "sc_4011",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * Returns: {boolean} Any non-`Promise` value that ...] * `force` {boolean} overwrite existing file or directory.",
      "position": 12
    },
    {
      "id": "sc_4012",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `force` {boolean} overwrite existing file or dir...] The copy operation will ignore errors if you set this to false and the destination exists.",
      "position": 13
    },
    {
      "id": "sc_4013",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: The copy operation will ignore errors if you set t...] Use the `errorOnExist` option to change this behavior.",
      "position": 14
    },
    {
      "id": "sc_4014",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: Use the `errorOnExist` option to change this behav...] **Default:** `true`.",
      "position": 15
    },
    {
      "id": "sc_4015",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] * `mode` {integer} modifiers for copy operation.",
      "position": 16
    },
    {
      "id": "sc_4016",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `mode` {integer} modifiers for copy operation....] **Default:** `0`.",
      "position": 17
    },
    {
      "id": "sc_4017",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] See `mode` flag of [`fs.",
      "position": 18
    },
    {
      "id": "sc_4018",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: See `mode` flag of [`fs....] copyFileSync()`][].",
      "position": 19
    },
    {
      "id": "sc_4019",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] * `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
      "position": 20
    },
    {
      "id": "sc_4020",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `preserveTimestamps` {boolean} When `true` times...] **Default:** `false`.",
      "position": 21
    },
    {
      "id": "sc_4021",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: **Default:** `false`....] * `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
      "position": 22
    },
    {
      "id": "sc_4022",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: * `recursive` {boolean} copy directories recursive...] **Default:** `false`",
      "position": 23
    },
    {
      "id": "sc_4023",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
      "position": 24
    },
    {
      "id": "sc_4024",
      "type": "sentence_context",
      "content": "[`fs.cpSync(src, dest[, options])`] [Previous: Synchronously copies the entire directory structur...] When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 25
    },
    {
      "id": "s_4025",
      "type": "sentence",
      "content": "`src` {string|URL} source path to copy.",
      "position": 0
    },
    {
      "id": "s_4026",
      "type": "sentence",
      "content": "`dest` {string|URL} destination path to copy to.",
      "position": 1
    },
    {
      "id": "s_4027",
      "type": "sentence",
      "content": "`options` {Object} * `dereference` {boolean} dereference symlinks.",
      "position": 2
    },
    {
      "id": "s_4028",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 3
    },
    {
      "id": "s_4029",
      "type": "sentence",
      "content": "* `errorOnExist` {boolean} when `force` is `false`, and the destination exists, throw an error.",
      "position": 4
    },
    {
      "id": "s_4030",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 5
    },
    {
      "id": "s_4031",
      "type": "sentence",
      "content": "* `filter` {Function} Function to filter copied files/directories.",
      "position": 6
    },
    {
      "id": "s_4032",
      "type": "sentence",
      "content": "Return `true` to copy the item, `false` to ignore it.",
      "position": 7
    },
    {
      "id": "s_4033",
      "type": "sentence",
      "content": "When ignoring a directory, all of its contents will be skipped as well.",
      "position": 8
    },
    {
      "id": "s_4034",
      "type": "sentence",
      "content": "**Default:** `undefined` * `src` {string} source path to copy.",
      "position": 9
    },
    {
      "id": "s_4035",
      "type": "sentence",
      "content": "* `dest` {string} destination path to copy to.",
      "position": 10
    },
    {
      "id": "s_4036",
      "type": "sentence",
      "content": "* Returns: {boolean} Any non-`Promise` value that is coercible to `boolean`.",
      "position": 11
    },
    {
      "id": "s_4037",
      "type": "sentence",
      "content": "* `force` {boolean} overwrite existing file or directory.",
      "position": 12
    },
    {
      "id": "s_4038",
      "type": "sentence",
      "content": "The copy operation will ignore errors if you set this to false and the destination exists.",
      "position": 13
    },
    {
      "id": "s_4039",
      "type": "sentence",
      "content": "Use the `errorOnExist` option to change this behavior.",
      "position": 14
    },
    {
      "id": "s_4040",
      "type": "sentence",
      "content": "**Default:** `true`.",
      "position": 15
    },
    {
      "id": "s_4041",
      "type": "sentence",
      "content": "* `mode` {integer} modifiers for copy operation.",
      "position": 16
    },
    {
      "id": "s_4042",
      "type": "sentence",
      "content": "**Default:** `0`.",
      "position": 17
    },
    {
      "id": "s_4043",
      "type": "sentence",
      "content": "See `mode` flag of [`fs.",
      "position": 18
    },
    {
      "id": "s_4044",
      "type": "sentence",
      "content": "copyFileSync()`][].",
      "position": 19
    },
    {
      "id": "s_4045",
      "type": "sentence",
      "content": "* `preserveTimestamps` {boolean} When `true` timestamps from `src` will be preserved.",
      "position": 20
    },
    {
      "id": "s_4046",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 21
    },
    {
      "id": "s_4047",
      "type": "sentence",
      "content": "* `recursive` {boolean} copy directories recursively **Default:** `false` * `verbatimSymlinks` {boolean} When `true`, path resolution for symlinks will be skipped.",
      "position": 22
    },
    {
      "id": "s_4048",
      "type": "sentence",
      "content": "**Default:** `false`",
      "position": 23
    },
    {
      "id": "s_4049",
      "type": "sentence",
      "content": "Synchronously copies the entire directory structure from `src` to `dest`, including subdirectories and files.",
      "position": 24
    },
    {
      "id": "s_4050",
      "type": "sentence",
      "content": "When copying a directory to another directory, globs are not supported and behavior is similar to `cp dir1/ dir2/`.",
      "position": 25
    },
    {
      "id": "w_4051",
      "type": "window",
      "content": "`path` {string|Buffer|URL} Returns: {boolean} Returns `true` if the path exists, `false` otherwise. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.exists()`][]. `fs.exists()` is deprecated, but `fs.existsSync()` is not. The `callback`\nparameter to `fs.exists()` accepts parameters that are inconsistent with other\nNode.js callbacks. `fs.existsSync()` does not use a callback.",
      "position": 0,
      "windowSize": 50
    },
    {
      "id": "sw_4052",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} Returns: {boolean} Returns `true` if the path exists, `false` otherwise. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4053",
      "type": "sentence_window",
      "content": "Returns `true` if the path exists, `false` otherwise. For detailed information, see the documentation of the asynchronous version of this API: [`fs. exists()`][].",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4054",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. exists()`][]. exists()` is deprecated, but `fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4055",
      "type": "sentence_window",
      "content": "exists()`][]. exists()` is deprecated, but `fs. existsSync()` is not.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4056",
      "type": "sentence_window",
      "content": "exists()` is deprecated, but `fs. existsSync()` is not. The `callback` parameter to `fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4057",
      "type": "sentence_window",
      "content": "existsSync()` is not. The `callback` parameter to `fs. exists()` accepts parameters that are inconsistent with other Node.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4058",
      "type": "sentence_window",
      "content": "The `callback` parameter to `fs. exists()` accepts parameters that are inconsistent with other Node. js callbacks.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_4059",
      "type": "sentence_window",
      "content": "exists()` accepts parameters that are inconsistent with other Node. js callbacks. existsSync()` does not use a callback.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_4060",
      "type": "sentence_window",
      "content": "js callbacks. existsSync()` does not use a callback.",
      "position": 8,
      "sentenceCount": 2
    },
    {
      "id": "sc_4061",
      "type": "sentence_context",
      "content": "[`fs.existsSync(path)`] `path` {string|Buffer|URL} Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_4062",
      "type": "sentence_context",
      "content": "[`fs.existsSync(path)`] [Previous: `path` {string|Buffer|URL} Returns: {boolean}...] Returns `true` if the path exists, `false` otherwise.",
      "position": 1
    },
    {
      "id": "sc_4063",
      "type": "sentence_context",
      "content": "[`fs.existsSync(path)`] [Previous: Returns `true` if the path exists, `false` otherwi...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "sc_4064",
      "type": "sentence_context",
      "content": "[`fs.existsSync(path)`] [Previous: For detailed information, see the documentation of...] exists()`][].",
      "position": 3
    },
    {
      "id": "sc_4065",
      "type": "sentence_context",
      "content": "[`fs.existsSync(path)`] exists()` is deprecated, but `fs.",
      "position": 4
    },
    {
      "id": "sc_4066",
      "type": "sentence_context",
      "content": "[`fs.existsSync(path)`] [Previous: exists()` is deprecated, but `fs....] existsSync()` is not.",
      "position": 5
    },
    {
      "id": "sc_4067",
      "type": "sentence_context",
      "content": "[`fs.existsSync(path)`] [Previous: existsSync()` is not....] The `callback` parameter to `fs.",
      "position": 6
    },
    {
      "id": "sc_4068",
      "type": "sentence_context",
      "content": "[`fs.existsSync(path)`] [Previous: The `callback` parameter to `fs....] exists()` accepts parameters that are inconsistent with other Node.",
      "position": 7
    },
    {
      "id": "sc_4069",
      "type": "sentence_context",
      "content": "[`fs.existsSync(path)`] [Previous: exists()` accepts parameters that are inconsistent...] js callbacks.",
      "position": 8
    },
    {
      "id": "sc_4070",
      "type": "sentence_context",
      "content": "[`fs.existsSync(path)`] existsSync()` does not use a callback.",
      "position": 9
    },
    {
      "id": "s_4071",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_4072",
      "type": "sentence",
      "content": "Returns `true` if the path exists, `false` otherwise.",
      "position": 1
    },
    {
      "id": "s_4073",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "s_4074",
      "type": "sentence",
      "content": "exists()`][].",
      "position": 3
    },
    {
      "id": "s_4075",
      "type": "sentence",
      "content": "exists()` is deprecated, but `fs.",
      "position": 4
    },
    {
      "id": "s_4076",
      "type": "sentence",
      "content": "existsSync()` is not.",
      "position": 5
    },
    {
      "id": "s_4077",
      "type": "sentence",
      "content": "The `callback` parameter to `fs.",
      "position": 6
    },
    {
      "id": "s_4078",
      "type": "sentence",
      "content": "exists()` accepts parameters that are inconsistent with other Node.",
      "position": 7
    },
    {
      "id": "s_4079",
      "type": "sentence",
      "content": "js callbacks.",
      "position": 8
    },
    {
      "id": "s_4080",
      "type": "sentence",
      "content": "existsSync()` does not use a callback.",
      "position": 9
    },
    {
      "id": "sw_4081",
      "type": "sentence_window",
      "content": "`fd` {integer} `mode` {string|integer} Sets the permissions on the file. Returns `undefined`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4082",
      "type": "sentence_window",
      "content": "Sets the permissions on the file. Returns `undefined`. See the POSIX fchmod(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4083",
      "type": "sentence_window",
      "content": "Returns `undefined`. See the POSIX fchmod(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4084",
      "type": "sentence_context",
      "content": "[`fs.fchmodSync(fd, mode)`] `fd` {integer} `mode` {string|integer}",
      "position": 0
    },
    {
      "id": "sc_4085",
      "type": "sentence_context",
      "content": "[`fs.fchmodSync(fd, mode)`] [Previous: `fd` {integer} `mode` {string|integer}...] Sets the permissions on the file.",
      "position": 1
    },
    {
      "id": "sc_4086",
      "type": "sentence_context",
      "content": "[`fs.fchmodSync(fd, mode)`] [Previous: Sets the permissions on the file....] Returns `undefined`.",
      "position": 2
    },
    {
      "id": "sc_4087",
      "type": "sentence_context",
      "content": "[`fs.fchmodSync(fd, mode)`] See the POSIX fchmod(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_4088",
      "type": "sentence",
      "content": "`fd` {integer} `mode` {string|integer}",
      "position": 0
    },
    {
      "id": "s_4089",
      "type": "sentence",
      "content": "Sets the permissions on the file.",
      "position": 1
    },
    {
      "id": "s_4090",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 2
    },
    {
      "id": "s_4091",
      "type": "sentence",
      "content": "See the POSIX fchmod(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "w_4092",
      "type": "window",
      "content": "`fd` {integer} `uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Sets the owner of the file. Returns `undefined`. See the POSIX fchown(2) documentation for more detail.",
      "position": 0,
      "windowSize": 34
    },
    {
      "id": "sw_4093",
      "type": "sentence_window",
      "content": "`fd` {integer} `uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Sets the owner of the file.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4094",
      "type": "sentence_window",
      "content": "`gid` {integer} The file's new group's group id. Sets the owner of the file. Returns `undefined`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4095",
      "type": "sentence_window",
      "content": "Sets the owner of the file. Returns `undefined`. See the POSIX fchown(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4096",
      "type": "sentence_window",
      "content": "Returns `undefined`. See the POSIX fchown(2) documentation for more detail.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_4097",
      "type": "sentence_context",
      "content": "[`fs.fchownSync(fd, uid, gid)`] `fd` {integer} `uid` {integer} The file's new owner's user id.",
      "position": 0
    },
    {
      "id": "sc_4098",
      "type": "sentence_context",
      "content": "[`fs.fchownSync(fd, uid, gid)`] [Previous: `fd` {integer} `uid` {integer} The file's new owne...] `gid` {integer} The file's new group's group id.",
      "position": 1
    },
    {
      "id": "sc_4099",
      "type": "sentence_context",
      "content": "[`fs.fchownSync(fd, uid, gid)`] [Previous: `gid` {integer} The file's new group's group id....] Sets the owner of the file.",
      "position": 2
    },
    {
      "id": "sc_4100",
      "type": "sentence_context",
      "content": "[`fs.fchownSync(fd, uid, gid)`] [Previous: Sets the owner of the file....] Returns `undefined`.",
      "position": 3
    },
    {
      "id": "sc_4101",
      "type": "sentence_context",
      "content": "[`fs.fchownSync(fd, uid, gid)`] See the POSIX fchown(2) documentation for more detail.",
      "position": 4
    },
    {
      "id": "s_4102",
      "type": "sentence",
      "content": "`fd` {integer} `uid` {integer} The file's new owner's user id.",
      "position": 0
    },
    {
      "id": "s_4103",
      "type": "sentence",
      "content": "`gid` {integer} The file's new group's group id.",
      "position": 1
    },
    {
      "id": "s_4104",
      "type": "sentence",
      "content": "Sets the owner of the file.",
      "position": 2
    },
    {
      "id": "s_4105",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 3
    },
    {
      "id": "s_4106",
      "type": "sentence",
      "content": "See the POSIX fchown(2) documentation for more detail.",
      "position": 4
    },
    {
      "id": "w_4107",
      "type": "window",
      "content": "`fd` {integer} Forces all currently queued I/O operations associated with the file to the\noperating system's synchronized I/O completion state. Refer to the POSIX\nfdatasync(2) documentation for details. Returns `undefined`.",
      "position": 0,
      "windowSize": 28
    },
    {
      "id": "sw_4108",
      "type": "sentence_window",
      "content": "`fd` {integer} Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4109",
      "type": "sentence_window",
      "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state. Refer to the POSIX fdatasync(2) documentation for details. Returns `undefined`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4110",
      "type": "sentence_window",
      "content": "Refer to the POSIX fdatasync(2) documentation for details. Returns `undefined`.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4111",
      "type": "sentence_context",
      "content": "[`fs.fdatasyncSync(fd)`] `fd` {integer}",
      "position": 0
    },
    {
      "id": "sc_4112",
      "type": "sentence_context",
      "content": "[`fs.fdatasyncSync(fd)`] Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
      "position": 1
    },
    {
      "id": "sc_4113",
      "type": "sentence_context",
      "content": "[`fs.fdatasyncSync(fd)`] [Previous: Forces all currently queued I/O operations associa...] Refer to the POSIX fdatasync(2) documentation for details.",
      "position": 2
    },
    {
      "id": "sc_4114",
      "type": "sentence_context",
      "content": "[`fs.fdatasyncSync(fd)`] [Previous: Refer to the POSIX fdatasync(2) documentation for ...] Returns `undefined`.",
      "position": 3
    },
    {
      "id": "s_4115",
      "type": "sentence",
      "content": "`fd` {integer}",
      "position": 0
    },
    {
      "id": "s_4116",
      "type": "sentence",
      "content": "Forces all currently queued I/O operations associated with the file to the operating system's synchronized I/O completion state.",
      "position": 1
    },
    {
      "id": "s_4117",
      "type": "sentence",
      "content": "Refer to the POSIX fdatasync(2) documentation for details.",
      "position": 2
    },
    {
      "id": "s_4118",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 3
    },
    {
      "id": "w_4119",
      "type": "window",
      "content": "`fd` {integer} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`. Returns: {fs.Stats} Retrieves the {fs.Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
      "position": 0,
      "windowSize": 38
    },
    {
      "id": "sw_4120",
      "type": "sentence_window",
      "content": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4121",
      "type": "sentence_window",
      "content": "Stats} object should be `bigint`. **Default:** `false`. Returns: {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4122",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {fs. Retrieves the {fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4123",
      "type": "sentence_window",
      "content": "Returns: {fs. Retrieves the {fs. Stats} for the file descriptor.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4124",
      "type": "sentence_window",
      "content": "Retrieves the {fs. Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4125",
      "type": "sentence_window",
      "content": "Stats} for the file descriptor. See the POSIX fstat(2) documentation for more detail.",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_4126",
      "type": "sentence_context",
      "content": "[`fs.fstatSync(fd[, options])`] `fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_4127",
      "type": "sentence_context",
      "content": "[`fs.fstatSync(fd[, options])`] [Previous: `fd` {integer} `options` {Object} * `bigint` {bool...] Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_4128",
      "type": "sentence_context",
      "content": "[`fs.fstatSync(fd[, options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_4129",
      "type": "sentence_context",
      "content": "[`fs.fstatSync(fd[, options])`] [Previous: **Default:** `false`....] Returns: {fs.",
      "position": 3
    },
    {
      "id": "sc_4130",
      "type": "sentence_context",
      "content": "[`fs.fstatSync(fd[, options])`] Retrieves the {fs.",
      "position": 4
    },
    {
      "id": "sc_4131",
      "type": "sentence_context",
      "content": "[`fs.fstatSync(fd[, options])`] Stats} for the file descriptor.",
      "position": 5
    },
    {
      "id": "sc_4132",
      "type": "sentence_context",
      "content": "[`fs.fstatSync(fd[, options])`] [Previous: Stats} for the file descriptor....] See the POSIX fstat(2) documentation for more detail.",
      "position": 6
    },
    {
      "id": "s_4133",
      "type": "sentence",
      "content": "`fd` {integer} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_4134",
      "type": "sentence",
      "content": "Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_4135",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_4136",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 3
    },
    {
      "id": "s_4137",
      "type": "sentence",
      "content": "Retrieves the {fs.",
      "position": 4
    },
    {
      "id": "s_4138",
      "type": "sentence",
      "content": "Stats} for the file descriptor.",
      "position": 5
    },
    {
      "id": "s_4139",
      "type": "sentence",
      "content": "See the POSIX fstat(2) documentation for more detail.",
      "position": 6
    },
    {
      "id": "w_4140",
      "type": "window",
      "content": "`fd` {integer} Request that all data for the open file descriptor is flushed to the storage\ndevice. The specific implementation is operating system and device specific.\nRefer to the POSIX fsync(2) documentation for more detail. Returns `undefined`.",
      "position": 0,
      "windowSize": 35
    },
    {
      "id": "sw_4141",
      "type": "sentence_window",
      "content": "`fd` {integer} Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4142",
      "type": "sentence_window",
      "content": "Request that all data for the open file descriptor is flushed to the storage device. The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4143",
      "type": "sentence_window",
      "content": "The specific implementation is operating system and device specific. Refer to the POSIX fsync(2) documentation for more detail. Returns `undefined`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4144",
      "type": "sentence_window",
      "content": "Refer to the POSIX fsync(2) documentation for more detail. Returns `undefined`.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_4145",
      "type": "sentence_context",
      "content": "[`fs.fsyncSync(fd)`] `fd` {integer}",
      "position": 0
    },
    {
      "id": "sc_4146",
      "type": "sentence_context",
      "content": "[`fs.fsyncSync(fd)`] Request that all data for the open file descriptor is flushed to the storage device.",
      "position": 1
    },
    {
      "id": "sc_4147",
      "type": "sentence_context",
      "content": "[`fs.fsyncSync(fd)`] [Previous: Request that all data for the open file descriptor...] The specific implementation is operating system and device specific.",
      "position": 2
    },
    {
      "id": "sc_4148",
      "type": "sentence_context",
      "content": "[`fs.fsyncSync(fd)`] [Previous: The specific implementation is operating system an...] Refer to the POSIX fsync(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "sc_4149",
      "type": "sentence_context",
      "content": "[`fs.fsyncSync(fd)`] [Previous: Refer to the POSIX fsync(2) documentation for more...] Returns `undefined`.",
      "position": 4
    },
    {
      "id": "s_4150",
      "type": "sentence",
      "content": "`fd` {integer}",
      "position": 0
    },
    {
      "id": "s_4151",
      "type": "sentence",
      "content": "Request that all data for the open file descriptor is flushed to the storage device.",
      "position": 1
    },
    {
      "id": "s_4152",
      "type": "sentence",
      "content": "The specific implementation is operating system and device specific.",
      "position": 2
    },
    {
      "id": "s_4153",
      "type": "sentence",
      "content": "Refer to the POSIX fsync(2) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_4154",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 4
    },
    {
      "id": "w_4155",
      "type": "window",
      "content": "`fd` {integer} `len` {integer} **Default:** `0` Truncates the file descriptor. Returns `undefined`. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.ftruncate()`][].",
      "position": 0,
      "windowSize": 25
    },
    {
      "id": "sw_4156",
      "type": "sentence_window",
      "content": "`fd` {integer} `len` {integer} **Default:** `0` Truncates the file descriptor. Returns `undefined`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4157",
      "type": "sentence_window",
      "content": "Truncates the file descriptor. Returns `undefined`. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4158",
      "type": "sentence_window",
      "content": "Returns `undefined`. For detailed information, see the documentation of the asynchronous version of this API: [`fs. ftruncate()`][].",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4159",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. ftruncate()`][].",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_4160",
      "type": "sentence_context",
      "content": "[`fs.ftruncateSync(fd[, len])`] `fd` {integer} `len` {integer} **Default:** `0`",
      "position": 0
    },
    {
      "id": "sc_4161",
      "type": "sentence_context",
      "content": "[`fs.ftruncateSync(fd[, len])`] [Previous: `fd` {integer} `len` {integer} **Default:** `0`...] Truncates the file descriptor.",
      "position": 1
    },
    {
      "id": "sc_4162",
      "type": "sentence_context",
      "content": "[`fs.ftruncateSync(fd[, len])`] [Previous: Truncates the file descriptor....] Returns `undefined`.",
      "position": 2
    },
    {
      "id": "sc_4163",
      "type": "sentence_context",
      "content": "[`fs.ftruncateSync(fd[, len])`] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 3
    },
    {
      "id": "sc_4164",
      "type": "sentence_context",
      "content": "[`fs.ftruncateSync(fd[, len])`] [Previous: For detailed information, see the documentation of...] ftruncate()`][].",
      "position": 4
    },
    {
      "id": "s_4165",
      "type": "sentence",
      "content": "`fd` {integer} `len` {integer} **Default:** `0`",
      "position": 0
    },
    {
      "id": "s_4166",
      "type": "sentence",
      "content": "Truncates the file descriptor.",
      "position": 1
    },
    {
      "id": "s_4167",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 2
    },
    {
      "id": "s_4168",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 3
    },
    {
      "id": "s_4169",
      "type": "sentence",
      "content": "ftruncate()`][].",
      "position": 4
    },
    {
      "id": "sw_4170",
      "type": "sentence_window",
      "content": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date} Synchronous version of [`fs. futimes()`][].",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4171",
      "type": "sentence_window",
      "content": "Synchronous version of [`fs. futimes()`][]. Returns `undefined`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4172",
      "type": "sentence_window",
      "content": "futimes()`][]. Returns `undefined`.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4173",
      "type": "sentence_context",
      "content": "[`fs.futimesSync(fd, atime, mtime)`] `fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date}",
      "position": 0
    },
    {
      "id": "sc_4174",
      "type": "sentence_context",
      "content": "[`fs.futimesSync(fd, atime, mtime)`] [Previous: `fd` {integer} `atime` {number|string|Date} `mtime...] Synchronous version of [`fs.",
      "position": 1
    },
    {
      "id": "sc_4175",
      "type": "sentence_context",
      "content": "[`fs.futimesSync(fd, atime, mtime)`] [Previous: Synchronous version of [`fs....] futimes()`][].",
      "position": 2
    },
    {
      "id": "sc_4176",
      "type": "sentence_context",
      "content": "[`fs.futimesSync(fd, atime, mtime)`] Returns `undefined`.",
      "position": 3
    },
    {
      "id": "s_4177",
      "type": "sentence",
      "content": "`fd` {integer} `atime` {number|string|Date} `mtime` {number|string|Date}",
      "position": 0
    },
    {
      "id": "s_4178",
      "type": "sentence",
      "content": "Synchronous version of [`fs.",
      "position": 1
    },
    {
      "id": "s_4179",
      "type": "sentence",
      "content": "futimes()`][].",
      "position": 2
    },
    {
      "id": "s_4180",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 3
    },
    {
      "id": "w_4181",
      "type": "window",
      "content": "`pattern` {string|string\\[]} `options` {Object}\n* `cwd` {string|URL} current working directory. **Default:** `process.cwd()`\n* `exclude` {Function|string\\[]} Function to filter out files/directories or a\n  list of glob patterns to be excluded. If a function is provided, return\n  `true` to exclude the item, `false` to include it. **Default:** `undefined`.\n* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents,\n  `false` otherwise. **Default:** `false`. Returns: {string\\[]} paths of files that match the pattern.",
      "position": 0,
      "windowSize": 71
    },
    {
      "id": "sw_4182",
      "type": "sentence_window",
      "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory. **Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4183",
      "type": "sentence_window",
      "content": "**Default:** `process. cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4184",
      "type": "sentence_window",
      "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded. If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4185",
      "type": "sentence_window",
      "content": "If a function is provided, return `true` to exclude the item, `false` to include it. **Default:** `undefined`. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4186",
      "type": "sentence_window",
      "content": "**Default:** `undefined`. * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4187",
      "type": "sentence_window",
      "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise. **Default:** `false`. Returns: {string\\[]} paths of files that match the pattern.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4188",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {string\\[]} paths of files that match the pattern.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_4189",
      "type": "sentence_context",
      "content": "[`fs.globSync(pattern[, options])`] `pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
      "position": 0
    },
    {
      "id": "sc_4190",
      "type": "sentence_context",
      "content": "[`fs.globSync(pattern[, options])`] [Previous: `pattern` {string|string\\[]} `options` {Object} * ...] **Default:** `process.",
      "position": 1
    },
    {
      "id": "sc_4191",
      "type": "sentence_context",
      "content": "[`fs.globSync(pattern[, options])`] [Previous: **Default:** `process....] cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
      "position": 2
    },
    {
      "id": "sc_4192",
      "type": "sentence_context",
      "content": "[`fs.globSync(pattern[, options])`] [Previous: cwd()` * `exclude` {Function|string\\[]} Function t...] If a function is provided, return `true` to exclude the item, `false` to include it.",
      "position": 3
    },
    {
      "id": "sc_4193",
      "type": "sentence_context",
      "content": "[`fs.globSync(pattern[, options])`] [Previous: If a function is provided, return `true` to exclud...] **Default:** `undefined`.",
      "position": 4
    },
    {
      "id": "sc_4194",
      "type": "sentence_context",
      "content": "[`fs.globSync(pattern[, options])`] [Previous: **Default:** `undefined`....] * `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
      "position": 5
    },
    {
      "id": "sc_4195",
      "type": "sentence_context",
      "content": "[`fs.globSync(pattern[, options])`] [Previous: * `withFileTypes` {boolean} `true` if the glob sho...] **Default:** `false`.",
      "position": 6
    },
    {
      "id": "sc_4196",
      "type": "sentence_context",
      "content": "[`fs.globSync(pattern[, options])`] [Previous: **Default:** `false`....] Returns: {string\\[]} paths of files that match the pattern.",
      "position": 7
    },
    {
      "id": "s_4197",
      "type": "sentence",
      "content": "`pattern` {string|string\\[]} `options` {Object} * `cwd` {string|URL} current working directory.",
      "position": 0
    },
    {
      "id": "s_4198",
      "type": "sentence",
      "content": "**Default:** `process.",
      "position": 1
    },
    {
      "id": "s_4199",
      "type": "sentence",
      "content": "cwd()` * `exclude` {Function|string\\[]} Function to filter out files/directories or a list of glob patterns to be excluded.",
      "position": 2
    },
    {
      "id": "s_4200",
      "type": "sentence",
      "content": "If a function is provided, return `true` to exclude the item, `false` to include it.",
      "position": 3
    },
    {
      "id": "s_4201",
      "type": "sentence",
      "content": "**Default:** `undefined`.",
      "position": 4
    },
    {
      "id": "s_4202",
      "type": "sentence",
      "content": "* `withFileTypes` {boolean} `true` if the glob should return paths as Dirents, `false` otherwise.",
      "position": 5
    },
    {
      "id": "s_4203",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 6
    },
    {
      "id": "s_4204",
      "type": "sentence",
      "content": "Returns: {string\\[]} paths of files that match the pattern.",
      "position": 7
    },
    {
      "id": "w_4205",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} Changes the permissions on a symbolic link. Returns `undefined`. This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
      "position": 0,
      "windowSize": 28
    },
    {
      "id": "sw_4206",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `mode` {integer} Changes the permissions on a symbolic link. Returns `undefined`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4207",
      "type": "sentence_window",
      "content": "Changes the permissions on a symbolic link. Returns `undefined`. This method is only implemented on macOS.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4208",
      "type": "sentence_window",
      "content": "Returns `undefined`. This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4209",
      "type": "sentence_window",
      "content": "This method is only implemented on macOS. See the POSIX lchmod(2) documentation for more detail.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_4210",
      "type": "sentence_context",
      "content": "[`fs.lchmodSync(path, mode)`] `path` {string|Buffer|URL} `mode` {integer}",
      "position": 0
    },
    {
      "id": "sc_4211",
      "type": "sentence_context",
      "content": "[`fs.lchmodSync(path, mode)`] [Previous: `path` {string|Buffer|URL} `mode` {integer}...] Changes the permissions on a symbolic link.",
      "position": 1
    },
    {
      "id": "sc_4212",
      "type": "sentence_context",
      "content": "[`fs.lchmodSync(path, mode)`] [Previous: Changes the permissions on a symbolic link....] Returns `undefined`.",
      "position": 2
    },
    {
      "id": "sc_4213",
      "type": "sentence_context",
      "content": "[`fs.lchmodSync(path, mode)`] This method is only implemented on macOS.",
      "position": 3
    },
    {
      "id": "sc_4214",
      "type": "sentence_context",
      "content": "[`fs.lchmodSync(path, mode)`] [Previous: This method is only implemented on macOS....] See the POSIX lchmod(2) documentation for more detail.",
      "position": 4
    },
    {
      "id": "s_4215",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `mode` {integer}",
      "position": 0
    },
    {
      "id": "s_4216",
      "type": "sentence",
      "content": "Changes the permissions on a symbolic link.",
      "position": 1
    },
    {
      "id": "s_4217",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 2
    },
    {
      "id": "s_4218",
      "type": "sentence",
      "content": "This method is only implemented on macOS.",
      "position": 3
    },
    {
      "id": "s_4219",
      "type": "sentence",
      "content": "See the POSIX lchmod(2) documentation for more detail.",
      "position": 4
    },
    {
      "id": "w_4220",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Set the owner for the path. Returns `undefined`. See the POSIX lchown(2) documentation for more details.",
      "position": 0,
      "windowSize": 34
    },
    {
      "id": "sw_4221",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `uid` {integer} The file's new owner's user id. `gid` {integer} The file's new group's group id. Set the owner for the path.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4222",
      "type": "sentence_window",
      "content": "`gid` {integer} The file's new group's group id. Set the owner for the path. Returns `undefined`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4223",
      "type": "sentence_window",
      "content": "Set the owner for the path. Returns `undefined`. See the POSIX lchown(2) documentation for more details.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4224",
      "type": "sentence_window",
      "content": "Returns `undefined`. See the POSIX lchown(2) documentation for more details.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_4225",
      "type": "sentence_context",
      "content": "[`fs.lchownSync(path, uid, gid)`] `path` {string|Buffer|URL} `uid` {integer} The file's new owner's user id.",
      "position": 0
    },
    {
      "id": "sc_4226",
      "type": "sentence_context",
      "content": "[`fs.lchownSync(path, uid, gid)`] [Previous: `path` {string|Buffer|URL} `uid` {integer} The fil...] `gid` {integer} The file's new group's group id.",
      "position": 1
    },
    {
      "id": "sc_4227",
      "type": "sentence_context",
      "content": "[`fs.lchownSync(path, uid, gid)`] [Previous: `gid` {integer} The file's new group's group id....] Set the owner for the path.",
      "position": 2
    },
    {
      "id": "sc_4228",
      "type": "sentence_context",
      "content": "[`fs.lchownSync(path, uid, gid)`] [Previous: Set the owner for the path....] Returns `undefined`.",
      "position": 3
    },
    {
      "id": "sc_4229",
      "type": "sentence_context",
      "content": "[`fs.lchownSync(path, uid, gid)`] See the POSIX lchown(2) documentation for more details.",
      "position": 4
    },
    {
      "id": "s_4230",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `uid` {integer} The file's new owner's user id.",
      "position": 0
    },
    {
      "id": "s_4231",
      "type": "sentence",
      "content": "`gid` {integer} The file's new group's group id.",
      "position": 1
    },
    {
      "id": "s_4232",
      "type": "sentence",
      "content": "Set the owner for the path.",
      "position": 2
    },
    {
      "id": "s_4233",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 3
    },
    {
      "id": "s_4234",
      "type": "sentence",
      "content": "See the POSIX lchown(2) documentation for more details.",
      "position": 4
    },
    {
      "id": "w_4235",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Change the file system timestamps of the symbolic link referenced by `path`.\nReturns `undefined`, or throws an exception when parameters are incorrect or\nthe operation fails. This is the synchronous version of [`fs.lutimes()`][].",
      "position": 0,
      "windowSize": 37
    },
    {
      "id": "sw_4236",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Change the file system timestamps of the symbolic link referenced by `path`. Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4237",
      "type": "sentence_window",
      "content": "Change the file system timestamps of the symbolic link referenced by `path`. Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails. This is the synchronous version of [`fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4238",
      "type": "sentence_window",
      "content": "Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails. This is the synchronous version of [`fs. lutimes()`][].",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4239",
      "type": "sentence_window",
      "content": "This is the synchronous version of [`fs. lutimes()`][].",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_4240",
      "type": "sentence_context",
      "content": "[`fs.lutimesSync(path, atime, mtime)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date}",
      "position": 0
    },
    {
      "id": "sc_4241",
      "type": "sentence_context",
      "content": "[`fs.lutimesSync(path, atime, mtime)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] Change the file system timestamps of the symbolic link referenced by `path`.",
      "position": 1
    },
    {
      "id": "sc_4242",
      "type": "sentence_context",
      "content": "[`fs.lutimesSync(path, atime, mtime)`] [Previous: Change the file system timestamps of the symbolic ...] Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails.",
      "position": 2
    },
    {
      "id": "sc_4243",
      "type": "sentence_context",
      "content": "[`fs.lutimesSync(path, atime, mtime)`] [Previous: Returns `undefined`, or throws an exception when p...] This is the synchronous version of [`fs.",
      "position": 3
    },
    {
      "id": "sc_4244",
      "type": "sentence_context",
      "content": "[`fs.lutimesSync(path, atime, mtime)`] [Previous: This is the synchronous version of [`fs....] lutimes()`][].",
      "position": 4
    },
    {
      "id": "s_4245",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date}",
      "position": 0
    },
    {
      "id": "s_4246",
      "type": "sentence",
      "content": "Change the file system timestamps of the symbolic link referenced by `path`.",
      "position": 1
    },
    {
      "id": "s_4247",
      "type": "sentence",
      "content": "Returns `undefined`, or throws an exception when parameters are incorrect or the operation fails.",
      "position": 2
    },
    {
      "id": "s_4248",
      "type": "sentence",
      "content": "This is the synchronous version of [`fs.",
      "position": 3
    },
    {
      "id": "s_4249",
      "type": "sentence",
      "content": "lutimes()`][].",
      "position": 4
    },
    {
      "id": "w_4250",
      "type": "window",
      "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Creates a new link from the `existingPath` to the `newPath`. See the POSIX\nlink(2) documentation for more detail. Returns `undefined`.",
      "position": 0,
      "windowSize": 23
    },
    {
      "id": "sw_4251",
      "type": "sentence_window",
      "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4252",
      "type": "sentence_window",
      "content": "Creates a new link from the `existingPath` to the `newPath`. See the POSIX link(2) documentation for more detail. Returns `undefined`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4253",
      "type": "sentence_window",
      "content": "See the POSIX link(2) documentation for more detail. Returns `undefined`.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4254",
      "type": "sentence_context",
      "content": "[`fs.linkSync(existingPath, newPath)`] `existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}",
      "position": 0
    },
    {
      "id": "sc_4255",
      "type": "sentence_context",
      "content": "[`fs.linkSync(existingPath, newPath)`] [Previous: `existingPath` {string|Buffer|URL} `newPath` {stri...] Creates a new link from the `existingPath` to the `newPath`.",
      "position": 1
    },
    {
      "id": "sc_4256",
      "type": "sentence_context",
      "content": "[`fs.linkSync(existingPath, newPath)`] [Previous: Creates a new link from the `existingPath` to the ...] See the POSIX link(2) documentation for more detail.",
      "position": 2
    },
    {
      "id": "sc_4257",
      "type": "sentence_context",
      "content": "[`fs.linkSync(existingPath, newPath)`] [Previous: See the POSIX link(2) documentation for more detai...] Returns `undefined`.",
      "position": 3
    },
    {
      "id": "s_4258",
      "type": "sentence",
      "content": "`existingPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}",
      "position": 0
    },
    {
      "id": "s_4259",
      "type": "sentence",
      "content": "Creates a new link from the `existingPath` to the `newPath`.",
      "position": 1
    },
    {
      "id": "s_4260",
      "type": "sentence",
      "content": "See the POSIX link(2) documentation for more detail.",
      "position": 2
    },
    {
      "id": "s_4261",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 3
    },
    {
      "id": "w_4262",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`.\n* `throwIfNoEntry` {boolean} Whether an exception will be thrown\n  if no file system entry exists, rather than returning `undefined`.\n  **Default:** `true`. Returns: {fs.Stats} Retrieves the {fs.Stats} for the symbolic link referred to by `path`. See the POSIX lstat(2) documentation for more details.",
      "position": 0,
      "windowSize": 64
    },
    {
      "id": "sw_4263",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4264",
      "type": "sentence_window",
      "content": "Stats} object should be `bigint`. **Default:** `false`. * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4265",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`. **Default:** `true`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4266",
      "type": "sentence_window",
      "content": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`. **Default:** `true`. Returns: {fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4267",
      "type": "sentence_window",
      "content": "**Default:** `true`. Returns: {fs. Retrieves the {fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4268",
      "type": "sentence_window",
      "content": "Returns: {fs. Retrieves the {fs. Stats} for the symbolic link referred to by `path`.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4269",
      "type": "sentence_window",
      "content": "Retrieves the {fs. Stats} for the symbolic link referred to by `path`. See the POSIX lstat(2) documentation for more details.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_4270",
      "type": "sentence_window",
      "content": "Stats} for the symbolic link referred to by `path`. See the POSIX lstat(2) documentation for more details.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_4271",
      "type": "sentence_context",
      "content": "[`fs.lstatSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_4272",
      "type": "sentence_context",
      "content": "[`fs.lstatSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_4273",
      "type": "sentence_context",
      "content": "[`fs.lstatSync(path[, options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_4274",
      "type": "sentence_context",
      "content": "[`fs.lstatSync(path[, options])`] [Previous: **Default:** `false`....] * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
      "position": 3
    },
    {
      "id": "sc_4275",
      "type": "sentence_context",
      "content": "[`fs.lstatSync(path[, options])`] [Previous: * `throwIfNoEntry` {boolean} Whether an exception ...] **Default:** `true`.",
      "position": 4
    },
    {
      "id": "sc_4276",
      "type": "sentence_context",
      "content": "[`fs.lstatSync(path[, options])`] Returns: {fs.",
      "position": 5
    },
    {
      "id": "sc_4277",
      "type": "sentence_context",
      "content": "[`fs.lstatSync(path[, options])`] Retrieves the {fs.",
      "position": 6
    },
    {
      "id": "sc_4278",
      "type": "sentence_context",
      "content": "[`fs.lstatSync(path[, options])`] Stats} for the symbolic link referred to by `path`.",
      "position": 7
    },
    {
      "id": "sc_4279",
      "type": "sentence_context",
      "content": "[`fs.lstatSync(path[, options])`] [Previous: Stats} for the symbolic link referred to by `path`...] See the POSIX lstat(2) documentation for more details.",
      "position": 8
    },
    {
      "id": "s_4280",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_4281",
      "type": "sentence",
      "content": "Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_4282",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_4283",
      "type": "sentence",
      "content": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
      "position": 3
    },
    {
      "id": "s_4284",
      "type": "sentence",
      "content": "**Default:** `true`.",
      "position": 4
    },
    {
      "id": "s_4285",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 5
    },
    {
      "id": "s_4286",
      "type": "sentence",
      "content": "Retrieves the {fs.",
      "position": 6
    },
    {
      "id": "s_4287",
      "type": "sentence",
      "content": "Stats} for the symbolic link referred to by `path`.",
      "position": 7
    },
    {
      "id": "s_4288",
      "type": "sentence",
      "content": "See the POSIX lstat(2) documentation for more details.",
      "position": 8
    },
    {
      "id": "w_4289",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object|integer}\n* `recursive` {boolean} **Default:** `false`\n* `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. Returns: {string|undefined} Synchronously creates a directory. Returns `undefined`, or if `recursive` is\n`true`, the first directory path created.\nThis is the synchronous version of [`fs.mkdir()`][]. See the POSIX mkdir(2) documentation for more details.",
      "position": 0,
      "windowSize": 47
    },
    {
      "id": "sw_4290",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows. **Default:** `0o777`. Returns: {string|undefined}",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4291",
      "type": "sentence_window",
      "content": "**Default:** `0o777`. Returns: {string|undefined} Synchronously creates a directory.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4292",
      "type": "sentence_window",
      "content": "Returns: {string|undefined} Synchronously creates a directory. Returns `undefined`, or if `recursive` is `true`, the first directory path created.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4293",
      "type": "sentence_window",
      "content": "Synchronously creates a directory. Returns `undefined`, or if `recursive` is `true`, the first directory path created. This is the synchronous version of [`fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4294",
      "type": "sentence_window",
      "content": "Returns `undefined`, or if `recursive` is `true`, the first directory path created. This is the synchronous version of [`fs. mkdir()`][].",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4295",
      "type": "sentence_window",
      "content": "This is the synchronous version of [`fs. mkdir()`][]. See the POSIX mkdir(2) documentation for more details.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4296",
      "type": "sentence_window",
      "content": "mkdir()`][]. See the POSIX mkdir(2) documentation for more details.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_4297",
      "type": "sentence_context",
      "content": "[`fs.mkdirSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
      "position": 0
    },
    {
      "id": "sc_4298",
      "type": "sentence_context",
      "content": "[`fs.mkdirSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object|integ...] **Default:** `0o777`.",
      "position": 1
    },
    {
      "id": "sc_4299",
      "type": "sentence_context",
      "content": "[`fs.mkdirSync(path[, options])`] [Previous: **Default:** `0o777`....] Returns: {string|undefined}",
      "position": 2
    },
    {
      "id": "sc_4300",
      "type": "sentence_context",
      "content": "[`fs.mkdirSync(path[, options])`] [Previous: Returns: {string|undefined}...] Synchronously creates a directory.",
      "position": 3
    },
    {
      "id": "sc_4301",
      "type": "sentence_context",
      "content": "[`fs.mkdirSync(path[, options])`] [Previous: Synchronously creates a directory....] Returns `undefined`, or if `recursive` is `true`, the first directory path created.",
      "position": 4
    },
    {
      "id": "sc_4302",
      "type": "sentence_context",
      "content": "[`fs.mkdirSync(path[, options])`] [Previous: Returns `undefined`, or if `recursive` is `true`, ...] This is the synchronous version of [`fs.",
      "position": 5
    },
    {
      "id": "sc_4303",
      "type": "sentence_context",
      "content": "[`fs.mkdirSync(path[, options])`] [Previous: This is the synchronous version of [`fs....] mkdir()`][].",
      "position": 6
    },
    {
      "id": "sc_4304",
      "type": "sentence_context",
      "content": "[`fs.mkdirSync(path[, options])`] See the POSIX mkdir(2) documentation for more details.",
      "position": 7
    },
    {
      "id": "s_4305",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object|integer} * `recursive` {boolean} **Default:** `false` * `mode` {string|integer} Not supported on Windows.",
      "position": 0
    },
    {
      "id": "s_4306",
      "type": "sentence",
      "content": "**Default:** `0o777`.",
      "position": 1
    },
    {
      "id": "s_4307",
      "type": "sentence",
      "content": "Returns: {string|undefined}",
      "position": 2
    },
    {
      "id": "s_4308",
      "type": "sentence",
      "content": "Synchronously creates a directory.",
      "position": 3
    },
    {
      "id": "s_4309",
      "type": "sentence",
      "content": "Returns `undefined`, or if `recursive` is `true`, the first directory path created.",
      "position": 4
    },
    {
      "id": "s_4310",
      "type": "sentence",
      "content": "This is the synchronous version of [`fs.",
      "position": 5
    },
    {
      "id": "s_4311",
      "type": "sentence",
      "content": "mkdir()`][].",
      "position": 6
    },
    {
      "id": "s_4312",
      "type": "sentence",
      "content": "See the POSIX mkdir(2) documentation for more details.",
      "position": 7
    },
    {
      "id": "w_4313",
      "type": "window",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {string} Returns the created directory path. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use.",
      "position": 0,
      "windowSize": 51
    },
    {
      "id": "sw_4314",
      "type": "sentence_window",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string} Returns the created directory path. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4315",
      "type": "sentence_window",
      "content": "Returns the created directory path. For detailed information, see the documentation of the asynchronous version of this API: [`fs. mkdtemp()`][].",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4316",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4317",
      "type": "sentence_window",
      "content": "mkdtemp()`][]. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_4318",
      "type": "sentence_context",
      "content": "[`fs.mkdtempSync(prefix[, options])`] `prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string}",
      "position": 0
    },
    {
      "id": "sc_4319",
      "type": "sentence_context",
      "content": "[`fs.mkdtempSync(prefix[, options])`] [Previous: `prefix` {string|Buffer|URL} `options` {string|Obj...] Returns the created directory path.",
      "position": 1
    },
    {
      "id": "sc_4320",
      "type": "sentence_context",
      "content": "[`fs.mkdtempSync(prefix[, options])`] [Previous: Returns the created directory path....] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "sc_4321",
      "type": "sentence_context",
      "content": "[`fs.mkdtempSync(prefix[, options])`] [Previous: For detailed information, see the documentation of...] mkdtemp()`][].",
      "position": 3
    },
    {
      "id": "sc_4322",
      "type": "sentence_context",
      "content": "[`fs.mkdtempSync(prefix[, options])`] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 4
    },
    {
      "id": "s_4323",
      "type": "sentence",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string}",
      "position": 0
    },
    {
      "id": "s_4324",
      "type": "sentence",
      "content": "Returns the created directory path.",
      "position": 1
    },
    {
      "id": "s_4325",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "s_4326",
      "type": "sentence",
      "content": "mkdtemp()`][].",
      "position": 3
    },
    {
      "id": "s_4327",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 4
    },
    {
      "id": "w_4328",
      "type": "window",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {Object} A disposable object:\n* `path` {string} The path of the created directory.\n* `remove` {Function} A function which removes the created directory.\n* `[Symbol.dispose]` {Function} The same as `remove`. Returns a disposable object whose `path` property holds the created directory\npath. When the object is disposed, the directory and its contents will be\nremoved if it still exists. If the directory cannot be deleted, disposal will\nthrow an error. The object has a `remove()` method which will perform the same\ntask. For detailed information, see the documentation of [`fs.mkdtemp()`][]. There is no callback-based version of this API because it is designed for use\nwith the `using` syntax. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use.",
      "position": 0,
      "windowSize": 132
    },
    {
      "id": "sw_4329",
      "type": "sentence_window",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Object} A disposable object: * `path` {string} The path of the created directory. * `remove` {Function} A function which removes the created directory. * `[Symbol.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4330",
      "type": "sentence_window",
      "content": "* `remove` {Function} A function which removes the created directory. * `[Symbol. dispose]` {Function} The same as `remove`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4331",
      "type": "sentence_window",
      "content": "* `[Symbol. dispose]` {Function} The same as `remove`. Returns a disposable object whose `path` property holds the created directory path.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4332",
      "type": "sentence_window",
      "content": "dispose]` {Function} The same as `remove`. Returns a disposable object whose `path` property holds the created directory path. When the object is disposed, the directory and its contents will be removed if it still exists.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4333",
      "type": "sentence_window",
      "content": "Returns a disposable object whose `path` property holds the created directory path. When the object is disposed, the directory and its contents will be removed if it still exists. If the directory cannot be deleted, disposal will throw an error.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4334",
      "type": "sentence_window",
      "content": "When the object is disposed, the directory and its contents will be removed if it still exists. If the directory cannot be deleted, disposal will throw an error. The object has a `remove()` method which will perform the same task.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4335",
      "type": "sentence_window",
      "content": "If the directory cannot be deleted, disposal will throw an error. The object has a `remove()` method which will perform the same task. For detailed information, see the documentation of [`fs.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_4336",
      "type": "sentence_window",
      "content": "The object has a `remove()` method which will perform the same task. For detailed information, see the documentation of [`fs. mkdtemp()`][].",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_4337",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of [`fs. mkdtemp()`][]. There is no callback-based version of this API because it is designed for use with the `using` syntax.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_4338",
      "type": "sentence_window",
      "content": "mkdtemp()`][]. There is no callback-based version of this API because it is designed for use with the `using` syntax. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_4339",
      "type": "sentence_window",
      "content": "There is no callback-based version of this API because it is designed for use with the `using` syntax. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 10,
      "sentenceCount": 2
    },
    {
      "id": "sc_4340",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] `prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Object} A disposable object: * `path` {string} The path of the created directory.",
      "position": 0
    },
    {
      "id": "sc_4341",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: `prefix` {string|Buffer|URL} `options` {string|Obj...] * `remove` {Function} A function which removes the created directory.",
      "position": 1
    },
    {
      "id": "sc_4342",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: * `remove` {Function} A function which removes the...] * `[Symbol.",
      "position": 2
    },
    {
      "id": "sc_4343",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] dispose]` {Function} The same as `remove`.",
      "position": 3
    },
    {
      "id": "sc_4344",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: dispose]` {Function} The same as `remove`....] Returns a disposable object whose `path` property holds the created directory path.",
      "position": 4
    },
    {
      "id": "sc_4345",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: Returns a disposable object whose `path` property ...] When the object is disposed, the directory and its contents will be removed if it still exists.",
      "position": 5
    },
    {
      "id": "sc_4346",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: When the object is disposed, the directory and its...] If the directory cannot be deleted, disposal will throw an error.",
      "position": 6
    },
    {
      "id": "sc_4347",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: If the directory cannot be deleted, disposal will ...] The object has a `remove()` method which will perform the same task.",
      "position": 7
    },
    {
      "id": "sc_4348",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: The object has a `remove()` method which will perf...] For detailed information, see the documentation of [`fs.",
      "position": 8
    },
    {
      "id": "sc_4349",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: For detailed information, see the documentation of...] mkdtemp()`][].",
      "position": 9
    },
    {
      "id": "sc_4350",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] There is no callback-based version of this API because it is designed for use with the `using` syntax.",
      "position": 10
    },
    {
      "id": "sc_4351",
      "type": "sentence_context",
      "content": "[`fs.mkdtempDisposableSync(prefix[, options])`] [Previous: There is no callback-based version of this API bec...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 11
    },
    {
      "id": "s_4352",
      "type": "sentence",
      "content": "`prefix` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {Object} A disposable object: * `path` {string} The path of the created directory.",
      "position": 0
    },
    {
      "id": "s_4353",
      "type": "sentence",
      "content": "* `remove` {Function} A function which removes the created directory.",
      "position": 1
    },
    {
      "id": "s_4354",
      "type": "sentence",
      "content": "* `[Symbol.",
      "position": 2
    },
    {
      "id": "s_4355",
      "type": "sentence",
      "content": "dispose]` {Function} The same as `remove`.",
      "position": 3
    },
    {
      "id": "s_4356",
      "type": "sentence",
      "content": "Returns a disposable object whose `path` property holds the created directory path.",
      "position": 4
    },
    {
      "id": "s_4357",
      "type": "sentence",
      "content": "When the object is disposed, the directory and its contents will be removed if it still exists.",
      "position": 5
    },
    {
      "id": "s_4358",
      "type": "sentence",
      "content": "If the directory cannot be deleted, disposal will throw an error.",
      "position": 6
    },
    {
      "id": "s_4359",
      "type": "sentence",
      "content": "The object has a `remove()` method which will perform the same task.",
      "position": 7
    },
    {
      "id": "s_4360",
      "type": "sentence",
      "content": "For detailed information, see the documentation of [`fs.",
      "position": 8
    },
    {
      "id": "s_4361",
      "type": "sentence",
      "content": "mkdtemp()`][].",
      "position": 9
    },
    {
      "id": "s_4362",
      "type": "sentence",
      "content": "There is no callback-based version of this API because it is designed for use with the `using` syntax.",
      "position": 10
    },
    {
      "id": "s_4363",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use.",
      "position": 11
    },
    {
      "id": "w_4364",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `bufferSize` {number} Number of directory entries that are buffered\n  internally when reading from the directory. Higher values lead to better\n  performance but higher memory usage. **Default:** `32`\n* `recursive` {boolean} **Default:** `false` Returns: {fs.Dir} Synchronously open a directory. See opendir(3). Creates an {fs.Dir}, which contains all further functions for reading from\nand cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the\ndirectory and subsequent read operations.",
      "position": 0,
      "windowSize": 80
    },
    {
      "id": "sw_4365",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory. Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} **Default:** `false` Returns:",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4366",
      "type": "sentence_window",
      "content": "Higher values lead to better performance but higher memory usage. **Default:** `32` * `recursive` {boolean} **Default:** `false` Returns: {fs. Synchronously open a directory.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4367",
      "type": "sentence_window",
      "content": "**Default:** `32` * `recursive` {boolean} **Default:** `false` Returns: {fs. Synchronously open a directory. See opendir(3).",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4368",
      "type": "sentence_window",
      "content": "Synchronously open a directory. See opendir(3). Creates an {fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4369",
      "type": "sentence_window",
      "content": "See opendir(3). Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4370",
      "type": "sentence_window",
      "content": "Creates an {fs. Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4371",
      "type": "sentence_window",
      "content": "Dir}, which contains all further functions for reading from and cleaning up the directory. The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_4372",
      "type": "sentence_context",
      "content": "[`fs.opendirSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
      "position": 0
    },
    {
      "id": "sc_4373",
      "type": "sentence_context",
      "content": "[`fs.opendirSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `e...] Higher values lead to better performance but higher memory usage.",
      "position": 1
    },
    {
      "id": "sc_4374",
      "type": "sentence_context",
      "content": "[`fs.opendirSync(path[, options])`] [Previous: Higher values lead to better performance but highe...] **Default:** `32` * `recursive` {boolean} **Default:** `false` Returns: {fs.",
      "position": 2
    },
    {
      "id": "sc_4375",
      "type": "sentence_context",
      "content": "[`fs.opendirSync(path[, options])`] [Previous: **Default:** `32` * `recursive` {boolean} **Defaul...] Synchronously open a directory.",
      "position": 3
    },
    {
      "id": "sc_4376",
      "type": "sentence_context",
      "content": "[`fs.opendirSync(path[, options])`] [Previous: Synchronously open a directory....] See opendir(3).",
      "position": 4
    },
    {
      "id": "sc_4377",
      "type": "sentence_context",
      "content": "[`fs.opendirSync(path[, options])`] Creates an {fs.",
      "position": 5
    },
    {
      "id": "sc_4378",
      "type": "sentence_context",
      "content": "[`fs.opendirSync(path[, options])`] Dir}, which contains all further functions for reading from and cleaning up the directory.",
      "position": 6
    },
    {
      "id": "sc_4379",
      "type": "sentence_context",
      "content": "[`fs.opendirSync(path[, options])`] [Previous: Dir}, which contains all further functions for rea...] The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 7
    },
    {
      "id": "s_4380",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `encoding` {string|null} **Default:** `'utf8'` * `bufferSize` {number} Number of directory entries that are buffered internally when reading from the directory.",
      "position": 0
    },
    {
      "id": "s_4381",
      "type": "sentence",
      "content": "Higher values lead to better performance but higher memory usage.",
      "position": 1
    },
    {
      "id": "s_4382",
      "type": "sentence",
      "content": "**Default:** `32` * `recursive` {boolean} **Default:** `false` Returns: {fs.",
      "position": 2
    },
    {
      "id": "s_4383",
      "type": "sentence",
      "content": "Synchronously open a directory.",
      "position": 3
    },
    {
      "id": "s_4384",
      "type": "sentence",
      "content": "See opendir(3).",
      "position": 4
    },
    {
      "id": "s_4385",
      "type": "sentence",
      "content": "Creates an {fs.",
      "position": 5
    },
    {
      "id": "s_4386",
      "type": "sentence",
      "content": "Dir}, which contains all further functions for reading from and cleaning up the directory.",
      "position": 6
    },
    {
      "id": "s_4387",
      "type": "sentence",
      "content": "The `encoding` option sets the encoding for the `path` while opening the directory and subsequent read operations.",
      "position": 7
    },
    {
      "id": "w_4388",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `flags` {string|number} **Default:** `'r'`.\nSee [support of file system `flags`][]. `mode` {string|integer} **Default:** `0o666` Returns: {number} Returns an integer representing the file descriptor. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.open()`][].",
      "position": 0,
      "windowSize": 37
    },
    {
      "id": "sw_4389",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `flags` {string|number} **Default:** `'r'`. See [support of file system `flags`][]. `mode` {string|integer} **Default:** `0o666` Returns: {number}",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4390",
      "type": "sentence_window",
      "content": "See [support of file system `flags`][]. `mode` {string|integer} **Default:** `0o666` Returns: {number} Returns an integer representing the file descriptor.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4391",
      "type": "sentence_window",
      "content": "`mode` {string|integer} **Default:** `0o666` Returns: {number} Returns an integer representing the file descriptor. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4392",
      "type": "sentence_window",
      "content": "Returns an integer representing the file descriptor. For detailed information, see the documentation of the asynchronous version of this API: [`fs. open()`][].",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4393",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. open()`][].",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_4394",
      "type": "sentence_context",
      "content": "[`fs.openSync(path[, flags[, mode]])`] `path` {string|Buffer|URL} `flags` {string|number} **Default:** `'r'`.",
      "position": 0
    },
    {
      "id": "sc_4395",
      "type": "sentence_context",
      "content": "[`fs.openSync(path[, flags[, mode]])`] [Previous: `path` {string|Buffer|URL} `flags` {string|number}...] See [support of file system `flags`][].",
      "position": 1
    },
    {
      "id": "sc_4396",
      "type": "sentence_context",
      "content": "[`fs.openSync(path[, flags[, mode]])`] [Previous: See [support of file system `flags`][]....] `mode` {string|integer} **Default:** `0o666` Returns: {number}",
      "position": 2
    },
    {
      "id": "sc_4397",
      "type": "sentence_context",
      "content": "[`fs.openSync(path[, flags[, mode]])`] [Previous: `mode` {string|integer} **Default:** `0o666` Retur...] Returns an integer representing the file descriptor.",
      "position": 3
    },
    {
      "id": "sc_4398",
      "type": "sentence_context",
      "content": "[`fs.openSync(path[, flags[, mode]])`] [Previous: Returns an integer representing the file descripto...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 4
    },
    {
      "id": "sc_4399",
      "type": "sentence_context",
      "content": "[`fs.openSync(path[, flags[, mode]])`] [Previous: For detailed information, see the documentation of...] open()`][].",
      "position": 5
    },
    {
      "id": "s_4400",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `flags` {string|number} **Default:** `'r'`.",
      "position": 0
    },
    {
      "id": "s_4401",
      "type": "sentence",
      "content": "See [support of file system `flags`][].",
      "position": 1
    },
    {
      "id": "s_4402",
      "type": "sentence",
      "content": "`mode` {string|integer} **Default:** `0o666` Returns: {number}",
      "position": 2
    },
    {
      "id": "s_4403",
      "type": "sentence",
      "content": "Returns an integer representing the file descriptor.",
      "position": 3
    },
    {
      "id": "s_4404",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 4
    },
    {
      "id": "s_4405",
      "type": "sentence",
      "content": "open()`][].",
      "position": 5
    },
    {
      "id": "w_4406",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'`\n* `withFileTypes` {boolean} **Default:** `false`\n* `recursive` {boolean} If `true`, reads the contents of a directory\n  recursively. In recursive mode, it will list all files, sub files, and\n  directories. **Default:** `false`. Returns: {string\\[]|Buffer\\[]|fs.Dirent\\[]} Reads the contents of the directory. See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe filenames returned. If the `encoding` is set to `'buffer'`,\nthe filenames returned will be passed as {Buffer} objects. If `options.withFileTypes` is set to `true`, the result will contain\n{fs.Dirent} objects.",
      "position": 0,
      "windowSize": 107
    },
    {
      "id": "sw_4407",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively. In recursive mode, it will list all files, sub files, and directories. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4408",
      "type": "sentence_window",
      "content": "In recursive mode, it will list all files, sub files, and directories. **Default:** `false`. Returns: {string\\[]|Buffer\\[]|fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4409",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {string\\[]|Buffer\\[]|fs. Reads the contents of the directory.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4410",
      "type": "sentence_window",
      "content": "Returns: {string\\[]|Buffer\\[]|fs. Reads the contents of the directory. See the POSIX readdir(3) documentation for more details.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4411",
      "type": "sentence_window",
      "content": "Reads the contents of the directory. See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4412",
      "type": "sentence_window",
      "content": "See the POSIX readdir(3) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4413",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned. If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_4414",
      "type": "sentence_window",
      "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects. If `options. withFileTypes` is set to `true`, the result will contain {fs.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_4415",
      "type": "sentence_window",
      "content": "If `options. withFileTypes` is set to `true`, the result will contain {fs. Dirent} objects.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_4416",
      "type": "sentence_window",
      "content": "withFileTypes` is set to `true`, the result will contain {fs. Dirent} objects.",
      "position": 9,
      "sentenceCount": 2
    },
    {
      "id": "sc_4417",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
      "position": 0
    },
    {
      "id": "sc_4418",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] In recursive mode, it will list all files, sub files, and directories.",
      "position": 1
    },
    {
      "id": "sc_4419",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] [Previous: In recursive mode, it will list all files, sub fil...] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_4420",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] [Previous: **Default:** `false`....] Returns: {string\\[]|Buffer\\[]|fs.",
      "position": 3
    },
    {
      "id": "sc_4421",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] [Previous: Returns: {string\\[]|Buffer\\[]|fs....] Reads the contents of the directory.",
      "position": 4
    },
    {
      "id": "sc_4422",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] [Previous: Reads the contents of the directory....] See the POSIX readdir(3) documentation for more details.",
      "position": 5
    },
    {
      "id": "sc_4423",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] [Previous: See the POSIX readdir(3) documentation for more de...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned.",
      "position": 6
    },
    {
      "id": "sc_4424",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
      "position": 7
    },
    {
      "id": "sc_4425",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] [Previous: If the `encoding` is set to `'buffer'`, the filena...] If `options.",
      "position": 8
    },
    {
      "id": "sc_4426",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] withFileTypes` is set to `true`, the result will contain {fs.",
      "position": 9
    },
    {
      "id": "sc_4427",
      "type": "sentence_context",
      "content": "[`fs.readdirSync(path[, options])`] [Previous: withFileTypes` is set to `true`, the result will c...] Dirent} objects.",
      "position": 10
    },
    {
      "id": "s_4428",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` * `withFileTypes` {boolean} **Default:** `false` * `recursive` {boolean} If `true`, reads the contents of a directory recursively.",
      "position": 0
    },
    {
      "id": "s_4429",
      "type": "sentence",
      "content": "In recursive mode, it will list all files, sub files, and directories.",
      "position": 1
    },
    {
      "id": "s_4430",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_4431",
      "type": "sentence",
      "content": "Returns: {string\\[]|Buffer\\[]|fs.",
      "position": 3
    },
    {
      "id": "s_4432",
      "type": "sentence",
      "content": "Reads the contents of the directory.",
      "position": 4
    },
    {
      "id": "s_4433",
      "type": "sentence",
      "content": "See the POSIX readdir(3) documentation for more details.",
      "position": 5
    },
    {
      "id": "s_4434",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the filenames returned.",
      "position": 6
    },
    {
      "id": "s_4435",
      "type": "sentence",
      "content": "If the `encoding` is set to `'buffer'`, the filenames returned will be passed as {Buffer} objects.",
      "position": 7
    },
    {
      "id": "s_4436",
      "type": "sentence",
      "content": "If `options.",
      "position": 8
    },
    {
      "id": "s_4437",
      "type": "sentence",
      "content": "withFileTypes` is set to `true`, the result will contain {fs.",
      "position": 9
    },
    {
      "id": "s_4438",
      "type": "sentence",
      "content": "Dirent} objects.",
      "position": 10
    },
    {
      "id": "w_4439",
      "type": "window",
      "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string}\n* `encoding` {string|null} **Default:** `null`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. Returns: {string|Buffer} Returns the contents of the `path`. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.readFile()`][]. If the `encoding` option is specified then this function returns a\nstring. Otherwise it returns a buffer. Similar to [`fs.readFile()`][], when the path is a directory, the behavior of\n`fs.readFileSync()` is platform-specific.",
      "position": 0,
      "windowSize": 73
    },
    {
      "id": "sw_4440",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][]. **Default:** `'r'`. Returns: {string|Buffer}",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4441",
      "type": "sentence_window",
      "content": "**Default:** `'r'`. Returns: {string|Buffer} Returns the contents of the `path`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4442",
      "type": "sentence_window",
      "content": "Returns: {string|Buffer} Returns the contents of the `path`. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4443",
      "type": "sentence_window",
      "content": "Returns the contents of the `path`. For detailed information, see the documentation of the asynchronous version of this API: [`fs. readFile()`][].",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4444",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. readFile()`][]. If the `encoding` option is specified then this function returns a string.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4445",
      "type": "sentence_window",
      "content": "readFile()`][]. If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4446",
      "type": "sentence_window",
      "content": "If the `encoding` option is specified then this function returns a string. Otherwise it returns a buffer. Similar to [`fs.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_4447",
      "type": "sentence_window",
      "content": "Otherwise it returns a buffer. Similar to [`fs. readFile()`][], when the path is a directory, the behavior of `fs.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_4448",
      "type": "sentence_window",
      "content": "Similar to [`fs. readFile()`][], when the path is a directory, the behavior of `fs. readFileSync()` is platform-specific.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_4449",
      "type": "sentence_window",
      "content": "readFile()`][], when the path is a directory, the behavior of `fs. readFileSync()` is platform-specific.",
      "position": 9,
      "sentenceCount": 2
    },
    {
      "id": "sc_4450",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] `path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_4451",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] [Previous: `path` {string|Buffer|URL|integer} filename or fil...] **Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "sc_4452",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] Returns: {string|Buffer}",
      "position": 2
    },
    {
      "id": "sc_4453",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] [Previous: Returns: {string|Buffer}...] Returns the contents of the `path`.",
      "position": 3
    },
    {
      "id": "sc_4454",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] [Previous: Returns the contents of the `path`....] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 4
    },
    {
      "id": "sc_4455",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] [Previous: For detailed information, see the documentation of...] readFile()`][].",
      "position": 5
    },
    {
      "id": "sc_4456",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] If the `encoding` option is specified then this function returns a string.",
      "position": 6
    },
    {
      "id": "sc_4457",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] [Previous: If the `encoding` option is specified then this fu...] Otherwise it returns a buffer.",
      "position": 7
    },
    {
      "id": "sc_4458",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] [Previous: Otherwise it returns a buffer....] Similar to [`fs.",
      "position": 8
    },
    {
      "id": "sc_4459",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] readFile()`][], when the path is a directory, the behavior of `fs.",
      "position": 9
    },
    {
      "id": "sc_4460",
      "type": "sentence_context",
      "content": "[`fs.readFileSync(path[, options])`] [Previous: readFile()`][], when the path is a directory, the ...] readFileSync()` is platform-specific.",
      "position": 10
    },
    {
      "id": "s_4461",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL|integer} filename or file descriptor `options` {Object|string} * `encoding` {string|null} **Default:** `null` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_4462",
      "type": "sentence",
      "content": "**Default:** `'r'`.",
      "position": 1
    },
    {
      "id": "s_4463",
      "type": "sentence",
      "content": "Returns: {string|Buffer}",
      "position": 2
    },
    {
      "id": "s_4464",
      "type": "sentence",
      "content": "Returns the contents of the `path`.",
      "position": 3
    },
    {
      "id": "s_4465",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 4
    },
    {
      "id": "s_4466",
      "type": "sentence",
      "content": "readFile()`][].",
      "position": 5
    },
    {
      "id": "s_4467",
      "type": "sentence",
      "content": "If the `encoding` option is specified then this function returns a string.",
      "position": 6
    },
    {
      "id": "s_4468",
      "type": "sentence",
      "content": "Otherwise it returns a buffer.",
      "position": 7
    },
    {
      "id": "s_4469",
      "type": "sentence",
      "content": "Similar to [`fs.",
      "position": 8
    },
    {
      "id": "s_4470",
      "type": "sentence",
      "content": "readFile()`][], when the path is a directory, the behavior of `fs.",
      "position": 9
    },
    {
      "id": "s_4471",
      "type": "sentence",
      "content": "readFileSync()` is platform-specific.",
      "position": 10
    },
    {
      "id": "w_4472",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Returns the symbolic link's string value. See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe link path returned. If the `encoding` is set to `'buffer'`,\nthe link path returned will be passed as a {Buffer} object.",
      "position": 0,
      "windowSize": 68
    },
    {
      "id": "sw_4473",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Returns the symbolic link's string value. See the POSIX readlink(2) documentation for more details.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4474",
      "type": "sentence_window",
      "content": "Returns the symbolic link's string value. See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4475",
      "type": "sentence_window",
      "content": "See the POSIX readlink(2) documentation for more details. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4476",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned. If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_4477",
      "type": "sentence_context",
      "content": "[`fs.readlinkSync(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
      "position": 0
    },
    {
      "id": "sc_4478",
      "type": "sentence_context",
      "content": "[`fs.readlinkSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Returns the symbolic link's string value.",
      "position": 1
    },
    {
      "id": "sc_4479",
      "type": "sentence_context",
      "content": "[`fs.readlinkSync(path[, options])`] [Previous: Returns the symbolic link's string value....] See the POSIX readlink(2) documentation for more details.",
      "position": 2
    },
    {
      "id": "sc_4480",
      "type": "sentence_context",
      "content": "[`fs.readlinkSync(path[, options])`] [Previous: See the POSIX readlink(2) documentation for more d...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
      "position": 3
    },
    {
      "id": "sc_4481",
      "type": "sentence_context",
      "content": "[`fs.readlinkSync(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 4
    },
    {
      "id": "s_4482",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
      "position": 0
    },
    {
      "id": "s_4483",
      "type": "sentence",
      "content": "Returns the symbolic link's string value.",
      "position": 1
    },
    {
      "id": "s_4484",
      "type": "sentence",
      "content": "See the POSIX readlink(2) documentation for more details.",
      "position": 2
    },
    {
      "id": "s_4485",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the link path returned.",
      "position": 3
    },
    {
      "id": "s_4486",
      "type": "sentence",
      "content": "If the `encoding` is set to `'buffer'`, the link path returned will be passed as a {Buffer} object.",
      "position": 4
    },
    {
      "id": "w_4487",
      "type": "window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} `length` {integer} `position` {integer|bigint|null} **Default:** `null` Returns: {number} Returns the number of `bytesRead`. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.read()`][].",
      "position": 0,
      "windowSize": 32
    },
    {
      "id": "sw_4488",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} `length` {integer} `position` {integer|bigint|null} **Default:** `null` Returns: {number} Returns the number of `bytesRead`. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4489",
      "type": "sentence_window",
      "content": "Returns the number of `bytesRead`. For detailed information, see the documentation of the asynchronous version of this API: [`fs. read()`][].",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4490",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. read()`][].",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4491",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer, offset, length[, position])`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} `length` {integer} `position` {integer|bigint|null} **Default:** `null` Returns: {number}",
      "position": 0
    },
    {
      "id": "sc_4492",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer, offset, length[, position])`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] Returns the number of `bytesRead`.",
      "position": 1
    },
    {
      "id": "sc_4493",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer, offset, length[, position])`] [Previous: Returns the number of `bytesRead`....] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "sc_4494",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer, offset, length[, position])`] [Previous: For detailed information, see the documentation of...] read()`][].",
      "position": 3
    },
    {
      "id": "s_4495",
      "type": "sentence",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} `length` {integer} `position` {integer|bigint|null} **Default:** `null` Returns: {number}",
      "position": 0
    },
    {
      "id": "s_4496",
      "type": "sentence",
      "content": "Returns the number of `bytesRead`.",
      "position": 1
    },
    {
      "id": "s_4497",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "s_4498",
      "type": "sentence",
      "content": "read()`][].",
      "position": 3
    },
    {
      "id": "w_4499",
      "type": "window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object}\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|bigint|null} **Default:** `null` Returns: {number} Returns the number of `bytesRead`. Similar to the above `fs.readSync` function, this version takes an optional `options` object.\nIf no `options` object is specified, it will default with the above values. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.read()`][].",
      "position": 0,
      "windowSize": 65
    },
    {
      "id": "sw_4500",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` Returns: {number} Returns the number of `bytesRead`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4501",
      "type": "sentence_window",
      "content": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` Returns: {number} Returns the number of `bytesRead`. Similar to the above `fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4502",
      "type": "sentence_window",
      "content": "Returns the number of `bytesRead`. Similar to the above `fs. readSync` function, this version takes an optional `options` object.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4503",
      "type": "sentence_window",
      "content": "Similar to the above `fs. readSync` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4504",
      "type": "sentence_window",
      "content": "readSync` function, this version takes an optional `options` object. If no `options` object is specified, it will default with the above values. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4505",
      "type": "sentence_window",
      "content": "If no `options` object is specified, it will default with the above values. For detailed information, see the documentation of the asynchronous version of this API: [`fs. read()`][].",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4506",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. read()`][].",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_4507",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer[, options])`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "sc_4508",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` Returns: {number}",
      "position": 1
    },
    {
      "id": "sc_4509",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: byteLength - offset` * `position` {integer|bigint|...] Returns the number of `bytesRead`.",
      "position": 2
    },
    {
      "id": "sc_4510",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: Returns the number of `bytesRead`....] Similar to the above `fs.",
      "position": 3
    },
    {
      "id": "sc_4511",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: Similar to the above `fs....] readSync` function, this version takes an optional `options` object.",
      "position": 4
    },
    {
      "id": "sc_4512",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: readSync` function, this version takes an optional...] If no `options` object is specified, it will default with the above values.",
      "position": 5
    },
    {
      "id": "sc_4513",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: If no `options` object is specified, it will defau...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 6
    },
    {
      "id": "sc_4514",
      "type": "sentence_context",
      "content": "[`fs.readSync(fd, buffer[, options])`] [Previous: For detailed information, see the documentation of...] read()`][].",
      "position": 7
    },
    {
      "id": "s_4515",
      "type": "sentence",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "s_4516",
      "type": "sentence",
      "content": "byteLength - offset` * `position` {integer|bigint|null} **Default:** `null` Returns: {number}",
      "position": 1
    },
    {
      "id": "s_4517",
      "type": "sentence",
      "content": "Returns the number of `bytesRead`.",
      "position": 2
    },
    {
      "id": "s_4518",
      "type": "sentence",
      "content": "Similar to the above `fs.",
      "position": 3
    },
    {
      "id": "s_4519",
      "type": "sentence",
      "content": "readSync` function, this version takes an optional `options` object.",
      "position": 4
    },
    {
      "id": "s_4520",
      "type": "sentence",
      "content": "If no `options` object is specified, it will default with the above values.",
      "position": 5
    },
    {
      "id": "s_4521",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 6
    },
    {
      "id": "s_4522",
      "type": "sentence",
      "content": "read()`][].",
      "position": 7
    },
    {
      "id": "w_4523",
      "type": "window",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes read. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.readv()`][].",
      "position": 0,
      "windowSize": 28
    },
    {
      "id": "sw_4524",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes read. For detailed information, see the documentation of the asynchronous version of this API: [`fs. readv()`][].",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4525",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. readv()`][].",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_4526",
      "type": "sentence_context",
      "content": "[`fs.readvSync(fd, buffers[, position])`] `fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes read.",
      "position": 0
    },
    {
      "id": "sc_4527",
      "type": "sentence_context",
      "content": "[`fs.readvSync(fd, buffers[, position])`] [Previous: `fd` {integer} `buffers` {ArrayBufferView\\[]} `pos...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "sc_4528",
      "type": "sentence_context",
      "content": "[`fs.readvSync(fd, buffers[, position])`] [Previous: For detailed information, see the documentation of...] readv()`][].",
      "position": 2
    },
    {
      "id": "s_4529",
      "type": "sentence",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes read.",
      "position": 0
    },
    {
      "id": "s_4530",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "s_4531",
      "type": "sentence",
      "content": "readv()`][].",
      "position": 2
    },
    {
      "id": "w_4532",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Returns the resolved pathname. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.realpath()`][].",
      "position": 0,
      "windowSize": 27
    },
    {
      "id": "sw_4533",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Returns the resolved pathname. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4534",
      "type": "sentence_window",
      "content": "Returns the resolved pathname. For detailed information, see the documentation of the asynchronous version of this API: [`fs. realpath()`][].",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4535",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. realpath()`][].",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4536",
      "type": "sentence_context",
      "content": "[`fs.realpathSync(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
      "position": 0
    },
    {
      "id": "sc_4537",
      "type": "sentence_context",
      "content": "[`fs.realpathSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Returns the resolved pathname.",
      "position": 1
    },
    {
      "id": "sc_4538",
      "type": "sentence_context",
      "content": "[`fs.realpathSync(path[, options])`] [Previous: Returns the resolved pathname....] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "sc_4539",
      "type": "sentence_context",
      "content": "[`fs.realpathSync(path[, options])`] [Previous: For detailed information, see the documentation of...] realpath()`][].",
      "position": 3
    },
    {
      "id": "s_4540",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
      "position": 0
    },
    {
      "id": "s_4541",
      "type": "sentence",
      "content": "Returns the resolved pathname.",
      "position": 1
    },
    {
      "id": "s_4542",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "s_4543",
      "type": "sentence",
      "content": "realpath()`][].",
      "position": 3
    },
    {
      "id": "w_4544",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object}\n* `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Synchronous realpath(3). Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an\nobject with an `encoding` property specifying the character encoding to use for\nthe path returned. If the `encoding` is set to `'buffer'`,\nthe path returned will be passed as a {Buffer} object. On Linux, when Node.js is linked against musl libc, the procfs file system must\nbe mounted on `/proc` in order for this function to work. Glibc does not have\nthis restriction.",
      "position": 0,
      "windowSize": 94
    },
    {
      "id": "sw_4545",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer} Synchronous realpath(3). Only paths that can be converted to UTF8 strings are supported.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4546",
      "type": "sentence_window",
      "content": "Synchronous realpath(3). Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4547",
      "type": "sentence_window",
      "content": "Only paths that can be converted to UTF8 strings are supported. The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4548",
      "type": "sentence_window",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned. If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4549",
      "type": "sentence_window",
      "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object. On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4550",
      "type": "sentence_window",
      "content": "On Linux, when Node. js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4551",
      "type": "sentence_window",
      "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work. Glibc does not have this restriction.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_4552",
      "type": "sentence_context",
      "content": "[`fs.realpathSync.native(path[, options])`] `path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
      "position": 0
    },
    {
      "id": "sc_4553",
      "type": "sentence_context",
      "content": "[`fs.realpathSync.native(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {string|Objec...] Synchronous realpath(3).",
      "position": 1
    },
    {
      "id": "sc_4554",
      "type": "sentence_context",
      "content": "[`fs.realpathSync.native(path[, options])`] [Previous: Synchronous realpath(3)....] Only paths that can be converted to UTF8 strings are supported.",
      "position": 2
    },
    {
      "id": "sc_4555",
      "type": "sentence_context",
      "content": "[`fs.realpathSync.native(path[, options])`] [Previous: Only paths that can be converted to UTF8 strings a...] The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned.",
      "position": 3
    },
    {
      "id": "sc_4556",
      "type": "sentence_context",
      "content": "[`fs.realpathSync.native(path[, options])`] [Previous: The optional `options` argument can be a string sp...] If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 4
    },
    {
      "id": "sc_4557",
      "type": "sentence_context",
      "content": "[`fs.realpathSync.native(path[, options])`] [Previous: If the `encoding` is set to `'buffer'`, the path r...] On Linux, when Node.",
      "position": 5
    },
    {
      "id": "sc_4558",
      "type": "sentence_context",
      "content": "[`fs.realpathSync.native(path[, options])`] js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
      "position": 6
    },
    {
      "id": "sc_4559",
      "type": "sentence_context",
      "content": "[`fs.realpathSync.native(path[, options])`] [Previous: js is linked against musl libc, the procfs file sy...] Glibc does not have this restriction.",
      "position": 7
    },
    {
      "id": "s_4560",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {string|Object} * `encoding` {string} **Default:** `'utf8'` Returns: {string|Buffer}",
      "position": 0
    },
    {
      "id": "s_4561",
      "type": "sentence",
      "content": "Synchronous realpath(3).",
      "position": 1
    },
    {
      "id": "s_4562",
      "type": "sentence",
      "content": "Only paths that can be converted to UTF8 strings are supported.",
      "position": 2
    },
    {
      "id": "s_4563",
      "type": "sentence",
      "content": "The optional `options` argument can be a string specifying an encoding, or an object with an `encoding` property specifying the character encoding to use for the path returned.",
      "position": 3
    },
    {
      "id": "s_4564",
      "type": "sentence",
      "content": "If the `encoding` is set to `'buffer'`, the path returned will be passed as a {Buffer} object.",
      "position": 4
    },
    {
      "id": "s_4565",
      "type": "sentence",
      "content": "On Linux, when Node.",
      "position": 5
    },
    {
      "id": "s_4566",
      "type": "sentence",
      "content": "js is linked against musl libc, the procfs file system must be mounted on `/proc` in order for this function to work.",
      "position": 6
    },
    {
      "id": "s_4567",
      "type": "sentence",
      "content": "Glibc does not have this restriction.",
      "position": 7
    },
    {
      "id": "w_4568",
      "type": "window",
      "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Renames the file from `oldPath` to `newPath`. Returns `undefined`. See the POSIX rename(2) documentation for more details.",
      "position": 0,
      "windowSize": 21
    },
    {
      "id": "sw_4569",
      "type": "sentence_window",
      "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL} Renames the file from `oldPath` to `newPath`. Returns `undefined`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4570",
      "type": "sentence_window",
      "content": "Renames the file from `oldPath` to `newPath`. Returns `undefined`. See the POSIX rename(2) documentation for more details.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4571",
      "type": "sentence_window",
      "content": "Returns `undefined`. See the POSIX rename(2) documentation for more details.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4572",
      "type": "sentence_context",
      "content": "[`fs.renameSync(oldPath, newPath)`] `oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}",
      "position": 0
    },
    {
      "id": "sc_4573",
      "type": "sentence_context",
      "content": "[`fs.renameSync(oldPath, newPath)`] [Previous: `oldPath` {string|Buffer|URL} `newPath` {string|Bu...] Renames the file from `oldPath` to `newPath`.",
      "position": 1
    },
    {
      "id": "sc_4574",
      "type": "sentence_context",
      "content": "[`fs.renameSync(oldPath, newPath)`] [Previous: Renames the file from `oldPath` to `newPath`....] Returns `undefined`.",
      "position": 2
    },
    {
      "id": "sc_4575",
      "type": "sentence_context",
      "content": "[`fs.renameSync(oldPath, newPath)`] See the POSIX rename(2) documentation for more details.",
      "position": 3
    },
    {
      "id": "s_4576",
      "type": "sentence",
      "content": "`oldPath` {string|Buffer|URL} `newPath` {string|Buffer|URL}",
      "position": 0
    },
    {
      "id": "s_4577",
      "type": "sentence",
      "content": "Renames the file from `oldPath` to `newPath`.",
      "position": 1
    },
    {
      "id": "s_4578",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 2
    },
    {
      "id": "s_4579",
      "type": "sentence",
      "content": "See the POSIX rename(2) documentation for more details.",
      "position": 3
    },
    {
      "id": "w_4580",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to\nbe options for `recursive`, `maxBusyTries`, and `emfileWait` but they were\ndeprecated and removed. The `options` argument is still accepted for\nbackwards compatibility but it is not used. Synchronous rmdir(2). Returns `undefined`. Using `fs.rmdirSync()` on a file (not a directory) results in an `ENOENT` error\non Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs.rmSync()`][]\nwith options `{ recursive: true, force: true }`.",
      "position": 0,
      "windowSize": 81
    },
    {
      "id": "sw_4581",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed. There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4582",
      "type": "sentence_window",
      "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed. The `options` argument is still accepted for backwards compatibility but it is not used. Synchronous rmdir(2).",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4583",
      "type": "sentence_window",
      "content": "The `options` argument is still accepted for backwards compatibility but it is not used. Synchronous rmdir(2). Returns `undefined`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4584",
      "type": "sentence_window",
      "content": "Synchronous rmdir(2). Returns `undefined`. rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4585",
      "type": "sentence_window",
      "content": "Returns `undefined`. rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4586",
      "type": "sentence_window",
      "content": "rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX. To get a behavior similar to the `rm -rf` Unix command, use [`fs. rmSync()`][] with options `{ recursive: true, force: true }`.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4587",
      "type": "sentence_window",
      "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fs. rmSync()`][] with options `{ recursive: true, force: true }`.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_4588",
      "type": "sentence_context",
      "content": "[`fs.rmdirSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
      "position": 0
    },
    {
      "id": "sc_4589",
      "type": "sentence_context",
      "content": "[`fs.rmdirSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} Ther...] There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
      "position": 1
    },
    {
      "id": "sc_4590",
      "type": "sentence_context",
      "content": "[`fs.rmdirSync(path[, options])`] [Previous: There used to be options for `recursive`, `maxBusy...] The `options` argument is still accepted for backwards compatibility but it is not used.",
      "position": 2
    },
    {
      "id": "sc_4591",
      "type": "sentence_context",
      "content": "[`fs.rmdirSync(path[, options])`] [Previous: The `options` argument is still accepted for backw...] Synchronous rmdir(2).",
      "position": 3
    },
    {
      "id": "sc_4592",
      "type": "sentence_context",
      "content": "[`fs.rmdirSync(path[, options])`] [Previous: Synchronous rmdir(2)....] Returns `undefined`.",
      "position": 4
    },
    {
      "id": "sc_4593",
      "type": "sentence_context",
      "content": "[`fs.rmdirSync(path[, options])`] rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
      "position": 5
    },
    {
      "id": "sc_4594",
      "type": "sentence_context",
      "content": "[`fs.rmdirSync(path[, options])`] [Previous: rmdirSync()` on a file (not a directory) results i...] To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
      "position": 6
    },
    {
      "id": "sc_4595",
      "type": "sentence_context",
      "content": "[`fs.rmdirSync(path[, options])`] [Previous: To get a behavior similar to the `rm -rf` Unix com...] rmSync()`][] with options `{ recursive: true, force: true }`.",
      "position": 7
    },
    {
      "id": "s_4596",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} There are currently no options exposed.",
      "position": 0
    },
    {
      "id": "s_4597",
      "type": "sentence",
      "content": "There used to be options for `recursive`, `maxBusyTries`, and `emfileWait` but they were deprecated and removed.",
      "position": 1
    },
    {
      "id": "s_4598",
      "type": "sentence",
      "content": "The `options` argument is still accepted for backwards compatibility but it is not used.",
      "position": 2
    },
    {
      "id": "s_4599",
      "type": "sentence",
      "content": "Synchronous rmdir(2).",
      "position": 3
    },
    {
      "id": "s_4600",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 4
    },
    {
      "id": "s_4601",
      "type": "sentence",
      "content": "rmdirSync()` on a file (not a directory) results in an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.",
      "position": 5
    },
    {
      "id": "s_4602",
      "type": "sentence",
      "content": "To get a behavior similar to the `rm -rf` Unix command, use [`fs.",
      "position": 6
    },
    {
      "id": "s_4603",
      "type": "sentence",
      "content": "rmSync()`][] with options `{ recursive: true, force: true }`.",
      "position": 7
    },
    {
      "id": "w_4604",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `force` {boolean} When `true`, exceptions will be ignored if `path` does\n  not exist. **Default:** `false`.\n* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\n  `EPERM` error is encountered, Node.js will retry the operation with a linear\n  backoff wait of `retryDelay` milliseconds longer on each try. This option\n  represents the number of retries. This option is ignored if the `recursive`\n  option is not `true`. **Default:** `0`.\n* `recursive` {boolean} If `true`, perform a recursive directory removal. In\n  recursive mode operations are retried on failure. **Default:** `false`.\n* `retryDelay` {integer} The amount of time in milliseconds to wait between\n  retries. This option is ignored if the `recursive` option is not `true`.\n  **Default:** `100`. Synchronously removes files and directories (modeled on the standard POSIX `rm`\nutility). Returns `undefined`.",
      "position": 0,
      "windowSize": 134
    },
    {
      "id": "sw_4605",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist. **Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4606",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4607",
      "type": "sentence_window",
      "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node. js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4608",
      "type": "sentence_window",
      "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try. This option represents the number of retries. This option is ignored if the `recursive` option is not `true`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4609",
      "type": "sentence_window",
      "content": "This option represents the number of retries. This option is ignored if the `recursive` option is not `true`. **Default:** `0`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4610",
      "type": "sentence_window",
      "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive directory removal.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4611",
      "type": "sentence_window",
      "content": "**Default:** `0`. * `recursive` {boolean} If `true`, perform a recursive directory removal. In recursive mode operations are retried on failure.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_4612",
      "type": "sentence_window",
      "content": "* `recursive` {boolean} If `true`, perform a recursive directory removal. In recursive mode operations are retried on failure. **Default:** `false`.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_4613",
      "type": "sentence_window",
      "content": "In recursive mode operations are retried on failure. **Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_4614",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_4615",
      "type": "sentence_window",
      "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries. This option is ignored if the `recursive` option is not `true`. **Default:** `100`.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_4616",
      "type": "sentence_window",
      "content": "This option is ignored if the `recursive` option is not `true`. **Default:** `100`. Synchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_4617",
      "type": "sentence_window",
      "content": "**Default:** `100`. Synchronously removes files and directories (modeled on the standard POSIX `rm` utility). Returns `undefined`.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_4618",
      "type": "sentence_window",
      "content": "Synchronously removes files and directories (modeled on the standard POSIX `rm` utility). Returns `undefined`.",
      "position": 13,
      "sentenceCount": 2
    },
    {
      "id": "sc_4619",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
      "position": 0
    },
    {
      "id": "sc_4620",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `f...] **Default:** `false`.",
      "position": 1
    },
    {
      "id": "sc_4621",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: **Default:** `false`....] * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
      "position": 2
    },
    {
      "id": "sc_4622",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: * `maxRetries` {integer} If an `EBUSY`, `EMFILE`, ...] js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
      "position": 3
    },
    {
      "id": "sc_4623",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: js will retry the operation with a linear backoff ...] This option represents the number of retries.",
      "position": 4
    },
    {
      "id": "sc_4624",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: This option represents the number of retries....] This option is ignored if the `recursive` option is not `true`.",
      "position": 5
    },
    {
      "id": "sc_4625",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `0`.",
      "position": 6
    },
    {
      "id": "sc_4626",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] * `recursive` {boolean} If `true`, perform a recursive directory removal.",
      "position": 7
    },
    {
      "id": "sc_4627",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: * `recursive` {boolean} If `true`, perform a recur...] In recursive mode operations are retried on failure.",
      "position": 8
    },
    {
      "id": "sc_4628",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: In recursive mode operations are retried on failur...] **Default:** `false`.",
      "position": 9
    },
    {
      "id": "sc_4629",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: **Default:** `false`....] * `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
      "position": 10
    },
    {
      "id": "sc_4630",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: * `retryDelay` {integer} The amount of time in mil...] This option is ignored if the `recursive` option is not `true`.",
      "position": 11
    },
    {
      "id": "sc_4631",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: This option is ignored if the `recursive` option i...] **Default:** `100`.",
      "position": 12
    },
    {
      "id": "sc_4632",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] Synchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 13
    },
    {
      "id": "sc_4633",
      "type": "sentence_context",
      "content": "[`fs.rmSync(path[, options])`] [Previous: Synchronously removes files and directories (model...] Returns `undefined`.",
      "position": 14
    },
    {
      "id": "s_4634",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `force` {boolean} When `true`, exceptions will be ignored if `path` does not exist.",
      "position": 0
    },
    {
      "id": "s_4635",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 1
    },
    {
      "id": "s_4636",
      "type": "sentence",
      "content": "* `maxRetries` {integer} If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or `EPERM` error is encountered, Node.",
      "position": 2
    },
    {
      "id": "s_4637",
      "type": "sentence",
      "content": "js will retry the operation with a linear backoff wait of `retryDelay` milliseconds longer on each try.",
      "position": 3
    },
    {
      "id": "s_4638",
      "type": "sentence",
      "content": "This option represents the number of retries.",
      "position": 4
    },
    {
      "id": "s_4639",
      "type": "sentence",
      "content": "This option is ignored if the `recursive` option is not `true`.",
      "position": 5
    },
    {
      "id": "s_4640",
      "type": "sentence",
      "content": "**Default:** `0`.",
      "position": 6
    },
    {
      "id": "s_4641",
      "type": "sentence",
      "content": "* `recursive` {boolean} If `true`, perform a recursive directory removal.",
      "position": 7
    },
    {
      "id": "s_4642",
      "type": "sentence",
      "content": "In recursive mode operations are retried on failure.",
      "position": 8
    },
    {
      "id": "s_4643",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 9
    },
    {
      "id": "s_4644",
      "type": "sentence",
      "content": "* `retryDelay` {integer} The amount of time in milliseconds to wait between retries.",
      "position": 10
    },
    {
      "id": "s_4645",
      "type": "sentence",
      "content": "This option is ignored if the `recursive` option is not `true`.",
      "position": 11
    },
    {
      "id": "s_4646",
      "type": "sentence",
      "content": "**Default:** `100`.",
      "position": 12
    },
    {
      "id": "s_4647",
      "type": "sentence",
      "content": "Synchronously removes files and directories (modeled on the standard POSIX `rm` utility).",
      "position": 13
    },
    {
      "id": "s_4648",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 14
    },
    {
      "id": "w_4649",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.Stats} object should be `bigint`. **Default:** `false`.\n* `throwIfNoEntry` {boolean} Whether an exception will be thrown\n  if no file system entry exists, rather than returning `undefined`.\n  **Default:** `true`. Returns: {fs.Stats} Retrieves the {fs.Stats} for the path.",
      "position": 0,
      "windowSize": 51
    },
    {
      "id": "sw_4650",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. Stats} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4651",
      "type": "sentence_window",
      "content": "Stats} object should be `bigint`. **Default:** `false`. * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4652",
      "type": "sentence_window",
      "content": "**Default:** `false`. * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`. **Default:** `true`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4653",
      "type": "sentence_window",
      "content": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`. **Default:** `true`. Returns: {fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4654",
      "type": "sentence_window",
      "content": "**Default:** `true`. Returns: {fs. Retrieves the {fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4655",
      "type": "sentence_window",
      "content": "Returns: {fs. Retrieves the {fs. Stats} for the path.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4656",
      "type": "sentence_window",
      "content": "Retrieves the {fs. Stats} for the path.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_4657",
      "type": "sentence_context",
      "content": "[`fs.statSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_4658",
      "type": "sentence_context",
      "content": "[`fs.statSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_4659",
      "type": "sentence_context",
      "content": "[`fs.statSync(path[, options])`] [Previous: Stats} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_4660",
      "type": "sentence_context",
      "content": "[`fs.statSync(path[, options])`] [Previous: **Default:** `false`....] * `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
      "position": 3
    },
    {
      "id": "sc_4661",
      "type": "sentence_context",
      "content": "[`fs.statSync(path[, options])`] [Previous: * `throwIfNoEntry` {boolean} Whether an exception ...] **Default:** `true`.",
      "position": 4
    },
    {
      "id": "sc_4662",
      "type": "sentence_context",
      "content": "[`fs.statSync(path[, options])`] Returns: {fs.",
      "position": 5
    },
    {
      "id": "sc_4663",
      "type": "sentence_context",
      "content": "[`fs.statSync(path[, options])`] Retrieves the {fs.",
      "position": 6
    },
    {
      "id": "sc_4664",
      "type": "sentence_context",
      "content": "[`fs.statSync(path[, options])`] Stats} for the path.",
      "position": 7
    },
    {
      "id": "s_4665",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_4666",
      "type": "sentence",
      "content": "Stats} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_4667",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_4668",
      "type": "sentence",
      "content": "* `throwIfNoEntry` {boolean} Whether an exception will be thrown if no file system entry exists, rather than returning `undefined`.",
      "position": 3
    },
    {
      "id": "s_4669",
      "type": "sentence",
      "content": "**Default:** `true`.",
      "position": 4
    },
    {
      "id": "s_4670",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 5
    },
    {
      "id": "s_4671",
      "type": "sentence",
      "content": "Retrieves the {fs.",
      "position": 6
    },
    {
      "id": "s_4672",
      "type": "sentence",
      "content": "Stats} for the path.",
      "position": 7
    },
    {
      "id": "w_4673",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `options` {Object}\n* `bigint` {boolean} Whether the numeric values in the returned\n  {fs.StatFs} object should be `bigint`. **Default:** `false`. Returns: {fs.StatFs} Synchronous statfs(2). Returns information about the mounted file system which\ncontains `path`. In case of an error, the `err.code` will be one of [Common System Errors][].",
      "position": 0,
      "windowSize": 48
    },
    {
      "id": "sw_4674",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs. StatFs} object should be `bigint`. **Default:** `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4675",
      "type": "sentence_window",
      "content": "StatFs} object should be `bigint`. **Default:** `false`. Returns: {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4676",
      "type": "sentence_window",
      "content": "**Default:** `false`. Returns: {fs. Synchronous statfs(2).",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4677",
      "type": "sentence_window",
      "content": "Returns: {fs. Synchronous statfs(2). Returns information about the mounted file system which contains `path`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4678",
      "type": "sentence_window",
      "content": "Synchronous statfs(2). Returns information about the mounted file system which contains `path`. In case of an error, the `err.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4679",
      "type": "sentence_window",
      "content": "Returns information about the mounted file system which contains `path`. In case of an error, the `err. code` will be one of [Common System Errors][].",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4680",
      "type": "sentence_window",
      "content": "In case of an error, the `err. code` will be one of [Common System Errors][].",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_4681",
      "type": "sentence_context",
      "content": "[`fs.statfsSync(path[, options])`] `path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "sc_4682",
      "type": "sentence_context",
      "content": "[`fs.statfsSync(path[, options])`] [Previous: `path` {string|Buffer|URL} `options` {Object} * `b...] StatFs} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "sc_4683",
      "type": "sentence_context",
      "content": "[`fs.statfsSync(path[, options])`] [Previous: StatFs} object should be `bigint`....] **Default:** `false`.",
      "position": 2
    },
    {
      "id": "sc_4684",
      "type": "sentence_context",
      "content": "[`fs.statfsSync(path[, options])`] [Previous: **Default:** `false`....] Returns: {fs.",
      "position": 3
    },
    {
      "id": "sc_4685",
      "type": "sentence_context",
      "content": "[`fs.statfsSync(path[, options])`] Synchronous statfs(2).",
      "position": 4
    },
    {
      "id": "sc_4686",
      "type": "sentence_context",
      "content": "[`fs.statfsSync(path[, options])`] [Previous: Synchronous statfs(2)....] Returns information about the mounted file system which contains `path`.",
      "position": 5
    },
    {
      "id": "sc_4687",
      "type": "sentence_context",
      "content": "[`fs.statfsSync(path[, options])`] [Previous: Returns information about the mounted file system ...] In case of an error, the `err.",
      "position": 6
    },
    {
      "id": "sc_4688",
      "type": "sentence_context",
      "content": "[`fs.statfsSync(path[, options])`] [Previous: In case of an error, the `err....] code` will be one of [Common System Errors][].",
      "position": 7
    },
    {
      "id": "s_4689",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `options` {Object} * `bigint` {boolean} Whether the numeric values in the returned {fs.",
      "position": 0
    },
    {
      "id": "s_4690",
      "type": "sentence",
      "content": "StatFs} object should be `bigint`.",
      "position": 1
    },
    {
      "id": "s_4691",
      "type": "sentence",
      "content": "**Default:** `false`.",
      "position": 2
    },
    {
      "id": "s_4692",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 3
    },
    {
      "id": "s_4693",
      "type": "sentence",
      "content": "Synchronous statfs(2).",
      "position": 4
    },
    {
      "id": "s_4694",
      "type": "sentence",
      "content": "Returns information about the mounted file system which contains `path`.",
      "position": 5
    },
    {
      "id": "s_4695",
      "type": "sentence",
      "content": "In case of an error, the `err.",
      "position": 6
    },
    {
      "id": "s_4696",
      "type": "sentence",
      "content": "code` will be one of [Common System Errors][].",
      "position": 7
    },
    {
      "id": "w_4697",
      "type": "window",
      "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: `undefined`. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.symlink()`][].",
      "position": 0,
      "windowSize": 23
    },
    {
      "id": "sw_4698",
      "type": "sentence_window",
      "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: `undefined`. For detailed information, see the documentation of the asynchronous version of this API: [`fs. symlink()`][].",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4699",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. symlink()`][].",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_4700",
      "type": "sentence_context",
      "content": "[`fs.symlinkSync(target, path[, type])`] `target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: `undefined`.",
      "position": 0
    },
    {
      "id": "sc_4701",
      "type": "sentence_context",
      "content": "[`fs.symlinkSync(target, path[, type])`] [Previous: `target` {string|Buffer|URL} `path` {string|Buffer...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "sc_4702",
      "type": "sentence_context",
      "content": "[`fs.symlinkSync(target, path[, type])`] [Previous: For detailed information, see the documentation of...] symlink()`][].",
      "position": 2
    },
    {
      "id": "s_4703",
      "type": "sentence",
      "content": "`target` {string|Buffer|URL} `path` {string|Buffer|URL} `type` {string|null} **Default:** `null` Returns: `undefined`.",
      "position": 0
    },
    {
      "id": "s_4704",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "s_4705",
      "type": "sentence",
      "content": "symlink()`][].",
      "position": 2
    },
    {
      "id": "w_4706",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Truncates the file. Returns `undefined`. A file descriptor can also be\npassed as the first argument. In this case, `fs.ftruncateSync()` is called. Passing a file descriptor is deprecated and may result in an error being thrown\nin the future.",
      "position": 0,
      "windowSize": 43
    },
    {
      "id": "sw_4707",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0` Truncates the file. Returns `undefined`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4708",
      "type": "sentence_window",
      "content": "Truncates the file. Returns `undefined`. A file descriptor can also be passed as the first argument.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4709",
      "type": "sentence_window",
      "content": "Returns `undefined`. A file descriptor can also be passed as the first argument. In this case, `fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4710",
      "type": "sentence_window",
      "content": "A file descriptor can also be passed as the first argument. In this case, `fs. ftruncateSync()` is called.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4711",
      "type": "sentence_window",
      "content": "In this case, `fs. ftruncateSync()` is called. Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4712",
      "type": "sentence_window",
      "content": "ftruncateSync()` is called. Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_4713",
      "type": "sentence_context",
      "content": "[`fs.truncateSync(path[, len])`] `path` {string|Buffer|URL} `len` {integer} **Default:** `0`",
      "position": 0
    },
    {
      "id": "sc_4714",
      "type": "sentence_context",
      "content": "[`fs.truncateSync(path[, len])`] [Previous: `path` {string|Buffer|URL} `len` {integer} **Defau...] Truncates the file.",
      "position": 1
    },
    {
      "id": "sc_4715",
      "type": "sentence_context",
      "content": "[`fs.truncateSync(path[, len])`] Returns `undefined`.",
      "position": 2
    },
    {
      "id": "sc_4716",
      "type": "sentence_context",
      "content": "[`fs.truncateSync(path[, len])`] A file descriptor can also be passed as the first argument.",
      "position": 3
    },
    {
      "id": "sc_4717",
      "type": "sentence_context",
      "content": "[`fs.truncateSync(path[, len])`] [Previous: A file descriptor can also be passed as the first ...] In this case, `fs.",
      "position": 4
    },
    {
      "id": "sc_4718",
      "type": "sentence_context",
      "content": "[`fs.truncateSync(path[, len])`] ftruncateSync()` is called.",
      "position": 5
    },
    {
      "id": "sc_4719",
      "type": "sentence_context",
      "content": "[`fs.truncateSync(path[, len])`] [Previous: ftruncateSync()` is called....] Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
      "position": 6
    },
    {
      "id": "s_4720",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `len` {integer} **Default:** `0`",
      "position": 0
    },
    {
      "id": "s_4721",
      "type": "sentence",
      "content": "Truncates the file.",
      "position": 1
    },
    {
      "id": "s_4722",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 2
    },
    {
      "id": "s_4723",
      "type": "sentence",
      "content": "A file descriptor can also be passed as the first argument.",
      "position": 3
    },
    {
      "id": "s_4724",
      "type": "sentence",
      "content": "In this case, `fs.",
      "position": 4
    },
    {
      "id": "s_4725",
      "type": "sentence",
      "content": "ftruncateSync()` is called.",
      "position": 5
    },
    {
      "id": "s_4726",
      "type": "sentence",
      "content": "Passing a file descriptor is deprecated and may result in an error being thrown in the future.",
      "position": 6
    },
    {
      "id": "sw_4727",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} Synchronous unlink(2). Returns `undefined`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4728",
      "type": "sentence_window",
      "content": "Synchronous unlink(2). Returns `undefined`.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_4729",
      "type": "sentence_context",
      "content": "[`fs.unlinkSync(path)`] `path` {string|Buffer|URL}",
      "position": 0
    },
    {
      "id": "sc_4730",
      "type": "sentence_context",
      "content": "[`fs.unlinkSync(path)`] [Previous: `path` {string|Buffer|URL}...] Synchronous unlink(2).",
      "position": 1
    },
    {
      "id": "sc_4731",
      "type": "sentence_context",
      "content": "[`fs.unlinkSync(path)`] [Previous: Synchronous unlink(2)....] Returns `undefined`.",
      "position": 2
    },
    {
      "id": "s_4732",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL}",
      "position": 0
    },
    {
      "id": "s_4733",
      "type": "sentence",
      "content": "Synchronous unlink(2).",
      "position": 1
    },
    {
      "id": "s_4734",
      "type": "sentence",
      "content": "Returns `undefined`.",
      "position": 2
    },
    {
      "id": "w_4735",
      "type": "window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: `undefined`. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.utimes()`][].",
      "position": 0,
      "windowSize": 21
    },
    {
      "id": "sw_4736",
      "type": "sentence_window",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: `undefined`. For detailed information, see the documentation of the asynchronous version of this API: [`fs. utimes()`][].",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4737",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. utimes()`][].",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_4738",
      "type": "sentence_context",
      "content": "[`fs.utimesSync(path, atime, mtime)`] `path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: `undefined`.",
      "position": 0
    },
    {
      "id": "sc_4739",
      "type": "sentence_context",
      "content": "[`fs.utimesSync(path, atime, mtime)`] [Previous: `path` {string|Buffer|URL} `atime` {number|string|...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "sc_4740",
      "type": "sentence_context",
      "content": "[`fs.utimesSync(path, atime, mtime)`] [Previous: For detailed information, see the documentation of...] utimes()`][].",
      "position": 2
    },
    {
      "id": "s_4741",
      "type": "sentence",
      "content": "`path` {string|Buffer|URL} `atime` {number|string|Date} `mtime` {number|string|Date} Returns: `undefined`.",
      "position": 0
    },
    {
      "id": "s_4742",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "s_4743",
      "type": "sentence",
      "content": "utimes()`][].",
      "position": 2
    },
    {
      "id": "w_4744",
      "type": "window",
      "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string}\n* `encoding` {string|null} **Default:** `'utf8'`\n* `mode` {integer} **Default:** `0o666`\n* `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`.\n* `flush` {boolean} If all data is successfully written to the file, and\n  `flush` is `true`, `fs.fsyncSync()` is used to flush the data. Returns: `undefined`. The `mode` option only affects the newly created file. See [`fs.open()`][]\nfor more details. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.writeFile()`][].",
      "position": 0,
      "windowSize": 79
    },
    {
      "id": "sw_4745",
      "type": "sentence_window",
      "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][]. **Default:** `'w'`. * `flush` {boolean} If all data is successfully",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4746",
      "type": "sentence_window",
      "content": "**Default:** `'w'`. * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs. fsyncSync()` is used to flush the data.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4747",
      "type": "sentence_window",
      "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs. fsyncSync()` is used to flush the data. Returns: `undefined`.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4748",
      "type": "sentence_window",
      "content": "fsyncSync()` is used to flush the data. Returns: `undefined`. The `mode` option only affects the newly created file.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4749",
      "type": "sentence_window",
      "content": "Returns: `undefined`. The `mode` option only affects the newly created file. open()`][] for more details.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4750",
      "type": "sentence_window",
      "content": "The `mode` option only affects the newly created file. open()`][] for more details. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4751",
      "type": "sentence_window",
      "content": "open()`][] for more details. For detailed information, see the documentation of the asynchronous version of this API: [`fs. writeFile()`][].",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_4752",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. writeFile()`][].",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_4753",
      "type": "sentence_context",
      "content": "[`fs.writeFileSync(file, data[, options])`] `file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "sc_4754",
      "type": "sentence_context",
      "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: `file` {string|Buffer|URL|integer} filename or fil...] **Default:** `'w'`.",
      "position": 1
    },
    {
      "id": "sc_4755",
      "type": "sentence_context",
      "content": "[`fs.writeFileSync(file, data[, options])`] * `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs.",
      "position": 2
    },
    {
      "id": "sc_4756",
      "type": "sentence_context",
      "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: * `flush` {boolean} If all data is successfully wr...] fsyncSync()` is used to flush the data.",
      "position": 3
    },
    {
      "id": "sc_4757",
      "type": "sentence_context",
      "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: fsyncSync()` is used to flush the data....] Returns: `undefined`.",
      "position": 4
    },
    {
      "id": "sc_4758",
      "type": "sentence_context",
      "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: Returns: `undefined`....] The `mode` option only affects the newly created file.",
      "position": 5
    },
    {
      "id": "sc_4759",
      "type": "sentence_context",
      "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: The `mode` option only affects the newly created f...] open()`][] for more details.",
      "position": 6
    },
    {
      "id": "sc_4760",
      "type": "sentence_context",
      "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: open()`][] for more details....] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 7
    },
    {
      "id": "sc_4761",
      "type": "sentence_context",
      "content": "[`fs.writeFileSync(file, data[, options])`] [Previous: For detailed information, see the documentation of...] writeFile()`][].",
      "position": 8
    },
    {
      "id": "s_4762",
      "type": "sentence",
      "content": "`file` {string|Buffer|URL|integer} filename or file descriptor `data` {string|Buffer|TypedArray|DataView} `options` {Object|string} * `encoding` {string|null} **Default:** `'utf8'` * `mode` {integer} **Default:** `0o666` * `flag` {string} See [support of file system `flags`][].",
      "position": 0
    },
    {
      "id": "s_4763",
      "type": "sentence",
      "content": "**Default:** `'w'`.",
      "position": 1
    },
    {
      "id": "s_4764",
      "type": "sentence",
      "content": "* `flush` {boolean} If all data is successfully written to the file, and `flush` is `true`, `fs.",
      "position": 2
    },
    {
      "id": "s_4765",
      "type": "sentence",
      "content": "fsyncSync()` is used to flush the data.",
      "position": 3
    },
    {
      "id": "s_4766",
      "type": "sentence",
      "content": "Returns: `undefined`.",
      "position": 4
    },
    {
      "id": "s_4767",
      "type": "sentence",
      "content": "The `mode` option only affects the newly created file.",
      "position": 5
    },
    {
      "id": "s_4768",
      "type": "sentence",
      "content": "open()`][] for more details.",
      "position": 6
    },
    {
      "id": "s_4769",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 7
    },
    {
      "id": "s_4770",
      "type": "sentence",
      "content": "writeFile()`][].",
      "position": 8
    },
    {
      "id": "w_4771",
      "type": "window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.write(fd, buffer...)`][].",
      "position": 0,
      "windowSize": 39
    },
    {
      "id": "sw_4772",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer. byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4773",
      "type": "sentence_window",
      "content": "byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, buffer...)",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4774",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, buffer...)",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4775",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, buffer, offset[, length[, position]])`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "sc_4776",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, buffer, offset[, length[, position]])`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
      "position": 1
    },
    {
      "id": "sc_4777",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, buffer, offset[, length[, position]])`] [Previous: byteLength - offset` `position` {integer|null} **D...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "sc_4778",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, buffer, offset[, length[, position]])`] [Previous: For detailed information, see the documentation of...] write(fd, buffer...)",
      "position": 3
    },
    {
      "id": "s_4779",
      "type": "sentence",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `offset` {integer} **Default:** `0` `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "s_4780",
      "type": "sentence",
      "content": "byteLength - offset` `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
      "position": 1
    },
    {
      "id": "s_4781",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "s_4782",
      "type": "sentence",
      "content": "write(fd, buffer...)",
      "position": 3
    },
    {
      "id": "w_4783",
      "type": "window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object}\n* `offset` {integer} **Default:** `0`\n* `length` {integer} **Default:** `buffer.byteLength - offset`\n* `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.write(fd, buffer...)`][].",
      "position": 0,
      "windowSize": 41
    },
    {
      "id": "sw_4784",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer. byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4785",
      "type": "sentence_window",
      "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, buffer...)",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4786",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, buffer...)",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4787",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, buffer[, options])`] `fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "sc_4788",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, buffer[, options])`] [Previous: `fd` {integer} `buffer` {Buffer|TypedArray|DataVie...] byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
      "position": 1
    },
    {
      "id": "sc_4789",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, buffer[, options])`] [Previous: byteLength - offset` * `position` {integer|null} *...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "sc_4790",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, buffer[, options])`] [Previous: For detailed information, see the documentation of...] write(fd, buffer...)",
      "position": 3
    },
    {
      "id": "s_4791",
      "type": "sentence",
      "content": "`fd` {integer} `buffer` {Buffer|TypedArray|DataView} `options` {Object} * `offset` {integer} **Default:** `0` * `length` {integer} **Default:** `buffer.",
      "position": 0
    },
    {
      "id": "s_4792",
      "type": "sentence",
      "content": "byteLength - offset` * `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
      "position": 1
    },
    {
      "id": "s_4793",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 2
    },
    {
      "id": "s_4794",
      "type": "sentence",
      "content": "write(fd, buffer...)",
      "position": 3
    },
    {
      "id": "w_4795",
      "type": "window",
      "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.write(fd, string...)`][].",
      "position": 0,
      "windowSize": 33
    },
    {
      "id": "sw_4796",
      "type": "sentence_window",
      "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, string...)",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4797",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. write(fd, string...)",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_4798",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, string[, position[, encoding]])`] `fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` Returns: {number} The number of bytes written.",
      "position": 0
    },
    {
      "id": "sc_4799",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, string[, position[, encoding]])`] [Previous: `fd` {integer} `string` {string} `position` {integ...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "sc_4800",
      "type": "sentence_context",
      "content": "[`fs.writeSync(fd, string[, position[, encoding]])`] [Previous: For detailed information, see the documentation of...] write(fd, string...)",
      "position": 2
    },
    {
      "id": "s_4801",
      "type": "sentence",
      "content": "`fd` {integer} `string` {string} `position` {integer|null} **Default:** `null` `encoding` {string} **Default:** `'utf8'` Returns: {number} The number of bytes written.",
      "position": 0
    },
    {
      "id": "s_4802",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "s_4803",
      "type": "sentence",
      "content": "write(fd, string...)",
      "position": 2
    },
    {
      "id": "w_4804",
      "type": "window",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of\nthis API: [`fs.writev()`][].",
      "position": 0,
      "windowSize": 28
    },
    {
      "id": "sw_4805",
      "type": "sentence_window",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written. For detailed information, see the documentation of the asynchronous version of this API: [`fs. writev()`][].",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4806",
      "type": "sentence_window",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs. writev()`][].",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_4807",
      "type": "sentence_context",
      "content": "[`fs.writevSync(fd, buffers[, position])`] `fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
      "position": 0
    },
    {
      "id": "sc_4808",
      "type": "sentence_context",
      "content": "[`fs.writevSync(fd, buffers[, position])`] [Previous: `fd` {integer} `buffers` {ArrayBufferView\\[]} `pos...] For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "sc_4809",
      "type": "sentence_context",
      "content": "[`fs.writevSync(fd, buffers[, position])`] [Previous: For detailed information, see the documentation of...] writev()`][].",
      "position": 2
    },
    {
      "id": "s_4810",
      "type": "sentence",
      "content": "`fd` {integer} `buffers` {ArrayBufferView\\[]} `position` {integer|null} **Default:** `null` Returns: {number} The number of bytes written.",
      "position": 0
    },
    {
      "id": "s_4811",
      "type": "sentence",
      "content": "For detailed information, see the documentation of the asynchronous version of this API: [`fs.",
      "position": 1
    },
    {
      "id": "s_4812",
      "type": "sentence",
      "content": "writev()`][].",
      "position": 2
    },
    {
      "id": "sc_4813",
      "type": "sentence_context",
      "content": "[Common Objects] The common objects are shared by all of the file system API variants (promise, callback, and synchronous).",
      "position": 0
    },
    {
      "id": "s_4814",
      "type": "sentence",
      "content": "The common objects are shared by all of the file system API variants (promise, callback, and synchronous).",
      "position": 0
    },
    {
      "id": "w_4815",
      "type": "window",
      "content": "A class representing a directory stream. Created by [`fs.opendir()`][], [`fs.opendirSync()`][], or\n[`fsPromises.opendir()`][]. When using the async iterator, the {fs.Dir} object will be automatically\nclosed after the iterator exits.",
      "position": 0,
      "windowSize": 26
    },
    {
      "id": "sw_4816",
      "type": "sentence_window",
      "content": "A class representing a directory stream. Created by [`fs. opendir()`][], [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4817",
      "type": "sentence_window",
      "content": "Created by [`fs. opendir()`][], [`fs. opendirSync()`][], or [`fsPromises.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4818",
      "type": "sentence_window",
      "content": "opendir()`][], [`fs. opendirSync()`][], or [`fsPromises. opendir()`][].",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4819",
      "type": "sentence_window",
      "content": "opendirSync()`][], or [`fsPromises. opendir()`][]. When using the async iterator, the {fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4820",
      "type": "sentence_window",
      "content": "opendir()`][]. When using the async iterator, the {fs. Dir} object will be automatically closed after the iterator exits.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4821",
      "type": "sentence_window",
      "content": "When using the async iterator, the {fs. Dir} object will be automatically closed after the iterator exits.",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_4822",
      "type": "sentence_context",
      "content": "[Class: `fs.Dir`] A class representing a directory stream.",
      "position": 0
    },
    {
      "id": "sc_4823",
      "type": "sentence_context",
      "content": "[Class: `fs.Dir`] [Previous: A class representing a directory stream....] Created by [`fs.",
      "position": 1
    },
    {
      "id": "sc_4824",
      "type": "sentence_context",
      "content": "[Class: `fs.Dir`] opendir()`][], [`fs.",
      "position": 2
    },
    {
      "id": "sc_4825",
      "type": "sentence_context",
      "content": "[Class: `fs.Dir`] opendirSync()`][], or [`fsPromises.",
      "position": 3
    },
    {
      "id": "sc_4826",
      "type": "sentence_context",
      "content": "[Class: `fs.Dir`] [Previous: opendirSync()`][], or [`fsPromises....] opendir()`][].",
      "position": 4
    },
    {
      "id": "sc_4827",
      "type": "sentence_context",
      "content": "[Class: `fs.Dir`] When using the async iterator, the {fs.",
      "position": 5
    },
    {
      "id": "sc_4828",
      "type": "sentence_context",
      "content": "[Class: `fs.Dir`] [Previous: When using the async iterator, the {fs....] Dir} object will be automatically closed after the iterator exits.",
      "position": 6
    },
    {
      "id": "s_4829",
      "type": "sentence",
      "content": "A class representing a directory stream.",
      "position": 0
    },
    {
      "id": "s_4830",
      "type": "sentence",
      "content": "Created by [`fs.",
      "position": 1
    },
    {
      "id": "s_4831",
      "type": "sentence",
      "content": "opendir()`][], [`fs.",
      "position": 2
    },
    {
      "id": "s_4832",
      "type": "sentence",
      "content": "opendirSync()`][], or [`fsPromises.",
      "position": 3
    },
    {
      "id": "s_4833",
      "type": "sentence",
      "content": "opendir()`][].",
      "position": 4
    },
    {
      "id": "s_4834",
      "type": "sentence",
      "content": "When using the async iterator, the {fs.",
      "position": 5
    },
    {
      "id": "s_4835",
      "type": "sentence",
      "content": "Dir} object will be automatically closed after the iterator exits.",
      "position": 6
    },
    {
      "id": "w_4836",
      "type": "window",
      "content": "Returns: {Promise} Asynchronously close the directory's underlying resource handle.\nSubsequent reads will result in errors. A promise is returned that will be fulfilled after the resource has been\nclosed.",
      "position": 0,
      "windowSize": 27
    },
    {
      "id": "sw_4837",
      "type": "sentence_window",
      "content": "Returns: {Promise} Asynchronously close the directory's underlying resource handle. Subsequent reads will result in errors.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4838",
      "type": "sentence_window",
      "content": "Asynchronously close the directory's underlying resource handle. Subsequent reads will result in errors. A promise is returned that will be fulfilled after the resource has been closed.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4839",
      "type": "sentence_window",
      "content": "Subsequent reads will result in errors. A promise is returned that will be fulfilled after the resource has been closed.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4840",
      "type": "sentence_context",
      "content": "[`dir.close()`] Returns: {Promise}",
      "position": 0
    },
    {
      "id": "sc_4841",
      "type": "sentence_context",
      "content": "[`dir.close()`] Asynchronously close the directory's underlying resource handle.",
      "position": 1
    },
    {
      "id": "sc_4842",
      "type": "sentence_context",
      "content": "[`dir.close()`] [Previous: Asynchronously close the directory's underlying re...] Subsequent reads will result in errors.",
      "position": 2
    },
    {
      "id": "sc_4843",
      "type": "sentence_context",
      "content": "[`dir.close()`] [Previous: Subsequent reads will result in errors....] A promise is returned that will be fulfilled after the resource has been closed.",
      "position": 3
    },
    {
      "id": "s_4844",
      "type": "sentence",
      "content": "Returns: {Promise}",
      "position": 0
    },
    {
      "id": "s_4845",
      "type": "sentence",
      "content": "Asynchronously close the directory's underlying resource handle.",
      "position": 1
    },
    {
      "id": "s_4846",
      "type": "sentence",
      "content": "Subsequent reads will result in errors.",
      "position": 2
    },
    {
      "id": "s_4847",
      "type": "sentence",
      "content": "A promise is returned that will be fulfilled after the resource has been closed.",
      "position": 3
    },
    {
      "id": "w_4848",
      "type": "window",
      "content": "`callback` {Function}\n* `err` {Error} Asynchronously close the directory's underlying resource handle.\nSubsequent reads will result in errors. The `callback` will be called after the resource handle has been closed.",
      "position": 0,
      "windowSize": 28
    },
    {
      "id": "sw_4849",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} Asynchronously close the directory's underlying resource handle. Subsequent reads will result in errors.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4850",
      "type": "sentence_window",
      "content": "Asynchronously close the directory's underlying resource handle. Subsequent reads will result in errors. The `callback` will be called after the resource handle has been closed.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4851",
      "type": "sentence_window",
      "content": "Subsequent reads will result in errors. The `callback` will be called after the resource handle has been closed.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_4852",
      "type": "sentence_context",
      "content": "[`dir.close(callback)`] `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_4853",
      "type": "sentence_context",
      "content": "[`dir.close(callback)`] [Previous: `callback` {Function} * `err` {Error}...] Asynchronously close the directory's underlying resource handle.",
      "position": 1
    },
    {
      "id": "sc_4854",
      "type": "sentence_context",
      "content": "[`dir.close(callback)`] [Previous: Asynchronously close the directory's underlying re...] Subsequent reads will result in errors.",
      "position": 2
    },
    {
      "id": "sc_4855",
      "type": "sentence_context",
      "content": "[`dir.close(callback)`] [Previous: Subsequent reads will result in errors....] The `callback` will be called after the resource handle has been closed.",
      "position": 3
    },
    {
      "id": "s_4856",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_4857",
      "type": "sentence",
      "content": "Asynchronously close the directory's underlying resource handle.",
      "position": 1
    },
    {
      "id": "s_4858",
      "type": "sentence",
      "content": "Subsequent reads will result in errors.",
      "position": 2
    },
    {
      "id": "s_4859",
      "type": "sentence",
      "content": "The `callback` will be called after the resource handle has been closed.",
      "position": 3
    },
    {
      "id": "sw_4860",
      "type": "sentence_window",
      "content": "Synchronously close the directory's underlying resource handle. Subsequent reads will result in errors.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_4861",
      "type": "sentence_context",
      "content": "[`dir.closeSync()`] Synchronously close the directory's underlying resource handle.",
      "position": 0
    },
    {
      "id": "sc_4862",
      "type": "sentence_context",
      "content": "[`dir.closeSync()`] [Previous: Synchronously close the directory's underlying res...] Subsequent reads will result in errors.",
      "position": 1
    },
    {
      "id": "s_4863",
      "type": "sentence",
      "content": "Synchronously close the directory's underlying resource handle.",
      "position": 0
    },
    {
      "id": "s_4864",
      "type": "sentence",
      "content": "Subsequent reads will result in errors.",
      "position": 1
    },
    {
      "id": "sw_4865",
      "type": "sentence_window",
      "content": "Type: {string} The read-only path of this directory as was provided to [`fs. opendir()`][], [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4866",
      "type": "sentence_window",
      "content": "The read-only path of this directory as was provided to [`fs. opendir()`][], [`fs. opendirSync()`][], or [`fsPromises.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4867",
      "type": "sentence_window",
      "content": "opendir()`][], [`fs. opendirSync()`][], or [`fsPromises. opendir()`][].",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4868",
      "type": "sentence_window",
      "content": "opendirSync()`][], or [`fsPromises. opendir()`][].",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_4869",
      "type": "sentence_context",
      "content": "[`dir.path`] Type: {string}",
      "position": 0
    },
    {
      "id": "sc_4870",
      "type": "sentence_context",
      "content": "[`dir.path`] The read-only path of this directory as was provided to [`fs.",
      "position": 1
    },
    {
      "id": "sc_4871",
      "type": "sentence_context",
      "content": "[`dir.path`] [Previous: The read-only path of this directory as was provid...] opendir()`][], [`fs.",
      "position": 2
    },
    {
      "id": "sc_4872",
      "type": "sentence_context",
      "content": "[`dir.path`] opendirSync()`][], or [`fsPromises.",
      "position": 3
    },
    {
      "id": "sc_4873",
      "type": "sentence_context",
      "content": "[`dir.path`] [Previous: opendirSync()`][], or [`fsPromises....] opendir()`][].",
      "position": 4
    },
    {
      "id": "s_4874",
      "type": "sentence",
      "content": "Type: {string}",
      "position": 0
    },
    {
      "id": "s_4875",
      "type": "sentence",
      "content": "The read-only path of this directory as was provided to [`fs.",
      "position": 1
    },
    {
      "id": "s_4876",
      "type": "sentence",
      "content": "opendir()`][], [`fs.",
      "position": 2
    },
    {
      "id": "s_4877",
      "type": "sentence",
      "content": "opendirSync()`][], or [`fsPromises.",
      "position": 3
    },
    {
      "id": "s_4878",
      "type": "sentence",
      "content": "opendir()`][].",
      "position": 4
    },
    {
      "id": "w_4879",
      "type": "window",
      "content": "Returns: {Promise} Fulfills with a {fs.Dirent|null} Asynchronously read the next directory entry via readdir(3) as an\n{fs.Dirent}. A promise is returned that will be fulfilled with an {fs.Dirent}, or `null`\nif there are no more directory entries to read. Directory entries returned by this function are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory might not be\nincluded in the iteration results.",
      "position": 0,
      "windowSize": 71
    },
    {
      "id": "sw_4880",
      "type": "sentence_window",
      "content": "Returns: {Promise} Fulfills with a {fs. Dirent|null} Asynchronously read the next directory entry via readdir(3) as an {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4881",
      "type": "sentence_window",
      "content": "Dirent|null} Asynchronously read the next directory entry via readdir(3) as an {fs. A promise is returned that will be fulfilled with an {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4882",
      "type": "sentence_window",
      "content": "Asynchronously read the next directory entry via readdir(3) as an {fs. A promise is returned that will be fulfilled with an {fs. Dirent}, or `null` if there are no more directory entries to read.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4883",
      "type": "sentence_window",
      "content": "A promise is returned that will be fulfilled with an {fs. Dirent}, or `null` if there are no more directory entries to read. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4884",
      "type": "sentence_window",
      "content": "Dirent}, or `null` if there are no more directory entries to read. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4885",
      "type": "sentence_window",
      "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_4886",
      "type": "sentence_context",
      "content": "[`dir.read()`] Returns: {Promise} Fulfills with a {fs.",
      "position": 0
    },
    {
      "id": "sc_4887",
      "type": "sentence_context",
      "content": "[`dir.read()`] [Previous: Returns: {Promise} Fulfills with a {fs....] Dirent|null}",
      "position": 1
    },
    {
      "id": "sc_4888",
      "type": "sentence_context",
      "content": "[`dir.read()`] Asynchronously read the next directory entry via readdir(3) as an {fs.",
      "position": 2
    },
    {
      "id": "sc_4889",
      "type": "sentence_context",
      "content": "[`dir.read()`] [Previous: Asynchronously read the next directory entry via r...] A promise is returned that will be fulfilled with an {fs.",
      "position": 3
    },
    {
      "id": "sc_4890",
      "type": "sentence_context",
      "content": "[`dir.read()`] [Previous: A promise is returned that will be fulfilled with ...] Dirent}, or `null` if there are no more directory entries to read.",
      "position": 4
    },
    {
      "id": "sc_4891",
      "type": "sentence_context",
      "content": "[`dir.read()`] [Previous: Dirent}, or `null` if there are no more directory ...] Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 5
    },
    {
      "id": "sc_4892",
      "type": "sentence_context",
      "content": "[`dir.read()`] [Previous: Directory entries returned by this function are in...] Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 6
    },
    {
      "id": "s_4893",
      "type": "sentence",
      "content": "Returns: {Promise} Fulfills with a {fs.",
      "position": 0
    },
    {
      "id": "s_4894",
      "type": "sentence",
      "content": "Dirent|null}",
      "position": 1
    },
    {
      "id": "s_4895",
      "type": "sentence",
      "content": "Asynchronously read the next directory entry via readdir(3) as an {fs.",
      "position": 2
    },
    {
      "id": "s_4896",
      "type": "sentence",
      "content": "A promise is returned that will be fulfilled with an {fs.",
      "position": 3
    },
    {
      "id": "s_4897",
      "type": "sentence",
      "content": "Dirent}, or `null` if there are no more directory entries to read.",
      "position": 4
    },
    {
      "id": "s_4898",
      "type": "sentence",
      "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 5
    },
    {
      "id": "s_4899",
      "type": "sentence",
      "content": "Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 6
    },
    {
      "id": "w_4900",
      "type": "window",
      "content": "`callback` {Function}\n* `err` {Error}\n* `dirent` {fs.Dirent|null} Asynchronously read the next directory entry via readdir(3) as an\n{fs.Dirent}. After the read is completed, the `callback` will be called with an\n{fs.Dirent}, or `null` if there are no more directory entries to read. Directory entries returned by this function are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory might not be\nincluded in the iteration results.",
      "position": 0,
      "windowSize": 73
    },
    {
      "id": "sw_4901",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} * `dirent` {fs. Dirent|null} Asynchronously read the next directory entry via readdir(3) as an {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4902",
      "type": "sentence_window",
      "content": "Dirent|null} Asynchronously read the next directory entry via readdir(3) as an {fs. After the read is completed, the `callback` will be called with an {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4903",
      "type": "sentence_window",
      "content": "Asynchronously read the next directory entry via readdir(3) as an {fs. After the read is completed, the `callback` will be called with an {fs. Dirent}, or `null` if there are no more directory entries to read.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4904",
      "type": "sentence_window",
      "content": "After the read is completed, the `callback` will be called with an {fs. Dirent}, or `null` if there are no more directory entries to read. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4905",
      "type": "sentence_window",
      "content": "Dirent}, or `null` if there are no more directory entries to read. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4906",
      "type": "sentence_window",
      "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_4907",
      "type": "sentence_context",
      "content": "[`dir.read(callback)`] `callback` {Function} * `err` {Error} * `dirent` {fs.",
      "position": 0
    },
    {
      "id": "sc_4908",
      "type": "sentence_context",
      "content": "[`dir.read(callback)`] [Previous: `callback` {Function} * `err` {Error} * `dirent` {...] Dirent|null}",
      "position": 1
    },
    {
      "id": "sc_4909",
      "type": "sentence_context",
      "content": "[`dir.read(callback)`] Asynchronously read the next directory entry via readdir(3) as an {fs.",
      "position": 2
    },
    {
      "id": "sc_4910",
      "type": "sentence_context",
      "content": "[`dir.read(callback)`] [Previous: Asynchronously read the next directory entry via r...] After the read is completed, the `callback` will be called with an {fs.",
      "position": 3
    },
    {
      "id": "sc_4911",
      "type": "sentence_context",
      "content": "[`dir.read(callback)`] [Previous: After the read is completed, the `callback` will b...] Dirent}, or `null` if there are no more directory entries to read.",
      "position": 4
    },
    {
      "id": "sc_4912",
      "type": "sentence_context",
      "content": "[`dir.read(callback)`] [Previous: Dirent}, or `null` if there are no more directory ...] Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 5
    },
    {
      "id": "sc_4913",
      "type": "sentence_context",
      "content": "[`dir.read(callback)`] [Previous: Directory entries returned by this function are in...] Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 6
    },
    {
      "id": "s_4914",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error} * `dirent` {fs.",
      "position": 0
    },
    {
      "id": "s_4915",
      "type": "sentence",
      "content": "Dirent|null}",
      "position": 1
    },
    {
      "id": "s_4916",
      "type": "sentence",
      "content": "Asynchronously read the next directory entry via readdir(3) as an {fs.",
      "position": 2
    },
    {
      "id": "s_4917",
      "type": "sentence",
      "content": "After the read is completed, the `callback` will be called with an {fs.",
      "position": 3
    },
    {
      "id": "s_4918",
      "type": "sentence",
      "content": "Dirent}, or `null` if there are no more directory entries to read.",
      "position": 4
    },
    {
      "id": "s_4919",
      "type": "sentence",
      "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 5
    },
    {
      "id": "s_4920",
      "type": "sentence",
      "content": "Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 6
    },
    {
      "id": "w_4921",
      "type": "window",
      "content": "Returns: {fs.Dirent|null} Synchronously read the next directory entry as an {fs.Dirent}. See the\nPOSIX readdir(3) documentation for more detail. If there are no more directory entries to read, `null` will be returned. Directory entries returned by this function are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory might not be\nincluded in the iteration results.",
      "position": 0,
      "windowSize": 65
    },
    {
      "id": "sw_4922",
      "type": "sentence_window",
      "content": "Returns: {fs. Dirent|null} Synchronously read the next directory entry as an {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4923",
      "type": "sentence_window",
      "content": "Dirent|null} Synchronously read the next directory entry as an {fs. See the POSIX readdir(3) documentation for more detail.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4924",
      "type": "sentence_window",
      "content": "Synchronously read the next directory entry as an {fs. See the POSIX readdir(3) documentation for more detail. If there are no more directory entries to read, `null` will be returned.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4925",
      "type": "sentence_window",
      "content": "See the POSIX readdir(3) documentation for more detail. If there are no more directory entries to read, `null` will be returned. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4926",
      "type": "sentence_window",
      "content": "If there are no more directory entries to read, `null` will be returned. Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4927",
      "type": "sentence_window",
      "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_4928",
      "type": "sentence_context",
      "content": "[`dir.readSync()`] Returns: {fs.",
      "position": 0
    },
    {
      "id": "sc_4929",
      "type": "sentence_context",
      "content": "[`dir.readSync()`] Dirent|null}",
      "position": 1
    },
    {
      "id": "sc_4930",
      "type": "sentence_context",
      "content": "[`dir.readSync()`] Synchronously read the next directory entry as an {fs.",
      "position": 2
    },
    {
      "id": "sc_4931",
      "type": "sentence_context",
      "content": "[`dir.readSync()`] [Previous: Synchronously read the next directory entry as an ...] See the POSIX readdir(3) documentation for more detail.",
      "position": 3
    },
    {
      "id": "sc_4932",
      "type": "sentence_context",
      "content": "[`dir.readSync()`] [Previous: See the POSIX readdir(3) documentation for more de...] If there are no more directory entries to read, `null` will be returned.",
      "position": 4
    },
    {
      "id": "sc_4933",
      "type": "sentence_context",
      "content": "[`dir.readSync()`] [Previous: If there are no more directory entries to read, `n...] Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 5
    },
    {
      "id": "sc_4934",
      "type": "sentence_context",
      "content": "[`dir.readSync()`] [Previous: Directory entries returned by this function are in...] Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 6
    },
    {
      "id": "s_4935",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 0
    },
    {
      "id": "s_4936",
      "type": "sentence",
      "content": "Dirent|null}",
      "position": 1
    },
    {
      "id": "s_4937",
      "type": "sentence",
      "content": "Synchronously read the next directory entry as an {fs.",
      "position": 2
    },
    {
      "id": "s_4938",
      "type": "sentence",
      "content": "See the POSIX readdir(3) documentation for more detail.",
      "position": 3
    },
    {
      "id": "s_4939",
      "type": "sentence",
      "content": "If there are no more directory entries to read, `null` will be returned.",
      "position": 4
    },
    {
      "id": "s_4940",
      "type": "sentence",
      "content": "Directory entries returned by this function are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 5
    },
    {
      "id": "s_4941",
      "type": "sentence",
      "content": "Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 6
    },
    {
      "id": "w_4942",
      "type": "window",
      "content": "Returns: {AsyncIterator} An AsyncIterator of {fs.Dirent} Asynchronously iterates over the directory until all entries have\nbeen read. Refer to the POSIX readdir(3) documentation for more detail. Entries returned by the async iterator are always an {fs.Dirent}.\nThe `null` case from `dir.read()` is handled internally. See {fs.Dir} for an example. Directory entries returned by this iterator are in no particular order as\nprovided by the operating system's underlying directory mechanisms.\nEntries added or removed while iterating over the directory might not be\nincluded in the iteration results.",
      "position": 0,
      "windowSize": 81
    },
    {
      "id": "sw_4943",
      "type": "sentence_window",
      "content": "Returns: {AsyncIterator} An AsyncIterator of {fs. Asynchronously iterates over the directory until all entries have been read. Refer to the POSIX readdir(3) documentation for more detail.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4944",
      "type": "sentence_window",
      "content": "Asynchronously iterates over the directory until all entries have been read. Refer to the POSIX readdir(3) documentation for more detail. Entries returned by the async iterator are always an {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4945",
      "type": "sentence_window",
      "content": "Refer to the POSIX readdir(3) documentation for more detail. Entries returned by the async iterator are always an {fs. The `null` case from `dir.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4946",
      "type": "sentence_window",
      "content": "Entries returned by the async iterator are always an {fs. The `null` case from `dir. read()` is handled internally.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4947",
      "type": "sentence_window",
      "content": "The `null` case from `dir. read()` is handled internally. Dir} for an example.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_4948",
      "type": "sentence_window",
      "content": "read()` is handled internally. Dir} for an example. Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_4949",
      "type": "sentence_window",
      "content": "Dir} for an example. Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_4950",
      "type": "sentence_window",
      "content": "Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms. Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_4951",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncIterator]()`] Returns: {AsyncIterator} An AsyncIterator of {fs.",
      "position": 0
    },
    {
      "id": "sc_4952",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncIterator]()`] [Previous: Returns: {AsyncIterator} An AsyncIterator of {fs....] Asynchronously iterates over the directory until all entries have been read.",
      "position": 1
    },
    {
      "id": "sc_4953",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncIterator]()`] [Previous: Asynchronously iterates over the directory until a...] Refer to the POSIX readdir(3) documentation for more detail.",
      "position": 2
    },
    {
      "id": "sc_4954",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncIterator]()`] [Previous: Refer to the POSIX readdir(3) documentation for mo...] Entries returned by the async iterator are always an {fs.",
      "position": 3
    },
    {
      "id": "sc_4955",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncIterator]()`] [Previous: Entries returned by the async iterator are always ...] The `null` case from `dir.",
      "position": 4
    },
    {
      "id": "sc_4956",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncIterator]()`] [Previous: The `null` case from `dir....] read()` is handled internally.",
      "position": 5
    },
    {
      "id": "sc_4957",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncIterator]()`] [Previous: read()` is handled internally....] Dir} for an example.",
      "position": 6
    },
    {
      "id": "sc_4958",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncIterator]()`] Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 7
    },
    {
      "id": "sc_4959",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncIterator]()`] [Previous: Directory entries returned by this iterator are in...] Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 8
    },
    {
      "id": "s_4960",
      "type": "sentence",
      "content": "Returns: {AsyncIterator} An AsyncIterator of {fs.",
      "position": 0
    },
    {
      "id": "s_4961",
      "type": "sentence",
      "content": "Asynchronously iterates over the directory until all entries have been read.",
      "position": 1
    },
    {
      "id": "s_4962",
      "type": "sentence",
      "content": "Refer to the POSIX readdir(3) documentation for more detail.",
      "position": 2
    },
    {
      "id": "s_4963",
      "type": "sentence",
      "content": "Entries returned by the async iterator are always an {fs.",
      "position": 3
    },
    {
      "id": "s_4964",
      "type": "sentence",
      "content": "The `null` case from `dir.",
      "position": 4
    },
    {
      "id": "s_4965",
      "type": "sentence",
      "content": "read()` is handled internally.",
      "position": 5
    },
    {
      "id": "s_4966",
      "type": "sentence",
      "content": "Dir} for an example.",
      "position": 6
    },
    {
      "id": "s_4967",
      "type": "sentence",
      "content": "Directory entries returned by this iterator are in no particular order as provided by the operating system's underlying directory mechanisms.",
      "position": 7
    },
    {
      "id": "s_4968",
      "type": "sentence",
      "content": "Entries added or removed while iterating over the directory might not be included in the iteration results.",
      "position": 8
    },
    {
      "id": "sw_4969",
      "type": "sentence_window",
      "content": "Calls `dir. close()` if the directory handle is open, and returns a promise that fulfills when disposal is complete.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_4970",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncDispose]()`] Calls `dir.",
      "position": 0
    },
    {
      "id": "sc_4971",
      "type": "sentence_context",
      "content": "[`dir[Symbol.asyncDispose]()`] close()` if the directory handle is open, and returns a promise that fulfills when disposal is complete.",
      "position": 1
    },
    {
      "id": "s_4972",
      "type": "sentence",
      "content": "Calls `dir.",
      "position": 0
    },
    {
      "id": "s_4973",
      "type": "sentence",
      "content": "close()` if the directory handle is open, and returns a promise that fulfills when disposal is complete.",
      "position": 1
    },
    {
      "id": "sw_4974",
      "type": "sentence_window",
      "content": "Calls `dir. closeSync()` if the directory handle is open, and returns `undefined`.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_4975",
      "type": "sentence_context",
      "content": "[`dir[Symbol.dispose]()`] Calls `dir.",
      "position": 0
    },
    {
      "id": "sc_4976",
      "type": "sentence_context",
      "content": "[`dir[Symbol.dispose]()`] closeSync()` if the directory handle is open, and returns `undefined`.",
      "position": 1
    },
    {
      "id": "s_4977",
      "type": "sentence",
      "content": "Calls `dir.",
      "position": 0
    },
    {
      "id": "s_4978",
      "type": "sentence",
      "content": "closeSync()` if the directory handle is open, and returns `undefined`.",
      "position": 1
    },
    {
      "id": "w_4979",
      "type": "window",
      "content": "A representation of a directory entry, which can be a file or a subdirectory\nwithin the directory, as returned by reading from an {fs.Dir}. The\ndirectory entry is a combination of the file name and file type pairs. Additionally, when [`fs.readdir()`][] or [`fs.readdirSync()`][] is called with\nthe `withFileTypes` option set to `true`, the resulting array is filled with\n{fs.Dirent} objects, rather than strings or {Buffer}s.",
      "position": 0,
      "windowSize": 61
    },
    {
      "id": "sw_4980",
      "type": "sentence_window",
      "content": "A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an {fs. The directory entry is a combination of the file name and file type pairs. Additionally, when [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4981",
      "type": "sentence_window",
      "content": "The directory entry is a combination of the file name and file type pairs. Additionally, when [`fs. readdir()`][] or [`fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_4982",
      "type": "sentence_window",
      "content": "Additionally, when [`fs. readdir()`][] or [`fs. readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_4983",
      "type": "sentence_window",
      "content": "readdir()`][] or [`fs. readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs. Dirent} objects, rather than strings or {Buffer}s.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_4984",
      "type": "sentence_window",
      "content": "readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs. Dirent} objects, rather than strings or {Buffer}s.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_4985",
      "type": "sentence_context",
      "content": "[Class: `fs.Dirent`] A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an {fs.",
      "position": 0
    },
    {
      "id": "sc_4986",
      "type": "sentence_context",
      "content": "[Class: `fs.Dirent`] [Previous: A representation of a directory entry, which can b...] The directory entry is a combination of the file name and file type pairs.",
      "position": 1
    },
    {
      "id": "sc_4987",
      "type": "sentence_context",
      "content": "[Class: `fs.Dirent`] [Previous: The directory entry is a combination of the file n...] Additionally, when [`fs.",
      "position": 2
    },
    {
      "id": "sc_4988",
      "type": "sentence_context",
      "content": "[Class: `fs.Dirent`] [Previous: Additionally, when [`fs....] readdir()`][] or [`fs.",
      "position": 3
    },
    {
      "id": "sc_4989",
      "type": "sentence_context",
      "content": "[Class: `fs.Dirent`] [Previous: readdir()`][] or [`fs....] readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs.",
      "position": 4
    },
    {
      "id": "sc_4990",
      "type": "sentence_context",
      "content": "[Class: `fs.Dirent`] [Previous: readdirSync()`][] is called with the `withFileType...] Dirent} objects, rather than strings or {Buffer}s.",
      "position": 5
    },
    {
      "id": "s_4991",
      "type": "sentence",
      "content": "A representation of a directory entry, which can be a file or a subdirectory within the directory, as returned by reading from an {fs.",
      "position": 0
    },
    {
      "id": "s_4992",
      "type": "sentence",
      "content": "The directory entry is a combination of the file name and file type pairs.",
      "position": 1
    },
    {
      "id": "s_4993",
      "type": "sentence",
      "content": "Additionally, when [`fs.",
      "position": 2
    },
    {
      "id": "s_4994",
      "type": "sentence",
      "content": "readdir()`][] or [`fs.",
      "position": 3
    },
    {
      "id": "s_4995",
      "type": "sentence",
      "content": "readdirSync()`][] is called with the `withFileTypes` option set to `true`, the resulting array is filled with {fs.",
      "position": 4
    },
    {
      "id": "s_4996",
      "type": "sentence",
      "content": "Dirent} objects, rather than strings or {Buffer}s.",
      "position": 5
    },
    {
      "id": "sw_4997",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a block device.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_4998",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Dirent} object describes a block device.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_4999",
      "type": "sentence_context",
      "content": "[`dirent.isBlockDevice()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5000",
      "type": "sentence_context",
      "content": "[`dirent.isBlockDevice()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5001",
      "type": "sentence_context",
      "content": "[`dirent.isBlockDevice()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a block device.",
      "position": 2
    },
    {
      "id": "s_5002",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5003",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5004",
      "type": "sentence",
      "content": "Dirent} object describes a block device.",
      "position": 2
    },
    {
      "id": "sw_5005",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a character device.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5006",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Dirent} object describes a character device.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5007",
      "type": "sentence_context",
      "content": "[`dirent.isCharacterDevice()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5008",
      "type": "sentence_context",
      "content": "[`dirent.isCharacterDevice()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5009",
      "type": "sentence_context",
      "content": "[`dirent.isCharacterDevice()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a character device.",
      "position": 2
    },
    {
      "id": "s_5010",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5011",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5012",
      "type": "sentence",
      "content": "Dirent} object describes a character device.",
      "position": 2
    },
    {
      "id": "sw_5013",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a file system directory.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5014",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Dirent} object describes a file system directory.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5015",
      "type": "sentence_context",
      "content": "[`dirent.isDirectory()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5016",
      "type": "sentence_context",
      "content": "[`dirent.isDirectory()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5017",
      "type": "sentence_context",
      "content": "[`dirent.isDirectory()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a file system directory.",
      "position": 2
    },
    {
      "id": "s_5018",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5019",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5020",
      "type": "sentence",
      "content": "Dirent} object describes a file system directory.",
      "position": 2
    },
    {
      "id": "sw_5021",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a first-in-first-out (FIFO) pipe.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5022",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Dirent} object describes a first-in-first-out (FIFO) pipe.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5023",
      "type": "sentence_context",
      "content": "[`dirent.isFIFO()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5024",
      "type": "sentence_context",
      "content": "[`dirent.isFIFO()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5025",
      "type": "sentence_context",
      "content": "[`dirent.isFIFO()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a first-in-first-out (FIFO) pipe.",
      "position": 2
    },
    {
      "id": "s_5026",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5027",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5028",
      "type": "sentence",
      "content": "Dirent} object describes a first-in-first-out (FIFO) pipe.",
      "position": 2
    },
    {
      "id": "sw_5029",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a regular file.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5030",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Dirent} object describes a regular file.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5031",
      "type": "sentence_context",
      "content": "[`dirent.isFile()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5032",
      "type": "sentence_context",
      "content": "[`dirent.isFile()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5033",
      "type": "sentence_context",
      "content": "[`dirent.isFile()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a regular file.",
      "position": 2
    },
    {
      "id": "s_5034",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5035",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5036",
      "type": "sentence",
      "content": "Dirent} object describes a regular file.",
      "position": 2
    },
    {
      "id": "sw_5037",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a socket.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5038",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Dirent} object describes a socket.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5039",
      "type": "sentence_context",
      "content": "[`dirent.isSocket()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5040",
      "type": "sentence_context",
      "content": "[`dirent.isSocket()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5041",
      "type": "sentence_context",
      "content": "[`dirent.isSocket()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a socket.",
      "position": 2
    },
    {
      "id": "s_5042",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5043",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5044",
      "type": "sentence",
      "content": "Dirent} object describes a socket.",
      "position": 2
    },
    {
      "id": "sw_5045",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Dirent} object describes a symbolic link.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5046",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Dirent} object describes a symbolic link.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5047",
      "type": "sentence_context",
      "content": "[`dirent.isSymbolicLink()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5048",
      "type": "sentence_context",
      "content": "[`dirent.isSymbolicLink()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5049",
      "type": "sentence_context",
      "content": "[`dirent.isSymbolicLink()`] [Previous: Returns `true` if the {fs....] Dirent} object describes a symbolic link.",
      "position": 2
    },
    {
      "id": "s_5050",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5051",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5052",
      "type": "sentence",
      "content": "Dirent} object describes a symbolic link.",
      "position": 2
    },
    {
      "id": "w_5053",
      "type": "window",
      "content": "Type: {string|Buffer} The file name that this {fs.Dirent} object refers to. The type of this\nvalue is determined by the `options.encoding` passed to [`fs.readdir()`][] or\n[`fs.readdirSync()`][].",
      "position": 0,
      "windowSize": 24
    },
    {
      "id": "sw_5054",
      "type": "sentence_window",
      "content": "Type: {string|Buffer} The file name that this {fs. Dirent} object refers to.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5055",
      "type": "sentence_window",
      "content": "The file name that this {fs. Dirent} object refers to. The type of this value is determined by the `options.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5056",
      "type": "sentence_window",
      "content": "Dirent} object refers to. The type of this value is determined by the `options. encoding` passed to [`fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5057",
      "type": "sentence_window",
      "content": "The type of this value is determined by the `options. encoding` passed to [`fs. readdir()`][] or [`fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5058",
      "type": "sentence_window",
      "content": "encoding` passed to [`fs. readdir()`][] or [`fs. readdirSync()`][].",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5059",
      "type": "sentence_window",
      "content": "readdir()`][] or [`fs. readdirSync()`][].",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_5060",
      "type": "sentence_context",
      "content": "[`dirent.name`] Type: {string|Buffer}",
      "position": 0
    },
    {
      "id": "sc_5061",
      "type": "sentence_context",
      "content": "[`dirent.name`] [Previous: Type: {string|Buffer}...] The file name that this {fs.",
      "position": 1
    },
    {
      "id": "sc_5062",
      "type": "sentence_context",
      "content": "[`dirent.name`] [Previous: The file name that this {fs....] Dirent} object refers to.",
      "position": 2
    },
    {
      "id": "sc_5063",
      "type": "sentence_context",
      "content": "[`dirent.name`] [Previous: Dirent} object refers to....] The type of this value is determined by the `options.",
      "position": 3
    },
    {
      "id": "sc_5064",
      "type": "sentence_context",
      "content": "[`dirent.name`] [Previous: The type of this value is determined by the `optio...] encoding` passed to [`fs.",
      "position": 4
    },
    {
      "id": "sc_5065",
      "type": "sentence_context",
      "content": "[`dirent.name`] [Previous: encoding` passed to [`fs....] readdir()`][] or [`fs.",
      "position": 5
    },
    {
      "id": "sc_5066",
      "type": "sentence_context",
      "content": "[`dirent.name`] [Previous: readdir()`][] or [`fs....] readdirSync()`][].",
      "position": 6
    },
    {
      "id": "s_5067",
      "type": "sentence",
      "content": "Type: {string|Buffer}",
      "position": 0
    },
    {
      "id": "s_5068",
      "type": "sentence",
      "content": "The file name that this {fs.",
      "position": 1
    },
    {
      "id": "s_5069",
      "type": "sentence",
      "content": "Dirent} object refers to.",
      "position": 2
    },
    {
      "id": "s_5070",
      "type": "sentence",
      "content": "The type of this value is determined by the `options.",
      "position": 3
    },
    {
      "id": "s_5071",
      "type": "sentence",
      "content": "encoding` passed to [`fs.",
      "position": 4
    },
    {
      "id": "s_5072",
      "type": "sentence",
      "content": "readdir()`][] or [`fs.",
      "position": 5
    },
    {
      "id": "s_5073",
      "type": "sentence",
      "content": "readdirSync()`][].",
      "position": 6
    },
    {
      "id": "sw_5074",
      "type": "sentence_window",
      "content": "Type: {string} The path to the parent directory of the file this {fs. Dirent} object refers to.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5075",
      "type": "sentence_window",
      "content": "The path to the parent directory of the file this {fs. Dirent} object refers to.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5076",
      "type": "sentence_context",
      "content": "[`dirent.parentPath`] Type: {string}",
      "position": 0
    },
    {
      "id": "sc_5077",
      "type": "sentence_context",
      "content": "[`dirent.parentPath`] The path to the parent directory of the file this {fs.",
      "position": 1
    },
    {
      "id": "sc_5078",
      "type": "sentence_context",
      "content": "[`dirent.parentPath`] [Previous: The path to the parent directory of the file this ...] Dirent} object refers to.",
      "position": 2
    },
    {
      "id": "s_5079",
      "type": "sentence",
      "content": "Type: {string}",
      "position": 0
    },
    {
      "id": "s_5080",
      "type": "sentence",
      "content": "The path to the parent directory of the file this {fs.",
      "position": 1
    },
    {
      "id": "s_5081",
      "type": "sentence",
      "content": "Dirent} object refers to.",
      "position": 2
    },
    {
      "id": "w_5082",
      "type": "window",
      "content": "Extends {EventEmitter} A successful call to [`fs.watch()`][] method will return a new {fs.FSWatcher}\nobject. All {fs.FSWatcher} objects emit a `'change'` event whenever a specific watched\nfile is modified.",
      "position": 0,
      "windowSize": 26
    },
    {
      "id": "sw_5083",
      "type": "sentence_window",
      "content": "Extends {EventEmitter} A successful call to [`fs. watch()`][] method will return a new {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5084",
      "type": "sentence_window",
      "content": "A successful call to [`fs. watch()`][] method will return a new {fs. FSWatcher} object.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5085",
      "type": "sentence_window",
      "content": "watch()`][] method will return a new {fs. FSWatcher} object. FSWatcher} objects emit a `'change'` event whenever a specific watched file is modified.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5086",
      "type": "sentence_window",
      "content": "FSWatcher} object. FSWatcher} objects emit a `'change'` event whenever a specific watched file is modified.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_5087",
      "type": "sentence_context",
      "content": "[Class: `fs.FSWatcher`] Extends {EventEmitter}",
      "position": 0
    },
    {
      "id": "sc_5088",
      "type": "sentence_context",
      "content": "[Class: `fs.FSWatcher`] [Previous: Extends {EventEmitter}...] A successful call to [`fs.",
      "position": 1
    },
    {
      "id": "sc_5089",
      "type": "sentence_context",
      "content": "[Class: `fs.FSWatcher`] [Previous: A successful call to [`fs....] watch()`][] method will return a new {fs.",
      "position": 2
    },
    {
      "id": "sc_5090",
      "type": "sentence_context",
      "content": "[Class: `fs.FSWatcher`] [Previous: watch()`][] method will return a new {fs....] FSWatcher} object.",
      "position": 3
    },
    {
      "id": "sc_5091",
      "type": "sentence_context",
      "content": "[Class: `fs.FSWatcher`] FSWatcher} objects emit a `'change'` event whenever a specific watched file is modified.",
      "position": 4
    },
    {
      "id": "s_5092",
      "type": "sentence",
      "content": "Extends {EventEmitter}",
      "position": 0
    },
    {
      "id": "s_5093",
      "type": "sentence",
      "content": "A successful call to [`fs.",
      "position": 1
    },
    {
      "id": "s_5094",
      "type": "sentence",
      "content": "watch()`][] method will return a new {fs.",
      "position": 2
    },
    {
      "id": "s_5095",
      "type": "sentence",
      "content": "FSWatcher} object.",
      "position": 3
    },
    {
      "id": "s_5096",
      "type": "sentence",
      "content": "FSWatcher} objects emit a `'change'` event whenever a specific watched file is modified.",
      "position": 4
    },
    {
      "id": "w_5097",
      "type": "window",
      "content": "`eventType` {string} The type of change event that has occurred `filename` {string|Buffer} The filename that changed (if relevant/available) Emitted when something changes in a watched directory or file.\nSee more details in [`fs.watch()`][]. The `filename` argument may not be provided depending on operating system\nsupport. If `filename` is provided, it will be provided as a {Buffer} if\n`fs.watch()` is called with its `encoding` option set to `'buffer'`, otherwise\n`filename` will be a UTF-8 string.",
      "position": 0,
      "windowSize": 70
    },
    {
      "id": "sw_5098",
      "type": "sentence_window",
      "content": "`eventType` {string} The type of change event that has occurred `filename` {string|Buffer} The filename that changed (if relevant/available) Emitted when something changes in a watched directory or file. See more details in [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5099",
      "type": "sentence_window",
      "content": "Emitted when something changes in a watched directory or file. See more details in [`fs. watch()`][].",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5100",
      "type": "sentence_window",
      "content": "See more details in [`fs. watch()`][]. The `filename` argument may not be provided depending on operating system support.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5101",
      "type": "sentence_window",
      "content": "watch()`][]. The `filename` argument may not be provided depending on operating system support. If `filename` is provided, it will be provided as a {Buffer} if `fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5102",
      "type": "sentence_window",
      "content": "The `filename` argument may not be provided depending on operating system support. If `filename` is provided, it will be provided as a {Buffer} if `fs. watch()` is called with its `encoding` option set to `'buffer'`, otherwise `filename` will be a UTF-8 string.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5103",
      "type": "sentence_window",
      "content": "If `filename` is provided, it will be provided as a {Buffer} if `fs. watch()` is called with its `encoding` option set to `'buffer'`, otherwise `filename` will be a UTF-8 string.",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_5104",
      "type": "sentence_context",
      "content": "[Event: `'change'`] `eventType` {string} The type of change event that has occurred `filename` {string|Buffer} The filename that changed (if relevant/available)",
      "position": 0
    },
    {
      "id": "sc_5105",
      "type": "sentence_context",
      "content": "[Event: `'change'`] [Previous: `eventType` {string} The type of change event that...] Emitted when something changes in a watched directory or file.",
      "position": 1
    },
    {
      "id": "sc_5106",
      "type": "sentence_context",
      "content": "[Event: `'change'`] [Previous: Emitted when something changes in a watched direct...] See more details in [`fs.",
      "position": 2
    },
    {
      "id": "sc_5107",
      "type": "sentence_context",
      "content": "[Event: `'change'`] [Previous: See more details in [`fs....] watch()`][].",
      "position": 3
    },
    {
      "id": "sc_5108",
      "type": "sentence_context",
      "content": "[Event: `'change'`] The `filename` argument may not be provided depending on operating system support.",
      "position": 4
    },
    {
      "id": "sc_5109",
      "type": "sentence_context",
      "content": "[Event: `'change'`] [Previous: The `filename` argument may not be provided depend...] If `filename` is provided, it will be provided as a {Buffer} if `fs.",
      "position": 5
    },
    {
      "id": "sc_5110",
      "type": "sentence_context",
      "content": "[Event: `'change'`] [Previous: If `filename` is provided, it will be provided as ...] watch()` is called with its `encoding` option set to `'buffer'`, otherwise `filename` will be a UTF-8 string.",
      "position": 6
    },
    {
      "id": "s_5111",
      "type": "sentence",
      "content": "`eventType` {string} The type of change event that has occurred `filename` {string|Buffer} The filename that changed (if relevant/available)",
      "position": 0
    },
    {
      "id": "s_5112",
      "type": "sentence",
      "content": "Emitted when something changes in a watched directory or file.",
      "position": 1
    },
    {
      "id": "s_5113",
      "type": "sentence",
      "content": "See more details in [`fs.",
      "position": 2
    },
    {
      "id": "s_5114",
      "type": "sentence",
      "content": "watch()`][].",
      "position": 3
    },
    {
      "id": "s_5115",
      "type": "sentence",
      "content": "The `filename` argument may not be provided depending on operating system support.",
      "position": 4
    },
    {
      "id": "s_5116",
      "type": "sentence",
      "content": "If `filename` is provided, it will be provided as a {Buffer} if `fs.",
      "position": 5
    },
    {
      "id": "s_5117",
      "type": "sentence",
      "content": "watch()` is called with its `encoding` option set to `'buffer'`, otherwise `filename` will be a UTF-8 string.",
      "position": 6
    },
    {
      "id": "sw_5118",
      "type": "sentence_window",
      "content": "Emitted when the watcher stops watching for changes. The closed {fs. FSWatcher} object is no longer usable in the event handler.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5119",
      "type": "sentence_window",
      "content": "The closed {fs. FSWatcher} object is no longer usable in the event handler.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5120",
      "type": "sentence_context",
      "content": "[Event: `'close'`] Emitted when the watcher stops watching for changes.",
      "position": 0
    },
    {
      "id": "sc_5121",
      "type": "sentence_context",
      "content": "[Event: `'close'`] [Previous: Emitted when the watcher stops watching for change...] The closed {fs.",
      "position": 1
    },
    {
      "id": "sc_5122",
      "type": "sentence_context",
      "content": "[Event: `'close'`] FSWatcher} object is no longer usable in the event handler.",
      "position": 2
    },
    {
      "id": "s_5123",
      "type": "sentence",
      "content": "Emitted when the watcher stops watching for changes.",
      "position": 0
    },
    {
      "id": "s_5124",
      "type": "sentence",
      "content": "The closed {fs.",
      "position": 1
    },
    {
      "id": "s_5125",
      "type": "sentence",
      "content": "FSWatcher} object is no longer usable in the event handler.",
      "position": 2
    },
    {
      "id": "w_5126",
      "type": "window",
      "content": "`error` {Error} Emitted when an error occurs while watching the file. The errored\n{fs.FSWatcher} object is no longer usable in the event handler.",
      "position": 0,
      "windowSize": 22
    },
    {
      "id": "sw_5127",
      "type": "sentence_window",
      "content": "`error` {Error} Emitted when an error occurs while watching the file. The errored {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5128",
      "type": "sentence_window",
      "content": "Emitted when an error occurs while watching the file. The errored {fs. FSWatcher} object is no longer usable in the event handler.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5129",
      "type": "sentence_window",
      "content": "The errored {fs. FSWatcher} object is no longer usable in the event handler.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_5130",
      "type": "sentence_context",
      "content": "[Event: `'error'`] `error` {Error}",
      "position": 0
    },
    {
      "id": "sc_5131",
      "type": "sentence_context",
      "content": "[Event: `'error'`] Emitted when an error occurs while watching the file.",
      "position": 1
    },
    {
      "id": "sc_5132",
      "type": "sentence_context",
      "content": "[Event: `'error'`] [Previous: Emitted when an error occurs while watching the fi...] The errored {fs.",
      "position": 2
    },
    {
      "id": "sc_5133",
      "type": "sentence_context",
      "content": "[Event: `'error'`] FSWatcher} object is no longer usable in the event handler.",
      "position": 3
    },
    {
      "id": "s_5134",
      "type": "sentence",
      "content": "`error` {Error}",
      "position": 0
    },
    {
      "id": "s_5135",
      "type": "sentence",
      "content": "Emitted when an error occurs while watching the file.",
      "position": 1
    },
    {
      "id": "s_5136",
      "type": "sentence",
      "content": "The errored {fs.",
      "position": 2
    },
    {
      "id": "s_5137",
      "type": "sentence",
      "content": "FSWatcher} object is no longer usable in the event handler.",
      "position": 3
    },
    {
      "id": "sw_5138",
      "type": "sentence_window",
      "content": "Stop watching for changes on the given {fs. FSWatcher}. Once stopped, the {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5139",
      "type": "sentence_window",
      "content": "FSWatcher}. Once stopped, the {fs. FSWatcher} object is no longer usable.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5140",
      "type": "sentence_window",
      "content": "Once stopped, the {fs. FSWatcher} object is no longer usable.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_5141",
      "type": "sentence_context",
      "content": "[`watcher.close()`] Stop watching for changes on the given {fs.",
      "position": 0
    },
    {
      "id": "sc_5142",
      "type": "sentence_context",
      "content": "[`watcher.close()`] [Previous: Stop watching for changes on the given {fs....] FSWatcher}.",
      "position": 1
    },
    {
      "id": "sc_5143",
      "type": "sentence_context",
      "content": "[`watcher.close()`] Once stopped, the {fs.",
      "position": 2
    },
    {
      "id": "sc_5144",
      "type": "sentence_context",
      "content": "[`watcher.close()`] [Previous: Once stopped, the {fs....] FSWatcher} object is no longer usable.",
      "position": 3
    },
    {
      "id": "s_5145",
      "type": "sentence",
      "content": "Stop watching for changes on the given {fs.",
      "position": 0
    },
    {
      "id": "s_5146",
      "type": "sentence",
      "content": "FSWatcher}.",
      "position": 1
    },
    {
      "id": "s_5147",
      "type": "sentence",
      "content": "Once stopped, the {fs.",
      "position": 2
    },
    {
      "id": "s_5148",
      "type": "sentence",
      "content": "FSWatcher} object is no longer usable.",
      "position": 3
    },
    {
      "id": "w_5149",
      "type": "window",
      "content": "Returns: {fs.FSWatcher} When called, requests that the Node.js event loop _not_ exit so long as the\n{fs.FSWatcher} is active. Calling `watcher.ref()` multiple times will have\nno effect. By default, all {fs.FSWatcher} objects are \"ref'ed\", making it normally\nunnecessary to call `watcher.ref()` unless `watcher.unref()` had been\ncalled previously.",
      "position": 0,
      "windowSize": 43
    },
    {
      "id": "sw_5150",
      "type": "sentence_window",
      "content": "Returns: {fs. When called, requests that the Node. js event loop _not_ exit so long as the {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5151",
      "type": "sentence_window",
      "content": "When called, requests that the Node. js event loop _not_ exit so long as the {fs. FSWatcher} is active.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5152",
      "type": "sentence_window",
      "content": "js event loop _not_ exit so long as the {fs. FSWatcher} is active. Calling `watcher.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5153",
      "type": "sentence_window",
      "content": "FSWatcher} is active. Calling `watcher. ref()` multiple times will have no effect.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5154",
      "type": "sentence_window",
      "content": "Calling `watcher. ref()` multiple times will have no effect. By default, all {fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5155",
      "type": "sentence_window",
      "content": "ref()` multiple times will have no effect. By default, all {fs. FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_5156",
      "type": "sentence_window",
      "content": "By default, all {fs. FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher. ref()` unless `watcher.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_5157",
      "type": "sentence_window",
      "content": "FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher. ref()` unless `watcher. unref()` had been called previously.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_5158",
      "type": "sentence_window",
      "content": "ref()` unless `watcher. unref()` had been called previously.",
      "position": 8,
      "sentenceCount": 2
    },
    {
      "id": "sc_5159",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] Returns: {fs.",
      "position": 0
    },
    {
      "id": "sc_5160",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] When called, requests that the Node.",
      "position": 1
    },
    {
      "id": "sc_5161",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: When called, requests that the Node....] js event loop _not_ exit so long as the {fs.",
      "position": 2
    },
    {
      "id": "sc_5162",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: js event loop _not_ exit so long as the {fs....] FSWatcher} is active.",
      "position": 3
    },
    {
      "id": "sc_5163",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: FSWatcher} is active....] Calling `watcher.",
      "position": 4
    },
    {
      "id": "sc_5164",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] ref()` multiple times will have no effect.",
      "position": 5
    },
    {
      "id": "sc_5165",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: ref()` multiple times will have no effect....] By default, all {fs.",
      "position": 6
    },
    {
      "id": "sc_5166",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
      "position": 7
    },
    {
      "id": "sc_5167",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: FSWatcher} objects are \"ref'ed\", making it normall...] ref()` unless `watcher.",
      "position": 8
    },
    {
      "id": "sc_5168",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: ref()` unless `watcher....] unref()` had been called previously.",
      "position": 9
    },
    {
      "id": "s_5169",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 0
    },
    {
      "id": "s_5170",
      "type": "sentence",
      "content": "When called, requests that the Node.",
      "position": 1
    },
    {
      "id": "s_5171",
      "type": "sentence",
      "content": "js event loop _not_ exit so long as the {fs.",
      "position": 2
    },
    {
      "id": "s_5172",
      "type": "sentence",
      "content": "FSWatcher} is active.",
      "position": 3
    },
    {
      "id": "s_5173",
      "type": "sentence",
      "content": "Calling `watcher.",
      "position": 4
    },
    {
      "id": "s_5174",
      "type": "sentence",
      "content": "ref()` multiple times will have no effect.",
      "position": 5
    },
    {
      "id": "s_5175",
      "type": "sentence",
      "content": "By default, all {fs.",
      "position": 6
    },
    {
      "id": "s_5176",
      "type": "sentence",
      "content": "FSWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
      "position": 7
    },
    {
      "id": "s_5177",
      "type": "sentence",
      "content": "ref()` unless `watcher.",
      "position": 8
    },
    {
      "id": "s_5178",
      "type": "sentence",
      "content": "unref()` had been called previously.",
      "position": 9
    },
    {
      "id": "w_5179",
      "type": "window",
      "content": "Returns: {fs.FSWatcher} When called, the active {fs.FSWatcher} object will not require the Node.js\nevent loop to remain active. If there is no other activity keeping the\nevent loop running, the process may exit before the {fs.FSWatcher} object's\ncallback is invoked. Calling `watcher.unref()` multiple times will have\nno effect.",
      "position": 0,
      "windowSize": 44
    },
    {
      "id": "sw_5180",
      "type": "sentence_window",
      "content": "Returns: {fs. When called, the active {fs. FSWatcher} object will not require the Node.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5181",
      "type": "sentence_window",
      "content": "When called, the active {fs. FSWatcher} object will not require the Node. js event loop to remain active.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5182",
      "type": "sentence_window",
      "content": "FSWatcher} object will not require the Node. js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the {fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5183",
      "type": "sentence_window",
      "content": "js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the {fs. FSWatcher} object's callback is invoked.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5184",
      "type": "sentence_window",
      "content": "If there is no other activity keeping the event loop running, the process may exit before the {fs. FSWatcher} object's callback is invoked. Calling `watcher.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5185",
      "type": "sentence_window",
      "content": "FSWatcher} object's callback is invoked. Calling `watcher. unref()` multiple times will have no effect.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_5186",
      "type": "sentence_window",
      "content": "Calling `watcher. unref()` multiple times will have no effect.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_5187",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] Returns: {fs.",
      "position": 0
    },
    {
      "id": "sc_5188",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] When called, the active {fs.",
      "position": 1
    },
    {
      "id": "sc_5189",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] [Previous: When called, the active {fs....] FSWatcher} object will not require the Node.",
      "position": 2
    },
    {
      "id": "sc_5190",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] [Previous: FSWatcher} object will not require the Node....] js event loop to remain active.",
      "position": 3
    },
    {
      "id": "sc_5191",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] [Previous: js event loop to remain active....] If there is no other activity keeping the event loop running, the process may exit before the {fs.",
      "position": 4
    },
    {
      "id": "sc_5192",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] [Previous: If there is no other activity keeping the event lo...] FSWatcher} object's callback is invoked.",
      "position": 5
    },
    {
      "id": "sc_5193",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] [Previous: FSWatcher} object's callback is invoked....] Calling `watcher.",
      "position": 6
    },
    {
      "id": "sc_5194",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] unref()` multiple times will have no effect.",
      "position": 7
    },
    {
      "id": "s_5195",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 0
    },
    {
      "id": "s_5196",
      "type": "sentence",
      "content": "When called, the active {fs.",
      "position": 1
    },
    {
      "id": "s_5197",
      "type": "sentence",
      "content": "FSWatcher} object will not require the Node.",
      "position": 2
    },
    {
      "id": "s_5198",
      "type": "sentence",
      "content": "js event loop to remain active.",
      "position": 3
    },
    {
      "id": "s_5199",
      "type": "sentence",
      "content": "If there is no other activity keeping the event loop running, the process may exit before the {fs.",
      "position": 4
    },
    {
      "id": "s_5200",
      "type": "sentence",
      "content": "FSWatcher} object's callback is invoked.",
      "position": 5
    },
    {
      "id": "s_5201",
      "type": "sentence",
      "content": "Calling `watcher.",
      "position": 6
    },
    {
      "id": "s_5202",
      "type": "sentence",
      "content": "unref()` multiple times will have no effect.",
      "position": 7
    },
    {
      "id": "sw_5203",
      "type": "sentence_window",
      "content": "Extends {EventEmitter} A successful call to `fs. watchFile()` method will return a new {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5204",
      "type": "sentence_window",
      "content": "A successful call to `fs. watchFile()` method will return a new {fs. StatWatcher} object.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5205",
      "type": "sentence_window",
      "content": "watchFile()` method will return a new {fs. StatWatcher} object.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_5206",
      "type": "sentence_context",
      "content": "[Class: `fs.StatWatcher`] Extends {EventEmitter}",
      "position": 0
    },
    {
      "id": "sc_5207",
      "type": "sentence_context",
      "content": "[Class: `fs.StatWatcher`] [Previous: Extends {EventEmitter}...] A successful call to `fs.",
      "position": 1
    },
    {
      "id": "sc_5208",
      "type": "sentence_context",
      "content": "[Class: `fs.StatWatcher`] [Previous: A successful call to `fs....] watchFile()` method will return a new {fs.",
      "position": 2
    },
    {
      "id": "sc_5209",
      "type": "sentence_context",
      "content": "[Class: `fs.StatWatcher`] [Previous: watchFile()` method will return a new {fs....] StatWatcher} object.",
      "position": 3
    },
    {
      "id": "s_5210",
      "type": "sentence",
      "content": "Extends {EventEmitter}",
      "position": 0
    },
    {
      "id": "s_5211",
      "type": "sentence",
      "content": "A successful call to `fs.",
      "position": 1
    },
    {
      "id": "s_5212",
      "type": "sentence",
      "content": "watchFile()` method will return a new {fs.",
      "position": 2
    },
    {
      "id": "s_5213",
      "type": "sentence",
      "content": "StatWatcher} object.",
      "position": 3
    },
    {
      "id": "w_5214",
      "type": "window",
      "content": "Returns: {fs.StatWatcher} When called, requests that the Node.js event loop _not_ exit so long as the\n{fs.StatWatcher} is active. Calling `watcher.ref()` multiple times will have\nno effect. By default, all {fs.StatWatcher} objects are \"ref'ed\", making it normally\nunnecessary to call `watcher.ref()` unless `watcher.unref()` had been\ncalled previously.",
      "position": 0,
      "windowSize": 43
    },
    {
      "id": "sw_5215",
      "type": "sentence_window",
      "content": "Returns: {fs. StatWatcher} When called, requests that the Node.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5216",
      "type": "sentence_window",
      "content": "StatWatcher} When called, requests that the Node. js event loop _not_ exit so long as the {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5217",
      "type": "sentence_window",
      "content": "When called, requests that the Node. js event loop _not_ exit so long as the {fs. StatWatcher} is active.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5218",
      "type": "sentence_window",
      "content": "js event loop _not_ exit so long as the {fs. StatWatcher} is active. Calling `watcher.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5219",
      "type": "sentence_window",
      "content": "StatWatcher} is active. Calling `watcher. ref()` multiple times will have no effect.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5220",
      "type": "sentence_window",
      "content": "Calling `watcher. ref()` multiple times will have no effect. By default, all {fs.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_5221",
      "type": "sentence_window",
      "content": "ref()` multiple times will have no effect. By default, all {fs. StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_5222",
      "type": "sentence_window",
      "content": "By default, all {fs. StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher. ref()` unless `watcher.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_5223",
      "type": "sentence_window",
      "content": "StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher. ref()` unless `watcher. unref()` had been called previously.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_5224",
      "type": "sentence_window",
      "content": "ref()` unless `watcher. unref()` had been called previously.",
      "position": 9,
      "sentenceCount": 2
    },
    {
      "id": "sc_5225",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] Returns: {fs.",
      "position": 0
    },
    {
      "id": "sc_5226",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] StatWatcher}",
      "position": 1
    },
    {
      "id": "sc_5227",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] When called, requests that the Node.",
      "position": 2
    },
    {
      "id": "sc_5228",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: When called, requests that the Node....] js event loop _not_ exit so long as the {fs.",
      "position": 3
    },
    {
      "id": "sc_5229",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: js event loop _not_ exit so long as the {fs....] StatWatcher} is active.",
      "position": 4
    },
    {
      "id": "sc_5230",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: StatWatcher} is active....] Calling `watcher.",
      "position": 5
    },
    {
      "id": "sc_5231",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] ref()` multiple times will have no effect.",
      "position": 6
    },
    {
      "id": "sc_5232",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: ref()` multiple times will have no effect....] By default, all {fs.",
      "position": 7
    },
    {
      "id": "sc_5233",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
      "position": 8
    },
    {
      "id": "sc_5234",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: StatWatcher} objects are \"ref'ed\", making it norma...] ref()` unless `watcher.",
      "position": 9
    },
    {
      "id": "sc_5235",
      "type": "sentence_context",
      "content": "[`watcher.ref()`] [Previous: ref()` unless `watcher....] unref()` had been called previously.",
      "position": 10
    },
    {
      "id": "s_5236",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 0
    },
    {
      "id": "s_5237",
      "type": "sentence",
      "content": "StatWatcher}",
      "position": 1
    },
    {
      "id": "s_5238",
      "type": "sentence",
      "content": "When called, requests that the Node.",
      "position": 2
    },
    {
      "id": "s_5239",
      "type": "sentence",
      "content": "js event loop _not_ exit so long as the {fs.",
      "position": 3
    },
    {
      "id": "s_5240",
      "type": "sentence",
      "content": "StatWatcher} is active.",
      "position": 4
    },
    {
      "id": "s_5241",
      "type": "sentence",
      "content": "Calling `watcher.",
      "position": 5
    },
    {
      "id": "s_5242",
      "type": "sentence",
      "content": "ref()` multiple times will have no effect.",
      "position": 6
    },
    {
      "id": "s_5243",
      "type": "sentence",
      "content": "By default, all {fs.",
      "position": 7
    },
    {
      "id": "s_5244",
      "type": "sentence",
      "content": "StatWatcher} objects are \"ref'ed\", making it normally unnecessary to call `watcher.",
      "position": 8
    },
    {
      "id": "s_5245",
      "type": "sentence",
      "content": "ref()` unless `watcher.",
      "position": 9
    },
    {
      "id": "s_5246",
      "type": "sentence",
      "content": "unref()` had been called previously.",
      "position": 10
    },
    {
      "id": "w_5247",
      "type": "window",
      "content": "Returns: {fs.StatWatcher} When called, the active {fs.StatWatcher} object will not require the Node.js\nevent loop to remain active. If there is no other activity keeping the\nevent loop running, the process may exit before the {fs.StatWatcher} object's\ncallback is invoked. Calling `watcher.unref()` multiple times will have\nno effect.",
      "position": 0,
      "windowSize": 44
    },
    {
      "id": "sw_5248",
      "type": "sentence_window",
      "content": "Returns: {fs. StatWatcher} When called, the active {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5249",
      "type": "sentence_window",
      "content": "StatWatcher} When called, the active {fs. StatWatcher} object will not require the Node.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5250",
      "type": "sentence_window",
      "content": "When called, the active {fs. StatWatcher} object will not require the Node. js event loop to remain active.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5251",
      "type": "sentence_window",
      "content": "StatWatcher} object will not require the Node. js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the {fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5252",
      "type": "sentence_window",
      "content": "js event loop to remain active. If there is no other activity keeping the event loop running, the process may exit before the {fs. StatWatcher} object's callback is invoked.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5253",
      "type": "sentence_window",
      "content": "If there is no other activity keeping the event loop running, the process may exit before the {fs. StatWatcher} object's callback is invoked. Calling `watcher.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_5254",
      "type": "sentence_window",
      "content": "StatWatcher} object's callback is invoked. Calling `watcher. unref()` multiple times will have no effect.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_5255",
      "type": "sentence_window",
      "content": "Calling `watcher. unref()` multiple times will have no effect.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_5256",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] Returns: {fs.",
      "position": 0
    },
    {
      "id": "sc_5257",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] StatWatcher}",
      "position": 1
    },
    {
      "id": "sc_5258",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] When called, the active {fs.",
      "position": 2
    },
    {
      "id": "sc_5259",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] [Previous: When called, the active {fs....] StatWatcher} object will not require the Node.",
      "position": 3
    },
    {
      "id": "sc_5260",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] [Previous: StatWatcher} object will not require the Node....] js event loop to remain active.",
      "position": 4
    },
    {
      "id": "sc_5261",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] [Previous: js event loop to remain active....] If there is no other activity keeping the event loop running, the process may exit before the {fs.",
      "position": 5
    },
    {
      "id": "sc_5262",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] [Previous: If there is no other activity keeping the event lo...] StatWatcher} object's callback is invoked.",
      "position": 6
    },
    {
      "id": "sc_5263",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] [Previous: StatWatcher} object's callback is invoked....] Calling `watcher.",
      "position": 7
    },
    {
      "id": "sc_5264",
      "type": "sentence_context",
      "content": "[`watcher.unref()`] unref()` multiple times will have no effect.",
      "position": 8
    },
    {
      "id": "s_5265",
      "type": "sentence",
      "content": "Returns: {fs.",
      "position": 0
    },
    {
      "id": "s_5266",
      "type": "sentence",
      "content": "StatWatcher}",
      "position": 1
    },
    {
      "id": "s_5267",
      "type": "sentence",
      "content": "When called, the active {fs.",
      "position": 2
    },
    {
      "id": "s_5268",
      "type": "sentence",
      "content": "StatWatcher} object will not require the Node.",
      "position": 3
    },
    {
      "id": "s_5269",
      "type": "sentence",
      "content": "js event loop to remain active.",
      "position": 4
    },
    {
      "id": "s_5270",
      "type": "sentence",
      "content": "If there is no other activity keeping the event loop running, the process may exit before the {fs.",
      "position": 5
    },
    {
      "id": "s_5271",
      "type": "sentence",
      "content": "StatWatcher} object's callback is invoked.",
      "position": 6
    },
    {
      "id": "s_5272",
      "type": "sentence",
      "content": "Calling `watcher.",
      "position": 7
    },
    {
      "id": "s_5273",
      "type": "sentence",
      "content": "unref()` multiple times will have no effect.",
      "position": 8
    },
    {
      "id": "sw_5274",
      "type": "sentence_window",
      "content": "Extends: {stream. Instances of {fs. ReadStream} are created and returned using the [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5275",
      "type": "sentence_window",
      "content": "Instances of {fs. ReadStream} are created and returned using the [`fs. createReadStream()`][] function.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5276",
      "type": "sentence_window",
      "content": "ReadStream} are created and returned using the [`fs. createReadStream()`][] function.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_5277",
      "type": "sentence_context",
      "content": "[Class: `fs.ReadStream`] Extends: {stream.",
      "position": 0
    },
    {
      "id": "sc_5278",
      "type": "sentence_context",
      "content": "[Class: `fs.ReadStream`] Instances of {fs.",
      "position": 1
    },
    {
      "id": "sc_5279",
      "type": "sentence_context",
      "content": "[Class: `fs.ReadStream`] ReadStream} are created and returned using the [`fs.",
      "position": 2
    },
    {
      "id": "sc_5280",
      "type": "sentence_context",
      "content": "[Class: `fs.ReadStream`] [Previous: ReadStream} are created and returned using the [`f...] createReadStream()`][] function.",
      "position": 3
    },
    {
      "id": "s_5281",
      "type": "sentence",
      "content": "Extends: {stream.",
      "position": 0
    },
    {
      "id": "s_5282",
      "type": "sentence",
      "content": "Instances of {fs.",
      "position": 1
    },
    {
      "id": "s_5283",
      "type": "sentence",
      "content": "ReadStream} are created and returned using the [`fs.",
      "position": 2
    },
    {
      "id": "s_5284",
      "type": "sentence",
      "content": "createReadStream()`][] function.",
      "position": 3
    },
    {
      "id": "sw_5285",
      "type": "sentence_window",
      "content": "Emitted when the {fs. ReadStream}'s underlying file descriptor has been closed.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5286",
      "type": "sentence_context",
      "content": "[Event: `'close'`] Emitted when the {fs.",
      "position": 0
    },
    {
      "id": "sc_5287",
      "type": "sentence_context",
      "content": "[Event: `'close'`] [Previous: Emitted when the {fs....] ReadStream}'s underlying file descriptor has been closed.",
      "position": 1
    },
    {
      "id": "s_5288",
      "type": "sentence",
      "content": "Emitted when the {fs.",
      "position": 0
    },
    {
      "id": "s_5289",
      "type": "sentence",
      "content": "ReadStream}'s underlying file descriptor has been closed.",
      "position": 1
    },
    {
      "id": "sw_5290",
      "type": "sentence_window",
      "content": "`fd` {integer} Integer file descriptor used by the {fs. ReadStream}. Emitted when the {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5291",
      "type": "sentence_window",
      "content": "ReadStream}. Emitted when the {fs. ReadStream}'s file descriptor has been opened.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5292",
      "type": "sentence_window",
      "content": "Emitted when the {fs. ReadStream}'s file descriptor has been opened.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_5293",
      "type": "sentence_context",
      "content": "[Event: `'open'`] `fd` {integer} Integer file descriptor used by the {fs.",
      "position": 0
    },
    {
      "id": "sc_5294",
      "type": "sentence_context",
      "content": "[Event: `'open'`] [Previous: `fd` {integer} Integer file descriptor used by the...] ReadStream}.",
      "position": 1
    },
    {
      "id": "sc_5295",
      "type": "sentence_context",
      "content": "[Event: `'open'`] Emitted when the {fs.",
      "position": 2
    },
    {
      "id": "sc_5296",
      "type": "sentence_context",
      "content": "[Event: `'open'`] [Previous: Emitted when the {fs....] ReadStream}'s file descriptor has been opened.",
      "position": 3
    },
    {
      "id": "s_5297",
      "type": "sentence",
      "content": "`fd` {integer} Integer file descriptor used by the {fs.",
      "position": 0
    },
    {
      "id": "s_5298",
      "type": "sentence",
      "content": "ReadStream}.",
      "position": 1
    },
    {
      "id": "s_5299",
      "type": "sentence",
      "content": "Emitted when the {fs.",
      "position": 2
    },
    {
      "id": "s_5300",
      "type": "sentence",
      "content": "ReadStream}'s file descriptor has been opened.",
      "position": 3
    },
    {
      "id": "sw_5301",
      "type": "sentence_window",
      "content": "Emitted when the {fs. ReadStream} is ready to be used. Fires immediately after `'open'`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5302",
      "type": "sentence_window",
      "content": "ReadStream} is ready to be used. Fires immediately after `'open'`.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5303",
      "type": "sentence_context",
      "content": "[Event: `'ready'`] Emitted when the {fs.",
      "position": 0
    },
    {
      "id": "sc_5304",
      "type": "sentence_context",
      "content": "[Event: `'ready'`] [Previous: Emitted when the {fs....] ReadStream} is ready to be used.",
      "position": 1
    },
    {
      "id": "sc_5305",
      "type": "sentence_context",
      "content": "[Event: `'ready'`] [Previous: ReadStream} is ready to be used....] Fires immediately after `'open'`.",
      "position": 2
    },
    {
      "id": "s_5306",
      "type": "sentence",
      "content": "Emitted when the {fs.",
      "position": 0
    },
    {
      "id": "s_5307",
      "type": "sentence",
      "content": "ReadStream} is ready to be used.",
      "position": 1
    },
    {
      "id": "s_5308",
      "type": "sentence",
      "content": "Fires immediately after `'open'`.",
      "position": 2
    },
    {
      "id": "sw_5309",
      "type": "sentence_window",
      "content": "Type: {number} The number of bytes that have been read so far.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5310",
      "type": "sentence_context",
      "content": "[`readStream.bytesRead`] Type: {number}",
      "position": 0
    },
    {
      "id": "sc_5311",
      "type": "sentence_context",
      "content": "[`readStream.bytesRead`] The number of bytes that have been read so far.",
      "position": 1
    },
    {
      "id": "s_5312",
      "type": "sentence",
      "content": "Type: {number}",
      "position": 0
    },
    {
      "id": "s_5313",
      "type": "sentence",
      "content": "The number of bytes that have been read so far.",
      "position": 1
    },
    {
      "id": "w_5314",
      "type": "window",
      "content": "Type: {string|Buffer} The path to the file the stream is reading from as specified in the first\nargument to `fs.createReadStream()`. If `path` is passed as a string, then\n`readStream.path` will be a string. If `path` is passed as a {Buffer}, then\n`readStream.path` will be a {Buffer}. If `fd` is specified, then\n`readStream.path` will be `undefined`.",
      "position": 0,
      "windowSize": 51
    },
    {
      "id": "sw_5315",
      "type": "sentence_window",
      "content": "Type: {string|Buffer} The path to the file the stream is reading from as specified in the first argument to `fs. createReadStream()`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5316",
      "type": "sentence_window",
      "content": "The path to the file the stream is reading from as specified in the first argument to `fs. createReadStream()`. If `path` is passed as a string, then `readStream.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5317",
      "type": "sentence_window",
      "content": "createReadStream()`. If `path` is passed as a string, then `readStream. path` will be a string.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5318",
      "type": "sentence_window",
      "content": "If `path` is passed as a string, then `readStream. path` will be a string. If `path` is passed as a {Buffer}, then `readStream.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5319",
      "type": "sentence_window",
      "content": "path` will be a string. If `path` is passed as a {Buffer}, then `readStream. path` will be a {Buffer}.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5320",
      "type": "sentence_window",
      "content": "If `path` is passed as a {Buffer}, then `readStream. path` will be a {Buffer}. If `fd` is specified, then `readStream.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_5321",
      "type": "sentence_window",
      "content": "path` will be a {Buffer}. If `fd` is specified, then `readStream. path` will be `undefined`.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_5322",
      "type": "sentence_window",
      "content": "If `fd` is specified, then `readStream. path` will be `undefined`.",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_5323",
      "type": "sentence_context",
      "content": "[`readStream.path`] Type: {string|Buffer}",
      "position": 0
    },
    {
      "id": "sc_5324",
      "type": "sentence_context",
      "content": "[`readStream.path`] [Previous: Type: {string|Buffer}...] The path to the file the stream is reading from as specified in the first argument to `fs.",
      "position": 1
    },
    {
      "id": "sc_5325",
      "type": "sentence_context",
      "content": "[`readStream.path`] [Previous: The path to the file the stream is reading from as...] createReadStream()`.",
      "position": 2
    },
    {
      "id": "sc_5326",
      "type": "sentence_context",
      "content": "[`readStream.path`] If `path` is passed as a string, then `readStream.",
      "position": 3
    },
    {
      "id": "sc_5327",
      "type": "sentence_context",
      "content": "[`readStream.path`] [Previous: If `path` is passed as a string, then `readStream....] path` will be a string.",
      "position": 4
    },
    {
      "id": "sc_5328",
      "type": "sentence_context",
      "content": "[`readStream.path`] [Previous: path` will be a string....] If `path` is passed as a {Buffer}, then `readStream.",
      "position": 5
    },
    {
      "id": "sc_5329",
      "type": "sentence_context",
      "content": "[`readStream.path`] [Previous: If `path` is passed as a {Buffer}, then `readStrea...] path` will be a {Buffer}.",
      "position": 6
    },
    {
      "id": "sc_5330",
      "type": "sentence_context",
      "content": "[`readStream.path`] [Previous: path` will be a {Buffer}....] If `fd` is specified, then `readStream.",
      "position": 7
    },
    {
      "id": "sc_5331",
      "type": "sentence_context",
      "content": "[`readStream.path`] [Previous: If `fd` is specified, then `readStream....] path` will be `undefined`.",
      "position": 8
    },
    {
      "id": "s_5332",
      "type": "sentence",
      "content": "Type: {string|Buffer}",
      "position": 0
    },
    {
      "id": "s_5333",
      "type": "sentence",
      "content": "The path to the file the stream is reading from as specified in the first argument to `fs.",
      "position": 1
    },
    {
      "id": "s_5334",
      "type": "sentence",
      "content": "createReadStream()`.",
      "position": 2
    },
    {
      "id": "s_5335",
      "type": "sentence",
      "content": "If `path` is passed as a string, then `readStream.",
      "position": 3
    },
    {
      "id": "s_5336",
      "type": "sentence",
      "content": "path` will be a string.",
      "position": 4
    },
    {
      "id": "s_5337",
      "type": "sentence",
      "content": "If `path` is passed as a {Buffer}, then `readStream.",
      "position": 5
    },
    {
      "id": "s_5338",
      "type": "sentence",
      "content": "path` will be a {Buffer}.",
      "position": 6
    },
    {
      "id": "s_5339",
      "type": "sentence",
      "content": "If `fd` is specified, then `readStream.",
      "position": 7
    },
    {
      "id": "s_5340",
      "type": "sentence",
      "content": "path` will be `undefined`.",
      "position": 8
    },
    {
      "id": "w_5341",
      "type": "window",
      "content": "Type: {boolean} This property is `true` if the underlying file has not been opened yet,\ni.e. before the `'ready'` event is emitted.",
      "position": 0,
      "windowSize": 21
    },
    {
      "id": "sw_5342",
      "type": "sentence_window",
      "content": "Type: {boolean} This property is `true` if the underlying file has not been opened yet, i. before the `'ready'` event is emitted.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5343",
      "type": "sentence_window",
      "content": "This property is `true` if the underlying file has not been opened yet, i. before the `'ready'` event is emitted.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5344",
      "type": "sentence_context",
      "content": "[`readStream.pending`] Type: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5345",
      "type": "sentence_context",
      "content": "[`readStream.pending`] This property is `true` if the underlying file has not been opened yet, i.",
      "position": 1
    },
    {
      "id": "sc_5346",
      "type": "sentence_context",
      "content": "[`readStream.pending`] [Previous: This property is `true` if the underlying file has...] before the `'ready'` event is emitted.",
      "position": 2
    },
    {
      "id": "s_5347",
      "type": "sentence",
      "content": "Type: {boolean}",
      "position": 0
    },
    {
      "id": "s_5348",
      "type": "sentence",
      "content": "This property is `true` if the underlying file has not been opened yet, i.",
      "position": 1
    },
    {
      "id": "s_5349",
      "type": "sentence",
      "content": "before the `'ready'` event is emitted.",
      "position": 2
    },
    {
      "id": "w_5350",
      "type": "window",
      "content": "A {fs.Stats} object provides information about a file. Objects returned from [`fs.stat()`][], [`fs.lstat()`][], [`fs.fstat()`][], and\ntheir synchronous counterparts are of this type.\nIf `bigint` in the `options` passed to those methods is true, the numeric values\nwill be `bigint` instead of `number`, and the object will contain additional\nnanosecond-precision properties suffixed with `Ns`.\n`Stat` objects are not to be created directly using the `new` keyword. `bigint` version:",
      "position": 0,
      "windowSize": 62
    },
    {
      "id": "sw_5351",
      "type": "sentence_window",
      "content": "Stats} object provides information about a file. Objects returned from [`fs. stat()`][], [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5352",
      "type": "sentence_window",
      "content": "Objects returned from [`fs. stat()`][], [`fs. lstat()`][], [`fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5353",
      "type": "sentence_window",
      "content": "stat()`][], [`fs. lstat()`][], [`fs. fstat()`][], and their synchronous counterparts are of this type.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5354",
      "type": "sentence_window",
      "content": "lstat()`][], [`fs. fstat()`][], and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5355",
      "type": "sentence_window",
      "content": "fstat()`][], and their synchronous counterparts are of this type. If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number` and the object will contain additional nanosecond-precision properties suffixed with `Ns`.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5356",
      "type": "sentence_window",
      "content": "If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number` and the object will contain additional nanosecond-precision properties suffixed with `Ns`. `Stat` objects are not to be created directly using the `new` keyword.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_5357",
      "type": "sentence_window",
      "content": "and the object will contain additional nanosecond-precision properties suffixed with `Ns`. `Stat` objects are not to be created directly using the `new` keyword. `bigint` version:",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_5358",
      "type": "sentence_window",
      "content": "`Stat` objects are not to be created directly using the `new` keyword. `bigint` version:",
      "position": 7,
      "sentenceCount": 2
    },
    {
      "id": "sc_5359",
      "type": "sentence_context",
      "content": "[Class: `fs.Stats`] Stats} object provides information about a file.",
      "position": 0
    },
    {
      "id": "sc_5360",
      "type": "sentence_context",
      "content": "[Class: `fs.Stats`] [Previous: Stats} object provides information about a file....] Objects returned from [`fs.",
      "position": 1
    },
    {
      "id": "sc_5361",
      "type": "sentence_context",
      "content": "[Class: `fs.Stats`] [Previous: Objects returned from [`fs....] stat()`][], [`fs.",
      "position": 2
    },
    {
      "id": "sc_5362",
      "type": "sentence_context",
      "content": "[Class: `fs.Stats`] lstat()`][], [`fs.",
      "position": 3
    },
    {
      "id": "sc_5363",
      "type": "sentence_context",
      "content": "[Class: `fs.Stats`] fstat()`][], and their synchronous counterparts are of this type.",
      "position": 4
    },
    {
      "id": "sc_5364",
      "type": "sentence_context",
      "content": "[Class: `fs.Stats`] [Previous: fstat()`][], and their synchronous counterparts ar...] If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`",
      "position": 5
    },
    {
      "id": "sc_5365",
      "type": "sentence_context",
      "content": "[Class: `fs.Stats`] [Previous: If `bigint` in the `options` passed to those metho...] and the object will contain additional nanosecond-precision properties suffixed with `Ns`.",
      "position": 6
    },
    {
      "id": "sc_5366",
      "type": "sentence_context",
      "content": "[Class: `fs.Stats`] [Previous: and the object will contain additional nanosecond-...] `Stat` objects are not to be created directly using the `new` keyword.",
      "position": 7
    },
    {
      "id": "sc_5367",
      "type": "sentence_context",
      "content": "[Class: `fs.Stats`] [Previous: `Stat` objects are not to be created directly usin...] `bigint` version:",
      "position": 8
    },
    {
      "id": "s_5368",
      "type": "sentence",
      "content": "Stats} object provides information about a file.",
      "position": 0
    },
    {
      "id": "s_5369",
      "type": "sentence",
      "content": "Objects returned from [`fs.",
      "position": 1
    },
    {
      "id": "s_5370",
      "type": "sentence",
      "content": "stat()`][], [`fs.",
      "position": 2
    },
    {
      "id": "s_5371",
      "type": "sentence",
      "content": "lstat()`][], [`fs.",
      "position": 3
    },
    {
      "id": "s_5372",
      "type": "sentence",
      "content": "fstat()`][], and their synchronous counterparts are of this type.",
      "position": 4
    },
    {
      "id": "s_5373",
      "type": "sentence",
      "content": "If `bigint` in the `options` passed to those methods is true, the numeric values will be `bigint` instead of `number`",
      "position": 5
    },
    {
      "id": "s_5374",
      "type": "sentence",
      "content": "and the object will contain additional nanosecond-precision properties suffixed with `Ns`.",
      "position": 6
    },
    {
      "id": "s_5375",
      "type": "sentence",
      "content": "`Stat` objects are not to be created directly using the `new` keyword.",
      "position": 7
    },
    {
      "id": "s_5376",
      "type": "sentence",
      "content": "`bigint` version:",
      "position": 8
    },
    {
      "id": "sw_5377",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a block device.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5378",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Stats} object describes a block device.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5379",
      "type": "sentence_context",
      "content": "[`stats.isBlockDevice()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5380",
      "type": "sentence_context",
      "content": "[`stats.isBlockDevice()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5381",
      "type": "sentence_context",
      "content": "[`stats.isBlockDevice()`] [Previous: Returns `true` if the {fs....] Stats} object describes a block device.",
      "position": 2
    },
    {
      "id": "s_5382",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5383",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5384",
      "type": "sentence",
      "content": "Stats} object describes a block device.",
      "position": 2
    },
    {
      "id": "sw_5385",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a character device.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5386",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Stats} object describes a character device.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5387",
      "type": "sentence_context",
      "content": "[`stats.isCharacterDevice()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5388",
      "type": "sentence_context",
      "content": "[`stats.isCharacterDevice()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5389",
      "type": "sentence_context",
      "content": "[`stats.isCharacterDevice()`] [Previous: Returns `true` if the {fs....] Stats} object describes a character device.",
      "position": 2
    },
    {
      "id": "s_5390",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5391",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5392",
      "type": "sentence",
      "content": "Stats} object describes a character device.",
      "position": 2
    },
    {
      "id": "w_5393",
      "type": "window",
      "content": "Returns: {boolean} Returns `true` if the {fs.Stats} object describes a file system directory. If the {fs.Stats} object was obtained from calling [`fs.lstat()`][] on a\nsymbolic link which resolves to a directory, this method will return `false`.\nThis is because [`fs.lstat()`][] returns information\nabout a symbolic link itself and not the path it resolves to.",
      "position": 0,
      "windowSize": 51
    },
    {
      "id": "sw_5394",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a file system directory.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5395",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Stats} object describes a file system directory. If the {fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5396",
      "type": "sentence_window",
      "content": "Stats} object describes a file system directory. If the {fs. Stats} object was obtained from calling [`fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5397",
      "type": "sentence_window",
      "content": "If the {fs. Stats} object was obtained from calling [`fs. lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5398",
      "type": "sentence_window",
      "content": "Stats} object was obtained from calling [`fs. lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`. This is because [`fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5399",
      "type": "sentence_window",
      "content": "lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`. This is because [`fs. lstat()`][] returns information about a symbolic link itself and not the path it resolves to.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_5400",
      "type": "sentence_window",
      "content": "This is because [`fs. lstat()`][] returns information about a symbolic link itself and not the path it resolves to.",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_5401",
      "type": "sentence_context",
      "content": "[`stats.isDirectory()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5402",
      "type": "sentence_context",
      "content": "[`stats.isDirectory()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5403",
      "type": "sentence_context",
      "content": "[`stats.isDirectory()`] [Previous: Returns `true` if the {fs....] Stats} object describes a file system directory.",
      "position": 2
    },
    {
      "id": "sc_5404",
      "type": "sentence_context",
      "content": "[`stats.isDirectory()`] [Previous: Stats} object describes a file system directory....] If the {fs.",
      "position": 3
    },
    {
      "id": "sc_5405",
      "type": "sentence_context",
      "content": "[`stats.isDirectory()`] Stats} object was obtained from calling [`fs.",
      "position": 4
    },
    {
      "id": "sc_5406",
      "type": "sentence_context",
      "content": "[`stats.isDirectory()`] [Previous: Stats} object was obtained from calling [`fs....] lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`.",
      "position": 5
    },
    {
      "id": "sc_5407",
      "type": "sentence_context",
      "content": "[`stats.isDirectory()`] [Previous: lstat()`][] on a symbolic link which resolves to a...] This is because [`fs.",
      "position": 6
    },
    {
      "id": "sc_5408",
      "type": "sentence_context",
      "content": "[`stats.isDirectory()`] [Previous: This is because [`fs....] lstat()`][] returns information about a symbolic link itself and not the path it resolves to.",
      "position": 7
    },
    {
      "id": "s_5409",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5410",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5411",
      "type": "sentence",
      "content": "Stats} object describes a file system directory.",
      "position": 2
    },
    {
      "id": "s_5412",
      "type": "sentence",
      "content": "If the {fs.",
      "position": 3
    },
    {
      "id": "s_5413",
      "type": "sentence",
      "content": "Stats} object was obtained from calling [`fs.",
      "position": 4
    },
    {
      "id": "s_5414",
      "type": "sentence",
      "content": "lstat()`][] on a symbolic link which resolves to a directory, this method will return `false`.",
      "position": 5
    },
    {
      "id": "s_5415",
      "type": "sentence",
      "content": "This is because [`fs.",
      "position": 6
    },
    {
      "id": "s_5416",
      "type": "sentence",
      "content": "lstat()`][] returns information about a symbolic link itself and not the path it resolves to.",
      "position": 7
    },
    {
      "id": "sw_5417",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a first-in-first-out (FIFO) pipe.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5418",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Stats} object describes a first-in-first-out (FIFO) pipe.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5419",
      "type": "sentence_context",
      "content": "[`stats.isFIFO()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5420",
      "type": "sentence_context",
      "content": "[`stats.isFIFO()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5421",
      "type": "sentence_context",
      "content": "[`stats.isFIFO()`] [Previous: Returns `true` if the {fs....] Stats} object describes a first-in-first-out (FIFO) pipe.",
      "position": 2
    },
    {
      "id": "s_5422",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5423",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5424",
      "type": "sentence",
      "content": "Stats} object describes a first-in-first-out (FIFO) pipe.",
      "position": 2
    },
    {
      "id": "sw_5425",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a regular file.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5426",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Stats} object describes a regular file.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5427",
      "type": "sentence_context",
      "content": "[`stats.isFile()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5428",
      "type": "sentence_context",
      "content": "[`stats.isFile()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5429",
      "type": "sentence_context",
      "content": "[`stats.isFile()`] [Previous: Returns `true` if the {fs....] Stats} object describes a regular file.",
      "position": 2
    },
    {
      "id": "s_5430",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5431",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5432",
      "type": "sentence",
      "content": "Stats} object describes a regular file.",
      "position": 2
    },
    {
      "id": "sw_5433",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a socket.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5434",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Stats} object describes a socket.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5435",
      "type": "sentence_context",
      "content": "[`stats.isSocket()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5436",
      "type": "sentence_context",
      "content": "[`stats.isSocket()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5437",
      "type": "sentence_context",
      "content": "[`stats.isSocket()`] [Previous: Returns `true` if the {fs....] Stats} object describes a socket.",
      "position": 2
    },
    {
      "id": "s_5438",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5439",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5440",
      "type": "sentence",
      "content": "Stats} object describes a socket.",
      "position": 2
    },
    {
      "id": "sw_5441",
      "type": "sentence_window",
      "content": "Returns: {boolean} Returns `true` if the {fs. Stats} object describes a symbolic link.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5442",
      "type": "sentence_window",
      "content": "Returns `true` if the {fs. Stats} object describes a symbolic link. This method is only valid when using [`fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5443",
      "type": "sentence_window",
      "content": "Stats} object describes a symbolic link. This method is only valid when using [`fs. lstat()`][].",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5444",
      "type": "sentence_window",
      "content": "This method is only valid when using [`fs. lstat()`][].",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_5445",
      "type": "sentence_context",
      "content": "[`stats.isSymbolicLink()`] Returns: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5446",
      "type": "sentence_context",
      "content": "[`stats.isSymbolicLink()`] Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "sc_5447",
      "type": "sentence_context",
      "content": "[`stats.isSymbolicLink()`] [Previous: Returns `true` if the {fs....] Stats} object describes a symbolic link.",
      "position": 2
    },
    {
      "id": "sc_5448",
      "type": "sentence_context",
      "content": "[`stats.isSymbolicLink()`] [Previous: Stats} object describes a symbolic link....] This method is only valid when using [`fs.",
      "position": 3
    },
    {
      "id": "sc_5449",
      "type": "sentence_context",
      "content": "[`stats.isSymbolicLink()`] [Previous: This method is only valid when using [`fs....] lstat()`][].",
      "position": 4
    },
    {
      "id": "s_5450",
      "type": "sentence",
      "content": "Returns: {boolean}",
      "position": 0
    },
    {
      "id": "s_5451",
      "type": "sentence",
      "content": "Returns `true` if the {fs.",
      "position": 1
    },
    {
      "id": "s_5452",
      "type": "sentence",
      "content": "Stats} object describes a symbolic link.",
      "position": 2
    },
    {
      "id": "s_5453",
      "type": "sentence",
      "content": "This method is only valid when using [`fs.",
      "position": 3
    },
    {
      "id": "s_5454",
      "type": "sentence",
      "content": "lstat()`][].",
      "position": 4
    },
    {
      "id": "sw_5455",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The numeric identifier of the device containing the file.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5456",
      "type": "sentence_context",
      "content": "[`stats.dev`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5457",
      "type": "sentence_context",
      "content": "[`stats.dev`] [Previous: Type: {number|bigint}...] The numeric identifier of the device containing the file.",
      "position": 1
    },
    {
      "id": "s_5458",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5459",
      "type": "sentence",
      "content": "The numeric identifier of the device containing the file.",
      "position": 1
    },
    {
      "id": "sw_5460",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The file system specific \"Inode\" number for the file.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5461",
      "type": "sentence_context",
      "content": "[`stats.ino`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5462",
      "type": "sentence_context",
      "content": "[`stats.ino`] [Previous: Type: {number|bigint}...] The file system specific \"Inode\" number for the file.",
      "position": 1
    },
    {
      "id": "s_5463",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5464",
      "type": "sentence",
      "content": "The file system specific \"Inode\" number for the file.",
      "position": 1
    },
    {
      "id": "sw_5465",
      "type": "sentence_window",
      "content": "Type: {number|bigint} A bit-field describing the file type and mode.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5466",
      "type": "sentence_context",
      "content": "[`stats.mode`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5467",
      "type": "sentence_context",
      "content": "[`stats.mode`] [Previous: Type: {number|bigint}...] A bit-field describing the file type and mode.",
      "position": 1
    },
    {
      "id": "s_5468",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5469",
      "type": "sentence",
      "content": "A bit-field describing the file type and mode.",
      "position": 1
    },
    {
      "id": "sw_5470",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The number of hard-links that exist for the file.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5471",
      "type": "sentence_context",
      "content": "[`stats.nlink`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5472",
      "type": "sentence_context",
      "content": "[`stats.nlink`] [Previous: Type: {number|bigint}...] The number of hard-links that exist for the file.",
      "position": 1
    },
    {
      "id": "s_5473",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5474",
      "type": "sentence",
      "content": "The number of hard-links that exist for the file.",
      "position": 1
    },
    {
      "id": "sw_5475",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The numeric user identifier of the user that owns the file (POSIX).",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5476",
      "type": "sentence_context",
      "content": "[`stats.uid`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5477",
      "type": "sentence_context",
      "content": "[`stats.uid`] [Previous: Type: {number|bigint}...] The numeric user identifier of the user that owns the file (POSIX).",
      "position": 1
    },
    {
      "id": "s_5478",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5479",
      "type": "sentence",
      "content": "The numeric user identifier of the user that owns the file (POSIX).",
      "position": 1
    },
    {
      "id": "sw_5480",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The numeric group identifier of the group that owns the file (POSIX).",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5481",
      "type": "sentence_context",
      "content": "[`stats.gid`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5482",
      "type": "sentence_context",
      "content": "[`stats.gid`] [Previous: Type: {number|bigint}...] The numeric group identifier of the group that owns the file (POSIX).",
      "position": 1
    },
    {
      "id": "s_5483",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5484",
      "type": "sentence",
      "content": "The numeric group identifier of the group that owns the file (POSIX).",
      "position": 1
    },
    {
      "id": "sw_5485",
      "type": "sentence_window",
      "content": "Type: {number|bigint} A numeric device identifier if the file represents a device.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5486",
      "type": "sentence_context",
      "content": "[`stats.rdev`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5487",
      "type": "sentence_context",
      "content": "[`stats.rdev`] [Previous: Type: {number|bigint}...] A numeric device identifier if the file represents a device.",
      "position": 1
    },
    {
      "id": "s_5488",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5489",
      "type": "sentence",
      "content": "A numeric device identifier if the file represents a device.",
      "position": 1
    },
    {
      "id": "w_5490",
      "type": "window",
      "content": "Type: {number|bigint} The size of the file in bytes. If the underlying file system does not support getting the size of the file,\nthis will be `0`.",
      "position": 0,
      "windowSize": 26
    },
    {
      "id": "sw_5491",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The size of the file in bytes. If the underlying file system does not support getting the size of the file, this will be `0`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5492",
      "type": "sentence_window",
      "content": "The size of the file in bytes. If the underlying file system does not support getting the size of the file, this will be `0`.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5493",
      "type": "sentence_context",
      "content": "[`stats.size`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5494",
      "type": "sentence_context",
      "content": "[`stats.size`] [Previous: Type: {number|bigint}...] The size of the file in bytes.",
      "position": 1
    },
    {
      "id": "sc_5495",
      "type": "sentence_context",
      "content": "[`stats.size`] [Previous: The size of the file in bytes....] If the underlying file system does not support getting the size of the file, this will be `0`.",
      "position": 2
    },
    {
      "id": "s_5496",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5497",
      "type": "sentence",
      "content": "The size of the file in bytes.",
      "position": 1
    },
    {
      "id": "s_5498",
      "type": "sentence",
      "content": "If the underlying file system does not support getting the size of the file, this will be `0`.",
      "position": 2
    },
    {
      "id": "sw_5499",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The file system block size for i/o operations.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5500",
      "type": "sentence_context",
      "content": "[`stats.blksize`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5501",
      "type": "sentence_context",
      "content": "[`stats.blksize`] [Previous: Type: {number|bigint}...] The file system block size for i/o operations.",
      "position": 1
    },
    {
      "id": "s_5502",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5503",
      "type": "sentence",
      "content": "The file system block size for i/o operations.",
      "position": 1
    },
    {
      "id": "sw_5504",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The number of blocks allocated for this file.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5505",
      "type": "sentence_context",
      "content": "[`stats.blocks`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5506",
      "type": "sentence_context",
      "content": "[`stats.blocks`] [Previous: Type: {number|bigint}...] The number of blocks allocated for this file.",
      "position": 1
    },
    {
      "id": "s_5507",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5508",
      "type": "sentence",
      "content": "The number of blocks allocated for this file.",
      "position": 1
    },
    {
      "id": "sw_5509",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5510",
      "type": "sentence_context",
      "content": "[`stats.atimeMs`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5511",
      "type": "sentence_context",
      "content": "[`stats.atimeMs`] [Previous: Type: {number|bigint}...] The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.",
      "position": 1
    },
    {
      "id": "s_5512",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5513",
      "type": "sentence",
      "content": "The timestamp indicating the last time this file was accessed expressed in milliseconds since the POSIX Epoch.",
      "position": 1
    },
    {
      "id": "sw_5514",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5515",
      "type": "sentence_context",
      "content": "[`stats.mtimeMs`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5516",
      "type": "sentence_context",
      "content": "[`stats.mtimeMs`] [Previous: Type: {number|bigint}...] The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.",
      "position": 1
    },
    {
      "id": "s_5517",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5518",
      "type": "sentence",
      "content": "The timestamp indicating the last time this file was modified expressed in milliseconds since the POSIX Epoch.",
      "position": 1
    },
    {
      "id": "sw_5519",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5520",
      "type": "sentence_context",
      "content": "[`stats.ctimeMs`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5521",
      "type": "sentence_context",
      "content": "[`stats.ctimeMs`] [Previous: Type: {number|bigint}...] The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.",
      "position": 1
    },
    {
      "id": "s_5522",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5523",
      "type": "sentence",
      "content": "The timestamp indicating the last time the file status was changed expressed in milliseconds since the POSIX Epoch.",
      "position": 1
    },
    {
      "id": "sw_5524",
      "type": "sentence_window",
      "content": "Type: {number|bigint} The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5525",
      "type": "sentence_context",
      "content": "[`stats.birthtimeMs`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5526",
      "type": "sentence_context",
      "content": "[`stats.birthtimeMs`] [Previous: Type: {number|bigint}...] The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.",
      "position": 1
    },
    {
      "id": "s_5527",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5528",
      "type": "sentence",
      "content": "The timestamp indicating the creation time of this file expressed in milliseconds since the POSIX Epoch.",
      "position": 1
    },
    {
      "id": "w_5529",
      "type": "window",
      "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates\nthe object.\nThe timestamp indicating the last time this file was accessed expressed in\nnanoseconds since the POSIX Epoch.",
      "position": 0,
      "windowSize": 30
    },
    {
      "id": "sw_5530",
      "type": "sentence_window",
      "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5531",
      "type": "sentence_window",
      "content": "Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5532",
      "type": "sentence_context",
      "content": "[`stats.atimeNs`] Type: {bigint}",
      "position": 0
    },
    {
      "id": "sc_5533",
      "type": "sentence_context",
      "content": "[`stats.atimeNs`] Only present when `bigint: true` is passed into the method that generates the object.",
      "position": 1
    },
    {
      "id": "sc_5534",
      "type": "sentence_context",
      "content": "[`stats.atimeNs`] [Previous: Only present when `bigint: true` is passed into th...] The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch.",
      "position": 2
    },
    {
      "id": "s_5535",
      "type": "sentence",
      "content": "Type: {bigint}",
      "position": 0
    },
    {
      "id": "s_5536",
      "type": "sentence",
      "content": "Only present when `bigint: true` is passed into the method that generates the object.",
      "position": 1
    },
    {
      "id": "s_5537",
      "type": "sentence",
      "content": "The timestamp indicating the last time this file was accessed expressed in nanoseconds since the POSIX Epoch.",
      "position": 2
    },
    {
      "id": "w_5538",
      "type": "window",
      "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates\nthe object.\nThe timestamp indicating the last time this file was modified expressed in\nnanoseconds since the POSIX Epoch.",
      "position": 0,
      "windowSize": 30
    },
    {
      "id": "sw_5539",
      "type": "sentence_window",
      "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5540",
      "type": "sentence_window",
      "content": "Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5541",
      "type": "sentence_context",
      "content": "[`stats.mtimeNs`] Type: {bigint}",
      "position": 0
    },
    {
      "id": "sc_5542",
      "type": "sentence_context",
      "content": "[`stats.mtimeNs`] Only present when `bigint: true` is passed into the method that generates the object.",
      "position": 1
    },
    {
      "id": "sc_5543",
      "type": "sentence_context",
      "content": "[`stats.mtimeNs`] [Previous: Only present when `bigint: true` is passed into th...] The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch.",
      "position": 2
    },
    {
      "id": "s_5544",
      "type": "sentence",
      "content": "Type: {bigint}",
      "position": 0
    },
    {
      "id": "s_5545",
      "type": "sentence",
      "content": "Only present when `bigint: true` is passed into the method that generates the object.",
      "position": 1
    },
    {
      "id": "s_5546",
      "type": "sentence",
      "content": "The timestamp indicating the last time this file was modified expressed in nanoseconds since the POSIX Epoch.",
      "position": 2
    },
    {
      "id": "w_5547",
      "type": "window",
      "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates\nthe object.\nThe timestamp indicating the last time the file status was changed expressed\nin nanoseconds since the POSIX Epoch.",
      "position": 0,
      "windowSize": 31
    },
    {
      "id": "sw_5548",
      "type": "sentence_window",
      "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5549",
      "type": "sentence_window",
      "content": "Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5550",
      "type": "sentence_context",
      "content": "[`stats.ctimeNs`] Type: {bigint}",
      "position": 0
    },
    {
      "id": "sc_5551",
      "type": "sentence_context",
      "content": "[`stats.ctimeNs`] Only present when `bigint: true` is passed into the method that generates the object.",
      "position": 1
    },
    {
      "id": "sc_5552",
      "type": "sentence_context",
      "content": "[`stats.ctimeNs`] [Previous: Only present when `bigint: true` is passed into th...] The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch.",
      "position": 2
    },
    {
      "id": "s_5553",
      "type": "sentence",
      "content": "Type: {bigint}",
      "position": 0
    },
    {
      "id": "s_5554",
      "type": "sentence",
      "content": "Only present when `bigint: true` is passed into the method that generates the object.",
      "position": 1
    },
    {
      "id": "s_5555",
      "type": "sentence",
      "content": "The timestamp indicating the last time the file status was changed expressed in nanoseconds since the POSIX Epoch.",
      "position": 2
    },
    {
      "id": "w_5556",
      "type": "window",
      "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates\nthe object.\nThe timestamp indicating the creation time of this file expressed in\nnanoseconds since the POSIX Epoch.",
      "position": 0,
      "windowSize": 29
    },
    {
      "id": "sw_5557",
      "type": "sentence_window",
      "content": "Type: {bigint} Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5558",
      "type": "sentence_window",
      "content": "Only present when `bigint: true` is passed into the method that generates the object. The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5559",
      "type": "sentence_context",
      "content": "[`stats.birthtimeNs`] Type: {bigint}",
      "position": 0
    },
    {
      "id": "sc_5560",
      "type": "sentence_context",
      "content": "[`stats.birthtimeNs`] Only present when `bigint: true` is passed into the method that generates the object.",
      "position": 1
    },
    {
      "id": "sc_5561",
      "type": "sentence_context",
      "content": "[`stats.birthtimeNs`] [Previous: Only present when `bigint: true` is passed into th...] The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch.",
      "position": 2
    },
    {
      "id": "s_5562",
      "type": "sentence",
      "content": "Type: {bigint}",
      "position": 0
    },
    {
      "id": "s_5563",
      "type": "sentence",
      "content": "Only present when `bigint: true` is passed into the method that generates the object.",
      "position": 1
    },
    {
      "id": "s_5564",
      "type": "sentence",
      "content": "The timestamp indicating the creation time of this file expressed in nanoseconds since the POSIX Epoch.",
      "position": 2
    },
    {
      "id": "sw_5565",
      "type": "sentence_window",
      "content": "Type: {Date} The timestamp indicating the last time this file was accessed.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5566",
      "type": "sentence_context",
      "content": "[`stats.atime`] Type: {Date}",
      "position": 0
    },
    {
      "id": "sc_5567",
      "type": "sentence_context",
      "content": "[`stats.atime`] The timestamp indicating the last time this file was accessed.",
      "position": 1
    },
    {
      "id": "s_5568",
      "type": "sentence",
      "content": "Type: {Date}",
      "position": 0
    },
    {
      "id": "s_5569",
      "type": "sentence",
      "content": "The timestamp indicating the last time this file was accessed.",
      "position": 1
    },
    {
      "id": "sw_5570",
      "type": "sentence_window",
      "content": "Type: {Date} The timestamp indicating the last time this file was modified.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5571",
      "type": "sentence_context",
      "content": "[`stats.mtime`] Type: {Date}",
      "position": 0
    },
    {
      "id": "sc_5572",
      "type": "sentence_context",
      "content": "[`stats.mtime`] The timestamp indicating the last time this file was modified.",
      "position": 1
    },
    {
      "id": "s_5573",
      "type": "sentence",
      "content": "Type: {Date}",
      "position": 0
    },
    {
      "id": "s_5574",
      "type": "sentence",
      "content": "The timestamp indicating the last time this file was modified.",
      "position": 1
    },
    {
      "id": "sw_5575",
      "type": "sentence_window",
      "content": "Type: {Date} The timestamp indicating the last time the file status was changed.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5576",
      "type": "sentence_context",
      "content": "[`stats.ctime`] Type: {Date}",
      "position": 0
    },
    {
      "id": "sc_5577",
      "type": "sentence_context",
      "content": "[`stats.ctime`] The timestamp indicating the last time the file status was changed.",
      "position": 1
    },
    {
      "id": "s_5578",
      "type": "sentence",
      "content": "Type: {Date}",
      "position": 0
    },
    {
      "id": "s_5579",
      "type": "sentence",
      "content": "The timestamp indicating the last time the file status was changed.",
      "position": 1
    },
    {
      "id": "sw_5580",
      "type": "sentence_window",
      "content": "Type: {Date} The timestamp indicating the creation time of this file.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5581",
      "type": "sentence_context",
      "content": "[`stats.birthtime`] Type: {Date}",
      "position": 0
    },
    {
      "id": "sc_5582",
      "type": "sentence_context",
      "content": "[`stats.birthtime`] The timestamp indicating the creation time of this file.",
      "position": 1
    },
    {
      "id": "s_5583",
      "type": "sentence",
      "content": "Type: {Date}",
      "position": 0
    },
    {
      "id": "s_5584",
      "type": "sentence",
      "content": "The timestamp indicating the creation time of this file.",
      "position": 1
    },
    {
      "id": "w_5585",
      "type": "window",
      "content": "The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs` properties are\nnumeric values that hold the corresponding times in milliseconds. Their\nprecision is platform specific. When `bigint: true` is passed into the\nmethod that generates the object, the properties will be [bigints][],\notherwise they will be [numbers][MDN-Number]. The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are\n[bigints][] that hold the corresponding times in nanoseconds. They are\nonly present when `bigint: true` is passed into the method that generates\nthe object. Their precision is platform specific. `atime`, `mtime`, `ctime`, and `birthtime` are\n[`Date`][MDN-Date] object alternate representations of the various times. The\n`Date` and number values are not connected. Assigning a new number value, or\nmutating the `Date` value, will not be reflected in the corresponding alternate\nrepresentation. The times in the stat object have the following semantics: `atime` \"Access Time\": Time when file data last accessed. Changed\nby the mknod(2), utimes(2), and read(2) system calls. `mtime` \"Modified Time\": Time when file data last modified.\nChanged by the mknod(2), utimes(2), and write(2) system calls. `ctime` \"Change Time\": Time when file status was last changed\n(inode data modification). Changed by the chmod(2), chown(2),\nlink(2), mknod(2), rename(2), unlink(2), utimes(2),\nread(2), and write(2) system calls. `birthtime` \"Birth Time\": Time of file creation. Set once when the\nfile is created. On file systems where birthtime is not available,\nthis field may instead hold either the `ctime` or\n`1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`). This value may be greater\nthan `atime` or `mtime` in this case. On Darwin and other FreeBSD variants,\nalso set if the `atime` is explicitly set to an earlier value than the current\n`birthtime` using the utimes(2) system call. Prior to Node.js 0.12, the `ctime` held the `birthtime` on Windows systems. As\nof 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
      "position": 0,
      "windowSize": 274
    },
    {
      "id": "w_5586",
      "type": "window",
      "content": "Time\": Time of file creation. Set once when the\nfile is created. On file systems where birthtime is not available,\nthis field may instead hold either the `ctime` or\n`1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`). This value may be greater\nthan `atime` or `mtime` in this case. On Darwin and other FreeBSD variants,\nalso set if the `atime` is explicitly set to an earlier value than the current\n`birthtime` using the utimes(2) system call. Prior to Node.js 0.12, the `ctime` held the `birthtime` on Windows systems. As\nof 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
      "position": 180,
      "windowSize": 94
    },
    {
      "id": "sw_5587",
      "type": "sentence_window",
      "content": "The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs` properties are numeric values that hold the corresponding times in milliseconds. Their precision is platform specific. When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number].",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5588",
      "type": "sentence_window",
      "content": "Their precision is platform specific. When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number]. The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5589",
      "type": "sentence_window",
      "content": "When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number]. The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds. They are only present when `bigint: true` is passed into the",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5590",
      "type": "sentence_window",
      "content": "The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds. They are only present when `bigint: true` is passed into the method that generates the object. Their precision is platform specific.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5591",
      "type": "sentence_window",
      "content": "They are only present when `bigint: true` is passed into the method that generates the object. Their precision is platform specific. `atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5592",
      "type": "sentence_window",
      "content": "Their precision is platform specific. `atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times. The `Date` and number values are not connected.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_5593",
      "type": "sentence_window",
      "content": "`atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times. The `Date` and number values are not connected. Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_5594",
      "type": "sentence_window",
      "content": "The `Date` and number values are not connected. Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation. The times in the stat object have the following semantics:",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_5595",
      "type": "sentence_window",
      "content": "Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation. The times in the stat object have the following semantics: `atime` \"Access Time\": Time when file data last accessed.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_5596",
      "type": "sentence_window",
      "content": "The times in the stat object have the following semantics: `atime` \"Access Time\": Time when file data last accessed. Changed by the mknod(2), utimes(2), and read(2) system calls.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_5597",
      "type": "sentence_window",
      "content": "`atime` \"Access Time\": Time when file data last accessed. Changed by the mknod(2), utimes(2), and read(2) system calls. `mtime` \"Modified Time\": Time when file data last modified.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_5598",
      "type": "sentence_window",
      "content": "Changed by the mknod(2), utimes(2), and read(2) system calls. `mtime` \"Modified Time\": Time when file data last modified. Changed by the mknod(2), utimes(2), and write(2) system calls.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_5599",
      "type": "sentence_window",
      "content": "`mtime` \"Modified Time\": Time when file data last modified. Changed by the mknod(2), utimes(2), and write(2) system calls. `ctime` \"Change Time\": Time when file status was last changed (inode data modification).",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_5600",
      "type": "sentence_window",
      "content": "Changed by the mknod(2), utimes(2), and write(2) system calls. `ctime` \"Change Time\": Time when file status was last changed (inode data modification). Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_5601",
      "type": "sentence_window",
      "content": "`ctime` \"Change Time\": Time when file status was last changed (inode data modification). Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls. `birthtime` \"Birth Time\": Time of file creation.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_5602",
      "type": "sentence_window",
      "content": "Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls. `birthtime` \"Birth Time\": Time of file creation. Set once when the file is created.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_5603",
      "type": "sentence_window",
      "content": "`birthtime` \"Birth Time\": Time of file creation. Set once when the file is created. On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`).",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_5604",
      "type": "sentence_window",
      "content": "Set once when the file is created. On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`). This value may be greater than `atime` or `mtime` in this case.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_5605",
      "type": "sentence_window",
      "content": "On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`). This value may be greater than `atime` or `mtime` in this case. On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime`",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_5606",
      "type": "sentence_window",
      "content": "This value may be greater than `atime` or `mtime` in this case. On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime` using the utimes(2) system call. Prior to Node.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_5607",
      "type": "sentence_window",
      "content": "On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime` using the utimes(2) system call. Prior to Node. js 0.12, the `ctime` held the `birthtime` on Windows systems.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_5608",
      "type": "sentence_window",
      "content": "Prior to Node. js 0.12, the `ctime` held the `birthtime` on Windows systems. As of 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_5609",
      "type": "sentence_window",
      "content": "js 0.12, the `ctime` held the `birthtime` on Windows systems. As of 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
      "position": 22,
      "sentenceCount": 2
    },
    {
      "id": "sc_5610",
      "type": "sentence_context",
      "content": "[Stat time values] The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs` properties are numeric values that hold the corresponding times in milliseconds.",
      "position": 0
    },
    {
      "id": "sc_5611",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs`...] Their precision is platform specific.",
      "position": 1
    },
    {
      "id": "sc_5612",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: Their precision is platform specific....] When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number].",
      "position": 2
    },
    {
      "id": "sc_5613",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: When `bigint: true` is passed into the method that...] The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds.",
      "position": 3
    },
    {
      "id": "sc_5614",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs`...] They are only present when `bigint: true` is passed into the method that generates the object.",
      "position": 4
    },
    {
      "id": "sc_5615",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: They are only present when `bigint: true` is passe...] Their precision is platform specific.",
      "position": 5
    },
    {
      "id": "sc_5616",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: Their precision is platform specific....] `atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times.",
      "position": 6
    },
    {
      "id": "sc_5617",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: `atime`, `mtime`, `ctime`, and `birthtime` are [`D...] The `Date` and number values are not connected.",
      "position": 7
    },
    {
      "id": "sc_5618",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: The `Date` and number values are not connected....] Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation.",
      "position": 8
    },
    {
      "id": "sc_5619",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: Assigning a new number value, or mutating the `Dat...] The times in the stat object have the following semantics:",
      "position": 9
    },
    {
      "id": "sc_5620",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: The times in the stat object have the following se...] `atime` \"Access Time\": Time when file data last accessed.",
      "position": 10
    },
    {
      "id": "sc_5621",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: `atime` \"Access Time\": Time when file data last ac...] Changed by the mknod(2), utimes(2), and read(2) system calls.",
      "position": 11
    },
    {
      "id": "sc_5622",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: Changed by the mknod(2), utimes(2), and read(2) sy...] `mtime` \"Modified Time\": Time when file data last modified.",
      "position": 12
    },
    {
      "id": "sc_5623",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: `mtime` \"Modified Time\": Time when file data last ...] Changed by the mknod(2), utimes(2), and write(2) system calls.",
      "position": 13
    },
    {
      "id": "sc_5624",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: Changed by the mknod(2), utimes(2), and write(2) s...] `ctime` \"Change Time\": Time when file status was last changed (inode data modification).",
      "position": 14
    },
    {
      "id": "sc_5625",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: `ctime` \"Change Time\": Time when file status was l...] Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls.",
      "position": 15
    },
    {
      "id": "sc_5626",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: Changed by the chmod(2), chown(2), link(2), mknod(...] `birthtime` \"Birth Time\": Time of file creation.",
      "position": 16
    },
    {
      "id": "sc_5627",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: `birthtime` \"Birth Time\": Time of file creation....] Set once when the file is created.",
      "position": 17
    },
    {
      "id": "sc_5628",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: Set once when the file is created....] On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`).",
      "position": 18
    },
    {
      "id": "sc_5629",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: On file systems where birthtime is not available, ...] This value may be greater than `atime` or `mtime` in this case.",
      "position": 19
    },
    {
      "id": "sc_5630",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: This value may be greater than `atime` or `mtime` ...] On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime` using the utimes(2) system call.",
      "position": 20
    },
    {
      "id": "sc_5631",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: On Darwin and other FreeBSD variants, also set if ...] Prior to Node.",
      "position": 21
    },
    {
      "id": "sc_5632",
      "type": "sentence_context",
      "content": "[Stat time values] js 0.12, the `ctime` held the `birthtime` on Windows systems.",
      "position": 22
    },
    {
      "id": "sc_5633",
      "type": "sentence_context",
      "content": "[Stat time values] [Previous: js 0.12, the `ctime` held the `birthtime` on Windo...] As of 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
      "position": 23
    },
    {
      "id": "s_5634",
      "type": "sentence",
      "content": "The `atimeMs`, `mtimeMs`, `ctimeMs`, `birthtimeMs` properties are numeric values that hold the corresponding times in milliseconds.",
      "position": 0
    },
    {
      "id": "s_5635",
      "type": "sentence",
      "content": "Their precision is platform specific.",
      "position": 1
    },
    {
      "id": "s_5636",
      "type": "sentence",
      "content": "When `bigint: true` is passed into the method that generates the object, the properties will be [bigints][], otherwise they will be [numbers][MDN-Number].",
      "position": 2
    },
    {
      "id": "s_5637",
      "type": "sentence",
      "content": "The `atimeNs`, `mtimeNs`, `ctimeNs`, `birthtimeNs` properties are [bigints][] that hold the corresponding times in nanoseconds.",
      "position": 3
    },
    {
      "id": "s_5638",
      "type": "sentence",
      "content": "They are only present when `bigint: true` is passed into the method that generates the object.",
      "position": 4
    },
    {
      "id": "s_5639",
      "type": "sentence",
      "content": "Their precision is platform specific.",
      "position": 5
    },
    {
      "id": "s_5640",
      "type": "sentence",
      "content": "`atime`, `mtime`, `ctime`, and `birthtime` are [`Date`][MDN-Date] object alternate representations of the various times.",
      "position": 6
    },
    {
      "id": "s_5641",
      "type": "sentence",
      "content": "The `Date` and number values are not connected.",
      "position": 7
    },
    {
      "id": "s_5642",
      "type": "sentence",
      "content": "Assigning a new number value, or mutating the `Date` value, will not be reflected in the corresponding alternate representation.",
      "position": 8
    },
    {
      "id": "s_5643",
      "type": "sentence",
      "content": "The times in the stat object have the following semantics:",
      "position": 9
    },
    {
      "id": "s_5644",
      "type": "sentence",
      "content": "`atime` \"Access Time\": Time when file data last accessed.",
      "position": 10
    },
    {
      "id": "s_5645",
      "type": "sentence",
      "content": "Changed by the mknod(2), utimes(2), and read(2) system calls.",
      "position": 11
    },
    {
      "id": "s_5646",
      "type": "sentence",
      "content": "`mtime` \"Modified Time\": Time when file data last modified.",
      "position": 12
    },
    {
      "id": "s_5647",
      "type": "sentence",
      "content": "Changed by the mknod(2), utimes(2), and write(2) system calls.",
      "position": 13
    },
    {
      "id": "s_5648",
      "type": "sentence",
      "content": "`ctime` \"Change Time\": Time when file status was last changed (inode data modification).",
      "position": 14
    },
    {
      "id": "s_5649",
      "type": "sentence",
      "content": "Changed by the chmod(2), chown(2), link(2), mknod(2), rename(2), unlink(2), utimes(2), read(2), and write(2) system calls.",
      "position": 15
    },
    {
      "id": "s_5650",
      "type": "sentence",
      "content": "`birthtime` \"Birth Time\": Time of file creation.",
      "position": 16
    },
    {
      "id": "s_5651",
      "type": "sentence",
      "content": "Set once when the file is created.",
      "position": 17
    },
    {
      "id": "s_5652",
      "type": "sentence",
      "content": "On file systems where birthtime is not available, this field may instead hold either the `ctime` or `1970-01-01T00:00Z` (ie, Unix epoch timestamp `0`).",
      "position": 18
    },
    {
      "id": "s_5653",
      "type": "sentence",
      "content": "This value may be greater than `atime` or `mtime` in this case.",
      "position": 19
    },
    {
      "id": "s_5654",
      "type": "sentence",
      "content": "On Darwin and other FreeBSD variants, also set if the `atime` is explicitly set to an earlier value than the current `birthtime` using the utimes(2) system call.",
      "position": 20
    },
    {
      "id": "s_5655",
      "type": "sentence",
      "content": "Prior to Node.",
      "position": 21
    },
    {
      "id": "s_5656",
      "type": "sentence",
      "content": "js 0.12, the `ctime` held the `birthtime` on Windows systems.",
      "position": 22
    },
    {
      "id": "s_5657",
      "type": "sentence",
      "content": "As of 0.12, `ctime` is not \"creation time\", and on Unix systems, it never was.",
      "position": 23
    },
    {
      "id": "w_5658",
      "type": "window",
      "content": "Provides information about a mounted file system. Objects returned from [`fs.statfs()`][] and its synchronous counterpart are of\nthis type. If `bigint` in the `options` passed to those methods is `true`, the\nnumeric values will be `bigint` instead of `number`. `bigint` version:",
      "position": 0,
      "windowSize": 39
    },
    {
      "id": "sw_5659",
      "type": "sentence_window",
      "content": "Provides information about a mounted file system. Objects returned from [`fs. statfs()`][] and its synchronous counterpart are of this type.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5660",
      "type": "sentence_window",
      "content": "Objects returned from [`fs. statfs()`][] and its synchronous counterpart are of this type. If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5661",
      "type": "sentence_window",
      "content": "statfs()`][] and its synchronous counterpart are of this type. If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`. `bigint` version:",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5662",
      "type": "sentence_window",
      "content": "If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`. `bigint` version:",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_5663",
      "type": "sentence_context",
      "content": "[Class: `fs.StatFs`] Provides information about a mounted file system.",
      "position": 0
    },
    {
      "id": "sc_5664",
      "type": "sentence_context",
      "content": "[Class: `fs.StatFs`] [Previous: Provides information about a mounted file system....] Objects returned from [`fs.",
      "position": 1
    },
    {
      "id": "sc_5665",
      "type": "sentence_context",
      "content": "[Class: `fs.StatFs`] [Previous: Objects returned from [`fs....] statfs()`][] and its synchronous counterpart are of this type.",
      "position": 2
    },
    {
      "id": "sc_5666",
      "type": "sentence_context",
      "content": "[Class: `fs.StatFs`] [Previous: statfs()`][] and its synchronous counterpart are o...] If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`.",
      "position": 3
    },
    {
      "id": "sc_5667",
      "type": "sentence_context",
      "content": "[Class: `fs.StatFs`] [Previous: If `bigint` in the `options` passed to those metho...] `bigint` version:",
      "position": 4
    },
    {
      "id": "s_5668",
      "type": "sentence",
      "content": "Provides information about a mounted file system.",
      "position": 0
    },
    {
      "id": "s_5669",
      "type": "sentence",
      "content": "Objects returned from [`fs.",
      "position": 1
    },
    {
      "id": "s_5670",
      "type": "sentence",
      "content": "statfs()`][] and its synchronous counterpart are of this type.",
      "position": 2
    },
    {
      "id": "s_5671",
      "type": "sentence",
      "content": "If `bigint` in the `options` passed to those methods is `true`, the numeric values will be `bigint` instead of `number`.",
      "position": 3
    },
    {
      "id": "s_5672",
      "type": "sentence",
      "content": "`bigint` version:",
      "position": 4
    },
    {
      "id": "sw_5673",
      "type": "sentence_window",
      "content": "Type: {number|bigint} Free blocks available to unprivileged users.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5674",
      "type": "sentence_context",
      "content": "[`statfs.bavail`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5675",
      "type": "sentence_context",
      "content": "[`statfs.bavail`] [Previous: Type: {number|bigint}...] Free blocks available to unprivileged users.",
      "position": 1
    },
    {
      "id": "s_5676",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5677",
      "type": "sentence",
      "content": "Free blocks available to unprivileged users.",
      "position": 1
    },
    {
      "id": "sw_5678",
      "type": "sentence_window",
      "content": "Type: {number|bigint} Free blocks in file system.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5679",
      "type": "sentence_context",
      "content": "[`statfs.bfree`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5680",
      "type": "sentence_context",
      "content": "[`statfs.bfree`] [Previous: Type: {number|bigint}...] Free blocks in file system.",
      "position": 1
    },
    {
      "id": "s_5681",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5682",
      "type": "sentence",
      "content": "Free blocks in file system.",
      "position": 1
    },
    {
      "id": "sw_5683",
      "type": "sentence_window",
      "content": "Type: {number|bigint} Total data blocks in file system.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5684",
      "type": "sentence_context",
      "content": "[`statfs.blocks`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5685",
      "type": "sentence_context",
      "content": "[`statfs.blocks`] [Previous: Type: {number|bigint}...] Total data blocks in file system.",
      "position": 1
    },
    {
      "id": "s_5686",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5687",
      "type": "sentence",
      "content": "Total data blocks in file system.",
      "position": 1
    },
    {
      "id": "sw_5688",
      "type": "sentence_window",
      "content": "Type: {number|bigint} Optimal transfer block size.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5689",
      "type": "sentence_context",
      "content": "[`statfs.bsize`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5690",
      "type": "sentence_context",
      "content": "[`statfs.bsize`] [Previous: Type: {number|bigint}...] Optimal transfer block size.",
      "position": 1
    },
    {
      "id": "s_5691",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5692",
      "type": "sentence",
      "content": "Optimal transfer block size.",
      "position": 1
    },
    {
      "id": "sw_5693",
      "type": "sentence_window",
      "content": "Type: {number|bigint} Free file nodes in file system.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5694",
      "type": "sentence_context",
      "content": "[`statfs.ffree`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5695",
      "type": "sentence_context",
      "content": "[`statfs.ffree`] [Previous: Type: {number|bigint}...] Free file nodes in file system.",
      "position": 1
    },
    {
      "id": "s_5696",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5697",
      "type": "sentence",
      "content": "Free file nodes in file system.",
      "position": 1
    },
    {
      "id": "sw_5698",
      "type": "sentence_window",
      "content": "Type: {number|bigint} Total file nodes in file system.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5699",
      "type": "sentence_context",
      "content": "[`statfs.files`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5700",
      "type": "sentence_context",
      "content": "[`statfs.files`] [Previous: Type: {number|bigint}...] Total file nodes in file system.",
      "position": 1
    },
    {
      "id": "s_5701",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5702",
      "type": "sentence",
      "content": "Total file nodes in file system.",
      "position": 1
    },
    {
      "id": "sw_5703",
      "type": "sentence_window",
      "content": "Type: {number|bigint} Type of file system.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5704",
      "type": "sentence_context",
      "content": "[`statfs.type`] Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "sc_5705",
      "type": "sentence_context",
      "content": "[`statfs.type`] [Previous: Type: {number|bigint}...] Type of file system.",
      "position": 1
    },
    {
      "id": "s_5706",
      "type": "sentence",
      "content": "Type: {number|bigint}",
      "position": 0
    },
    {
      "id": "s_5707",
      "type": "sentence",
      "content": "Type of file system.",
      "position": 1
    },
    {
      "id": "w_5708",
      "type": "window",
      "content": "An optimized UTF-8 stream writer that allows for flushing all the internal\nbuffering on demand. It handles `EAGAIN` errors correctly, allowing for\ncustomization, for example, by dropping content if the disk is busy.",
      "position": 0,
      "windowSize": 31
    },
    {
      "id": "sw_5709",
      "type": "sentence_window",
      "content": "An optimized UTF-8 stream writer that allows for flushing all the internal buffering on demand. It handles `EAGAIN` errors correctly, allowing for customization, for example, by dropping content if the disk is busy.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5710",
      "type": "sentence_context",
      "content": "[Class: `fs.Utf8Stream`] An optimized UTF-8 stream writer that allows for flushing all the internal buffering on demand.",
      "position": 0
    },
    {
      "id": "sc_5711",
      "type": "sentence_context",
      "content": "[Class: `fs.Utf8Stream`] [Previous: An optimized UTF-8 stream writer that allows for f...] It handles `EAGAIN` errors correctly, allowing for customization, for example, by dropping content if the disk is busy.",
      "position": 1
    },
    {
      "id": "s_5712",
      "type": "sentence",
      "content": "An optimized UTF-8 stream writer that allows for flushing all the internal buffering on demand.",
      "position": 0
    },
    {
      "id": "s_5713",
      "type": "sentence",
      "content": "It handles `EAGAIN` errors correctly, allowing for customization, for example, by dropping content if the disk is busy.",
      "position": 1
    },
    {
      "id": "sc_5714",
      "type": "sentence_context",
      "content": "[Event: `'close'`] The `'close'` event is emitted when the stream is fully closed.",
      "position": 0
    },
    {
      "id": "s_5715",
      "type": "sentence",
      "content": "The `'close'` event is emitted when the stream is fully closed.",
      "position": 0
    },
    {
      "id": "sc_5716",
      "type": "sentence_context",
      "content": "[Event: `'drain'`] The `'drain'` event is emitted when the internal buffer has drained sufficiently to allow continued writing.",
      "position": 0
    },
    {
      "id": "s_5717",
      "type": "sentence",
      "content": "The `'drain'` event is emitted when the internal buffer has drained sufficiently to allow continued writing.",
      "position": 0
    },
    {
      "id": "w_5718",
      "type": "window",
      "content": "The `'drop'` event is emitted when to maximal length is reached and that data\nwill not be written. The data that was dropped is passed as the first argument\nto the event handle.",
      "position": 0,
      "windowSize": 31
    },
    {
      "id": "sw_5719",
      "type": "sentence_window",
      "content": "The `'drop'` event is emitted when to maximal length is reached and that data will not be written. The data that was dropped is passed as the first argument to the event handle.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5720",
      "type": "sentence_context",
      "content": "[Event: `'drop'`] The `'drop'` event is emitted when to maximal length is reached and that data will not be written.",
      "position": 0
    },
    {
      "id": "sc_5721",
      "type": "sentence_context",
      "content": "[Event: `'drop'`] [Previous: The `'drop'` event is emitted when to maximal leng...] The data that was dropped is passed as the first argument to the event handle.",
      "position": 1
    },
    {
      "id": "s_5722",
      "type": "sentence",
      "content": "The `'drop'` event is emitted when to maximal length is reached and that data will not be written.",
      "position": 0
    },
    {
      "id": "s_5723",
      "type": "sentence",
      "content": "The data that was dropped is passed as the first argument to the event handle.",
      "position": 1
    },
    {
      "id": "sc_5724",
      "type": "sentence_context",
      "content": "[Event: `'error'`] The `'error'` event is emitted when an error occurs.",
      "position": 0
    },
    {
      "id": "s_5725",
      "type": "sentence",
      "content": "The `'error'` event is emitted when an error occurs.",
      "position": 0
    },
    {
      "id": "sc_5726",
      "type": "sentence_context",
      "content": "[Event: `'finish'`] The `'finish'` event is emitted when the stream has been ended and all data has been flushed to the underlying file.",
      "position": 0
    },
    {
      "id": "s_5727",
      "type": "sentence",
      "content": "The `'finish'` event is emitted when the stream has been ended and all data has been flushed to the underlying file.",
      "position": 0
    },
    {
      "id": "sc_5728",
      "type": "sentence_context",
      "content": "[Event: `'ready'`] The `'ready'` event is emitted when the stream is ready to accept writes.",
      "position": 0
    },
    {
      "id": "s_5729",
      "type": "sentence",
      "content": "The `'ready'` event is emitted when the stream is ready to accept writes.",
      "position": 0
    },
    {
      "id": "w_5730",
      "type": "window",
      "content": "The `'write'` event is emitted when a write operation has completed. The number\nof bytes written is passed as the first argument to the event handler.",
      "position": 0,
      "windowSize": 25
    },
    {
      "id": "sw_5731",
      "type": "sentence_window",
      "content": "The `'write'` event is emitted when a write operation has completed. The number of bytes written is passed as the first argument to the event handler.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5732",
      "type": "sentence_context",
      "content": "[Event: `'write'`] The `'write'` event is emitted when a write operation has completed.",
      "position": 0
    },
    {
      "id": "sc_5733",
      "type": "sentence_context",
      "content": "[Event: `'write'`] [Previous: The `'write'` event is emitted when a write operat...] The number of bytes written is passed as the first argument to the event handler.",
      "position": 1
    },
    {
      "id": "s_5734",
      "type": "sentence",
      "content": "The `'write'` event is emitted when a write operation has completed.",
      "position": 0
    },
    {
      "id": "s_5735",
      "type": "sentence",
      "content": "The number of bytes written is passed as the first argument to the event handler.",
      "position": 1
    },
    {
      "id": "w_5736",
      "type": "window",
      "content": "`options` {Object}\n* `append`: {boolean} Appends writes to dest file instead of truncating it.\n  **Default**: `true`.\n* `contentMode`: {string} Which type of data you can send to the write\n  function, supported values are `'utf8'` or `'buffer'`. **Default**:\n  `'utf8'`.\n* `dest`: {string} A path to a file to be written to (mode controlled by the\n  append option).\n* `fd`: {number} A file descriptor, something that is returned by `fs.open()`\n  or `fs.openSync()`.\n* `fs`: {Object} An object that has the same API as the `fs` module, useful\n  for mocking, testing, or customizing the behavior of the stream.\n* `fsync`: {boolean} Perform a `fs.fsyncSync()` every time a write is\n  completed.\n* `maxLength`: {number} The maximum length of the internal buffer. If a write\n  operation would cause the buffer to exceed `maxLength`, the data written is\n  dropped and a drop event is emitted with the dropped data\n* `maxWrite`: {number} The maximum number of bytes that can be written;\n  **Default**: `16384`\n* `minLength`: {number} The minimum length of the internal buffer that is\n  required to be full before flushing.\n* `mkdir`: {boolean} Ensure directory for `dest` file exists when true.\n  **Default**: `false`.\n* `mode`: {number|string} Specify the creating file mode (see `fs.open()`).\n* `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds.\n* `retryEAGAIN` {Function} A function that will be called when `write()`,\n  `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error.\n  If the return value is `true` the operation will be retried, otherwise it\n  will bubble the error. The `err` is the error that caused this function to\n  be called, `writeBufferLen` is the length of the buffer that was written,\n  and `remainingBufferLen` is the length of the remaining buffer that the\n",
      "position": 0,
      "windowSize": 280
    },
    {
      "id": "w_5737",
      "type": "window",
      "content": "directory for `dest` file exists when true.\n  **Default**: `false`.\n* `mode`: {number|string} Specify the creating file mode (see `fs.open()`).\n* `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds.\n* `retryEAGAIN` {Function} A function that will be called when `write()`,\n  `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error.\n  If the return value is `true` the operation will be retried, otherwise it\n  will bubble the error. The `err` is the error that caused this function to\n  be called, `writeBufferLen` is the length of the buffer that was written,\n  and `remainingBufferLen` is the length of the remaining buffer that the\n  stream did not try to write.\n  * `err` {any} An error or `null`.\n  * `writeBufferLen` {number}\n  * `remainingBufferLen`: {number}\n* `sync`: {boolean} Perform writes synchronously.",
      "position": 180,
      "windowSize": 128
    },
    {
      "id": "sw_5738",
      "type": "sentence_window",
      "content": "`options` {Object} * `append`: {boolean} Appends writes to dest file instead of truncating it. **Default**: `true`. * `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5739",
      "type": "sentence_window",
      "content": "**Default**: `true`. * `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`. **Default**: `'utf8'`.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5740",
      "type": "sentence_window",
      "content": "* `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`. **Default**: `'utf8'`. * `dest`: {string} A path to a file to be written to (mode controlled by the append option).",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5741",
      "type": "sentence_window",
      "content": "**Default**: `'utf8'`. * `dest`: {string} A path to a file to be written to (mode controlled by the append option). * `fd`: {number} A file descriptor, something that is returned by `fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5742",
      "type": "sentence_window",
      "content": "* `dest`: {string} A path to a file to be written to (mode controlled by the append option). * `fd`: {number} A file descriptor, something that is returned by `fs. open()` or `fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_5743",
      "type": "sentence_window",
      "content": "* `fd`: {number} A file descriptor, something that is returned by `fs. open()` or `fs. openSync()`.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_5744",
      "type": "sentence_window",
      "content": "open()` or `fs. openSync()`. * `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_5745",
      "type": "sentence_window",
      "content": "openSync()`. * `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream. * `fsync`: {boolean} Perform a `fs.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_5746",
      "type": "sentence_window",
      "content": "* `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream. * `fsync`: {boolean} Perform a `fs. fsyncSync()` every time a write is completed.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_5747",
      "type": "sentence_window",
      "content": "* `fsync`: {boolean} Perform a `fs. fsyncSync()` every time a write is completed. * `maxLength`: {number} The maximum length of the internal buffer.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_5748",
      "type": "sentence_window",
      "content": "fsyncSync()` every time a write is completed. * `maxLength`: {number} The maximum length of the internal buffer. If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**:",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_5749",
      "type": "sentence_window",
      "content": "* `maxLength`: {number} The maximum length of the internal buffer. If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**: `16384` * `minLength`: {number} The minimum length",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_5750",
      "type": "sentence_window",
      "content": "If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**: `16384` * `minLength`: {number} The minimum length of the internal buffer that is required to be full before flushing.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_5751",
      "type": "sentence_window",
      "content": "* `mkdir`: {boolean} Ensure directory for `dest` file exists when true. **Default**: `false`. * `mode`: {number|string} Specify the creating file mode (see `fs.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_5752",
      "type": "sentence_window",
      "content": "**Default**: `false`. * `mode`: {number|string} Specify the creating file mode (see `fs. * `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_5753",
      "type": "sentence_window",
      "content": "* `mode`: {number|string} Specify the creating file mode (see `fs. * `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds. * `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_5754",
      "type": "sentence_window",
      "content": "* `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds. * `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error. If the return value is `true` the operation will be retried, otherwise it will bubble the error.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_5755",
      "type": "sentence_window",
      "content": "* `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error. If the return value is `true` the operation will be retried, otherwise it will bubble the error. The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_5756",
      "type": "sentence_window",
      "content": "If the return value is `true` the operation will be retried, otherwise it will bubble the error. The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the buffer that was written and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write.",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_5757",
      "type": "sentence_window",
      "content": "The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the buffer that was written and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write. * `err` {any} An error or `null`.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_5758",
      "type": "sentence_window",
      "content": "and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write. * `err` {any} An error or `null`. * `writeBufferLen` {number} * `remainingBufferLen`: {number} * `sync`: {boolean} Perform writes synchronously.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_5759",
      "type": "sentence_window",
      "content": "* `err` {any} An error or `null`. * `writeBufferLen` {number} * `remainingBufferLen`: {number} * `sync`: {boolean} Perform writes synchronously.",
      "position": 21,
      "sentenceCount": 2
    },
    {
      "id": "sc_5760",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] `options` {Object} * `append`: {boolean} Appends writes to dest file instead of truncating it.",
      "position": 0
    },
    {
      "id": "sc_5761",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: `options` {Object} * `append`: {boolean} Appends w...] **Default**: `true`.",
      "position": 1
    },
    {
      "id": "sc_5762",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] * `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`.",
      "position": 2
    },
    {
      "id": "sc_5763",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `contentMode`: {string} Which type of data you c...] **Default**: `'utf8'`.",
      "position": 3
    },
    {
      "id": "sc_5764",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: **Default**: `'utf8'`....] * `dest`: {string} A path to a file to be written to (mode controlled by the append option).",
      "position": 4
    },
    {
      "id": "sc_5765",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `dest`: {string} A path to a file to be written ...] * `fd`: {number} A file descriptor, something that is returned by `fs.",
      "position": 5
    },
    {
      "id": "sc_5766",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `fd`: {number} A file descriptor, something that...] open()` or `fs.",
      "position": 6
    },
    {
      "id": "sc_5767",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] openSync()`.",
      "position": 7
    },
    {
      "id": "sc_5768",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] * `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream.",
      "position": 8
    },
    {
      "id": "sc_5769",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `fs`: {Object} An object that has the same API a...] * `fsync`: {boolean} Perform a `fs.",
      "position": 9
    },
    {
      "id": "sc_5770",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `fsync`: {boolean} Perform a `fs....] fsyncSync()` every time a write is completed.",
      "position": 10
    },
    {
      "id": "sc_5771",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: fsyncSync()` every time a write is completed....] * `maxLength`: {number} The maximum length of the internal buffer.",
      "position": 11
    },
    {
      "id": "sc_5772",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `maxLength`: {number} The maximum length of the ...] If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**: `16384` *",
      "position": 12
    },
    {
      "id": "sc_5773",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: If a write operation would cause the buffer to exc...] * `mkdir`: {boolean} Ensure directory for `dest` file exists when true.",
      "position": 13
    },
    {
      "id": "sc_5774",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `mkdir`: {boolean} Ensure directory for `dest` f...] **Default**: `false`.",
      "position": 14
    },
    {
      "id": "sc_5775",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: **Default**: `false`....] * `mode`: {number|string} Specify the creating file mode (see `fs.",
      "position": 15
    },
    {
      "id": "sc_5776",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `mode`: {number|string} Specify the creating fil...] * `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds.",
      "position": 16
    },
    {
      "id": "sc_5777",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `periodicFlush`: {number} Calls flush every `per...] * `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error.",
      "position": 17
    },
    {
      "id": "sc_5778",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `retryEAGAIN` {Function} A function that will be...] If the return value is `true` the operation will be retried, otherwise it will bubble the error.",
      "position": 18
    },
    {
      "id": "sc_5779",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: If the return value is `true` the operation will b...] The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the buffer that was written",
      "position": 19
    },
    {
      "id": "sc_5780",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: The `err` is the error that caused this function t...] and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write.",
      "position": 20
    },
    {
      "id": "sc_5781",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: and `remainingBufferLen` is the length of the rema...] * `err` {any} An error or `null`.",
      "position": 21
    },
    {
      "id": "sc_5782",
      "type": "sentence_context",
      "content": "[`new fs.Utf8Stream([options])`] [Previous: * `err` {any} An error or `null`....] * `writeBufferLen` {number} * `remainingBufferLen`: {number} * `sync`: {boolean} Perform writes synchronously.",
      "position": 22
    },
    {
      "id": "s_5783",
      "type": "sentence",
      "content": "`options` {Object} * `append`: {boolean} Appends writes to dest file instead of truncating it.",
      "position": 0
    },
    {
      "id": "s_5784",
      "type": "sentence",
      "content": "**Default**: `true`.",
      "position": 1
    },
    {
      "id": "s_5785",
      "type": "sentence",
      "content": "* `contentMode`: {string} Which type of data you can send to the write function, supported values are `'utf8'` or `'buffer'`.",
      "position": 2
    },
    {
      "id": "s_5786",
      "type": "sentence",
      "content": "**Default**: `'utf8'`.",
      "position": 3
    },
    {
      "id": "s_5787",
      "type": "sentence",
      "content": "* `dest`: {string} A path to a file to be written to (mode controlled by the append option).",
      "position": 4
    },
    {
      "id": "s_5788",
      "type": "sentence",
      "content": "* `fd`: {number} A file descriptor, something that is returned by `fs.",
      "position": 5
    },
    {
      "id": "s_5789",
      "type": "sentence",
      "content": "open()` or `fs.",
      "position": 6
    },
    {
      "id": "s_5790",
      "type": "sentence",
      "content": "openSync()`.",
      "position": 7
    },
    {
      "id": "s_5791",
      "type": "sentence",
      "content": "* `fs`: {Object} An object that has the same API as the `fs` module, useful for mocking, testing, or customizing the behavior of the stream.",
      "position": 8
    },
    {
      "id": "s_5792",
      "type": "sentence",
      "content": "* `fsync`: {boolean} Perform a `fs.",
      "position": 9
    },
    {
      "id": "s_5793",
      "type": "sentence",
      "content": "fsyncSync()` every time a write is completed.",
      "position": 10
    },
    {
      "id": "s_5794",
      "type": "sentence",
      "content": "* `maxLength`: {number} The maximum length of the internal buffer.",
      "position": 11
    },
    {
      "id": "s_5795",
      "type": "sentence",
      "content": "If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data * `maxWrite`: {number} The maximum number of bytes that can be written; **Default**: `16384` * `minLength`: {number} The minimum length of the internal buffer that is required to be full before flushing.",
      "position": 12
    },
    {
      "id": "s_5796",
      "type": "sentence",
      "content": "* `mkdir`: {boolean} Ensure directory for `dest` file exists when true.",
      "position": 13
    },
    {
      "id": "s_5797",
      "type": "sentence",
      "content": "**Default**: `false`.",
      "position": 14
    },
    {
      "id": "s_5798",
      "type": "sentence",
      "content": "* `mode`: {number|string} Specify the creating file mode (see `fs.",
      "position": 15
    },
    {
      "id": "s_5799",
      "type": "sentence",
      "content": "* `periodicFlush`: {number} Calls flush every `periodicFlush` milliseconds.",
      "position": 16
    },
    {
      "id": "s_5800",
      "type": "sentence",
      "content": "* `retryEAGAIN` {Function} A function that will be called when `write()`, `writeSync()`, or `flushSync()` encounters an `EAGAIN` or `EBUSY` error.",
      "position": 17
    },
    {
      "id": "s_5801",
      "type": "sentence",
      "content": "If the return value is `true` the operation will be retried, otherwise it will bubble the error.",
      "position": 18
    },
    {
      "id": "s_5802",
      "type": "sentence",
      "content": "The `err` is the error that caused this function to be called, `writeBufferLen` is the length of the buffer that was written",
      "position": 19
    },
    {
      "id": "s_5803",
      "type": "sentence",
      "content": "and `remainingBufferLen` is the length of the remaining buffer that the stream did not try to write.",
      "position": 20
    },
    {
      "id": "s_5804",
      "type": "sentence",
      "content": "* `err` {any} An error or `null`.",
      "position": 21
    },
    {
      "id": "s_5805",
      "type": "sentence",
      "content": "* `writeBufferLen` {number} * `remainingBufferLen`: {number} * `sync`: {boolean} Perform writes synchronously.",
      "position": 22
    },
    {
      "id": "sc_5806",
      "type": "sentence_context",
      "content": "[`utf8Stream.append`] {boolean} Whether the stream is appending to the file or truncating it.",
      "position": 0
    },
    {
      "id": "s_5807",
      "type": "sentence",
      "content": "{boolean} Whether the stream is appending to the file or truncating it.",
      "position": 0
    },
    {
      "id": "sw_5808",
      "type": "sentence_window",
      "content": "{string} The type of data that can be written to the stream. Supported values are `'utf8'` or `'buffer'`. **Default**: `'utf8'`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5809",
      "type": "sentence_window",
      "content": "Supported values are `'utf8'` or `'buffer'`. **Default**: `'utf8'`.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5810",
      "type": "sentence_context",
      "content": "[`utf8Stream.contentMode`] {string} The type of data that can be written to the stream.",
      "position": 0
    },
    {
      "id": "sc_5811",
      "type": "sentence_context",
      "content": "[`utf8Stream.contentMode`] [Previous: {string} The type of data that can be written to t...] Supported values are `'utf8'` or `'buffer'`.",
      "position": 1
    },
    {
      "id": "sc_5812",
      "type": "sentence_context",
      "content": "[`utf8Stream.contentMode`] [Previous: Supported values are `'utf8'` or `'buffer'`....] **Default**: `'utf8'`.",
      "position": 2
    },
    {
      "id": "s_5813",
      "type": "sentence",
      "content": "{string} The type of data that can be written to the stream.",
      "position": 0
    },
    {
      "id": "s_5814",
      "type": "sentence",
      "content": "Supported values are `'utf8'` or `'buffer'`.",
      "position": 1
    },
    {
      "id": "s_5815",
      "type": "sentence",
      "content": "**Default**: `'utf8'`.",
      "position": 2
    },
    {
      "id": "sc_5816",
      "type": "sentence_context",
      "content": "[`utf8Stream.destroy()`] Close the stream immediately, without flushing the internal buffer.",
      "position": 0
    },
    {
      "id": "s_5817",
      "type": "sentence",
      "content": "Close the stream immediately, without flushing the internal buffer.",
      "position": 0
    },
    {
      "id": "sc_5818",
      "type": "sentence_context",
      "content": "[`utf8Stream.end()`] Close the stream gracefully, flushing the internal buffer before closing.",
      "position": 0
    },
    {
      "id": "s_5819",
      "type": "sentence",
      "content": "Close the stream gracefully, flushing the internal buffer before closing.",
      "position": 0
    },
    {
      "id": "sc_5820",
      "type": "sentence_context",
      "content": "[`utf8Stream.fd`] {number} The file descriptor that is being written to.",
      "position": 0
    },
    {
      "id": "s_5821",
      "type": "sentence",
      "content": "{number} The file descriptor that is being written to.",
      "position": 0
    },
    {
      "id": "sc_5822",
      "type": "sentence_context",
      "content": "[`utf8Stream.file`] {string} The file that is being written to.",
      "position": 0
    },
    {
      "id": "s_5823",
      "type": "sentence",
      "content": "{string} The file that is being written to.",
      "position": 0
    },
    {
      "id": "w_5824",
      "type": "window",
      "content": "`callback` {Function}\n* `err` {Error|null} An error if the flush failed, otherwise `null`. Writes the current buffer to the file if a write was not in progress. Do\nnothing if `minLength` is zero or if it is already writing.",
      "position": 0,
      "windowSize": 37
    },
    {
      "id": "sw_5825",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error|null} An error if the flush failed, otherwise `null`. Writes the current buffer to the file if a write was not in progress. Do nothing if `minLength` is zero or if it is already writing.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5826",
      "type": "sentence_window",
      "content": "Writes the current buffer to the file if a write was not in progress. Do nothing if `minLength` is zero or if it is already writing.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5827",
      "type": "sentence_context",
      "content": "[`utf8Stream.flush(callback)`] `callback` {Function} * `err` {Error|null} An error if the flush failed, otherwise `null`.",
      "position": 0
    },
    {
      "id": "sc_5828",
      "type": "sentence_context",
      "content": "[`utf8Stream.flush(callback)`] [Previous: `callback` {Function} * `err` {Error|null} An erro...] Writes the current buffer to the file if a write was not in progress.",
      "position": 1
    },
    {
      "id": "sc_5829",
      "type": "sentence_context",
      "content": "[`utf8Stream.flush(callback)`] [Previous: Writes the current buffer to the file if a write w...] Do nothing if `minLength` is zero or if it is already writing.",
      "position": 2
    },
    {
      "id": "s_5830",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error|null} An error if the flush failed, otherwise `null`.",
      "position": 0
    },
    {
      "id": "s_5831",
      "type": "sentence",
      "content": "Writes the current buffer to the file if a write was not in progress.",
      "position": 1
    },
    {
      "id": "s_5832",
      "type": "sentence",
      "content": "Do nothing if `minLength` is zero or if it is already writing.",
      "position": 2
    },
    {
      "id": "sw_5833",
      "type": "sentence_window",
      "content": "Flushes the buffered data synchronously. This is a costly operation.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5834",
      "type": "sentence_context",
      "content": "[`utf8Stream.flushSync()`] Flushes the buffered data synchronously.",
      "position": 0
    },
    {
      "id": "sc_5835",
      "type": "sentence_context",
      "content": "[`utf8Stream.flushSync()`] [Previous: Flushes the buffered data synchronously....] This is a costly operation.",
      "position": 1
    },
    {
      "id": "s_5836",
      "type": "sentence",
      "content": "Flushes the buffered data synchronously.",
      "position": 0
    },
    {
      "id": "s_5837",
      "type": "sentence",
      "content": "This is a costly operation.",
      "position": 1
    },
    {
      "id": "sw_5838",
      "type": "sentence_window",
      "content": "{boolean} Whether the stream is performing a `fs. fsyncSync()` after every write operation.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5839",
      "type": "sentence_context",
      "content": "[`utf8Stream.fsync`] {boolean} Whether the stream is performing a `fs.",
      "position": 0
    },
    {
      "id": "sc_5840",
      "type": "sentence_context",
      "content": "[`utf8Stream.fsync`] [Previous: {boolean} Whether the stream is performing a `fs....] fsyncSync()` after every write operation.",
      "position": 1
    },
    {
      "id": "s_5841",
      "type": "sentence",
      "content": "{boolean} Whether the stream is performing a `fs.",
      "position": 0
    },
    {
      "id": "s_5842",
      "type": "sentence",
      "content": "fsyncSync()` after every write operation.",
      "position": 1
    },
    {
      "id": "w_5843",
      "type": "window",
      "content": "{number} The maximum length of the internal buffer. If a write\noperation would cause the buffer to exceed `maxLength`, the data written is\ndropped and a drop event is emitted with the dropped data.",
      "position": 0,
      "windowSize": 32
    },
    {
      "id": "sw_5844",
      "type": "sentence_window",
      "content": "{number} The maximum length of the internal buffer. If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5845",
      "type": "sentence_context",
      "content": "[`utf8Stream.maxLength`] {number} The maximum length of the internal buffer.",
      "position": 0
    },
    {
      "id": "sc_5846",
      "type": "sentence_context",
      "content": "[`utf8Stream.maxLength`] [Previous: {number} The maximum length of the internal buffer...] If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data.",
      "position": 1
    },
    {
      "id": "s_5847",
      "type": "sentence",
      "content": "{number} The maximum length of the internal buffer.",
      "position": 0
    },
    {
      "id": "s_5848",
      "type": "sentence",
      "content": "If a write operation would cause the buffer to exceed `maxLength`, the data written is dropped and a drop event is emitted with the dropped data.",
      "position": 1
    },
    {
      "id": "sc_5849",
      "type": "sentence_context",
      "content": "[`utf8Stream.minLength`] {number} The minimum length of the internal buffer that is required to be full before flushing.",
      "position": 0
    },
    {
      "id": "s_5850",
      "type": "sentence",
      "content": "{number} The minimum length of the internal buffer that is required to be full before flushing.",
      "position": 0
    },
    {
      "id": "w_5851",
      "type": "window",
      "content": "{boolean} Whether the stream should ensure that the directory for the\n`dest` file exists. If `true`, it will create the directory if it does not\nexist. **Default**: `false`.",
      "position": 0,
      "windowSize": 26
    },
    {
      "id": "sw_5852",
      "type": "sentence_window",
      "content": "{boolean} Whether the stream should ensure that the directory for the `dest` file exists. If `true`, it will create the directory if it does not exist. **Default**: `false`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5853",
      "type": "sentence_window",
      "content": "If `true`, it will create the directory if it does not exist. **Default**: `false`.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5854",
      "type": "sentence_context",
      "content": "[`utf8Stream.mkdir`] {boolean} Whether the stream should ensure that the directory for the `dest` file exists.",
      "position": 0
    },
    {
      "id": "sc_5855",
      "type": "sentence_context",
      "content": "[`utf8Stream.mkdir`] [Previous: {boolean} Whether the stream should ensure that th...] If `true`, it will create the directory if it does not exist.",
      "position": 1
    },
    {
      "id": "sc_5856",
      "type": "sentence_context",
      "content": "[`utf8Stream.mkdir`] [Previous: If `true`, it will create the directory if it does...] **Default**: `false`.",
      "position": 2
    },
    {
      "id": "s_5857",
      "type": "sentence",
      "content": "{boolean} Whether the stream should ensure that the directory for the `dest` file exists.",
      "position": 0
    },
    {
      "id": "s_5858",
      "type": "sentence",
      "content": "If `true`, it will create the directory if it does not exist.",
      "position": 1
    },
    {
      "id": "s_5859",
      "type": "sentence",
      "content": "**Default**: `false`.",
      "position": 2
    },
    {
      "id": "sc_5860",
      "type": "sentence_context",
      "content": "[`utf8Stream.mode`] {number|string} The mode of the file that is being written to.",
      "position": 0
    },
    {
      "id": "s_5861",
      "type": "sentence",
      "content": "{number|string} The mode of the file that is being written to.",
      "position": 0
    },
    {
      "id": "sw_5862",
      "type": "sentence_window",
      "content": "{number} The number of milliseconds between flushes. If set to `0`, no periodic flushes will be performed.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5863",
      "type": "sentence_context",
      "content": "[`utf8Stream.periodicFlush`] {number} The number of milliseconds between flushes.",
      "position": 0
    },
    {
      "id": "sc_5864",
      "type": "sentence_context",
      "content": "[`utf8Stream.periodicFlush`] [Previous: {number} The number of milliseconds between flushe...] If set to `0`, no periodic flushes will be performed.",
      "position": 1
    },
    {
      "id": "s_5865",
      "type": "sentence",
      "content": "{number} The number of milliseconds between flushes.",
      "position": 0
    },
    {
      "id": "s_5866",
      "type": "sentence",
      "content": "If set to `0`, no periodic flushes will be performed.",
      "position": 1
    },
    {
      "id": "w_5867",
      "type": "window",
      "content": "`file`: {string|Buffer|URL} A path to a file to be written to (mode\ncontrolled by the append option). Reopen the file in place, useful for log rotation.",
      "position": 0,
      "windowSize": 25
    },
    {
      "id": "sw_5868",
      "type": "sentence_window",
      "content": "`file`: {string|Buffer|URL} A path to a file to be written to (mode controlled by the append option). Reopen the file in place, useful for log rotation.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5869",
      "type": "sentence_context",
      "content": "[`utf8Stream.reopen(file)`] `file`: {string|Buffer|URL} A path to a file to be written to (mode controlled by the append option).",
      "position": 0
    },
    {
      "id": "sc_5870",
      "type": "sentence_context",
      "content": "[`utf8Stream.reopen(file)`] [Previous: `file`: {string|Buffer|URL} A path to a file to be...] Reopen the file in place, useful for log rotation.",
      "position": 1
    },
    {
      "id": "s_5871",
      "type": "sentence",
      "content": "`file`: {string|Buffer|URL} A path to a file to be written to (mode controlled by the append option).",
      "position": 0
    },
    {
      "id": "s_5872",
      "type": "sentence",
      "content": "Reopen the file in place, useful for log rotation.",
      "position": 1
    },
    {
      "id": "sc_5873",
      "type": "sentence_context",
      "content": "[`utf8Stream.sync`] {boolean} Whether the stream is writing synchronously or asynchronously.",
      "position": 0
    },
    {
      "id": "s_5874",
      "type": "sentence",
      "content": "{boolean} Whether the stream is writing synchronously or asynchronously.",
      "position": 0
    },
    {
      "id": "w_5875",
      "type": "window",
      "content": "`data` {string|Buffer} The data to write. Returns {boolean} When the `options.contentMode` is set to `'utf8'` when the stream is created,\nthe `data` argument must be a string. If the `contentMode` is set to `'buffer'`,\nthe `data` argument must be a {Buffer}.",
      "position": 0,
      "windowSize": 39
    },
    {
      "id": "sw_5876",
      "type": "sentence_window",
      "content": "`data` {string|Buffer} The data to write. Returns {boolean} When the `options.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5877",
      "type": "sentence_window",
      "content": "Returns {boolean} When the `options. contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5878",
      "type": "sentence_window",
      "content": "When the `options. contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string. If the `contentMode` is set to `'buffer'`, the `data` argument must be a {Buffer}.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5879",
      "type": "sentence_window",
      "content": "contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string. If the `contentMode` is set to `'buffer'`, the `data` argument must be a {Buffer}.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_5880",
      "type": "sentence_context",
      "content": "[`utf8Stream.write(data)`] `data` {string|Buffer} The data to write.",
      "position": 0
    },
    {
      "id": "sc_5881",
      "type": "sentence_context",
      "content": "[`utf8Stream.write(data)`] [Previous: `data` {string|Buffer} The data to write....] Returns {boolean}",
      "position": 1
    },
    {
      "id": "sc_5882",
      "type": "sentence_context",
      "content": "[`utf8Stream.write(data)`] When the `options.",
      "position": 2
    },
    {
      "id": "sc_5883",
      "type": "sentence_context",
      "content": "[`utf8Stream.write(data)`] contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string.",
      "position": 3
    },
    {
      "id": "sc_5884",
      "type": "sentence_context",
      "content": "[`utf8Stream.write(data)`] [Previous: contentMode` is set to `'utf8'` when the stream is...] If the `contentMode` is set to `'buffer'`, the `data` argument must be a {Buffer}.",
      "position": 4
    },
    {
      "id": "s_5885",
      "type": "sentence",
      "content": "`data` {string|Buffer} The data to write.",
      "position": 0
    },
    {
      "id": "s_5886",
      "type": "sentence",
      "content": "Returns {boolean}",
      "position": 1
    },
    {
      "id": "s_5887",
      "type": "sentence",
      "content": "When the `options.",
      "position": 2
    },
    {
      "id": "s_5888",
      "type": "sentence",
      "content": "contentMode` is set to `'utf8'` when the stream is created, the `data` argument must be a string.",
      "position": 3
    },
    {
      "id": "s_5889",
      "type": "sentence",
      "content": "If the `contentMode` is set to `'buffer'`, the `data` argument must be a {Buffer}.",
      "position": 4
    },
    {
      "id": "sc_5890",
      "type": "sentence_context",
      "content": "[`utf8Stream.writing`] {boolean} Whether the stream is currently writing data to the file.",
      "position": 0
    },
    {
      "id": "s_5891",
      "type": "sentence",
      "content": "{boolean} Whether the stream is currently writing data to the file.",
      "position": 0
    },
    {
      "id": "sw_5892",
      "type": "sentence_window",
      "content": "Calls `utf8Stream. destroy()`.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5893",
      "type": "sentence_context",
      "content": "[`utf8Stream[Symbol.dispose]()`] Calls `utf8Stream.",
      "position": 0
    },
    {
      "id": "sc_5894",
      "type": "sentence_context",
      "content": "[`utf8Stream[Symbol.dispose]()`] destroy()`.",
      "position": 1
    },
    {
      "id": "s_5895",
      "type": "sentence",
      "content": "Calls `utf8Stream.",
      "position": 0
    },
    {
      "id": "s_5896",
      "type": "sentence",
      "content": "destroy()`.",
      "position": 1
    },
    {
      "id": "sw_5897",
      "type": "sentence_window",
      "content": "Extends {stream. Instances of {fs. WriteStream} are created and returned using the [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5898",
      "type": "sentence_window",
      "content": "Instances of {fs. WriteStream} are created and returned using the [`fs. createWriteStream()`][] function.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5899",
      "type": "sentence_window",
      "content": "WriteStream} are created and returned using the [`fs. createWriteStream()`][] function.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_5900",
      "type": "sentence_context",
      "content": "[Class: `fs.WriteStream`] Extends {stream.",
      "position": 0
    },
    {
      "id": "sc_5901",
      "type": "sentence_context",
      "content": "[Class: `fs.WriteStream`] Instances of {fs.",
      "position": 1
    },
    {
      "id": "sc_5902",
      "type": "sentence_context",
      "content": "[Class: `fs.WriteStream`] WriteStream} are created and returned using the [`fs.",
      "position": 2
    },
    {
      "id": "sc_5903",
      "type": "sentence_context",
      "content": "[Class: `fs.WriteStream`] [Previous: WriteStream} are created and returned using the [`...] createWriteStream()`][] function.",
      "position": 3
    },
    {
      "id": "s_5904",
      "type": "sentence",
      "content": "Extends {stream.",
      "position": 0
    },
    {
      "id": "s_5905",
      "type": "sentence",
      "content": "Instances of {fs.",
      "position": 1
    },
    {
      "id": "s_5906",
      "type": "sentence",
      "content": "WriteStream} are created and returned using the [`fs.",
      "position": 2
    },
    {
      "id": "s_5907",
      "type": "sentence",
      "content": "createWriteStream()`][] function.",
      "position": 3
    },
    {
      "id": "sw_5908",
      "type": "sentence_window",
      "content": "Emitted when the {fs. WriteStream}'s underlying file descriptor has been closed.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5909",
      "type": "sentence_context",
      "content": "[Event: `'close'`] Emitted when the {fs.",
      "position": 0
    },
    {
      "id": "sc_5910",
      "type": "sentence_context",
      "content": "[Event: `'close'`] [Previous: Emitted when the {fs....] WriteStream}'s underlying file descriptor has been closed.",
      "position": 1
    },
    {
      "id": "s_5911",
      "type": "sentence",
      "content": "Emitted when the {fs.",
      "position": 0
    },
    {
      "id": "s_5912",
      "type": "sentence",
      "content": "WriteStream}'s underlying file descriptor has been closed.",
      "position": 1
    },
    {
      "id": "sw_5913",
      "type": "sentence_window",
      "content": "`fd` {integer} Integer file descriptor used by the {fs. WriteStream}. Emitted when the {fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5914",
      "type": "sentence_window",
      "content": "WriteStream}. Emitted when the {fs. WriteStream}'s file is opened.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5915",
      "type": "sentence_window",
      "content": "Emitted when the {fs. WriteStream}'s file is opened.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_5916",
      "type": "sentence_context",
      "content": "[Event: `'open'`] `fd` {integer} Integer file descriptor used by the {fs.",
      "position": 0
    },
    {
      "id": "sc_5917",
      "type": "sentence_context",
      "content": "[Event: `'open'`] [Previous: `fd` {integer} Integer file descriptor used by the...] WriteStream}.",
      "position": 1
    },
    {
      "id": "sc_5918",
      "type": "sentence_context",
      "content": "[Event: `'open'`] Emitted when the {fs.",
      "position": 2
    },
    {
      "id": "sc_5919",
      "type": "sentence_context",
      "content": "[Event: `'open'`] [Previous: Emitted when the {fs....] WriteStream}'s file is opened.",
      "position": 3
    },
    {
      "id": "s_5920",
      "type": "sentence",
      "content": "`fd` {integer} Integer file descriptor used by the {fs.",
      "position": 0
    },
    {
      "id": "s_5921",
      "type": "sentence",
      "content": "WriteStream}.",
      "position": 1
    },
    {
      "id": "s_5922",
      "type": "sentence",
      "content": "Emitted when the {fs.",
      "position": 2
    },
    {
      "id": "s_5923",
      "type": "sentence",
      "content": "WriteStream}'s file is opened.",
      "position": 3
    },
    {
      "id": "sw_5924",
      "type": "sentence_window",
      "content": "Emitted when the {fs. WriteStream} is ready to be used. Fires immediately after `'open'`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5925",
      "type": "sentence_window",
      "content": "WriteStream} is ready to be used. Fires immediately after `'open'`.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5926",
      "type": "sentence_context",
      "content": "[Event: `'ready'`] Emitted when the {fs.",
      "position": 0
    },
    {
      "id": "sc_5927",
      "type": "sentence_context",
      "content": "[Event: `'ready'`] [Previous: Emitted when the {fs....] WriteStream} is ready to be used.",
      "position": 1
    },
    {
      "id": "sc_5928",
      "type": "sentence_context",
      "content": "[Event: `'ready'`] [Previous: WriteStream} is ready to be used....] Fires immediately after `'open'`.",
      "position": 2
    },
    {
      "id": "s_5929",
      "type": "sentence",
      "content": "Emitted when the {fs.",
      "position": 0
    },
    {
      "id": "s_5930",
      "type": "sentence",
      "content": "WriteStream} is ready to be used.",
      "position": 1
    },
    {
      "id": "s_5931",
      "type": "sentence",
      "content": "Fires immediately after `'open'`.",
      "position": 2
    },
    {
      "id": "sw_5932",
      "type": "sentence_window",
      "content": "The number of bytes written so far. Does not include data that is still queued for writing.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5933",
      "type": "sentence_context",
      "content": "[`writeStream.bytesWritten`] The number of bytes written so far.",
      "position": 0
    },
    {
      "id": "sc_5934",
      "type": "sentence_context",
      "content": "[`writeStream.bytesWritten`] [Previous: The number of bytes written so far....] Does not include data that is still queued for writing.",
      "position": 1
    },
    {
      "id": "s_5935",
      "type": "sentence",
      "content": "The number of bytes written so far.",
      "position": 0
    },
    {
      "id": "s_5936",
      "type": "sentence",
      "content": "Does not include data that is still queued for writing.",
      "position": 1
    },
    {
      "id": "sw_5937",
      "type": "sentence_window",
      "content": "`callback` {Function} * `err` {Error} Closes `writeStream`. Optionally accepts a callback that will be executed once the `writeStream` is closed.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5938",
      "type": "sentence_window",
      "content": "Closes `writeStream`. Optionally accepts a callback that will be executed once the `writeStream` is closed.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5939",
      "type": "sentence_context",
      "content": "[`writeStream.close([callback])`] `callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "sc_5940",
      "type": "sentence_context",
      "content": "[`writeStream.close([callback])`] [Previous: `callback` {Function} * `err` {Error}...] Closes `writeStream`.",
      "position": 1
    },
    {
      "id": "sc_5941",
      "type": "sentence_context",
      "content": "[`writeStream.close([callback])`] [Previous: Closes `writeStream`....] Optionally accepts a callback that will be executed once the `writeStream` is closed.",
      "position": 2
    },
    {
      "id": "s_5942",
      "type": "sentence",
      "content": "`callback` {Function} * `err` {Error}",
      "position": 0
    },
    {
      "id": "s_5943",
      "type": "sentence",
      "content": "Closes `writeStream`.",
      "position": 1
    },
    {
      "id": "s_5944",
      "type": "sentence",
      "content": "Optionally accepts a callback that will be executed once the `writeStream` is closed.",
      "position": 2
    },
    {
      "id": "w_5945",
      "type": "window",
      "content": "The path to the file the stream is writing to as specified in the first\nargument to [`fs.createWriteStream()`][]. If `path` is passed as a string, then\n`writeStream.path` will be a string. If `path` is passed as a {Buffer}, then\n`writeStream.path` will be a {Buffer}.",
      "position": 0,
      "windowSize": 41
    },
    {
      "id": "sw_5946",
      "type": "sentence_window",
      "content": "The path to the file the stream is writing to as specified in the first argument to [`fs. createWriteStream()`][]. If `path` is passed as a string, then `writeStream.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5947",
      "type": "sentence_window",
      "content": "createWriteStream()`][]. If `path` is passed as a string, then `writeStream. path` will be a string.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5948",
      "type": "sentence_window",
      "content": "If `path` is passed as a string, then `writeStream. path` will be a string. If `path` is passed as a {Buffer}, then `writeStream.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5949",
      "type": "sentence_window",
      "content": "path` will be a string. If `path` is passed as a {Buffer}, then `writeStream. path` will be a {Buffer}.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5950",
      "type": "sentence_window",
      "content": "If `path` is passed as a {Buffer}, then `writeStream. path` will be a {Buffer}.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_5951",
      "type": "sentence_context",
      "content": "[`writeStream.path`] The path to the file the stream is writing to as specified in the first argument to [`fs.",
      "position": 0
    },
    {
      "id": "sc_5952",
      "type": "sentence_context",
      "content": "[`writeStream.path`] [Previous: The path to the file the stream is writing to as s...] createWriteStream()`][].",
      "position": 1
    },
    {
      "id": "sc_5953",
      "type": "sentence_context",
      "content": "[`writeStream.path`] [Previous: createWriteStream()`][]....] If `path` is passed as a string, then `writeStream.",
      "position": 2
    },
    {
      "id": "sc_5954",
      "type": "sentence_context",
      "content": "[`writeStream.path`] [Previous: If `path` is passed as a string, then `writeStream...] path` will be a string.",
      "position": 3
    },
    {
      "id": "sc_5955",
      "type": "sentence_context",
      "content": "[`writeStream.path`] [Previous: path` will be a string....] If `path` is passed as a {Buffer}, then `writeStream.",
      "position": 4
    },
    {
      "id": "sc_5956",
      "type": "sentence_context",
      "content": "[`writeStream.path`] [Previous: If `path` is passed as a {Buffer}, then `writeStre...] path` will be a {Buffer}.",
      "position": 5
    },
    {
      "id": "s_5957",
      "type": "sentence",
      "content": "The path to the file the stream is writing to as specified in the first argument to [`fs.",
      "position": 0
    },
    {
      "id": "s_5958",
      "type": "sentence",
      "content": "createWriteStream()`][].",
      "position": 1
    },
    {
      "id": "s_5959",
      "type": "sentence",
      "content": "If `path` is passed as a string, then `writeStream.",
      "position": 2
    },
    {
      "id": "s_5960",
      "type": "sentence",
      "content": "path` will be a string.",
      "position": 3
    },
    {
      "id": "s_5961",
      "type": "sentence",
      "content": "If `path` is passed as a {Buffer}, then `writeStream.",
      "position": 4
    },
    {
      "id": "s_5962",
      "type": "sentence",
      "content": "path` will be a {Buffer}.",
      "position": 5
    },
    {
      "id": "w_5963",
      "type": "window",
      "content": "Type: {boolean} This property is `true` if the underlying file has not been opened yet,\ni.e. before the `'ready'` event is emitted.",
      "position": 0,
      "windowSize": 21
    },
    {
      "id": "sw_5964",
      "type": "sentence_window",
      "content": "Type: {boolean} This property is `true` if the underlying file has not been opened yet, i. before the `'ready'` event is emitted.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5965",
      "type": "sentence_window",
      "content": "This property is `true` if the underlying file has not been opened yet, i. before the `'ready'` event is emitted.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_5966",
      "type": "sentence_context",
      "content": "[`writeStream.pending`] Type: {boolean}",
      "position": 0
    },
    {
      "id": "sc_5967",
      "type": "sentence_context",
      "content": "[`writeStream.pending`] This property is `true` if the underlying file has not been opened yet, i.",
      "position": 1
    },
    {
      "id": "sc_5968",
      "type": "sentence_context",
      "content": "[`writeStream.pending`] [Previous: This property is `true` if the underlying file has...] before the `'ready'` event is emitted.",
      "position": 2
    },
    {
      "id": "s_5969",
      "type": "sentence",
      "content": "Type: {boolean}",
      "position": 0
    },
    {
      "id": "s_5970",
      "type": "sentence",
      "content": "This property is `true` if the underlying file has not been opened yet, i.",
      "position": 1
    },
    {
      "id": "s_5971",
      "type": "sentence",
      "content": "before the `'ready'` event is emitted.",
      "position": 2
    },
    {
      "id": "sw_5972",
      "type": "sentence_window",
      "content": "Type: {Object} Returns an object containing commonly used constants for file system operations.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_5973",
      "type": "sentence_context",
      "content": "[`fs.constants`] Type: {Object}",
      "position": 0
    },
    {
      "id": "sc_5974",
      "type": "sentence_context",
      "content": "[`fs.constants`] Returns an object containing commonly used constants for file system operations.",
      "position": 1
    },
    {
      "id": "s_5975",
      "type": "sentence",
      "content": "Type: {Object}",
      "position": 0
    },
    {
      "id": "s_5976",
      "type": "sentence",
      "content": "Returns an object containing commonly used constants for file system operations.",
      "position": 1
    },
    {
      "id": "w_5977",
      "type": "window",
      "content": "The following constants are exported by `fs.constants` and `fsPromises.constants`. Not every constant will be available on every operating system;\nthis is especially important for Windows, where many of the POSIX specific\ndefinitions are not available.\nFor portable applications it is recommended to check for their presence\nbefore use. To use more than one constant, use the bitwise OR `|` operator. Example:",
      "position": 0,
      "windowSize": 57
    },
    {
      "id": "sw_5978",
      "type": "sentence_window",
      "content": "The following constants are exported by `fs. constants` and `fsPromises. constants`.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5979",
      "type": "sentence_window",
      "content": "constants` and `fsPromises. constants`. Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5980",
      "type": "sentence_window",
      "content": "constants`. Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available. For portable applications it is recommended to check for their presence before use.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5981",
      "type": "sentence_window",
      "content": "Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available. For portable applications it is recommended to check for their presence before use. To use more than one constant, use the bitwise OR `|` operator.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_5982",
      "type": "sentence_window",
      "content": "For portable applications it is recommended to check for their presence before use. To use more than one constant, use the bitwise OR `|` operator.",
      "position": 4,
      "sentenceCount": 2
    },
    {
      "id": "sc_5983",
      "type": "sentence_context",
      "content": "[FS constants] The following constants are exported by `fs.",
      "position": 0
    },
    {
      "id": "sc_5984",
      "type": "sentence_context",
      "content": "[FS constants] [Previous: The following constants are exported by `fs....] constants` and `fsPromises.",
      "position": 1
    },
    {
      "id": "sc_5985",
      "type": "sentence_context",
      "content": "[FS constants] [Previous: constants` and `fsPromises....] constants`.",
      "position": 2
    },
    {
      "id": "sc_5986",
      "type": "sentence_context",
      "content": "[FS constants] Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available.",
      "position": 3
    },
    {
      "id": "sc_5987",
      "type": "sentence_context",
      "content": "[FS constants] [Previous: Not every constant will be available on every oper...] For portable applications it is recommended to check for their presence before use.",
      "position": 4
    },
    {
      "id": "sc_5988",
      "type": "sentence_context",
      "content": "[FS constants] [Previous: For portable applications it is recommended to che...] To use more than one constant, use the bitwise OR `|` operator.",
      "position": 5
    },
    {
      "id": "s_5989",
      "type": "sentence",
      "content": "The following constants are exported by `fs.",
      "position": 0
    },
    {
      "id": "s_5990",
      "type": "sentence",
      "content": "constants` and `fsPromises.",
      "position": 1
    },
    {
      "id": "s_5991",
      "type": "sentence",
      "content": "constants`.",
      "position": 2
    },
    {
      "id": "s_5992",
      "type": "sentence",
      "content": "Not every constant will be available on every operating system; this is especially important for Windows, where many of the POSIX specific definitions are not available.",
      "position": 3
    },
    {
      "id": "s_5993",
      "type": "sentence",
      "content": "For portable applications it is recommended to check for their presence before use.",
      "position": 4
    },
    {
      "id": "s_5994",
      "type": "sentence",
      "content": "To use more than one constant, use the bitwise OR `|` operator.",
      "position": 5
    },
    {
      "id": "w_5995",
      "type": "window",
      "content": "The following constants are meant for use as the `mode` parameter passed to\n[`fsPromises.access()`][], [`fs.access()`][], and [`fs.accessSync()`][]. The definitions are also available on Windows.",
      "position": 0,
      "windowSize": 23
    },
    {
      "id": "sw_5996",
      "type": "sentence_window",
      "content": "The following constants are meant for use as the `mode` parameter passed to [`fsPromises. access()`][], [`fs. access()`][], and [`fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_5997",
      "type": "sentence_window",
      "content": "access()`][], [`fs. access()`][], and [`fs. accessSync()`][].",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_5998",
      "type": "sentence_window",
      "content": "access()`][], and [`fs. accessSync()`][]. The definitions are also available on Windows.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_5999",
      "type": "sentence_window",
      "content": "accessSync()`][]. The definitions are also available on Windows.",
      "position": 3,
      "sentenceCount": 2
    },
    {
      "id": "sc_6000",
      "type": "sentence_context",
      "content": "[File access constants] The following constants are meant for use as the `mode` parameter passed to [`fsPromises.",
      "position": 0
    },
    {
      "id": "sc_6001",
      "type": "sentence_context",
      "content": "[File access constants] [Previous: The following constants are meant for use as the `...] access()`][], [`fs.",
      "position": 1
    },
    {
      "id": "sc_6002",
      "type": "sentence_context",
      "content": "[File access constants] access()`][], and [`fs.",
      "position": 2
    },
    {
      "id": "sc_6003",
      "type": "sentence_context",
      "content": "[File access constants] [Previous: access()`][], and [`fs....] accessSync()`][].",
      "position": 3
    },
    {
      "id": "sc_6004",
      "type": "sentence_context",
      "content": "[File access constants] The definitions are also available on Windows.",
      "position": 4
    },
    {
      "id": "s_6005",
      "type": "sentence",
      "content": "The following constants are meant for use as the `mode` parameter passed to [`fsPromises.",
      "position": 0
    },
    {
      "id": "s_6006",
      "type": "sentence",
      "content": "access()`][], [`fs.",
      "position": 1
    },
    {
      "id": "s_6007",
      "type": "sentence",
      "content": "access()`][], and [`fs.",
      "position": 2
    },
    {
      "id": "s_6008",
      "type": "sentence",
      "content": "accessSync()`][].",
      "position": 3
    },
    {
      "id": "s_6009",
      "type": "sentence",
      "content": "The definitions are also available on Windows.",
      "position": 4
    },
    {
      "id": "sw_6010",
      "type": "sentence_window",
      "content": "The following constants are meant for use with [`fs. copyFile()`][]. The definitions are also available on Windows.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6011",
      "type": "sentence_window",
      "content": "copyFile()`][]. The definitions are also available on Windows.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_6012",
      "type": "sentence_context",
      "content": "[File copy constants] The following constants are meant for use with [`fs.",
      "position": 0
    },
    {
      "id": "sc_6013",
      "type": "sentence_context",
      "content": "[File copy constants] [Previous: The following constants are meant for use with [`f...] copyFile()`][].",
      "position": 1
    },
    {
      "id": "sc_6014",
      "type": "sentence_context",
      "content": "[File copy constants] The definitions are also available on Windows.",
      "position": 2
    },
    {
      "id": "s_6015",
      "type": "sentence",
      "content": "The following constants are meant for use with [`fs.",
      "position": 0
    },
    {
      "id": "s_6016",
      "type": "sentence",
      "content": "copyFile()`][].",
      "position": 1
    },
    {
      "id": "s_6017",
      "type": "sentence",
      "content": "The definitions are also available on Windows.",
      "position": 2
    },
    {
      "id": "w_6018",
      "type": "window",
      "content": "The following constants are meant for use with `fs.open()`. On Windows, only `O_APPEND`, `O_CREAT`, `O_EXCL`, `O_RDONLY`, `O_RDWR`,\n`O_TRUNC`, `O_WRONLY`, and `UV_FS_O_FILEMAP` are available.",
      "position": 0,
      "windowSize": 22
    },
    {
      "id": "sw_6019",
      "type": "sentence_window",
      "content": "The following constants are meant for use with `fs. On Windows, only `O_APPEND`, `O_CREAT`, `O_EXCL`, `O_RDONLY`, `O_RDWR`, `O_TRUNC`, `O_WRONLY`, and `UV_FS_O_FILEMAP` are available.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_6020",
      "type": "sentence_context",
      "content": "[File open constants] The following constants are meant for use with `fs.",
      "position": 0
    },
    {
      "id": "sc_6021",
      "type": "sentence_context",
      "content": "[File open constants] [Previous: The following constants are meant for use with `fs...] On Windows, only `O_APPEND`, `O_CREAT`, `O_EXCL`, `O_RDONLY`, `O_RDWR`, `O_TRUNC`, `O_WRONLY`, and `UV_FS_O_FILEMAP` are available.",
      "position": 1
    },
    {
      "id": "s_6022",
      "type": "sentence",
      "content": "The following constants are meant for use with `fs.",
      "position": 0
    },
    {
      "id": "s_6023",
      "type": "sentence",
      "content": "On Windows, only `O_APPEND`, `O_CREAT`, `O_EXCL`, `O_RDONLY`, `O_RDWR`, `O_TRUNC`, `O_WRONLY`, and `UV_FS_O_FILEMAP` are available.",
      "position": 1
    },
    {
      "id": "w_6024",
      "type": "window",
      "content": "The following constants are meant for use with the {fs.Stats} object's\n`mode` property for determining a file's type. On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`,\nare available.",
      "position": 0,
      "windowSize": 27
    },
    {
      "id": "sw_6025",
      "type": "sentence_window",
      "content": "The following constants are meant for use with the {fs. Stats} object's `mode` property for determining a file's type. On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`, are available.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6026",
      "type": "sentence_window",
      "content": "Stats} object's `mode` property for determining a file's type. On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`, are available.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_6027",
      "type": "sentence_context",
      "content": "[File type constants] The following constants are meant for use with the {fs.",
      "position": 0
    },
    {
      "id": "sc_6028",
      "type": "sentence_context",
      "content": "[File type constants] [Previous: The following constants are meant for use with the...] Stats} object's `mode` property for determining a file's type.",
      "position": 1
    },
    {
      "id": "sc_6029",
      "type": "sentence_context",
      "content": "[File type constants] [Previous: Stats} object's `mode` property for determining a ...] On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`, are available.",
      "position": 2
    },
    {
      "id": "s_6030",
      "type": "sentence",
      "content": "The following constants are meant for use with the {fs.",
      "position": 0
    },
    {
      "id": "s_6031",
      "type": "sentence",
      "content": "Stats} object's `mode` property for determining a file's type.",
      "position": 1
    },
    {
      "id": "s_6032",
      "type": "sentence",
      "content": "On Windows, only `S_IFCHR`, `S_IFDIR`, `S_IFLNK`, `S_IFMT`, and `S_IFREG`, are available.",
      "position": 2
    },
    {
      "id": "w_6033",
      "type": "window",
      "content": "The following constants are meant for use with the {fs.Stats} object's\n`mode` property for determining the access permissions for a file. On Windows, only `S_IRUSR` and `S_IWUSR` are available.",
      "position": 0,
      "windowSize": 28
    },
    {
      "id": "sw_6034",
      "type": "sentence_window",
      "content": "The following constants are meant for use with the {fs. Stats} object's `mode` property for determining the access permissions for a file. On Windows, only `S_IRUSR` and `S_IWUSR` are available.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6035",
      "type": "sentence_window",
      "content": "Stats} object's `mode` property for determining the access permissions for a file. On Windows, only `S_IRUSR` and `S_IWUSR` are available.",
      "position": 1,
      "sentenceCount": 2
    },
    {
      "id": "sc_6036",
      "type": "sentence_context",
      "content": "[File mode constants] The following constants are meant for use with the {fs.",
      "position": 0
    },
    {
      "id": "sc_6037",
      "type": "sentence_context",
      "content": "[File mode constants] [Previous: The following constants are meant for use with the...] Stats} object's `mode` property for determining the access permissions for a file.",
      "position": 1
    },
    {
      "id": "sc_6038",
      "type": "sentence_context",
      "content": "[File mode constants] [Previous: Stats} object's `mode` property for determining th...] On Windows, only `S_IRUSR` and `S_IWUSR` are available.",
      "position": 2
    },
    {
      "id": "s_6039",
      "type": "sentence",
      "content": "The following constants are meant for use with the {fs.",
      "position": 0
    },
    {
      "id": "s_6040",
      "type": "sentence",
      "content": "Stats} object's `mode` property for determining the access permissions for a file.",
      "position": 1
    },
    {
      "id": "s_6041",
      "type": "sentence",
      "content": "On Windows, only `S_IRUSR` and `S_IWUSR` are available.",
      "position": 2
    },
    {
      "id": "w_6042",
      "type": "window",
      "content": "Because they are executed asynchronously by the underlying thread pool,\nthere is no guaranteed ordering when using either the callback or\npromise-based methods. For example, the following is prone to error because the `fs.stat()`\noperation might complete before the `fs.rename()` operation: It is important to correctly order the operations by awaiting the results\nof one before invoking the other: Or, when using the callback APIs, move the `fs.stat()` call into the callback\nof the `fs.rename()` operation:",
      "position": 0,
      "windowSize": 71
    },
    {
      "id": "sw_6043",
      "type": "sentence_window",
      "content": "Because they are executed asynchronously by the underlying thread pool, there is no guaranteed ordering when using either the callback or promise-based methods. For example, the following is prone to error because the `fs. stat()` operation might complete before the `fs.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6044",
      "type": "sentence_window",
      "content": "For example, the following is prone to error because the `fs. stat()` operation might complete before the `fs. rename()` operation:",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_6045",
      "type": "sentence_window",
      "content": "stat()` operation might complete before the `fs. rename()` operation: It is important to correctly order the operations by awaiting the results of one before invoking the other:",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_6046",
      "type": "sentence_window",
      "content": "rename()` operation: It is important to correctly order the operations by awaiting the results of one before invoking the other: Or, when using the callback APIs, move the `fs.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_6047",
      "type": "sentence_window",
      "content": "It is important to correctly order the operations by awaiting the results of one before invoking the other: Or, when using the callback APIs, move the `fs. stat()` call into the callback of the `fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_6048",
      "type": "sentence_window",
      "content": "Or, when using the callback APIs, move the `fs. stat()` call into the callback of the `fs. rename()` operation:",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_6049",
      "type": "sentence_window",
      "content": "stat()` call into the callback of the `fs. rename()` operation:",
      "position": 6,
      "sentenceCount": 2
    },
    {
      "id": "sc_6050",
      "type": "sentence_context",
      "content": "[Ordering of callback and promise-based operations] Because they are executed asynchronously by the underlying thread pool, there is no guaranteed ordering when using either the callback or promise-based methods.",
      "position": 0
    },
    {
      "id": "sc_6051",
      "type": "sentence_context",
      "content": "[Ordering of callback and promise-based operations] [Previous: Because they are executed asynchronously by the un...] For example, the following is prone to error because the `fs.",
      "position": 1
    },
    {
      "id": "sc_6052",
      "type": "sentence_context",
      "content": "[Ordering of callback and promise-based operations] [Previous: For example, the following is prone to error becau...] stat()` operation might complete before the `fs.",
      "position": 2
    },
    {
      "id": "sc_6053",
      "type": "sentence_context",
      "content": "[Ordering of callback and promise-based operations] [Previous: stat()` operation might complete before the `fs....] rename()` operation:",
      "position": 3
    },
    {
      "id": "sc_6054",
      "type": "sentence_context",
      "content": "[Ordering of callback and promise-based operations] It is important to correctly order the operations by awaiting the results of one before invoking the other:",
      "position": 4
    },
    {
      "id": "sc_6055",
      "type": "sentence_context",
      "content": "[Ordering of callback and promise-based operations] [Previous: It is important to correctly order the operations ...] Or, when using the callback APIs, move the `fs.",
      "position": 5
    },
    {
      "id": "sc_6056",
      "type": "sentence_context",
      "content": "[Ordering of callback and promise-based operations] [Previous: Or, when using the callback APIs, move the `fs....] stat()` call into the callback of the `fs.",
      "position": 6
    },
    {
      "id": "sc_6057",
      "type": "sentence_context",
      "content": "[Ordering of callback and promise-based operations] [Previous: stat()` call into the callback of the `fs....] rename()` operation:",
      "position": 7
    },
    {
      "id": "s_6058",
      "type": "sentence",
      "content": "Because they are executed asynchronously by the underlying thread pool, there is no guaranteed ordering when using either the callback or promise-based methods.",
      "position": 0
    },
    {
      "id": "s_6059",
      "type": "sentence",
      "content": "For example, the following is prone to error because the `fs.",
      "position": 1
    },
    {
      "id": "s_6060",
      "type": "sentence",
      "content": "stat()` operation might complete before the `fs.",
      "position": 2
    },
    {
      "id": "s_6061",
      "type": "sentence",
      "content": "rename()` operation:",
      "position": 3
    },
    {
      "id": "s_6062",
      "type": "sentence",
      "content": "It is important to correctly order the operations by awaiting the results of one before invoking the other:",
      "position": 4
    },
    {
      "id": "s_6063",
      "type": "sentence",
      "content": "Or, when using the callback APIs, move the `fs.",
      "position": 5
    },
    {
      "id": "s_6064",
      "type": "sentence",
      "content": "stat()` call into the callback of the `fs.",
      "position": 6
    },
    {
      "id": "s_6065",
      "type": "sentence",
      "content": "rename()` operation:",
      "position": 7
    },
    {
      "id": "w_6066",
      "type": "window",
      "content": "Most `fs` operations accept file paths that may be specified in the form of\na string, a {Buffer}, or a {URL} object using the `file:` protocol.",
      "position": 0,
      "windowSize": 25
    },
    {
      "id": "sc_6067",
      "type": "sentence_context",
      "content": "[File paths] Most `fs` operations accept file paths that may be specified in the form of a string, a {Buffer}, or a {URL} object using the `file:` protocol.",
      "position": 0
    },
    {
      "id": "s_6068",
      "type": "sentence",
      "content": "Most `fs` operations accept file paths that may be specified in the form of a string, a {Buffer}, or a {URL} object using the `file:` protocol.",
      "position": 0
    },
    {
      "id": "w_6069",
      "type": "window",
      "content": "String paths are interpreted as UTF-8 character sequences identifying\nthe absolute or relative filename. Relative paths will be resolved relative\nto the current working directory as determined by calling `process.cwd()`. Example using an absolute path on POSIX: Example using a relative path on POSIX (relative to `process.cwd()`):",
      "position": 0,
      "windowSize": 45
    },
    {
      "id": "sw_6070",
      "type": "sentence_window",
      "content": "String paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename. Relative paths will be resolved relative to the current working directory as determined by calling `process. Example using an absolute path on POSIX:",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6071",
      "type": "sentence_window",
      "content": "Relative paths will be resolved relative to the current working directory as determined by calling `process. Example using an absolute path on POSIX: Example using a relative path on POSIX (relative to `process.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_6072",
      "type": "sentence_window",
      "content": "Example using an absolute path on POSIX: Example using a relative path on POSIX (relative to `process.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_6073",
      "type": "sentence_context",
      "content": "[String paths] String paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename.",
      "position": 0
    },
    {
      "id": "sc_6074",
      "type": "sentence_context",
      "content": "[String paths] [Previous: String paths are interpreted as UTF-8 character se...] Relative paths will be resolved relative to the current working directory as determined by calling `process.",
      "position": 1
    },
    {
      "id": "sc_6075",
      "type": "sentence_context",
      "content": "[String paths] [Previous: Relative paths will be resolved relative to the cu...] Example using an absolute path on POSIX:",
      "position": 2
    },
    {
      "id": "sc_6076",
      "type": "sentence_context",
      "content": "[String paths] [Previous: Example using an absolute path on POSIX:...] Example using a relative path on POSIX (relative to `process.",
      "position": 3
    },
    {
      "id": "s_6077",
      "type": "sentence",
      "content": "String paths are interpreted as UTF-8 character sequences identifying the absolute or relative filename.",
      "position": 0
    },
    {
      "id": "s_6078",
      "type": "sentence",
      "content": "Relative paths will be resolved relative to the current working directory as determined by calling `process.",
      "position": 1
    },
    {
      "id": "s_6079",
      "type": "sentence",
      "content": "Example using an absolute path on POSIX:",
      "position": 2
    },
    {
      "id": "s_6080",
      "type": "sentence",
      "content": "Example using a relative path on POSIX (relative to `process.",
      "position": 3
    },
    {
      "id": "w_6081",
      "type": "window",
      "content": "For most `node:fs` module functions, the `path` or `filename` argument may be\npassed as a {URL} object using the `file:` protocol. `file:` URLs are always absolute paths.",
      "position": 0,
      "windowSize": 26
    },
    {
      "id": "sw_6082",
      "type": "sentence_window",
      "content": "For most `node:fs` module functions, the `path` or `filename` argument may be passed as a {URL} object using the `file:` protocol. `file:` URLs are always absolute paths.",
      "position": 0,
      "sentenceCount": 2
    },
    {
      "id": "sc_6083",
      "type": "sentence_context",
      "content": "[File URL paths] For most `node:fs` module functions, the `path` or `filename` argument may be passed as a {URL} object using the `file:` protocol.",
      "position": 0
    },
    {
      "id": "sc_6084",
      "type": "sentence_context",
      "content": "[File URL paths] [Previous: For most `node:fs` module functions, the `path` or...] `file:` URLs are always absolute paths.",
      "position": 1
    },
    {
      "id": "s_6085",
      "type": "sentence",
      "content": "For most `node:fs` module functions, the `path` or `filename` argument may be passed as a {URL} object using the `file:` protocol.",
      "position": 0
    },
    {
      "id": "s_6086",
      "type": "sentence",
      "content": "`file:` URLs are always absolute paths.",
      "position": 1
    },
    {
      "id": "w_6087",
      "type": "window",
      "content": "On Windows, `file:` {URL}s with a host name convert to UNC paths, while `file:`\n{URL}s with drive letters convert to local absolute paths. `file:` {URL}s\nwith no host name and no drive letter will result in an error: `file:` {URL}s with drive letters must use `:` as a separator just after\nthe drive letter. Using another separator will result in an error. On all other platforms, `file:` {URL}s with a host name are unsupported and\nwill result in an error: A `file:` {URL} having encoded slash characters will result in an error on all\nplatforms: On Windows, `file:` {URL}s having encoded backslash will result in an error:",
      "position": 0,
      "windowSize": 102
    },
    {
      "id": "sw_6088",
      "type": "sentence_window",
      "content": "On Windows, `file:` {URL}s with a host name convert to UNC paths, while `file:` {URL}s with drive letters convert to local absolute paths. `file:` {URL}s with no host name and no drive letter will result in an error: `file:` {URL}s with drive letters must use `:` as a separator just after the drive letter.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6089",
      "type": "sentence_window",
      "content": "`file:` {URL}s with no host name and no drive letter will result in an error: `file:` {URL}s with drive letters must use `:` as a separator just after the drive letter. Using another separator will result in an error.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_6090",
      "type": "sentence_window",
      "content": "`file:` {URL}s with drive letters must use `:` as a separator just after the drive letter. Using another separator will result in an error. On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error:",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_6091",
      "type": "sentence_window",
      "content": "Using another separator will result in an error. On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error: A `file:` {URL} having encoded slash characters will result in an error on all platforms:",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_6092",
      "type": "sentence_window",
      "content": "On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error: A `file:` {URL} having encoded slash characters will result in an error on all platforms: On Windows, `file:` {URL}s having encoded backslash will result in an error:",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_6093",
      "type": "sentence_window",
      "content": "A `file:` {URL} having encoded slash characters will result in an error on all platforms: On Windows, `file:` {URL}s having encoded backslash will result in an error:",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_6094",
      "type": "sentence_context",
      "content": "[Platform-specific considerations] On Windows, `file:` {URL}s with a host name convert to UNC paths, while `file:` {URL}s with drive letters convert to local absolute paths.",
      "position": 0
    },
    {
      "id": "sc_6095",
      "type": "sentence_context",
      "content": "[Platform-specific considerations] [Previous: On Windows, `file:` {URL}s with a host name conver...] `file:` {URL}s with no host name and no drive letter will result in an error:",
      "position": 1
    },
    {
      "id": "sc_6096",
      "type": "sentence_context",
      "content": "[Platform-specific considerations] [Previous: `file:` {URL}s with no host name and no drive lett...] `file:` {URL}s with drive letters must use `:` as a separator just after the drive letter.",
      "position": 2
    },
    {
      "id": "sc_6097",
      "type": "sentence_context",
      "content": "[Platform-specific considerations] [Previous: `file:` {URL}s with drive letters must use `:` as ...] Using another separator will result in an error.",
      "position": 3
    },
    {
      "id": "sc_6098",
      "type": "sentence_context",
      "content": "[Platform-specific considerations] [Previous: Using another separator will result in an error....] On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error:",
      "position": 4
    },
    {
      "id": "sc_6099",
      "type": "sentence_context",
      "content": "[Platform-specific considerations] [Previous: On all other platforms, `file:` {URL}s with a host...] A `file:` {URL} having encoded slash characters will result in an error on all platforms:",
      "position": 5
    },
    {
      "id": "sc_6100",
      "type": "sentence_context",
      "content": "[Platform-specific considerations] [Previous: A `file:` {URL} having encoded slash characters wi...] On Windows, `file:` {URL}s having encoded backslash will result in an error:",
      "position": 6
    },
    {
      "id": "s_6101",
      "type": "sentence",
      "content": "On Windows, `file:` {URL}s with a host name convert to UNC paths, while `file:` {URL}s with drive letters convert to local absolute paths.",
      "position": 0
    },
    {
      "id": "s_6102",
      "type": "sentence",
      "content": "`file:` {URL}s with no host name and no drive letter will result in an error:",
      "position": 1
    },
    {
      "id": "s_6103",
      "type": "sentence",
      "content": "`file:` {URL}s with drive letters must use `:` as a separator just after the drive letter.",
      "position": 2
    },
    {
      "id": "s_6104",
      "type": "sentence",
      "content": "Using another separator will result in an error.",
      "position": 3
    },
    {
      "id": "s_6105",
      "type": "sentence",
      "content": "On all other platforms, `file:` {URL}s with a host name are unsupported and will result in an error:",
      "position": 4
    },
    {
      "id": "s_6106",
      "type": "sentence",
      "content": "A `file:` {URL} having encoded slash characters will result in an error on all platforms:",
      "position": 5
    },
    {
      "id": "s_6107",
      "type": "sentence",
      "content": "On Windows, `file:` {URL}s having encoded backslash will result in an error:",
      "position": 6
    },
    {
      "id": "w_6108",
      "type": "window",
      "content": "Paths specified using a {Buffer} are useful primarily on certain POSIX\noperating systems that treat file paths as opaque byte sequences. On such\nsystems, it is possible for a single file path to contain sub-sequences that\nuse multiple character encodings. As with string paths, {Buffer} paths may\nbe relative or absolute: Example using an absolute path on POSIX:",
      "position": 0,
      "windowSize": 54
    },
    {
      "id": "sw_6109",
      "type": "sentence_window",
      "content": "Paths specified using a {Buffer} are useful primarily on certain POSIX operating systems that treat file paths as opaque byte sequences. On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings. As with string paths, {Buffer} paths may be relative or absolute:",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6110",
      "type": "sentence_window",
      "content": "On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings. As with string paths, {Buffer} paths may be relative or absolute: Example using an absolute path on POSIX:",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_6111",
      "type": "sentence_window",
      "content": "As with string paths, {Buffer} paths may be relative or absolute: Example using an absolute path on POSIX:",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_6112",
      "type": "sentence_context",
      "content": "[Buffer paths] Paths specified using a {Buffer} are useful primarily on certain POSIX operating systems that treat file paths as opaque byte sequences.",
      "position": 0
    },
    {
      "id": "sc_6113",
      "type": "sentence_context",
      "content": "[Buffer paths] [Previous: Paths specified using a {Buffer} are useful primar...] On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings.",
      "position": 1
    },
    {
      "id": "sc_6114",
      "type": "sentence_context",
      "content": "[Buffer paths] [Previous: On such systems, it is possible for a single file ...] As with string paths, {Buffer} paths may be relative or absolute:",
      "position": 2
    },
    {
      "id": "sc_6115",
      "type": "sentence_context",
      "content": "[Buffer paths] [Previous: As with string paths, {Buffer} paths may be relati...] Example using an absolute path on POSIX:",
      "position": 3
    },
    {
      "id": "s_6116",
      "type": "sentence",
      "content": "Paths specified using a {Buffer} are useful primarily on certain POSIX operating systems that treat file paths as opaque byte sequences.",
      "position": 0
    },
    {
      "id": "s_6117",
      "type": "sentence",
      "content": "On such systems, it is possible for a single file path to contain sub-sequences that use multiple character encodings.",
      "position": 1
    },
    {
      "id": "s_6118",
      "type": "sentence",
      "content": "As with string paths, {Buffer} paths may be relative or absolute:",
      "position": 2
    },
    {
      "id": "s_6119",
      "type": "sentence",
      "content": "Example using an absolute path on POSIX:",
      "position": 3
    },
    {
      "id": "w_6120",
      "type": "window",
      "content": "On Windows, Node.js follows the concept of per-drive working directory. This\nbehavior can be observed when using a drive path without a backslash. For\nexample `fs.readdirSync('C:\\\\')` can potentially return a different result than\n`fs.readdirSync('C:')`. For more information, see\n[this MSDN page][MSDN-Rel-Path].",
      "position": 0,
      "windowSize": 37
    },
    {
      "id": "sw_6121",
      "type": "sentence_window",
      "content": "On Windows, Node. js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6122",
      "type": "sentence_window",
      "content": "js follows the concept of per-drive working directory. This behavior can be observed when using a drive path without a backslash. For example `fs.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_6123",
      "type": "sentence_window",
      "content": "This behavior can be observed when using a drive path without a backslash. For example `fs. readdirSync('C:\\\\')` can potentially return a different result than `fs.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_6124",
      "type": "sentence_window",
      "content": "For example `fs. readdirSync('C:\\\\')` can potentially return a different result than `fs. readdirSync('C:')`.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_6125",
      "type": "sentence_window",
      "content": "readdirSync('C:\\\\')` can potentially return a different result than `fs. readdirSync('C:')`. For more information, see [this MSDN page][MSDN-Rel-Path].",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_6126",
      "type": "sentence_window",
      "content": "readdirSync('C:')`. For more information, see [this MSDN page][MSDN-Rel-Path].",
      "position": 5,
      "sentenceCount": 2
    },
    {
      "id": "sc_6127",
      "type": "sentence_context",
      "content": "[Per-drive working directories on Windows] On Windows, Node.",
      "position": 0
    },
    {
      "id": "sc_6128",
      "type": "sentence_context",
      "content": "[Per-drive working directories on Windows] js follows the concept of per-drive working directory.",
      "position": 1
    },
    {
      "id": "sc_6129",
      "type": "sentence_context",
      "content": "[Per-drive working directories on Windows] [Previous: js follows the concept of per-drive working direct...] This behavior can be observed when using a drive path without a backslash.",
      "position": 2
    },
    {
      "id": "sc_6130",
      "type": "sentence_context",
      "content": "[Per-drive working directories on Windows] [Previous: This behavior can be observed when using a drive p...] For example `fs.",
      "position": 3
    },
    {
      "id": "sc_6131",
      "type": "sentence_context",
      "content": "[Per-drive working directories on Windows] readdirSync('C:\\\\')` can potentially return a different result than `fs.",
      "position": 4
    },
    {
      "id": "sc_6132",
      "type": "sentence_context",
      "content": "[Per-drive working directories on Windows] [Previous: readdirSync('C:\\\\')` can potentially return a diff...] readdirSync('C:')`.",
      "position": 5
    },
    {
      "id": "sc_6133",
      "type": "sentence_context",
      "content": "[Per-drive working directories on Windows] For more information, see [this MSDN page][MSDN-Rel-Path].",
      "position": 6
    },
    {
      "id": "s_6134",
      "type": "sentence",
      "content": "On Windows, Node.",
      "position": 0
    },
    {
      "id": "s_6135",
      "type": "sentence",
      "content": "js follows the concept of per-drive working directory.",
      "position": 1
    },
    {
      "id": "s_6136",
      "type": "sentence",
      "content": "This behavior can be observed when using a drive path without a backslash.",
      "position": 2
    },
    {
      "id": "s_6137",
      "type": "sentence",
      "content": "For example `fs.",
      "position": 3
    },
    {
      "id": "s_6138",
      "type": "sentence",
      "content": "readdirSync('C:\\\\')` can potentially return a different result than `fs.",
      "position": 4
    },
    {
      "id": "s_6139",
      "type": "sentence",
      "content": "readdirSync('C:')`.",
      "position": 5
    },
    {
      "id": "s_6140",
      "type": "sentence",
      "content": "For more information, see [this MSDN page][MSDN-Rel-Path].",
      "position": 6
    },
    {
      "id": "w_6141",
      "type": "window",
      "content": "On POSIX systems, for every process, the kernel maintains a table of currently\nopen files and resources. Each open file is assigned a simple numeric\nidentifier called a _file descriptor_. At the system-level, all file system\noperations use these file descriptors to identify and track each specific\nfile. Windows systems use a different but conceptually similar mechanism for\ntracking resources. To simplify things for users, Node.js abstracts away the\ndifferences between operating systems and assigns all open files a numeric file\ndescriptor. The callback-based `fs.open()`, and synchronous `fs.openSync()` methods open a\nfile and allocate a new file descriptor. Once allocated, the file descriptor may\nbe used to read data from, write data to, or request information about the file. Operating systems limit the number of file descriptors that may be open\nat any given time so it is critical to close the descriptor when operations\nare completed. Failure to do so will result in a memory leak that will\neventually cause an application to crash. The promise-based APIs use a {FileHandle} object in place of the numeric\nfile descriptor. These objects are better managed by the system to ensure\nthat resources are not leaked. However, it is still required that they are\nclosed when operations are completed:",
      "position": 0,
      "windowSize": 192
    },
    {
      "id": "sw_6142",
      "type": "sentence_window",
      "content": "On POSIX systems, for every process, the kernel maintains a table of currently open files and resources. Each open file is assigned a simple numeric identifier called a _file descriptor_. At the system-level, all file system operations use these file descriptors to identify and track each specific file.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6143",
      "type": "sentence_window",
      "content": "Each open file is assigned a simple numeric identifier called a _file descriptor_. At the system-level, all file system operations use these file descriptors to identify and track each specific file. Windows systems use a different but conceptually similar mechanism for tracking resources.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_6144",
      "type": "sentence_window",
      "content": "At the system-level, all file system operations use these file descriptors to identify and track each specific file. Windows systems use a different but conceptually similar mechanism for tracking resources. To simplify things for users, Node.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_6145",
      "type": "sentence_window",
      "content": "Windows systems use a different but conceptually similar mechanism for tracking resources. To simplify things for users, Node. js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_6146",
      "type": "sentence_window",
      "content": "To simplify things for users, Node. js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor. The callback-based `fs.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_6147",
      "type": "sentence_window",
      "content": "js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor. The callback-based `fs. open()`, and synchronous `fs.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_6148",
      "type": "sentence_window",
      "content": "The callback-based `fs. open()`, and synchronous `fs. openSync()` methods open a file and allocate a new file descriptor.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_6149",
      "type": "sentence_window",
      "content": "open()`, and synchronous `fs. openSync()` methods open a file and allocate a new file descriptor. Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_6150",
      "type": "sentence_window",
      "content": "openSync()` methods open a file and allocate a new file descriptor. Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file. Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_6151",
      "type": "sentence_window",
      "content": "Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file. Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed. Failure to do so will result in a memory leak that will",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_6152",
      "type": "sentence_window",
      "content": "Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed. Failure to do so will result in a memory leak that will eventually cause an application to crash. The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_6153",
      "type": "sentence_window",
      "content": "Failure to do so will result in a memory leak that will eventually cause an application to crash. The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor. These objects are better managed by the system to ensure that resources are not leaked.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_6154",
      "type": "sentence_window",
      "content": "The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor. These objects are better managed by the system to ensure that resources are not leaked. However, it is still required that they are closed when operations are completed:",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_6155",
      "type": "sentence_window",
      "content": "These objects are better managed by the system to ensure that resources are not leaked. However, it is still required that they are closed when operations are completed:",
      "position": 13,
      "sentenceCount": 2
    },
    {
      "id": "sc_6156",
      "type": "sentence_context",
      "content": "[File descriptors] On POSIX systems, for every process, the kernel maintains a table of currently open files and resources.",
      "position": 0
    },
    {
      "id": "sc_6157",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: On POSIX systems, for every process, the kernel ma...] Each open file is assigned a simple numeric identifier called a _file descriptor_.",
      "position": 1
    },
    {
      "id": "sc_6158",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: Each open file is assigned a simple numeric identi...] At the system-level, all file system operations use these file descriptors to identify and track each specific file.",
      "position": 2
    },
    {
      "id": "sc_6159",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: At the system-level, all file system operations us...] Windows systems use a different but conceptually similar mechanism for tracking resources.",
      "position": 3
    },
    {
      "id": "sc_6160",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: Windows systems use a different but conceptually s...] To simplify things for users, Node.",
      "position": 4
    },
    {
      "id": "sc_6161",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: To simplify things for users, Node....] js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor.",
      "position": 5
    },
    {
      "id": "sc_6162",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: js abstracts away the differences between operatin...] The callback-based `fs.",
      "position": 6
    },
    {
      "id": "sc_6163",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: The callback-based `fs....] open()`, and synchronous `fs.",
      "position": 7
    },
    {
      "id": "sc_6164",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: open()`, and synchronous `fs....] openSync()` methods open a file and allocate a new file descriptor.",
      "position": 8
    },
    {
      "id": "sc_6165",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: openSync()` methods open a file and allocate a new...] Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file.",
      "position": 9
    },
    {
      "id": "sc_6166",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: Once allocated, the file descriptor may be used to...] Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed.",
      "position": 10
    },
    {
      "id": "sc_6167",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: Operating systems limit the number of file descrip...] Failure to do so will result in a memory leak that will eventually cause an application to crash.",
      "position": 11
    },
    {
      "id": "sc_6168",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: Failure to do so will result in a memory leak that...] The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor.",
      "position": 12
    },
    {
      "id": "sc_6169",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: The promise-based APIs use a {FileHandle} object i...] These objects are better managed by the system to ensure that resources are not leaked.",
      "position": 13
    },
    {
      "id": "sc_6170",
      "type": "sentence_context",
      "content": "[File descriptors] [Previous: These objects are better managed by the system to ...] However, it is still required that they are closed when operations are completed:",
      "position": 14
    },
    {
      "id": "s_6171",
      "type": "sentence",
      "content": "On POSIX systems, for every process, the kernel maintains a table of currently open files and resources.",
      "position": 0
    },
    {
      "id": "s_6172",
      "type": "sentence",
      "content": "Each open file is assigned a simple numeric identifier called a _file descriptor_.",
      "position": 1
    },
    {
      "id": "s_6173",
      "type": "sentence",
      "content": "At the system-level, all file system operations use these file descriptors to identify and track each specific file.",
      "position": 2
    },
    {
      "id": "s_6174",
      "type": "sentence",
      "content": "Windows systems use a different but conceptually similar mechanism for tracking resources.",
      "position": 3
    },
    {
      "id": "s_6175",
      "type": "sentence",
      "content": "To simplify things for users, Node.",
      "position": 4
    },
    {
      "id": "s_6176",
      "type": "sentence",
      "content": "js abstracts away the differences between operating systems and assigns all open files a numeric file descriptor.",
      "position": 5
    },
    {
      "id": "s_6177",
      "type": "sentence",
      "content": "The callback-based `fs.",
      "position": 6
    },
    {
      "id": "s_6178",
      "type": "sentence",
      "content": "open()`, and synchronous `fs.",
      "position": 7
    },
    {
      "id": "s_6179",
      "type": "sentence",
      "content": "openSync()` methods open a file and allocate a new file descriptor.",
      "position": 8
    },
    {
      "id": "s_6180",
      "type": "sentence",
      "content": "Once allocated, the file descriptor may be used to read data from, write data to, or request information about the file.",
      "position": 9
    },
    {
      "id": "s_6181",
      "type": "sentence",
      "content": "Operating systems limit the number of file descriptors that may be open at any given time so it is critical to close the descriptor when operations are completed.",
      "position": 10
    },
    {
      "id": "s_6182",
      "type": "sentence",
      "content": "Failure to do so will result in a memory leak that will eventually cause an application to crash.",
      "position": 11
    },
    {
      "id": "s_6183",
      "type": "sentence",
      "content": "The promise-based APIs use a {FileHandle} object in place of the numeric file descriptor.",
      "position": 12
    },
    {
      "id": "s_6184",
      "type": "sentence",
      "content": "These objects are better managed by the system to ensure that resources are not leaked.",
      "position": 13
    },
    {
      "id": "s_6185",
      "type": "sentence",
      "content": "However, it is still required that they are closed when operations are completed:",
      "position": 14
    },
    {
      "id": "w_6186",
      "type": "window",
      "content": "All callback and promise-based file system APIs (with the exception of\n`fs.FSWatcher()`) use libuv's threadpool. This can have surprising and negative\nperformance implications for some applications. See the\n[`UV_THREADPOOL_SIZE`][] documentation for more information.",
      "position": 0,
      "windowSize": 30
    },
    {
      "id": "sw_6187",
      "type": "sentence_window",
      "content": "All callback and promise-based file system APIs (with the exception of `fs. FSWatcher()`) use libuv's threadpool. This can have surprising and negative performance implications for some applications.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6188",
      "type": "sentence_window",
      "content": "FSWatcher()`) use libuv's threadpool. This can have surprising and negative performance implications for some applications. See the [`UV_THREADPOOL_SIZE`][] documentation for more information.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_6189",
      "type": "sentence_window",
      "content": "This can have surprising and negative performance implications for some applications. See the [`UV_THREADPOOL_SIZE`][] documentation for more information.",
      "position": 2,
      "sentenceCount": 2
    },
    {
      "id": "sc_6190",
      "type": "sentence_context",
      "content": "[Threadpool usage] All callback and promise-based file system APIs (with the exception of `fs.",
      "position": 0
    },
    {
      "id": "sc_6191",
      "type": "sentence_context",
      "content": "[Threadpool usage] [Previous: All callback and promise-based file system APIs (w...] FSWatcher()`) use libuv's threadpool.",
      "position": 1
    },
    {
      "id": "sc_6192",
      "type": "sentence_context",
      "content": "[Threadpool usage] [Previous: FSWatcher()`) use libuv's threadpool....] This can have surprising and negative performance implications for some applications.",
      "position": 2
    },
    {
      "id": "sc_6193",
      "type": "sentence_context",
      "content": "[Threadpool usage] [Previous: This can have surprising and negative performance ...] See the [`UV_THREADPOOL_SIZE`][] documentation for more information.",
      "position": 3
    },
    {
      "id": "s_6194",
      "type": "sentence",
      "content": "All callback and promise-based file system APIs (with the exception of `fs.",
      "position": 0
    },
    {
      "id": "s_6195",
      "type": "sentence",
      "content": "FSWatcher()`) use libuv's threadpool.",
      "position": 1
    },
    {
      "id": "s_6196",
      "type": "sentence",
      "content": "This can have surprising and negative performance implications for some applications.",
      "position": 2
    },
    {
      "id": "s_6197",
      "type": "sentence",
      "content": "See the [`UV_THREADPOOL_SIZE`][] documentation for more information.",
      "position": 3
    },
    {
      "id": "w_6198",
      "type": "window",
      "content": "The following flags are available wherever the `flag` option takes a\nstring. `'a'`: Open file for appending.\nThe file is created if it does not exist.\n `'ax'`: Like `'a'` but fails if the path exists.\n `'a+'`: Open file for reading and appending.\nThe file is created if it does not exist.\n `'ax+'`: Like `'a+'` but fails if the path exists.\n `'as'`: Open file for appending in synchronous mode.\nThe file is created if it does not exist.\n `'as+'`: Open file for reading and appending in synchronous mode.\nThe file is created if it does not exist.\n `'r'`: Open file for reading.\nAn exception occurs if the file does not exist.\n `'rs'`: Open file for reading in synchronous mode.\nAn exception occurs if the file does not exist.\n `'r+'`: Open file for reading and writing.\nAn exception occurs if the file does not exist.\n `'rs+'`: Open file for reading and writing in synchronous mode. Instructs\nthe operating system to bypass the local file system cache.\n\nThis is primarily useful for opening files on NFS mounts as it allows\nskipping the potentially stale local cache. It has a very real impact on\nI/O performance so using this flag is not recommended unless it is needed.\n\nThis doesn't turn `fs.open()` or `fsPromises.open()` into a synchronous\nblocking call. If synchronous operation is desired, something like\n`fs.openSync()` should be used.\n `'w'`: Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n `'wx'`: Like `'w'` but fails if the path exists.\n `'w+'`: Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n `'wx+'`: Like `'w+'` but fails if the path exists. `flag` can also be a number as documented by open(2); commonly used constants\nare available",
      "position": 0,
      "windowSize": 280
    },
    {
      "id": "w_6199",
      "type": "window",
      "content": "so using this flag is not recommended unless it is needed.\n\nThis doesn't turn `fs.open()` or `fsPromises.open()` into a synchronous\nblocking call. If synchronous operation is desired, something like\n`fs.openSync()` should be used.\n `'w'`: Open file for writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n `'wx'`: Like `'w'` but fails if the path exists.\n `'w+'`: Open file for reading and writing.\nThe file is created (if it does not exist) or truncated (if it exists).\n `'wx+'`: Like `'w+'` but fails if the path exists. `flag` can also be a number as documented by open(2); commonly used constants\nare available from `fs.constants`. On Windows, flags are translated to\ntheir equivalent ones where applicable, e.g. `O_WRONLY` to `FILE_GENERIC_WRITE`,\nor `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`. The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to\nreturn an error if the path already exists. On POSIX, if the path is a symbolic\nlink, using `O_EXCL` returns an error even if the link is to a path that does\nnot exist. The exclusive flag might not work with network file systems. On Linux, positional writes don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file. Modifying a file rather than replacing it may require the `flag` option to be\nset to `'r+'` rather than the default `'w'`. The behavior of some flags are platform-specific. As such, opening a directory\non macOS and Linux with the `'a+'` flag, as in the example below, will return an\nerror. In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle`\nwill be returned. On Windows, opening an existing hidden file using the `'w'` flag (either\nthrough `fs.open()`,",
      "position": 180,
      "windowSize": 280
    },
    {
      "id": "w_6200",
      "type": "window",
      "content": "don't work when the file is opened in append mode.\nThe kernel ignores the position argument and always appends the data to\nthe end of the file. Modifying a file rather than replacing it may require the `flag` option to be\nset to `'r+'` rather than the default `'w'`. The behavior of some flags are platform-specific. As such, opening a directory\non macOS and Linux with the `'a+'` flag, as in the example below, will return an\nerror. In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle`\nwill be returned. On Windows, opening an existing hidden file using the `'w'` flag (either\nthrough `fs.open()`, `fs.writeFile()`, or `fsPromises.open()`) will fail with\n`EPERM`. Existing hidden files can be opened for writing with the `'r+'` flag. A call to `fs.ftruncate()` or `filehandle.truncate()` can be used to reset\nthe file contents.",
      "position": 360,
      "windowSize": 131
    },
    {
      "id": "sw_6201",
      "type": "sentence_window",
      "content": "The following flags are available wherever the `flag` option takes a string. `'a'`: Open file for appending. The file is created if it does not exist.",
      "position": 0,
      "sentenceCount": 3
    },
    {
      "id": "sw_6202",
      "type": "sentence_window",
      "content": "`'a'`: Open file for appending. The file is created if it does not exist. `'ax'`: Like `'a'` but fails if the path exists.",
      "position": 1,
      "sentenceCount": 3
    },
    {
      "id": "sw_6203",
      "type": "sentence_window",
      "content": "The file is created if it does not exist. `'ax'`: Like `'a'` but fails if the path exists. `'a+'`: Open file for reading and appending.",
      "position": 2,
      "sentenceCount": 3
    },
    {
      "id": "sw_6204",
      "type": "sentence_window",
      "content": "`'ax'`: Like `'a'` but fails if the path exists. `'a+'`: Open file for reading and appending. The file is created if it does not exist.",
      "position": 3,
      "sentenceCount": 3
    },
    {
      "id": "sw_6205",
      "type": "sentence_window",
      "content": "`'a+'`: Open file for reading and appending. The file is created if it does not exist. `'ax+'`: Like `'a+'` but fails if the path exists.",
      "position": 4,
      "sentenceCount": 3
    },
    {
      "id": "sw_6206",
      "type": "sentence_window",
      "content": "The file is created if it does not exist. `'ax+'`: Like `'a+'` but fails if the path exists. `'as'`: Open file for appending in synchronous mode.",
      "position": 5,
      "sentenceCount": 3
    },
    {
      "id": "sw_6207",
      "type": "sentence_window",
      "content": "`'ax+'`: Like `'a+'` but fails if the path exists. `'as'`: Open file for appending in synchronous mode. The file is created if it does not exist.",
      "position": 6,
      "sentenceCount": 3
    },
    {
      "id": "sw_6208",
      "type": "sentence_window",
      "content": "`'as'`: Open file for appending in synchronous mode. The file is created if it does not exist. `'as+'`: Open file for reading and appending in synchronous mode.",
      "position": 7,
      "sentenceCount": 3
    },
    {
      "id": "sw_6209",
      "type": "sentence_window",
      "content": "The file is created if it does not exist. `'as+'`: Open file for reading and appending in synchronous mode. The file is created if it does not exist.",
      "position": 8,
      "sentenceCount": 3
    },
    {
      "id": "sw_6210",
      "type": "sentence_window",
      "content": "`'as+'`: Open file for reading and appending in synchronous mode. The file is created if it does not exist. `'r'`: Open file for reading.",
      "position": 9,
      "sentenceCount": 3
    },
    {
      "id": "sw_6211",
      "type": "sentence_window",
      "content": "The file is created if it does not exist. `'r'`: Open file for reading. An exception occurs if the file does not exist.",
      "position": 10,
      "sentenceCount": 3
    },
    {
      "id": "sw_6212",
      "type": "sentence_window",
      "content": "`'r'`: Open file for reading. An exception occurs if the file does not exist. `'rs'`: Open file for reading in synchronous mode.",
      "position": 11,
      "sentenceCount": 3
    },
    {
      "id": "sw_6213",
      "type": "sentence_window",
      "content": "An exception occurs if the file does not exist. `'rs'`: Open file for reading in synchronous mode. An exception occurs if the file does not exist.",
      "position": 12,
      "sentenceCount": 3
    },
    {
      "id": "sw_6214",
      "type": "sentence_window",
      "content": "`'rs'`: Open file for reading in synchronous mode. An exception occurs if the file does not exist. `'r+'`: Open file for reading and writing.",
      "position": 13,
      "sentenceCount": 3
    },
    {
      "id": "sw_6215",
      "type": "sentence_window",
      "content": "An exception occurs if the file does not exist. `'r+'`: Open file for reading and writing. An exception occurs if the file does not exist.",
      "position": 14,
      "sentenceCount": 3
    },
    {
      "id": "sw_6216",
      "type": "sentence_window",
      "content": "`'r+'`: Open file for reading and writing. An exception occurs if the file does not exist. `'rs+'`: Open file for reading and writing in synchronous mode.",
      "position": 15,
      "sentenceCount": 3
    },
    {
      "id": "sw_6217",
      "type": "sentence_window",
      "content": "An exception occurs if the file does not exist. `'rs+'`: Open file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache.",
      "position": 16,
      "sentenceCount": 3
    },
    {
      "id": "sw_6218",
      "type": "sentence_window",
      "content": "`'rs+'`: Open file for reading and writing in synchronous mode. Instructs the operating system to bypass the local file system cache. This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache.",
      "position": 17,
      "sentenceCount": 3
    },
    {
      "id": "sw_6219",
      "type": "sentence_window",
      "content": "Instructs the operating system to bypass the local file system cache. This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.",
      "position": 18,
      "sentenceCount": 3
    },
    {
      "id": "sw_6220",
      "type": "sentence_window",
      "content": "This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache. It has a very real impact on I/O performance so using this flag is not recommended unless it is needed. This doesn't turn `fs.",
      "position": 19,
      "sentenceCount": 3
    },
    {
      "id": "sw_6221",
      "type": "sentence_window",
      "content": "It has a very real impact on I/O performance so using this flag is not recommended unless it is needed. This doesn't turn `fs. open()` or `fsPromises.",
      "position": 20,
      "sentenceCount": 3
    },
    {
      "id": "sw_6222",
      "type": "sentence_window",
      "content": "This doesn't turn `fs. open()` or `fsPromises. open()` into a synchronous blocking call.",
      "position": 21,
      "sentenceCount": 3
    },
    {
      "id": "sw_6223",
      "type": "sentence_window",
      "content": "open()` or `fsPromises. open()` into a synchronous blocking call. If synchronous operation is desired, something like `fs.",
      "position": 22,
      "sentenceCount": 3
    },
    {
      "id": "sw_6224",
      "type": "sentence_window",
      "content": "open()` into a synchronous blocking call. If synchronous operation is desired, something like `fs. openSync()` should be used.",
      "position": 23,
      "sentenceCount": 3
    },
    {
      "id": "sw_6225",
      "type": "sentence_window",
      "content": "If synchronous operation is desired, something like `fs. openSync()` should be used. `'w'`: Open file for writing.",
      "position": 24,
      "sentenceCount": 3
    },
    {
      "id": "sw_6226",
      "type": "sentence_window",
      "content": "openSync()` should be used. `'w'`: Open file for writing. The file is created (if it does not exist) or truncated (if it exists).",
      "position": 25,
      "sentenceCount": 3
    },
    {
      "id": "sw_6227",
      "type": "sentence_window",
      "content": "`'w'`: Open file for writing. The file is created (if it does not exist) or truncated (if it exists). `'wx'`: Like `'w'` but fails if the path exists.",
      "position": 26,
      "sentenceCount": 3
    },
    {
      "id": "sw_6228",
      "type": "sentence_window",
      "content": "The file is created (if it does not exist) or truncated (if it exists). `'wx'`: Like `'w'` but fails if the path exists. `'w+'`: Open file for reading and writing.",
      "position": 27,
      "sentenceCount": 3
    },
    {
      "id": "sw_6229",
      "type": "sentence_window",
      "content": "`'wx'`: Like `'w'` but fails if the path exists. `'w+'`: Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).",
      "position": 28,
      "sentenceCount": 3
    },
    {
      "id": "sw_6230",
      "type": "sentence_window",
      "content": "`'w+'`: Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists). `'wx+'`: Like `'w+'` but fails if the path exists.",
      "position": 29,
      "sentenceCount": 3
    },
    {
      "id": "sw_6231",
      "type": "sentence_window",
      "content": "The file is created (if it does not exist) or truncated (if it exists). `'wx+'`: Like `'w+'` but fails if the path exists. `flag` can also be a number as documented by open(2); commonly used constants are available from `fs.",
      "position": 30,
      "sentenceCount": 3
    },
    {
      "id": "sw_6232",
      "type": "sentence_window",
      "content": "`'wx+'`: Like `'w+'` but fails if the path exists. `flag` can also be a number as documented by open(2); commonly used constants are available from `fs. constants`.",
      "position": 31,
      "sentenceCount": 3
    },
    {
      "id": "sw_6233",
      "type": "sentence_window",
      "content": "`flag` can also be a number as documented by open(2); commonly used constants are available from `fs. constants`. On Windows, flags are translated to their equivalent ones where applicable, e.",
      "position": 32,
      "sentenceCount": 3
    },
    {
      "id": "sw_6234",
      "type": "sentence_window",
      "content": "constants`. On Windows, flags are translated to their equivalent ones where applicable, e. `O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`.",
      "position": 33,
      "sentenceCount": 3
    },
    {
      "id": "sw_6235",
      "type": "sentence_window",
      "content": "On Windows, flags are translated to their equivalent ones where applicable, e. `O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`. The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists.",
      "position": 34,
      "sentenceCount": 3
    },
    {
      "id": "sw_6236",
      "type": "sentence_window",
      "content": "`O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`. The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists. On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist.",
      "position": 35,
      "sentenceCount": 3
    },
    {
      "id": "sw_6237",
      "type": "sentence_window",
      "content": "The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists. On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist. The exclusive flag might not work with network file systems.",
      "position": 36,
      "sentenceCount": 3
    },
    {
      "id": "sw_6238",
      "type": "sentence_window",
      "content": "On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist. The exclusive flag might not work with network file systems. On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 37,
      "sentenceCount": 3
    },
    {
      "id": "sw_6239",
      "type": "sentence_window",
      "content": "The exclusive flag might not work with network file systems. On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 38,
      "sentenceCount": 3
    },
    {
      "id": "sw_6240",
      "type": "sentence_window",
      "content": "On Linux, positional writes don't work when the file is opened in append mode. The kernel ignores the position argument and always appends the data to the end of the file. Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`.",
      "position": 39,
      "sentenceCount": 3
    },
    {
      "id": "sw_6241",
      "type": "sentence_window",
      "content": "The kernel ignores the position argument and always appends the data to the end of the file. Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`. The behavior of some flags are platform-specific.",
      "position": 40,
      "sentenceCount": 3
    },
    {
      "id": "sw_6242",
      "type": "sentence_window",
      "content": "Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`. The behavior of some flags are platform-specific. As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error.",
      "position": 41,
      "sentenceCount": 3
    },
    {
      "id": "sw_6243",
      "type": "sentence_window",
      "content": "The behavior of some flags are platform-specific. As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error. In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned.",
      "position": 42,
      "sentenceCount": 3
    },
    {
      "id": "sw_6244",
      "type": "sentence_window",
      "content": "As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error. In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned. On Windows, opening an existing hidden file using the `'w'` flag (either through `fs.",
      "position": 43,
      "sentenceCount": 3
    },
    {
      "id": "sw_6245",
      "type": "sentence_window",
      "content": "In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned. On Windows, opening an existing hidden file using the `'w'` flag (either through `fs. open()`, `fs.",
      "position": 44,
      "sentenceCount": 3
    },
    {
      "id": "sw_6246",
      "type": "sentence_window",
      "content": "On Windows, opening an existing hidden file using the `'w'` flag (either through `fs. open()`, `fs. writeFile()`, or `fsPromises.",
      "position": 45,
      "sentenceCount": 3
    },
    {
      "id": "sw_6247",
      "type": "sentence_window",
      "content": "open()`, `fs. writeFile()`, or `fsPromises. open()`) will fail with `EPERM`.",
      "position": 46,
      "sentenceCount": 3
    },
    {
      "id": "sw_6248",
      "type": "sentence_window",
      "content": "writeFile()`, or `fsPromises. open()`) will fail with `EPERM`. Existing hidden files can be opened for writing with the `'r+'` flag.",
      "position": 47,
      "sentenceCount": 3
    },
    {
      "id": "sw_6249",
      "type": "sentence_window",
      "content": "open()`) will fail with `EPERM`. Existing hidden files can be opened for writing with the `'r+'` flag. A call to `fs.",
      "position": 48,
      "sentenceCount": 3
    },
    {
      "id": "sw_6250",
      "type": "sentence_window",
      "content": "Existing hidden files can be opened for writing with the `'r+'` flag. A call to `fs. ftruncate()` or `filehandle.",
      "position": 49,
      "sentenceCount": 3
    },
    {
      "id": "sw_6251",
      "type": "sentence_window",
      "content": "A call to `fs. ftruncate()` or `filehandle. truncate()` can be used to reset the file contents.",
      "position": 50,
      "sentenceCount": 3
    },
    {
      "id": "sw_6252",
      "type": "sentence_window",
      "content": "ftruncate()` or `filehandle. truncate()` can be used to reset the file contents.",
      "position": 51,
      "sentenceCount": 2
    },
    {
      "id": "sc_6253",
      "type": "sentence_context",
      "content": "[File system flags] The following flags are available wherever the `flag` option takes a string.",
      "position": 0
    },
    {
      "id": "sc_6254",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The following flags are available wherever the `fl...] `'a'`: Open file for appending.",
      "position": 1
    },
    {
      "id": "sc_6255",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'a'`: Open file for appending....] The file is created if it does not exist.",
      "position": 2
    },
    {
      "id": "sc_6256",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The file is created if it does not exist....] `'ax'`: Like `'a'` but fails if the path exists.",
      "position": 3
    },
    {
      "id": "sc_6257",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'ax'`: Like `'a'` but fails if the path exists....] `'a+'`: Open file for reading and appending.",
      "position": 4
    },
    {
      "id": "sc_6258",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'a+'`: Open file for reading and appending....] The file is created if it does not exist.",
      "position": 5
    },
    {
      "id": "sc_6259",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The file is created if it does not exist....] `'ax+'`: Like `'a+'` but fails if the path exists.",
      "position": 6
    },
    {
      "id": "sc_6260",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'ax+'`: Like `'a+'` but fails if the path exists....] `'as'`: Open file for appending in synchronous mode.",
      "position": 7
    },
    {
      "id": "sc_6261",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'as'`: Open file for appending in synchronous mod...] The file is created if it does not exist.",
      "position": 8
    },
    {
      "id": "sc_6262",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The file is created if it does not exist....] `'as+'`: Open file for reading and appending in synchronous mode.",
      "position": 9
    },
    {
      "id": "sc_6263",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'as+'`: Open file for reading and appending in sy...] The file is created if it does not exist.",
      "position": 10
    },
    {
      "id": "sc_6264",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The file is created if it does not exist....] `'r'`: Open file for reading.",
      "position": 11
    },
    {
      "id": "sc_6265",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'r'`: Open file for reading....] An exception occurs if the file does not exist.",
      "position": 12
    },
    {
      "id": "sc_6266",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: An exception occurs if the file does not exist....] `'rs'`: Open file for reading in synchronous mode.",
      "position": 13
    },
    {
      "id": "sc_6267",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'rs'`: Open file for reading in synchronous mode....] An exception occurs if the file does not exist.",
      "position": 14
    },
    {
      "id": "sc_6268",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: An exception occurs if the file does not exist....] `'r+'`: Open file for reading and writing.",
      "position": 15
    },
    {
      "id": "sc_6269",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'r+'`: Open file for reading and writing....] An exception occurs if the file does not exist.",
      "position": 16
    },
    {
      "id": "sc_6270",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: An exception occurs if the file does not exist....] `'rs+'`: Open file for reading and writing in synchronous mode.",
      "position": 17
    },
    {
      "id": "sc_6271",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'rs+'`: Open file for reading and writing in sync...] Instructs the operating system to bypass the local file system cache.",
      "position": 18
    },
    {
      "id": "sc_6272",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: Instructs the operating system to bypass the local...] This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache.",
      "position": 19
    },
    {
      "id": "sc_6273",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: This is primarily useful for opening files on NFS ...] It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.",
      "position": 20
    },
    {
      "id": "sc_6274",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: It has a very real impact on I/O performance so us...] This doesn't turn `fs.",
      "position": 21
    },
    {
      "id": "sc_6275",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: This doesn't turn `fs....] open()` or `fsPromises.",
      "position": 22
    },
    {
      "id": "sc_6276",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: open()` or `fsPromises....] open()` into a synchronous blocking call.",
      "position": 23
    },
    {
      "id": "sc_6277",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: open()` into a synchronous blocking call....] If synchronous operation is desired, something like `fs.",
      "position": 24
    },
    {
      "id": "sc_6278",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: If synchronous operation is desired, something lik...] openSync()` should be used.",
      "position": 25
    },
    {
      "id": "sc_6279",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: openSync()` should be used....] `'w'`: Open file for writing.",
      "position": 26
    },
    {
      "id": "sc_6280",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'w'`: Open file for writing....] The file is created (if it does not exist) or truncated (if it exists).",
      "position": 27
    },
    {
      "id": "sc_6281",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The file is created (if it does not exist) or trun...] `'wx'`: Like `'w'` but fails if the path exists.",
      "position": 28
    },
    {
      "id": "sc_6282",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'wx'`: Like `'w'` but fails if the path exists....] `'w+'`: Open file for reading and writing.",
      "position": 29
    },
    {
      "id": "sc_6283",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'w+'`: Open file for reading and writing....] The file is created (if it does not exist) or truncated (if it exists).",
      "position": 30
    },
    {
      "id": "sc_6284",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The file is created (if it does not exist) or trun...] `'wx+'`: Like `'w+'` but fails if the path exists.",
      "position": 31
    },
    {
      "id": "sc_6285",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `'wx+'`: Like `'w+'` but fails if the path exists....] `flag` can also be a number as documented by open(2); commonly used constants are available from `fs.",
      "position": 32
    },
    {
      "id": "sc_6286",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `flag` can also be a number as documented by open(...] constants`.",
      "position": 33
    },
    {
      "id": "sc_6287",
      "type": "sentence_context",
      "content": "[File system flags] On Windows, flags are translated to their equivalent ones where applicable, e.",
      "position": 34
    },
    {
      "id": "sc_6288",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: On Windows, flags are translated to their equivale...] `O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`.",
      "position": 35
    },
    {
      "id": "sc_6289",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: `O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_C...] The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists.",
      "position": 36
    },
    {
      "id": "sc_6290",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The exclusive flag `'x'` (`O_EXCL` flag in open(2)...] On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist.",
      "position": 37
    },
    {
      "id": "sc_6291",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: On POSIX, if the path is a symbolic link, using `O...] The exclusive flag might not work with network file systems.",
      "position": 38
    },
    {
      "id": "sc_6292",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The exclusive flag might not work with network fil...] On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 39
    },
    {
      "id": "sc_6293",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: On Linux, positional writes don't work when the fi...] The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 40
    },
    {
      "id": "sc_6294",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The kernel ignores the position argument and alway...] Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`.",
      "position": 41
    },
    {
      "id": "sc_6295",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: Modifying a file rather than replacing it may requ...] The behavior of some flags are platform-specific.",
      "position": 42
    },
    {
      "id": "sc_6296",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: The behavior of some flags are platform-specific....] As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error.",
      "position": 43
    },
    {
      "id": "sc_6297",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: As such, opening a directory on macOS and Linux wi...] In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned.",
      "position": 44
    },
    {
      "id": "sc_6298",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: In contrast, on Windows and FreeBSD, a file descri...] On Windows, opening an existing hidden file using the `'w'` flag (either through `fs.",
      "position": 45
    },
    {
      "id": "sc_6299",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: On Windows, opening an existing hidden file using ...] open()`, `fs.",
      "position": 46
    },
    {
      "id": "sc_6300",
      "type": "sentence_context",
      "content": "[File system flags] writeFile()`, or `fsPromises.",
      "position": 47
    },
    {
      "id": "sc_6301",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: writeFile()`, or `fsPromises....] open()`) will fail with `EPERM`.",
      "position": 48
    },
    {
      "id": "sc_6302",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: open()`) will fail with `EPERM`....] Existing hidden files can be opened for writing with the `'r+'` flag.",
      "position": 49
    },
    {
      "id": "sc_6303",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: Existing hidden files can be opened for writing wi...] A call to `fs.",
      "position": 50
    },
    {
      "id": "sc_6304",
      "type": "sentence_context",
      "content": "[File system flags] ftruncate()` or `filehandle.",
      "position": 51
    },
    {
      "id": "sc_6305",
      "type": "sentence_context",
      "content": "[File system flags] [Previous: ftruncate()` or `filehandle....] truncate()` can be used to reset the file contents.",
      "position": 52
    },
    {
      "id": "s_6306",
      "type": "sentence",
      "content": "The following flags are available wherever the `flag` option takes a string.",
      "position": 0
    },
    {
      "id": "s_6307",
      "type": "sentence",
      "content": "`'a'`: Open file for appending.",
      "position": 1
    },
    {
      "id": "s_6308",
      "type": "sentence",
      "content": "The file is created if it does not exist.",
      "position": 2
    },
    {
      "id": "s_6309",
      "type": "sentence",
      "content": "`'ax'`: Like `'a'` but fails if the path exists.",
      "position": 3
    },
    {
      "id": "s_6310",
      "type": "sentence",
      "content": "`'a+'`: Open file for reading and appending.",
      "position": 4
    },
    {
      "id": "s_6311",
      "type": "sentence",
      "content": "The file is created if it does not exist.",
      "position": 5
    },
    {
      "id": "s_6312",
      "type": "sentence",
      "content": "`'ax+'`: Like `'a+'` but fails if the path exists.",
      "position": 6
    },
    {
      "id": "s_6313",
      "type": "sentence",
      "content": "`'as'`: Open file for appending in synchronous mode.",
      "position": 7
    },
    {
      "id": "s_6314",
      "type": "sentence",
      "content": "The file is created if it does not exist.",
      "position": 8
    },
    {
      "id": "s_6315",
      "type": "sentence",
      "content": "`'as+'`: Open file for reading and appending in synchronous mode.",
      "position": 9
    },
    {
      "id": "s_6316",
      "type": "sentence",
      "content": "The file is created if it does not exist.",
      "position": 10
    },
    {
      "id": "s_6317",
      "type": "sentence",
      "content": "`'r'`: Open file for reading.",
      "position": 11
    },
    {
      "id": "s_6318",
      "type": "sentence",
      "content": "An exception occurs if the file does not exist.",
      "position": 12
    },
    {
      "id": "s_6319",
      "type": "sentence",
      "content": "`'rs'`: Open file for reading in synchronous mode.",
      "position": 13
    },
    {
      "id": "s_6320",
      "type": "sentence",
      "content": "An exception occurs if the file does not exist.",
      "position": 14
    },
    {
      "id": "s_6321",
      "type": "sentence",
      "content": "`'r+'`: Open file for reading and writing.",
      "position": 15
    },
    {
      "id": "s_6322",
      "type": "sentence",
      "content": "An exception occurs if the file does not exist.",
      "position": 16
    },
    {
      "id": "s_6323",
      "type": "sentence",
      "content": "`'rs+'`: Open file for reading and writing in synchronous mode.",
      "position": 17
    },
    {
      "id": "s_6324",
      "type": "sentence",
      "content": "Instructs the operating system to bypass the local file system cache.",
      "position": 18
    },
    {
      "id": "s_6325",
      "type": "sentence",
      "content": "This is primarily useful for opening files on NFS mounts as it allows skipping the potentially stale local cache.",
      "position": 19
    },
    {
      "id": "s_6326",
      "type": "sentence",
      "content": "It has a very real impact on I/O performance so using this flag is not recommended unless it is needed.",
      "position": 20
    },
    {
      "id": "s_6327",
      "type": "sentence",
      "content": "This doesn't turn `fs.",
      "position": 21
    },
    {
      "id": "s_6328",
      "type": "sentence",
      "content": "open()` or `fsPromises.",
      "position": 22
    },
    {
      "id": "s_6329",
      "type": "sentence",
      "content": "open()` into a synchronous blocking call.",
      "position": 23
    },
    {
      "id": "s_6330",
      "type": "sentence",
      "content": "If synchronous operation is desired, something like `fs.",
      "position": 24
    },
    {
      "id": "s_6331",
      "type": "sentence",
      "content": "openSync()` should be used.",
      "position": 25
    },
    {
      "id": "s_6332",
      "type": "sentence",
      "content": "`'w'`: Open file for writing.",
      "position": 26
    },
    {
      "id": "s_6333",
      "type": "sentence",
      "content": "The file is created (if it does not exist) or truncated (if it exists).",
      "position": 27
    },
    {
      "id": "s_6334",
      "type": "sentence",
      "content": "`'wx'`: Like `'w'` but fails if the path exists.",
      "position": 28
    },
    {
      "id": "s_6335",
      "type": "sentence",
      "content": "`'w+'`: Open file for reading and writing.",
      "position": 29
    },
    {
      "id": "s_6336",
      "type": "sentence",
      "content": "The file is created (if it does not exist) or truncated (if it exists).",
      "position": 30
    },
    {
      "id": "s_6337",
      "type": "sentence",
      "content": "`'wx+'`: Like `'w+'` but fails if the path exists.",
      "position": 31
    },
    {
      "id": "s_6338",
      "type": "sentence",
      "content": "`flag` can also be a number as documented by open(2); commonly used constants are available from `fs.",
      "position": 32
    },
    {
      "id": "s_6339",
      "type": "sentence",
      "content": "constants`.",
      "position": 33
    },
    {
      "id": "s_6340",
      "type": "sentence",
      "content": "On Windows, flags are translated to their equivalent ones where applicable, e.",
      "position": 34
    },
    {
      "id": "s_6341",
      "type": "sentence",
      "content": "`O_WRONLY` to `FILE_GENERIC_WRITE`, or `O_EXCL|O_CREAT` to `CREATE_NEW`, as accepted by `CreateFileW`.",
      "position": 35
    },
    {
      "id": "s_6342",
      "type": "sentence",
      "content": "The exclusive flag `'x'` (`O_EXCL` flag in open(2)) causes the operation to return an error if the path already exists.",
      "position": 36
    },
    {
      "id": "s_6343",
      "type": "sentence",
      "content": "On POSIX, if the path is a symbolic link, using `O_EXCL` returns an error even if the link is to a path that does not exist.",
      "position": 37
    },
    {
      "id": "s_6344",
      "type": "sentence",
      "content": "The exclusive flag might not work with network file systems.",
      "position": 38
    },
    {
      "id": "s_6345",
      "type": "sentence",
      "content": "On Linux, positional writes don't work when the file is opened in append mode.",
      "position": 39
    },
    {
      "id": "s_6346",
      "type": "sentence",
      "content": "The kernel ignores the position argument and always appends the data to the end of the file.",
      "position": 40
    },
    {
      "id": "s_6347",
      "type": "sentence",
      "content": "Modifying a file rather than replacing it may require the `flag` option to be set to `'r+'` rather than the default `'w'`.",
      "position": 41
    },
    {
      "id": "s_6348",
      "type": "sentence",
      "content": "The behavior of some flags are platform-specific.",
      "position": 42
    },
    {
      "id": "s_6349",
      "type": "sentence",
      "content": "As such, opening a directory on macOS and Linux with the `'a+'` flag, as in the example below, will return an error.",
      "position": 43
    },
    {
      "id": "s_6350",
      "type": "sentence",
      "content": "In contrast, on Windows and FreeBSD, a file descriptor or a `FileHandle` will be returned.",
      "position": 44
    },
    {
      "id": "s_6351",
      "type": "sentence",
      "content": "On Windows, opening an existing hidden file using the `'w'` flag (either through `fs.",
      "position": 45
    },
    {
      "id": "s_6352",
      "type": "sentence",
      "content": "open()`, `fs.",
      "position": 46
    },
    {
      "id": "s_6353",
      "type": "sentence",
      "content": "writeFile()`, or `fsPromises.",
      "position": 47
    },
    {
      "id": "s_6354",
      "type": "sentence",
      "content": "open()`) will fail with `EPERM`.",
      "position": 48
    },
    {
      "id": "s_6355",
      "type": "sentence",
      "content": "Existing hidden files can be opened for writing with the `'r+'` flag.",
      "position": 49
    },
    {
      "id": "s_6356",
      "type": "sentence",
      "content": "A call to `fs.",
      "position": 50
    },
    {
      "id": "s_6357",
      "type": "sentence",
      "content": "ftruncate()` or `filehandle.",
      "position": 51
    },
    {
      "id": "s_6358",
      "type": "sentence",
      "content": "truncate()` can be used to reset the file contents.",
      "position": 52
    }
  ]
}